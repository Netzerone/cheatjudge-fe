/*!
 *
 *  WebGazer.js: Democratizing Webcam Eye Tracking on the Browser
 *  Copyright (c) 2016, Brown WebGazer Team
 *  Licensed under GPLv3. Companies with a valuation of less than $1M can use WebGazer.js under LGPLv3.
 *
 */
var webgazer
;(() => {
  var e = {
      790: (e, t, n) => {
        /*!
    localForage -- Offline Storage, Improved
    Version 1.7.3
    https://localforage.github.io/localForage
    (c) 2013-2017 Mozilla, Apache License 2.0
*/
        e.exports = (function e(t, n, r) {
          function s(i, o) {
            if (!n[i]) {
              if (!t[i]) {
                if (a) return a(i, !0)
                var l = new Error("Cannot find module '" + i + "'")
                throw ((l.code = 'MODULE_NOT_FOUND'), l)
              }
              var u = (n[i] = { exports: {} })
              t[i][0].call(
                u.exports,
                function (e) {
                  return s(t[i][1][e] || e)
                },
                u,
                u.exports,
                e,
                t,
                n,
                r,
              )
            }
            return n[i].exports
          }
          for (var a = void 0, i = 0; i < r.length; i++) s(r[i])
          return s
        })(
          {
            1: [
              function (e, t, r) {
                ;(function (e) {
                  'use strict'
                  var n,
                    r,
                    s = e.MutationObserver || e.WebKitMutationObserver
                  if (s) {
                    var a = 0,
                      i = new s(c),
                      o = e.document.createTextNode('')
                    i.observe(o, { characterData: !0 }),
                      (n = function () {
                        o.data = a = ++a % 2
                      })
                  } else if (e.setImmediate || void 0 === e.MessageChannel)
                    n =
                      'document' in e &&
                      'onreadystatechange' in e.document.createElement('script')
                        ? function () {
                            var t = e.document.createElement('script')
                            ;(t.onreadystatechange = function () {
                              c(),
                                (t.onreadystatechange = null),
                                t.parentNode.removeChild(t),
                                (t = null)
                            }),
                              e.document.documentElement.appendChild(t)
                          }
                        : function () {
                            setTimeout(c, 0)
                          }
                  else {
                    var l = new e.MessageChannel()
                    ;(l.port1.onmessage = c),
                      (n = function () {
                        l.port2.postMessage(0)
                      })
                  }
                  var u = []
                  function c() {
                    var e, t
                    r = !0
                    for (var n = u.length; n; ) {
                      for (t = u, u = [], e = -1; ++e < n; ) t[e]()
                      n = u.length
                    }
                    r = !1
                  }
                  t.exports = function (e) {
                    1 !== u.push(e) || r || n()
                  }
                }).call(
                  this,
                  void 0 !== n.g
                    ? n.g
                    : 'undefined' != typeof self
                      ? self
                      : 'undefined' != typeof window
                        ? window
                        : {},
                )
              },
              {},
            ],
            2: [
              function (e, t, n) {
                'use strict'
                var r = e(1)
                function s() {}
                var a = {},
                  i = ['REJECTED'],
                  o = ['FULFILLED'],
                  l = ['PENDING']
                function u(e) {
                  if ('function' != typeof e)
                    throw new TypeError('resolver must be a function')
                  ;(this.state = l),
                    (this.queue = []),
                    (this.outcome = void 0),
                    e !== s && d(this, e)
                }
                function c(e, t, n) {
                  ;(this.promise = e),
                    'function' == typeof t &&
                      ((this.onFulfilled = t),
                      (this.callFulfilled = this.otherCallFulfilled)),
                    'function' == typeof n &&
                      ((this.onRejected = n),
                      (this.callRejected = this.otherCallRejected))
                }
                function h(e, t, n) {
                  r(function () {
                    var r
                    try {
                      r = t(n)
                    } catch (t) {
                      return a.reject(e, t)
                    }
                    r === e
                      ? a.reject(
                          e,
                          new TypeError('Cannot resolve promise with itself'),
                        )
                      : a.resolve(e, r)
                  })
                }
                function p(e) {
                  var t = e && e.then
                  if (
                    e &&
                    ('object' == typeof e || 'function' == typeof e) &&
                    'function' == typeof t
                  )
                    return function () {
                      t.apply(e, arguments)
                    }
                }
                function d(e, t) {
                  var n = !1
                  function r(t) {
                    n || ((n = !0), a.reject(e, t))
                  }
                  function s(t) {
                    n || ((n = !0), a.resolve(e, t))
                  }
                  var i = f(function () {
                    t(s, r)
                  })
                  'error' === i.status && r(i.value)
                }
                function f(e, t) {
                  var n = {}
                  try {
                    ;(n.value = e(t)), (n.status = 'success')
                  } catch (e) {
                    ;(n.status = 'error'), (n.value = e)
                  }
                  return n
                }
                ;(t.exports = u),
                  (u.prototype.catch = function (e) {
                    return this.then(null, e)
                  }),
                  (u.prototype.then = function (e, t) {
                    if (
                      ('function' != typeof e && this.state === o) ||
                      ('function' != typeof t && this.state === i)
                    )
                      return this
                    var n = new this.constructor(s)
                    return (
                      this.state !== l
                        ? h(n, this.state === o ? e : t, this.outcome)
                        : this.queue.push(new c(n, e, t)),
                      n
                    )
                  }),
                  (c.prototype.callFulfilled = function (e) {
                    a.resolve(this.promise, e)
                  }),
                  (c.prototype.otherCallFulfilled = function (e) {
                    h(this.promise, this.onFulfilled, e)
                  }),
                  (c.prototype.callRejected = function (e) {
                    a.reject(this.promise, e)
                  }),
                  (c.prototype.otherCallRejected = function (e) {
                    h(this.promise, this.onRejected, e)
                  }),
                  (a.resolve = function (e, t) {
                    var n = f(p, t)
                    if ('error' === n.status) return a.reject(e, n.value)
                    var r = n.value
                    if (r) d(e, r)
                    else {
                      ;(e.state = o), (e.outcome = t)
                      for (var s = -1, i = e.queue.length; ++s < i; )
                        e.queue[s].callFulfilled(t)
                    }
                    return e
                  }),
                  (a.reject = function (e, t) {
                    ;(e.state = i), (e.outcome = t)
                    for (var n = -1, r = e.queue.length; ++n < r; )
                      e.queue[n].callRejected(t)
                    return e
                  }),
                  (u.resolve = function (e) {
                    return e instanceof this ? e : a.resolve(new this(s), e)
                  }),
                  (u.reject = function (e) {
                    var t = new this(s)
                    return a.reject(t, e)
                  }),
                  (u.all = function (e) {
                    var t = this
                    if ('[object Array]' !== Object.prototype.toString.call(e))
                      return this.reject(new TypeError('must be an array'))
                    var n = e.length,
                      r = !1
                    if (!n) return this.resolve([])
                    for (
                      var i = new Array(n), o = 0, l = -1, u = new this(s);
                      ++l < n;

                    )
                      c(e[l], l)
                    return u
                    function c(e, s) {
                      t.resolve(e).then(
                        function (e) {
                          ;(i[s] = e),
                            ++o !== n || r || ((r = !0), a.resolve(u, i))
                        },
                        function (e) {
                          r || ((r = !0), a.reject(u, e))
                        },
                      )
                    }
                  }),
                  (u.race = function (e) {
                    var t = this
                    if ('[object Array]' !== Object.prototype.toString.call(e))
                      return this.reject(new TypeError('must be an array'))
                    var n = e.length,
                      r = !1
                    if (!n) return this.resolve([])
                    for (var i = -1, o = new this(s); ++i < n; ) l(e[i])
                    return o
                    function l(e) {
                      t.resolve(e).then(
                        function (e) {
                          r || ((r = !0), a.resolve(o, e))
                        },
                        function (e) {
                          r || ((r = !0), a.reject(o, e))
                        },
                      )
                    }
                  })
              },
              { 1: 1 },
            ],
            3: [
              function (e, t, r) {
                ;(function (t) {
                  'use strict'
                  'function' != typeof t.Promise && (t.Promise = e(2))
                }).call(
                  this,
                  void 0 !== n.g
                    ? n.g
                    : 'undefined' != typeof self
                      ? self
                      : 'undefined' != typeof window
                        ? window
                        : {},
                )
              },
              { 2: 2 },
            ],
            4: [
              function (e, t, n) {
                'use strict'
                var r =
                  'function' == typeof Symbol &&
                  'symbol' == typeof Symbol.iterator
                    ? function (e) {
                        return typeof e
                      }
                    : function (e) {
                        return e &&
                          'function' == typeof Symbol &&
                          e.constructor === Symbol &&
                          e !== Symbol.prototype
                          ? 'symbol'
                          : typeof e
                      }
                var s = (function () {
                  try {
                    if ('undefined' != typeof indexedDB) return indexedDB
                    if ('undefined' != typeof webkitIndexedDB)
                      return webkitIndexedDB
                    if ('undefined' != typeof mozIndexedDB) return mozIndexedDB
                    if ('undefined' != typeof OIndexedDB) return OIndexedDB
                    if ('undefined' != typeof msIndexedDB) return msIndexedDB
                  } catch (e) {
                    return
                  }
                })()
                function a(e, t) {
                  ;(e = e || []), (t = t || {})
                  try {
                    return new Blob(e, t)
                  } catch (s) {
                    if ('TypeError' !== s.name) throw s
                    for (
                      var n = new (
                          'undefined' != typeof BlobBuilder
                            ? BlobBuilder
                            : 'undefined' != typeof MSBlobBuilder
                              ? MSBlobBuilder
                              : 'undefined' != typeof MozBlobBuilder
                                ? MozBlobBuilder
                                : WebKitBlobBuilder
                        )(),
                        r = 0;
                      r < e.length;
                      r += 1
                    )
                      n.append(e[r])
                    return n.getBlob(t.type)
                  }
                }
                'undefined' == typeof Promise && e(3)
                var i = Promise
                function o(e, t) {
                  t &&
                    e.then(
                      function (e) {
                        t(null, e)
                      },
                      function (e) {
                        t(e)
                      },
                    )
                }
                function l(e, t, n) {
                  'function' == typeof t && e.then(t),
                    'function' == typeof n && e.catch(n)
                }
                function u(e) {
                  return (
                    'string' != typeof e &&
                      (console.warn(
                        e + ' used as a key, but it is not a string.',
                      ),
                      (e = String(e))),
                    e
                  )
                }
                function c() {
                  if (
                    arguments.length &&
                    'function' == typeof arguments[arguments.length - 1]
                  )
                    return arguments[arguments.length - 1]
                }
                var h = 'local-forage-detect-blob-support',
                  p = void 0,
                  d = {},
                  f = Object.prototype.toString,
                  m = 'readonly',
                  g = 'readwrite'
                function y(e) {
                  for (
                    var t = e.length,
                      n = new ArrayBuffer(t),
                      r = new Uint8Array(n),
                      s = 0;
                    s < t;
                    s++
                  )
                    r[s] = e.charCodeAt(s)
                  return n
                }
                function b(e) {
                  return 'boolean' == typeof p
                    ? i.resolve(p)
                    : (function (e) {
                        return new i(function (t) {
                          var n = e.transaction(h, g),
                            r = a([''])
                          n.objectStore(h).put(r, 'key'),
                            (n.onabort = function (e) {
                              e.preventDefault(), e.stopPropagation(), t(!1)
                            }),
                            (n.oncomplete = function () {
                              var e =
                                  navigator.userAgent.match(/Chrome\/(\d+)/),
                                n = navigator.userAgent.match(/Edge\//)
                              t(n || !e || parseInt(e[1], 10) >= 43)
                            })
                        }).catch(function () {
                          return !1
                        })
                      })(e).then(function (e) {
                        return (p = e)
                      })
                }
                function x(e) {
                  var t = d[e.name],
                    n = {}
                  ;(n.promise = new i(function (e, t) {
                    ;(n.resolve = e), (n.reject = t)
                  })),
                    t.deferredOperations.push(n),
                    t.dbReady
                      ? (t.dbReady = t.dbReady.then(function () {
                          return n.promise
                        }))
                      : (t.dbReady = n.promise)
                }
                function w(e) {
                  var t = d[e.name].deferredOperations.pop()
                  if (t) return t.resolve(), t.promise
                }
                function v(e, t) {
                  var n = d[e.name].deferredOperations.pop()
                  if (n) return n.reject(t), n.promise
                }
                function k(e, t) {
                  return new i(function (n, r) {
                    if (
                      ((d[e.name] = d[e.name] || {
                        forages: [],
                        db: null,
                        dbReady: null,
                        deferredOperations: [],
                      }),
                      e.db)
                    ) {
                      if (!t) return n(e.db)
                      x(e), e.db.close()
                    }
                    var a = [e.name]
                    t && a.push(e.version)
                    var i = s.open.apply(s, a)
                    t &&
                      (i.onupgradeneeded = function (t) {
                        var n = i.result
                        try {
                          n.createObjectStore(e.storeName),
                            t.oldVersion <= 1 && n.createObjectStore(h)
                        } catch (n) {
                          if ('ConstraintError' !== n.name) throw n
                          console.warn(
                            'The database "' +
                              e.name +
                              '" has been upgraded from version ' +
                              t.oldVersion +
                              ' to version ' +
                              t.newVersion +
                              ', but the storage "' +
                              e.storeName +
                              '" already exists.',
                          )
                        }
                      }),
                      (i.onerror = function (e) {
                        e.preventDefault(), r(i.error)
                      }),
                      (i.onsuccess = function () {
                        n(i.result), w(e)
                      })
                  })
                }
                function I(e) {
                  return k(e, !1)
                }
                function N(e) {
                  return k(e, !0)
                }
                function S(e, t) {
                  if (!e.db) return !0
                  var n = !e.db.objectStoreNames.contains(e.storeName),
                    r = e.version < e.db.version,
                    s = e.version > e.db.version
                  if (
                    (r &&
                      (e.version !== t &&
                        console.warn(
                          'The database "' +
                            e.name +
                            '" can\'t be downgraded from version ' +
                            e.db.version +
                            ' to version ' +
                            e.version +
                            '.',
                        ),
                      (e.version = e.db.version)),
                    s || n)
                  ) {
                    if (n) {
                      var a = e.db.version + 1
                      a > e.version && (e.version = a)
                    }
                    return !0
                  }
                  return !1
                }
                function T(e) {
                  return a([y(atob(e.data))], { type: e.type })
                }
                function C(e) {
                  return e && e.__local_forage_encoded_blob
                }
                function $(e) {
                  var t = this,
                    n = t._initReady().then(function () {
                      var e = d[t._dbInfo.name]
                      if (e && e.dbReady) return e.dbReady
                    })
                  return l(n, e, e), n
                }
                function E(e, t, n, r) {
                  void 0 === r && (r = 1)
                  try {
                    var s = e.db.transaction(e.storeName, t)
                    n(null, s)
                  } catch (s) {
                    if (
                      r > 0 &&
                      (!e.db ||
                        'InvalidStateError' === s.name ||
                        'NotFoundError' === s.name)
                    )
                      return i
                        .resolve()
                        .then(function () {
                          if (
                            !e.db ||
                            ('NotFoundError' === s.name &&
                              !e.db.objectStoreNames.contains(e.storeName) &&
                              e.version <= e.db.version)
                          )
                            return e.db && (e.version = e.db.version + 1), N(e)
                        })
                        .then(function () {
                          return (function (e) {
                            x(e)
                            for (
                              var t = d[e.name], n = t.forages, r = 0;
                              r < n.length;
                              r++
                            ) {
                              var s = n[r]
                              s._dbInfo.db &&
                                (s._dbInfo.db.close(), (s._dbInfo.db = null))
                            }
                            return (
                              (e.db = null),
                              I(e)
                                .then(function (t) {
                                  return (e.db = t), S(e) ? N(e) : t
                                })
                                .then(function (r) {
                                  e.db = t.db = r
                                  for (var s = 0; s < n.length; s++)
                                    n[s]._dbInfo.db = r
                                })
                                .catch(function (t) {
                                  throw (v(e, t), t)
                                })
                            )
                          })(e).then(function () {
                            E(e, t, n, r - 1)
                          })
                        })
                        .catch(n)
                    n(s)
                  }
                }
                var R = {
                  _driver: 'asyncStorage',
                  _initStorage: function (e) {
                    var t = this,
                      n = { db: null }
                    if (e) for (var r in e) n[r] = e[r]
                    var s = d[n.name]
                    s ||
                      ((s = {
                        forages: [],
                        db: null,
                        dbReady: null,
                        deferredOperations: [],
                      }),
                      (d[n.name] = s)),
                      s.forages.push(t),
                      t._initReady || ((t._initReady = t.ready), (t.ready = $))
                    var a = []
                    function o() {
                      return i.resolve()
                    }
                    for (var l = 0; l < s.forages.length; l++) {
                      var u = s.forages[l]
                      u !== t && a.push(u._initReady().catch(o))
                    }
                    var c = s.forages.slice(0)
                    return i
                      .all(a)
                      .then(function () {
                        return (n.db = s.db), I(n)
                      })
                      .then(function (e) {
                        return (
                          (n.db = e), S(n, t._defaultConfig.version) ? N(n) : e
                        )
                      })
                      .then(function (e) {
                        ;(n.db = s.db = e), (t._dbInfo = n)
                        for (var r = 0; r < c.length; r++) {
                          var a = c[r]
                          a !== t &&
                            ((a._dbInfo.db = n.db),
                            (a._dbInfo.version = n.version))
                        }
                      })
                  },
                  _support: (function () {
                    try {
                      if (!s) return !1
                      var e =
                          'undefined' != typeof openDatabase &&
                          /(Safari|iPhone|iPad|iPod)/.test(
                            navigator.userAgent,
                          ) &&
                          !/Chrome/.test(navigator.userAgent) &&
                          !/BlackBerry/.test(navigator.platform),
                        t =
                          'function' == typeof fetch &&
                          -1 !== fetch.toString().indexOf('[native code')
                      return (
                        (!e || t) &&
                        'undefined' != typeof indexedDB &&
                        'undefined' != typeof IDBKeyRange
                      )
                    } catch (e) {
                      return !1
                    }
                  })(),
                  iterate: function (e, t) {
                    var n = this,
                      r = new i(function (t, r) {
                        n.ready()
                          .then(function () {
                            E(n._dbInfo, m, function (s, a) {
                              if (s) return r(s)
                              try {
                                var i = a
                                    .objectStore(n._dbInfo.storeName)
                                    .openCursor(),
                                  o = 1
                                ;(i.onsuccess = function () {
                                  var n = i.result
                                  if (n) {
                                    var r = n.value
                                    C(r) && (r = T(r))
                                    var s = e(r, n.key, o++)
                                    void 0 !== s ? t(s) : n.continue()
                                  } else t()
                                }),
                                  (i.onerror = function () {
                                    r(i.error)
                                  })
                              } catch (e) {
                                r(e)
                              }
                            })
                          })
                          .catch(r)
                      })
                    return o(r, t), r
                  },
                  getItem: function (e, t) {
                    var n = this
                    e = u(e)
                    var r = new i(function (t, r) {
                      n.ready()
                        .then(function () {
                          E(n._dbInfo, m, function (s, a) {
                            if (s) return r(s)
                            try {
                              var i = a.objectStore(n._dbInfo.storeName).get(e)
                              ;(i.onsuccess = function () {
                                var e = i.result
                                void 0 === e && (e = null),
                                  C(e) && (e = T(e)),
                                  t(e)
                              }),
                                (i.onerror = function () {
                                  r(i.error)
                                })
                            } catch (e) {
                              r(e)
                            }
                          })
                        })
                        .catch(r)
                    })
                    return o(r, t), r
                  },
                  setItem: function (e, t, n) {
                    var r = this
                    e = u(e)
                    var s = new i(function (n, s) {
                      var a
                      r.ready()
                        .then(function () {
                          return (
                            (a = r._dbInfo),
                            '[object Blob]' === f.call(t)
                              ? b(a.db).then(function (e) {
                                  return e
                                    ? t
                                    : (function (e) {
                                        return new i(function (t, n) {
                                          var r = new FileReader()
                                          ;(r.onerror = n),
                                            (r.onloadend = function (n) {
                                              var r = btoa(
                                                n.target.result || '',
                                              )
                                              t({
                                                __local_forage_encoded_blob: !0,
                                                data: r,
                                                type: e.type,
                                              })
                                            }),
                                            r.readAsBinaryString(e)
                                        })
                                      })(t)
                                })
                              : t
                          )
                        })
                        .then(function (t) {
                          E(r._dbInfo, g, function (a, i) {
                            if (a) return s(a)
                            try {
                              var o = i.objectStore(r._dbInfo.storeName)
                              null === t && (t = void 0)
                              var l = o.put(t, e)
                              ;(i.oncomplete = function () {
                                void 0 === t && (t = null), n(t)
                              }),
                                (i.onabort = i.onerror =
                                  function () {
                                    var e = l.error
                                      ? l.error
                                      : l.transaction.error
                                    s(e)
                                  })
                            } catch (e) {
                              s(e)
                            }
                          })
                        })
                        .catch(s)
                    })
                    return o(s, n), s
                  },
                  removeItem: function (e, t) {
                    var n = this
                    e = u(e)
                    var r = new i(function (t, r) {
                      n.ready()
                        .then(function () {
                          E(n._dbInfo, g, function (s, a) {
                            if (s) return r(s)
                            try {
                              var i = a
                                .objectStore(n._dbInfo.storeName)
                                .delete(e)
                              ;(a.oncomplete = function () {
                                t()
                              }),
                                (a.onerror = function () {
                                  r(i.error)
                                }),
                                (a.onabort = function () {
                                  var e = i.error
                                    ? i.error
                                    : i.transaction.error
                                  r(e)
                                })
                            } catch (e) {
                              r(e)
                            }
                          })
                        })
                        .catch(r)
                    })
                    return o(r, t), r
                  },
                  clear: function (e) {
                    var t = this,
                      n = new i(function (e, n) {
                        t.ready()
                          .then(function () {
                            E(t._dbInfo, g, function (r, s) {
                              if (r) return n(r)
                              try {
                                var a = s
                                  .objectStore(t._dbInfo.storeName)
                                  .clear()
                                ;(s.oncomplete = function () {
                                  e()
                                }),
                                  (s.onabort = s.onerror =
                                    function () {
                                      var e = a.error
                                        ? a.error
                                        : a.transaction.error
                                      n(e)
                                    })
                              } catch (e) {
                                n(e)
                              }
                            })
                          })
                          .catch(n)
                      })
                    return o(n, e), n
                  },
                  length: function (e) {
                    var t = this,
                      n = new i(function (e, n) {
                        t.ready()
                          .then(function () {
                            E(t._dbInfo, m, function (r, s) {
                              if (r) return n(r)
                              try {
                                var a = s
                                  .objectStore(t._dbInfo.storeName)
                                  .count()
                                ;(a.onsuccess = function () {
                                  e(a.result)
                                }),
                                  (a.onerror = function () {
                                    n(a.error)
                                  })
                              } catch (e) {
                                n(e)
                              }
                            })
                          })
                          .catch(n)
                      })
                    return o(n, e), n
                  },
                  key: function (e, t) {
                    var n = this,
                      r = new i(function (t, r) {
                        e < 0
                          ? t(null)
                          : n
                              .ready()
                              .then(function () {
                                E(n._dbInfo, m, function (s, a) {
                                  if (s) return r(s)
                                  try {
                                    var i = a.objectStore(n._dbInfo.storeName),
                                      o = !1,
                                      l = i.openCursor()
                                    ;(l.onsuccess = function () {
                                      var n = l.result
                                      n
                                        ? 0 === e || o
                                          ? t(n.key)
                                          : ((o = !0), n.advance(e))
                                        : t(null)
                                    }),
                                      (l.onerror = function () {
                                        r(l.error)
                                      })
                                  } catch (e) {
                                    r(e)
                                  }
                                })
                              })
                              .catch(r)
                      })
                    return o(r, t), r
                  },
                  keys: function (e) {
                    var t = this,
                      n = new i(function (e, n) {
                        t.ready()
                          .then(function () {
                            E(t._dbInfo, m, function (r, s) {
                              if (r) return n(r)
                              try {
                                var a = s
                                    .objectStore(t._dbInfo.storeName)
                                    .openCursor(),
                                  i = []
                                ;(a.onsuccess = function () {
                                  var t = a.result
                                  t ? (i.push(t.key), t.continue()) : e(i)
                                }),
                                  (a.onerror = function () {
                                    n(a.error)
                                  })
                              } catch (e) {
                                n(e)
                              }
                            })
                          })
                          .catch(n)
                      })
                    return o(n, e), n
                  },
                  dropInstance: function (e, t) {
                    t = c.apply(this, arguments)
                    var n,
                      r = this.config()
                    if (
                      ((e = ('function' != typeof e && e) || {}).name ||
                        ((e.name = e.name || r.name),
                        (e.storeName = e.storeName || r.storeName)),
                      e.name)
                    ) {
                      var a =
                        e.name === r.name && this._dbInfo.db
                          ? i.resolve(this._dbInfo.db)
                          : I(e).then(function (t) {
                              var n = d[e.name],
                                r = n.forages
                              n.db = t
                              for (var s = 0; s < r.length; s++)
                                r[s]._dbInfo.db = t
                              return t
                            })
                      n = e.storeName
                        ? a.then(function (t) {
                            if (t.objectStoreNames.contains(e.storeName)) {
                              var n = t.version + 1
                              x(e)
                              var r = d[e.name],
                                a = r.forages
                              t.close()
                              for (var o = 0; o < a.length; o++) {
                                var l = a[o]
                                ;(l._dbInfo.db = null), (l._dbInfo.version = n)
                              }
                              var u = new i(function (t, r) {
                                var a = s.open(e.name, n)
                                ;(a.onerror = function (e) {
                                  a.result.close(), r(e)
                                }),
                                  (a.onupgradeneeded = function () {
                                    a.result.deleteObjectStore(e.storeName)
                                  }),
                                  (a.onsuccess = function () {
                                    var e = a.result
                                    e.close(), t(e)
                                  })
                              })
                              return u
                                .then(function (e) {
                                  r.db = e
                                  for (var t = 0; t < a.length; t++) {
                                    var n = a[t]
                                    ;(n._dbInfo.db = e), w(n._dbInfo)
                                  }
                                })
                                .catch(function (t) {
                                  throw (
                                    ((v(e, t) || i.resolve()).catch(
                                      function () {},
                                    ),
                                    t)
                                  )
                                })
                            }
                          })
                        : a.then(function (t) {
                            x(e)
                            var n = d[e.name],
                              r = n.forages
                            t.close()
                            for (var a = 0; a < r.length; a++)
                              r[a]._dbInfo.db = null
                            var o = new i(function (t, n) {
                              var r = s.deleteDatabase(e.name)
                              ;(r.onerror = r.onblocked =
                                function (e) {
                                  var t = r.result
                                  t && t.close(), n(e)
                                }),
                                (r.onsuccess = function () {
                                  var e = r.result
                                  e && e.close(), t(e)
                                })
                            })
                            return o
                              .then(function (e) {
                                n.db = e
                                for (var t = 0; t < r.length; t++)
                                  w(r[t]._dbInfo)
                              })
                              .catch(function (t) {
                                throw (
                                  ((v(e, t) || i.resolve()).catch(
                                    function () {},
                                  ),
                                  t)
                                )
                              })
                          })
                    } else n = i.reject('Invalid arguments')
                    return o(n, t), n
                  },
                }
                var A =
                    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',
                  _ = /^~~local_forage_type~([^~]+)~/,
                  F = '__lfsc__:',
                  D = 'arbf',
                  O = 'blob',
                  M = 'si08',
                  L = 'ui08',
                  z = 'uic8',
                  P = 'si16',
                  B = 'si32',
                  W = 'ur16',
                  V = 'ui32',
                  U = 'fl32',
                  G = 'fl64',
                  H = Object.prototype.toString
                function j(e) {
                  var t,
                    n,
                    r,
                    s,
                    a,
                    i = 0.75 * e.length,
                    o = e.length,
                    l = 0
                  '=' === e[e.length - 1] &&
                    (i--, '=' === e[e.length - 2] && i--)
                  var u = new ArrayBuffer(i),
                    c = new Uint8Array(u)
                  for (t = 0; t < o; t += 4)
                    (n = A.indexOf(e[t])),
                      (r = A.indexOf(e[t + 1])),
                      (s = A.indexOf(e[t + 2])),
                      (a = A.indexOf(e[t + 3])),
                      (c[l++] = (n << 2) | (r >> 4)),
                      (c[l++] = ((15 & r) << 4) | (s >> 2)),
                      (c[l++] = ((3 & s) << 6) | (63 & a))
                  return u
                }
                function q(e) {
                  var t,
                    n = new Uint8Array(e),
                    r = ''
                  for (t = 0; t < n.length; t += 3)
                    (r += A[n[t] >> 2]),
                      (r += A[((3 & n[t]) << 4) | (n[t + 1] >> 4)]),
                      (r += A[((15 & n[t + 1]) << 2) | (n[t + 2] >> 6)]),
                      (r += A[63 & n[t + 2]])
                  return (
                    n.length % 3 == 2
                      ? (r = r.substring(0, r.length - 1) + '=')
                      : n.length % 3 == 1 &&
                        (r = r.substring(0, r.length - 2) + '=='),
                    r
                  )
                }
                var K = {
                  serialize: function (e, t) {
                    var n = ''
                    if (
                      (e && (n = H.call(e)),
                      e &&
                        ('[object ArrayBuffer]' === n ||
                          (e.buffer &&
                            '[object ArrayBuffer]' === H.call(e.buffer))))
                    ) {
                      var r,
                        s = F
                      e instanceof ArrayBuffer
                        ? ((r = e), (s += D))
                        : ((r = e.buffer),
                          '[object Int8Array]' === n
                            ? (s += M)
                            : '[object Uint8Array]' === n
                              ? (s += L)
                              : '[object Uint8ClampedArray]' === n
                                ? (s += z)
                                : '[object Int16Array]' === n
                                  ? (s += P)
                                  : '[object Uint16Array]' === n
                                    ? (s += W)
                                    : '[object Int32Array]' === n
                                      ? (s += B)
                                      : '[object Uint32Array]' === n
                                        ? (s += V)
                                        : '[object Float32Array]' === n
                                          ? (s += U)
                                          : '[object Float64Array]' === n
                                            ? (s += G)
                                            : t(
                                                new Error(
                                                  'Failed to get type for BinaryArray',
                                                ),
                                              )),
                        t(s + q(r))
                    } else if ('[object Blob]' === n) {
                      var a = new FileReader()
                      ;(a.onload = function () {
                        var n =
                          '~~local_forage_type~' + e.type + '~' + q(this.result)
                        t(F + O + n)
                      }),
                        a.readAsArrayBuffer(e)
                    } else
                      try {
                        t(JSON.stringify(e))
                      } catch (n) {
                        console.error(
                          "Couldn't convert value into a JSON string: ",
                          e,
                        ),
                          t(null, n)
                      }
                  },
                  deserialize: function (e) {
                    if (e.substring(0, 9) !== F) return JSON.parse(e)
                    var t,
                      n = e.substring(13),
                      r = e.substring(9, 13)
                    if (r === O && _.test(n)) {
                      var s = n.match(_)
                      ;(t = s[1]), (n = n.substring(s[0].length))
                    }
                    var i = j(n)
                    switch (r) {
                      case D:
                        return i
                      case O:
                        return a([i], { type: t })
                      case M:
                        return new Int8Array(i)
                      case L:
                        return new Uint8Array(i)
                      case z:
                        return new Uint8ClampedArray(i)
                      case P:
                        return new Int16Array(i)
                      case W:
                        return new Uint16Array(i)
                      case B:
                        return new Int32Array(i)
                      case V:
                        return new Uint32Array(i)
                      case U:
                        return new Float32Array(i)
                      case G:
                        return new Float64Array(i)
                      default:
                        throw new Error('Unkown type: ' + r)
                    }
                  },
                  stringToBuffer: j,
                  bufferToString: q,
                }
                function X(e, t, n, r) {
                  e.executeSql(
                    'CREATE TABLE IF NOT EXISTS ' +
                      t.storeName +
                      ' (id INTEGER PRIMARY KEY, key unique, value)',
                    [],
                    n,
                    r,
                  )
                }
                function Y(e, t, n, r, s, a) {
                  e.executeSql(
                    n,
                    r,
                    s,
                    function (e, i) {
                      i.code === i.SYNTAX_ERR
                        ? e.executeSql(
                            "SELECT name FROM sqlite_master WHERE type='table' AND name = ?",
                            [t.storeName],
                            function (e, o) {
                              o.rows.length
                                ? a(e, i)
                                : X(
                                    e,
                                    t,
                                    function () {
                                      e.executeSql(n, r, s, a)
                                    },
                                    a,
                                  )
                            },
                            a,
                          )
                        : a(e, i)
                    },
                    a,
                  )
                }
                function Z(e, t, n, r) {
                  var s = this
                  e = u(e)
                  var a = new i(function (a, i) {
                    s.ready()
                      .then(function () {
                        void 0 === t && (t = null)
                        var o = t,
                          l = s._dbInfo
                        l.serializer.serialize(t, function (t, u) {
                          u
                            ? i(u)
                            : l.db.transaction(
                                function (n) {
                                  Y(
                                    n,
                                    l,
                                    'INSERT OR REPLACE INTO ' +
                                      l.storeName +
                                      ' (key, value) VALUES (?, ?)',
                                    [e, t],
                                    function () {
                                      a(o)
                                    },
                                    function (e, t) {
                                      i(t)
                                    },
                                  )
                                },
                                function (t) {
                                  if (t.code === t.QUOTA_ERR) {
                                    if (r > 0)
                                      return void a(
                                        Z.apply(s, [e, o, n, r - 1]),
                                      )
                                    i(t)
                                  }
                                },
                              )
                        })
                      })
                      .catch(i)
                  })
                  return o(a, n), a
                }
                var J = {
                  _driver: 'webSQLStorage',
                  _initStorage: function (e) {
                    var t = this,
                      n = { db: null }
                    if (e)
                      for (var r in e)
                        n[r] = 'string' != typeof e[r] ? e[r].toString() : e[r]
                    var s = new i(function (e, r) {
                      try {
                        n.db = openDatabase(
                          n.name,
                          String(n.version),
                          n.description,
                          n.size,
                        )
                      } catch (e) {
                        return r(e)
                      }
                      n.db.transaction(function (s) {
                        X(
                          s,
                          n,
                          function () {
                            ;(t._dbInfo = n), e()
                          },
                          function (e, t) {
                            r(t)
                          },
                        )
                      }, r)
                    })
                    return (n.serializer = K), s
                  },
                  _support: 'function' == typeof openDatabase,
                  iterate: function (e, t) {
                    var n = this,
                      r = new i(function (t, r) {
                        n.ready()
                          .then(function () {
                            var s = n._dbInfo
                            s.db.transaction(function (n) {
                              Y(
                                n,
                                s,
                                'SELECT * FROM ' + s.storeName,
                                [],
                                function (n, r) {
                                  for (
                                    var a = r.rows, i = a.length, o = 0;
                                    o < i;
                                    o++
                                  ) {
                                    var l = a.item(o),
                                      u = l.value
                                    if (
                                      (u && (u = s.serializer.deserialize(u)),
                                      void 0 !== (u = e(u, l.key, o + 1)))
                                    )
                                      return void t(u)
                                  }
                                  t()
                                },
                                function (e, t) {
                                  r(t)
                                },
                              )
                            })
                          })
                          .catch(r)
                      })
                    return o(r, t), r
                  },
                  getItem: function (e, t) {
                    var n = this
                    e = u(e)
                    var r = new i(function (t, r) {
                      n.ready()
                        .then(function () {
                          var s = n._dbInfo
                          s.db.transaction(function (n) {
                            Y(
                              n,
                              s,
                              'SELECT * FROM ' +
                                s.storeName +
                                ' WHERE key = ? LIMIT 1',
                              [e],
                              function (e, n) {
                                var r = n.rows.length
                                  ? n.rows.item(0).value
                                  : null
                                r && (r = s.serializer.deserialize(r)), t(r)
                              },
                              function (e, t) {
                                r(t)
                              },
                            )
                          })
                        })
                        .catch(r)
                    })
                    return o(r, t), r
                  },
                  setItem: function (e, t, n) {
                    return Z.apply(this, [e, t, n, 1])
                  },
                  removeItem: function (e, t) {
                    var n = this
                    e = u(e)
                    var r = new i(function (t, r) {
                      n.ready()
                        .then(function () {
                          var s = n._dbInfo
                          s.db.transaction(function (n) {
                            Y(
                              n,
                              s,
                              'DELETE FROM ' + s.storeName + ' WHERE key = ?',
                              [e],
                              function () {
                                t()
                              },
                              function (e, t) {
                                r(t)
                              },
                            )
                          })
                        })
                        .catch(r)
                    })
                    return o(r, t), r
                  },
                  clear: function (e) {
                    var t = this,
                      n = new i(function (e, n) {
                        t.ready()
                          .then(function () {
                            var r = t._dbInfo
                            r.db.transaction(function (t) {
                              Y(
                                t,
                                r,
                                'DELETE FROM ' + r.storeName,
                                [],
                                function () {
                                  e()
                                },
                                function (e, t) {
                                  n(t)
                                },
                              )
                            })
                          })
                          .catch(n)
                      })
                    return o(n, e), n
                  },
                  length: function (e) {
                    var t = this,
                      n = new i(function (e, n) {
                        t.ready()
                          .then(function () {
                            var r = t._dbInfo
                            r.db.transaction(function (t) {
                              Y(
                                t,
                                r,
                                'SELECT COUNT(key) as c FROM ' + r.storeName,
                                [],
                                function (t, n) {
                                  var r = n.rows.item(0).c
                                  e(r)
                                },
                                function (e, t) {
                                  n(t)
                                },
                              )
                            })
                          })
                          .catch(n)
                      })
                    return o(n, e), n
                  },
                  key: function (e, t) {
                    var n = this,
                      r = new i(function (t, r) {
                        n.ready()
                          .then(function () {
                            var s = n._dbInfo
                            s.db.transaction(function (n) {
                              Y(
                                n,
                                s,
                                'SELECT key FROM ' +
                                  s.storeName +
                                  ' WHERE id = ? LIMIT 1',
                                [e + 1],
                                function (e, n) {
                                  var r = n.rows.length
                                    ? n.rows.item(0).key
                                    : null
                                  t(r)
                                },
                                function (e, t) {
                                  r(t)
                                },
                              )
                            })
                          })
                          .catch(r)
                      })
                    return o(r, t), r
                  },
                  keys: function (e) {
                    var t = this,
                      n = new i(function (e, n) {
                        t.ready()
                          .then(function () {
                            var r = t._dbInfo
                            r.db.transaction(function (t) {
                              Y(
                                t,
                                r,
                                'SELECT key FROM ' + r.storeName,
                                [],
                                function (t, n) {
                                  for (
                                    var r = [], s = 0;
                                    s < n.rows.length;
                                    s++
                                  )
                                    r.push(n.rows.item(s).key)
                                  e(r)
                                },
                                function (e, t) {
                                  n(t)
                                },
                              )
                            })
                          })
                          .catch(n)
                      })
                    return o(n, e), n
                  },
                  dropInstance: function (e, t) {
                    t = c.apply(this, arguments)
                    var n = this.config()
                    ;(e = ('function' != typeof e && e) || {}).name ||
                      ((e.name = e.name || n.name),
                      (e.storeName = e.storeName || n.storeName))
                    var r,
                      s = this
                    return (
                      o(
                        (r = e.name
                          ? new i(function (t) {
                              var r
                              ;(r =
                                e.name === n.name
                                  ? s._dbInfo.db
                                  : openDatabase(e.name, '', '', 0)),
                                e.storeName
                                  ? t({ db: r, storeNames: [e.storeName] })
                                  : t(
                                      (function (e) {
                                        return new i(function (t, n) {
                                          e.transaction(
                                            function (r) {
                                              r.executeSql(
                                                "SELECT name FROM sqlite_master WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'",
                                                [],
                                                function (n, r) {
                                                  for (
                                                    var s = [], a = 0;
                                                    a < r.rows.length;
                                                    a++
                                                  )
                                                    s.push(r.rows.item(a).name)
                                                  t({ db: e, storeNames: s })
                                                },
                                                function (e, t) {
                                                  n(t)
                                                },
                                              )
                                            },
                                            function (e) {
                                              n(e)
                                            },
                                          )
                                        })
                                      })(r),
                                    )
                            }).then(function (e) {
                              return new i(function (t, n) {
                                e.db.transaction(
                                  function (r) {
                                    function s(e) {
                                      return new i(function (t, n) {
                                        r.executeSql(
                                          'DROP TABLE IF EXISTS ' + e,
                                          [],
                                          function () {
                                            t()
                                          },
                                          function (e, t) {
                                            n(t)
                                          },
                                        )
                                      })
                                    }
                                    for (
                                      var a = [],
                                        o = 0,
                                        l = e.storeNames.length;
                                      o < l;
                                      o++
                                    )
                                      a.push(s(e.storeNames[o]))
                                    i.all(a)
                                      .then(function () {
                                        t()
                                      })
                                      .catch(function (e) {
                                        n(e)
                                      })
                                  },
                                  function (e) {
                                    n(e)
                                  },
                                )
                              })
                            })
                          : i.reject('Invalid arguments')),
                        t,
                      ),
                      r
                    )
                  },
                }
                function Q(e, t) {
                  var n = e.name + '/'
                  return (
                    e.storeName !== t.storeName && (n += e.storeName + '/'), n
                  )
                }
                function ee() {
                  return (
                    !(function () {
                      var e = '_localforage_support_test'
                      try {
                        return (
                          localStorage.setItem(e, !0),
                          localStorage.removeItem(e),
                          !1
                        )
                      } catch (e) {
                        return !0
                      }
                    })() || localStorage.length > 0
                  )
                }
                var te = {
                    _driver: 'localStorageWrapper',
                    _initStorage: function (e) {
                      var t = {}
                      if (e) for (var n in e) t[n] = e[n]
                      return (
                        (t.keyPrefix = Q(e, this._defaultConfig)),
                        ee()
                          ? ((this._dbInfo = t),
                            (t.serializer = K),
                            i.resolve())
                          : i.reject()
                      )
                    },
                    _support: (function () {
                      try {
                        return (
                          'undefined' != typeof localStorage &&
                          'setItem' in localStorage &&
                          !!localStorage.setItem
                        )
                      } catch (e) {
                        return !1
                      }
                    })(),
                    iterate: function (e, t) {
                      var n = this,
                        r = n.ready().then(function () {
                          for (
                            var t = n._dbInfo,
                              r = t.keyPrefix,
                              s = r.length,
                              a = localStorage.length,
                              i = 1,
                              o = 0;
                            o < a;
                            o++
                          ) {
                            var l = localStorage.key(o)
                            if (0 === l.indexOf(r)) {
                              var u = localStorage.getItem(l)
                              if (
                                (u && (u = t.serializer.deserialize(u)),
                                void 0 !== (u = e(u, l.substring(s), i++)))
                              )
                                return u
                            }
                          }
                        })
                      return o(r, t), r
                    },
                    getItem: function (e, t) {
                      var n = this
                      e = u(e)
                      var r = n.ready().then(function () {
                        var t = n._dbInfo,
                          r = localStorage.getItem(t.keyPrefix + e)
                        return r && (r = t.serializer.deserialize(r)), r
                      })
                      return o(r, t), r
                    },
                    setItem: function (e, t, n) {
                      var r = this
                      e = u(e)
                      var s = r.ready().then(function () {
                        void 0 === t && (t = null)
                        var n = t
                        return new i(function (s, a) {
                          var i = r._dbInfo
                          i.serializer.serialize(t, function (t, r) {
                            if (r) a(r)
                            else
                              try {
                                localStorage.setItem(i.keyPrefix + e, t), s(n)
                              } catch (e) {
                                ;('QuotaExceededError' !== e.name &&
                                  'NS_ERROR_DOM_QUOTA_REACHED' !== e.name) ||
                                  a(e),
                                  a(e)
                              }
                          })
                        })
                      })
                      return o(s, n), s
                    },
                    removeItem: function (e, t) {
                      var n = this
                      e = u(e)
                      var r = n.ready().then(function () {
                        var t = n._dbInfo
                        localStorage.removeItem(t.keyPrefix + e)
                      })
                      return o(r, t), r
                    },
                    clear: function (e) {
                      var t = this,
                        n = t.ready().then(function () {
                          for (
                            var e = t._dbInfo.keyPrefix,
                              n = localStorage.length - 1;
                            n >= 0;
                            n--
                          ) {
                            var r = localStorage.key(n)
                            0 === r.indexOf(e) && localStorage.removeItem(r)
                          }
                        })
                      return o(n, e), n
                    },
                    length: function (e) {
                      var t = this.keys().then(function (e) {
                        return e.length
                      })
                      return o(t, e), t
                    },
                    key: function (e, t) {
                      var n = this,
                        r = n.ready().then(function () {
                          var t,
                            r = n._dbInfo
                          try {
                            t = localStorage.key(e)
                          } catch (e) {
                            t = null
                          }
                          return t && (t = t.substring(r.keyPrefix.length)), t
                        })
                      return o(r, t), r
                    },
                    keys: function (e) {
                      var t = this,
                        n = t.ready().then(function () {
                          for (
                            var e = t._dbInfo,
                              n = localStorage.length,
                              r = [],
                              s = 0;
                            s < n;
                            s++
                          ) {
                            var a = localStorage.key(s)
                            0 === a.indexOf(e.keyPrefix) &&
                              r.push(a.substring(e.keyPrefix.length))
                          }
                          return r
                        })
                      return o(n, e), n
                    },
                    dropInstance: function (e, t) {
                      if (
                        ((t = c.apply(this, arguments)),
                        !(e = ('function' != typeof e && e) || {}).name)
                      ) {
                        var n = this.config()
                        ;(e.name = e.name || n.name),
                          (e.storeName = e.storeName || n.storeName)
                      }
                      var r,
                        s = this
                      return (
                        (r = e.name
                          ? new i(function (t) {
                              e.storeName
                                ? t(Q(e, s._defaultConfig))
                                : t(e.name + '/')
                            }).then(function (e) {
                              for (
                                var t = localStorage.length - 1;
                                t >= 0;
                                t--
                              ) {
                                var n = localStorage.key(t)
                                0 === n.indexOf(e) && localStorage.removeItem(n)
                              }
                            })
                          : i.reject('Invalid arguments')),
                        o(r, t),
                        r
                      )
                    },
                  },
                  ne = function (e, t) {
                    return (
                      e === t ||
                      ('number' == typeof e &&
                        'number' == typeof t &&
                        isNaN(e) &&
                        isNaN(t))
                    )
                  },
                  re = function (e, t) {
                    for (var n = e.length, r = 0; r < n; ) {
                      if (ne(e[r], t)) return !0
                      r++
                    }
                    return !1
                  },
                  se =
                    Array.isArray ||
                    function (e) {
                      return (
                        '[object Array]' === Object.prototype.toString.call(e)
                      )
                    },
                  ae = {},
                  ie = {},
                  oe = { INDEXEDDB: R, WEBSQL: J, LOCALSTORAGE: te },
                  le = [
                    oe.INDEXEDDB._driver,
                    oe.WEBSQL._driver,
                    oe.LOCALSTORAGE._driver,
                  ],
                  ue = ['dropInstance'],
                  ce = [
                    'clear',
                    'getItem',
                    'iterate',
                    'key',
                    'keys',
                    'length',
                    'removeItem',
                    'setItem',
                  ].concat(ue),
                  he = {
                    description: '',
                    driver: le.slice(),
                    name: 'localforage',
                    size: 4980736,
                    storeName: 'keyvaluepairs',
                    version: 1,
                  }
                function pe(e, t) {
                  e[t] = function () {
                    var n = arguments
                    return e.ready().then(function () {
                      return e[t].apply(e, n)
                    })
                  }
                }
                function de() {
                  for (var e = 1; e < arguments.length; e++) {
                    var t = arguments[e]
                    if (t)
                      for (var n in t)
                        t.hasOwnProperty(n) &&
                          (se(t[n])
                            ? (arguments[0][n] = t[n].slice())
                            : (arguments[0][n] = t[n]))
                  }
                  return arguments[0]
                }
                var fe = (function () {
                    function e(t) {
                      for (var n in ((function (e, t) {
                        if (!(e instanceof t))
                          throw new TypeError(
                            'Cannot call a class as a function',
                          )
                      })(this, e),
                      oe))
                        if (oe.hasOwnProperty(n)) {
                          var r = oe[n],
                            s = r._driver
                          ;(this[n] = s), ae[s] || this.defineDriver(r)
                        }
                      ;(this._defaultConfig = de({}, he)),
                        (this._config = de({}, this._defaultConfig, t)),
                        (this._driverSet = null),
                        (this._initDriver = null),
                        (this._ready = !1),
                        (this._dbInfo = null),
                        this._wrapLibraryMethodsWithReady(),
                        this.setDriver(this._config.driver).catch(
                          function () {},
                        )
                    }
                    return (
                      (e.prototype.config = function (e) {
                        if ('object' === (void 0 === e ? 'undefined' : r(e))) {
                          if (this._ready)
                            return new Error(
                              "Can't call config() after localforage has been used.",
                            )
                          for (var t in e) {
                            if (
                              ('storeName' === t &&
                                (e[t] = e[t].replace(/\W/g, '_')),
                              'version' === t && 'number' != typeof e[t])
                            )
                              return new Error(
                                'Database version must be a number.',
                              )
                            this._config[t] = e[t]
                          }
                          return (
                            !('driver' in e) ||
                            !e.driver ||
                            this.setDriver(this._config.driver)
                          )
                        }
                        return 'string' == typeof e
                          ? this._config[e]
                          : this._config
                      }),
                      (e.prototype.defineDriver = function (e, t, n) {
                        var r = new i(function (t, n) {
                          try {
                            var r = e._driver,
                              s = new Error(
                                'Custom driver not compliant; see https://mozilla.github.io/localForage/#definedriver',
                              )
                            if (!e._driver) return void n(s)
                            for (
                              var a = ce.concat('_initStorage'),
                                l = 0,
                                u = a.length;
                              l < u;
                              l++
                            ) {
                              var c = a[l]
                              if (
                                (!re(ue, c) || e[c]) &&
                                'function' != typeof e[c]
                              )
                                return void n(s)
                            }
                            !(function () {
                              for (
                                var t = function (e) {
                                    return function () {
                                      var t = new Error(
                                          'Method ' +
                                            e +
                                            ' is not implemented by the current driver',
                                        ),
                                        n = i.reject(t)
                                      return (
                                        o(n, arguments[arguments.length - 1]), n
                                      )
                                    }
                                  },
                                  n = 0,
                                  r = ue.length;
                                n < r;
                                n++
                              ) {
                                var s = ue[n]
                                e[s] || (e[s] = t(s))
                              }
                            })()
                            var h = function (n) {
                              ae[r] &&
                                console.info(
                                  'Redefining LocalForage driver: ' + r,
                                ),
                                (ae[r] = e),
                                (ie[r] = n),
                                t()
                            }
                            '_support' in e
                              ? e._support && 'function' == typeof e._support
                                ? e._support().then(h, n)
                                : h(!!e._support)
                              : h(!0)
                          } catch (e) {
                            n(e)
                          }
                        })
                        return l(r, t, n), r
                      }),
                      (e.prototype.driver = function () {
                        return this._driver || null
                      }),
                      (e.prototype.getDriver = function (e, t, n) {
                        var r = ae[e]
                          ? i.resolve(ae[e])
                          : i.reject(new Error('Driver not found.'))
                        return l(r, t, n), r
                      }),
                      (e.prototype.getSerializer = function (e) {
                        var t = i.resolve(K)
                        return l(t, e), t
                      }),
                      (e.prototype.ready = function (e) {
                        var t = this,
                          n = t._driverSet.then(function () {
                            return (
                              null === t._ready && (t._ready = t._initDriver()),
                              t._ready
                            )
                          })
                        return l(n, e, e), n
                      }),
                      (e.prototype.setDriver = function (e, t, n) {
                        var r = this
                        se(e) || (e = [e])
                        var s = this._getSupportedDrivers(e)
                        function a() {
                          r._config.driver = r.driver()
                        }
                        function o(e) {
                          return (
                            r._extend(e),
                            a(),
                            (r._ready = r._initStorage(r._config)),
                            r._ready
                          )
                        }
                        var u =
                          null !== this._driverSet
                            ? this._driverSet.catch(function () {
                                return i.resolve()
                              })
                            : i.resolve()
                        return (
                          (this._driverSet = u
                            .then(function () {
                              var e = s[0]
                              return (
                                (r._dbInfo = null),
                                (r._ready = null),
                                r.getDriver(e).then(function (e) {
                                  ;(r._driver = e._driver),
                                    a(),
                                    r._wrapLibraryMethodsWithReady(),
                                    (r._initDriver = (function (e) {
                                      return function () {
                                        var t = 0
                                        return (function n() {
                                          for (; t < e.length; ) {
                                            var s = e[t]
                                            return (
                                              t++,
                                              (r._dbInfo = null),
                                              (r._ready = null),
                                              r.getDriver(s).then(o).catch(n)
                                            )
                                          }
                                          a()
                                          var l = new Error(
                                            'No available storage method found.',
                                          )
                                          return (
                                            (r._driverSet = i.reject(l)),
                                            r._driverSet
                                          )
                                        })()
                                      }
                                    })(s))
                                })
                              )
                            })
                            .catch(function () {
                              a()
                              var e = new Error(
                                'No available storage method found.',
                              )
                              return (r._driverSet = i.reject(e)), r._driverSet
                            })),
                          l(this._driverSet, t, n),
                          this._driverSet
                        )
                      }),
                      (e.prototype.supports = function (e) {
                        return !!ie[e]
                      }),
                      (e.prototype._extend = function (e) {
                        de(this, e)
                      }),
                      (e.prototype._getSupportedDrivers = function (e) {
                        for (var t = [], n = 0, r = e.length; n < r; n++) {
                          var s = e[n]
                          this.supports(s) && t.push(s)
                        }
                        return t
                      }),
                      (e.prototype._wrapLibraryMethodsWithReady = function () {
                        for (var e = 0, t = ce.length; e < t; e++)
                          pe(this, ce[e])
                      }),
                      (e.prototype.createInstance = function (t) {
                        return new e(t)
                      }),
                      e
                    )
                  })(),
                  me = new fe()
                t.exports = me
              },
              { 3: 3 },
            ],
          },
          {},
          [4],
        )(4)
      },
      570: (e) => {
        e.exports = n
        var t = null
        try {
          t = new WebAssembly.Instance(
            new WebAssembly.Module(
              new Uint8Array([
                0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4,
                127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1,
                127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100,
                105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5,
                114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5,
                8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6,
                4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32,
                134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4,
                66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0,
                173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66,
                32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167,
                11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32,
                2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135,
                167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1,
                173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132,
                129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1,
                126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32,
                3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0,
                32, 4, 167, 11,
              ]),
            ),
            {},
          ).exports
        } catch (e) {}
        function n(e, t, n) {
          ;(this.low = 0 | e), (this.high = 0 | t), (this.unsigned = !!n)
        }
        function r(e) {
          return !0 === (e && e.__isLong__)
        }
        n.prototype.__isLong__,
          Object.defineProperty(n.prototype, '__isLong__', { value: !0 }),
          (n.isLong = r)
        var s = {},
          a = {}
        function i(e, t) {
          var n, r, i
          return t
            ? (i = 0 <= (e >>>= 0) && e < 256) && (r = a[e])
              ? r
              : ((n = l(e, (0 | e) < 0 ? -1 : 0, !0)), i && (a[e] = n), n)
            : (i = -128 <= (e |= 0) && e < 128) && (r = s[e])
              ? r
              : ((n = l(e, e < 0 ? -1 : 0, !1)), i && (s[e] = n), n)
        }
        function o(e, t) {
          if (isNaN(e)) return t ? y : g
          if (t) {
            if (e < 0) return y
            if (e >= d) return k
          } else {
            if (e <= -f) return I
            if (e + 1 >= f) return v
          }
          return e < 0 ? o(-e, t).neg() : l(e % p | 0, (e / p) | 0, t)
        }
        function l(e, t, r) {
          return new n(e, t, r)
        }
        ;(n.fromInt = i), (n.fromNumber = o), (n.fromBits = l)
        var u = Math.pow
        function c(e, t, n) {
          if (0 === e.length) throw Error('empty string')
          if (
            'NaN' === e ||
            'Infinity' === e ||
            '+Infinity' === e ||
            '-Infinity' === e
          )
            return g
          if (
            ('number' == typeof t ? ((n = t), (t = !1)) : (t = !!t),
            (n = n || 10) < 2 || 36 < n)
          )
            throw RangeError('radix')
          var r
          if ((r = e.indexOf('-')) > 0) throw Error('interior hyphen')
          if (0 === r) return c(e.substring(1), t, n).neg()
          for (var s = o(u(n, 8)), a = g, i = 0; i < e.length; i += 8) {
            var l = Math.min(8, e.length - i),
              h = parseInt(e.substring(i, i + l), n)
            if (l < 8) {
              var p = o(u(n, l))
              a = a.mul(p).add(o(h))
            } else a = (a = a.mul(s)).add(o(h))
          }
          return (a.unsigned = t), a
        }
        function h(e, t) {
          return 'number' == typeof e
            ? o(e, t)
            : 'string' == typeof e
              ? c(e, t)
              : l(e.low, e.high, 'boolean' == typeof t ? t : e.unsigned)
        }
        ;(n.fromString = c), (n.fromValue = h)
        var p = 4294967296,
          d = p * p,
          f = d / 2,
          m = i(1 << 24),
          g = i(0)
        n.ZERO = g
        var y = i(0, !0)
        n.UZERO = y
        var b = i(1)
        n.ONE = b
        var x = i(1, !0)
        n.UONE = x
        var w = i(-1)
        n.NEG_ONE = w
        var v = l(-1, 2147483647, !1)
        n.MAX_VALUE = v
        var k = l(-1, -1, !0)
        n.MAX_UNSIGNED_VALUE = k
        var I = l(0, -2147483648, !1)
        n.MIN_VALUE = I
        var N = n.prototype
        ;(N.toInt = function () {
          return this.unsigned ? this.low >>> 0 : this.low
        }),
          (N.toNumber = function () {
            return this.unsigned
              ? (this.high >>> 0) * p + (this.low >>> 0)
              : this.high * p + (this.low >>> 0)
          }),
          (N.toString = function (e) {
            if ((e = e || 10) < 2 || 36 < e) throw RangeError('radix')
            if (this.isZero()) return '0'
            if (this.isNegative()) {
              if (this.eq(I)) {
                var t = o(e),
                  n = this.div(t),
                  r = n.mul(t).sub(this)
                return n.toString(e) + r.toInt().toString(e)
              }
              return '-' + this.neg().toString(e)
            }
            for (var s = o(u(e, 6), this.unsigned), a = this, i = ''; ; ) {
              var l = a.div(s),
                c = (a.sub(l.mul(s)).toInt() >>> 0).toString(e)
              if ((a = l).isZero()) return c + i
              for (; c.length < 6; ) c = '0' + c
              i = '' + c + i
            }
          }),
          (N.getHighBits = function () {
            return this.high
          }),
          (N.getHighBitsUnsigned = function () {
            return this.high >>> 0
          }),
          (N.getLowBits = function () {
            return this.low
          }),
          (N.getLowBitsUnsigned = function () {
            return this.low >>> 0
          }),
          (N.getNumBitsAbs = function () {
            if (this.isNegative())
              return this.eq(I) ? 64 : this.neg().getNumBitsAbs()
            for (
              var e = 0 != this.high ? this.high : this.low, t = 31;
              t > 0 && !(e & (1 << t));
              t--
            );
            return 0 != this.high ? t + 33 : t + 1
          }),
          (N.isZero = function () {
            return 0 === this.high && 0 === this.low
          }),
          (N.eqz = N.isZero),
          (N.isNegative = function () {
            return !this.unsigned && this.high < 0
          }),
          (N.isPositive = function () {
            return this.unsigned || this.high >= 0
          }),
          (N.isOdd = function () {
            return !(1 & ~this.low)
          }),
          (N.isEven = function () {
            return !(1 & this.low)
          }),
          (N.equals = function (e) {
            return (
              r(e) || (e = h(e)),
              (this.unsigned === e.unsigned ||
                this.high >>> 31 != 1 ||
                e.high >>> 31 != 1) &&
                this.high === e.high &&
                this.low === e.low
            )
          }),
          (N.eq = N.equals),
          (N.notEquals = function (e) {
            return !this.eq(e)
          }),
          (N.neq = N.notEquals),
          (N.ne = N.notEquals),
          (N.lessThan = function (e) {
            return this.comp(e) < 0
          }),
          (N.lt = N.lessThan),
          (N.lessThanOrEqual = function (e) {
            return this.comp(e) <= 0
          }),
          (N.lte = N.lessThanOrEqual),
          (N.le = N.lessThanOrEqual),
          (N.greaterThan = function (e) {
            return this.comp(e) > 0
          }),
          (N.gt = N.greaterThan),
          (N.greaterThanOrEqual = function (e) {
            return this.comp(e) >= 0
          }),
          (N.gte = N.greaterThanOrEqual),
          (N.ge = N.greaterThanOrEqual),
          (N.compare = function (e) {
            if ((r(e) || (e = h(e)), this.eq(e))) return 0
            var t = this.isNegative(),
              n = e.isNegative()
            return t && !n
              ? -1
              : !t && n
                ? 1
                : this.unsigned
                  ? e.high >>> 0 > this.high >>> 0 ||
                    (e.high === this.high && e.low >>> 0 > this.low >>> 0)
                    ? -1
                    : 1
                  : this.sub(e).isNegative()
                    ? -1
                    : 1
          }),
          (N.comp = N.compare),
          (N.negate = function () {
            return !this.unsigned && this.eq(I) ? I : this.not().add(b)
          }),
          (N.neg = N.negate),
          (N.add = function (e) {
            r(e) || (e = h(e))
            var t = this.high >>> 16,
              n = 65535 & this.high,
              s = this.low >>> 16,
              a = 65535 & this.low,
              i = e.high >>> 16,
              o = 65535 & e.high,
              u = e.low >>> 16,
              c = 0,
              p = 0,
              d = 0,
              f = 0
            return (
              (d += (f += a + (65535 & e.low)) >>> 16),
              (p += (d += s + u) >>> 16),
              (c += (p += n + o) >>> 16),
              (c += t + i),
              l(
                ((d &= 65535) << 16) | (f &= 65535),
                ((c &= 65535) << 16) | (p &= 65535),
                this.unsigned,
              )
            )
          }),
          (N.subtract = function (e) {
            return r(e) || (e = h(e)), this.add(e.neg())
          }),
          (N.sub = N.subtract),
          (N.multiply = function (e) {
            if (this.isZero()) return g
            if ((r(e) || (e = h(e)), t))
              return l(
                t.mul(this.low, this.high, e.low, e.high),
                t.get_high(),
                this.unsigned,
              )
            if (e.isZero()) return g
            if (this.eq(I)) return e.isOdd() ? I : g
            if (e.eq(I)) return this.isOdd() ? I : g
            if (this.isNegative())
              return e.isNegative()
                ? this.neg().mul(e.neg())
                : this.neg().mul(e).neg()
            if (e.isNegative()) return this.mul(e.neg()).neg()
            if (this.lt(m) && e.lt(m))
              return o(this.toNumber() * e.toNumber(), this.unsigned)
            var n = this.high >>> 16,
              s = 65535 & this.high,
              a = this.low >>> 16,
              i = 65535 & this.low,
              u = e.high >>> 16,
              c = 65535 & e.high,
              p = e.low >>> 16,
              d = 65535 & e.low,
              f = 0,
              y = 0,
              b = 0,
              x = 0
            return (
              (b += (x += i * d) >>> 16),
              (y += (b += a * d) >>> 16),
              (b &= 65535),
              (y += (b += i * p) >>> 16),
              (f += (y += s * d) >>> 16),
              (y &= 65535),
              (f += (y += a * p) >>> 16),
              (y &= 65535),
              (f += (y += i * c) >>> 16),
              (f += n * d + s * p + a * c + i * u),
              l(
                ((b &= 65535) << 16) | (x &= 65535),
                ((f &= 65535) << 16) | (y &= 65535),
                this.unsigned,
              )
            )
          }),
          (N.mul = N.multiply),
          (N.divide = function (e) {
            if ((r(e) || (e = h(e)), e.isZero()))
              throw Error('division by zero')
            var n, s, a
            if (t)
              return this.unsigned ||
                -2147483648 !== this.high ||
                -1 !== e.low ||
                -1 !== e.high
                ? l(
                    (this.unsigned ? t.div_u : t.div_s)(
                      this.low,
                      this.high,
                      e.low,
                      e.high,
                    ),
                    t.get_high(),
                    this.unsigned,
                  )
                : this
            if (this.isZero()) return this.unsigned ? y : g
            if (this.unsigned) {
              if ((e.unsigned || (e = e.toUnsigned()), e.gt(this))) return y
              if (e.gt(this.shru(1))) return x
              a = y
            } else {
              if (this.eq(I))
                return e.eq(b) || e.eq(w)
                  ? I
                  : e.eq(I)
                    ? b
                    : (n = this.shr(1).div(e).shl(1)).eq(g)
                      ? e.isNegative()
                        ? b
                        : w
                      : ((s = this.sub(e.mul(n))), (a = n.add(s.div(e))))
              if (e.eq(I)) return this.unsigned ? y : g
              if (this.isNegative())
                return e.isNegative()
                  ? this.neg().div(e.neg())
                  : this.neg().div(e).neg()
              if (e.isNegative()) return this.div(e.neg()).neg()
              a = g
            }
            for (s = this; s.gte(e); ) {
              n = Math.max(1, Math.floor(s.toNumber() / e.toNumber()))
              for (
                var i = Math.ceil(Math.log(n) / Math.LN2),
                  c = i <= 48 ? 1 : u(2, i - 48),
                  p = o(n),
                  d = p.mul(e);
                d.isNegative() || d.gt(s);

              )
                d = (p = o((n -= c), this.unsigned)).mul(e)
              p.isZero() && (p = b), (a = a.add(p)), (s = s.sub(d))
            }
            return a
          }),
          (N.div = N.divide),
          (N.modulo = function (e) {
            return (
              r(e) || (e = h(e)),
              t
                ? l(
                    (this.unsigned ? t.rem_u : t.rem_s)(
                      this.low,
                      this.high,
                      e.low,
                      e.high,
                    ),
                    t.get_high(),
                    this.unsigned,
                  )
                : this.sub(this.div(e).mul(e))
            )
          }),
          (N.mod = N.modulo),
          (N.rem = N.modulo),
          (N.not = function () {
            return l(~this.low, ~this.high, this.unsigned)
          }),
          (N.and = function (e) {
            return (
              r(e) || (e = h(e)),
              l(this.low & e.low, this.high & e.high, this.unsigned)
            )
          }),
          (N.or = function (e) {
            return (
              r(e) || (e = h(e)),
              l(this.low | e.low, this.high | e.high, this.unsigned)
            )
          }),
          (N.xor = function (e) {
            return (
              r(e) || (e = h(e)),
              l(this.low ^ e.low, this.high ^ e.high, this.unsigned)
            )
          }),
          (N.shiftLeft = function (e) {
            return (
              r(e) && (e = e.toInt()),
              0 == (e &= 63)
                ? this
                : e < 32
                  ? l(
                      this.low << e,
                      (this.high << e) | (this.low >>> (32 - e)),
                      this.unsigned,
                    )
                  : l(0, this.low << (e - 32), this.unsigned)
            )
          }),
          (N.shl = N.shiftLeft),
          (N.shiftRight = function (e) {
            return (
              r(e) && (e = e.toInt()),
              0 == (e &= 63)
                ? this
                : e < 32
                  ? l(
                      (this.low >>> e) | (this.high << (32 - e)),
                      this.high >> e,
                      this.unsigned,
                    )
                  : l(
                      this.high >> (e - 32),
                      this.high >= 0 ? 0 : -1,
                      this.unsigned,
                    )
            )
          }),
          (N.shr = N.shiftRight),
          (N.shiftRightUnsigned = function (e) {
            if ((r(e) && (e = e.toInt()), 0 == (e &= 63))) return this
            var t = this.high
            return e < 32
              ? l((this.low >>> e) | (t << (32 - e)), t >>> e, this.unsigned)
              : l(32 === e ? t : t >>> (e - 32), 0, this.unsigned)
          }),
          (N.shru = N.shiftRightUnsigned),
          (N.shr_u = N.shiftRightUnsigned),
          (N.toSigned = function () {
            return this.unsigned ? l(this.low, this.high, !1) : this
          }),
          (N.toUnsigned = function () {
            return this.unsigned ? this : l(this.low, this.high, !0)
          }),
          (N.toBytes = function (e) {
            return e ? this.toBytesLE() : this.toBytesBE()
          }),
          (N.toBytesLE = function () {
            var e = this.high,
              t = this.low
            return [
              255 & t,
              (t >>> 8) & 255,
              (t >>> 16) & 255,
              t >>> 24,
              255 & e,
              (e >>> 8) & 255,
              (e >>> 16) & 255,
              e >>> 24,
            ]
          }),
          (N.toBytesBE = function () {
            var e = this.high,
              t = this.low
            return [
              e >>> 24,
              (e >>> 16) & 255,
              (e >>> 8) & 255,
              255 & e,
              t >>> 24,
              (t >>> 16) & 255,
              (t >>> 8) & 255,
              255 & t,
            ]
          }),
          (n.fromBytes = function (e, t, r) {
            return r ? n.fromBytesLE(e, t) : n.fromBytesBE(e, t)
          }),
          (n.fromBytesLE = function (e, t) {
            return new n(
              e[0] | (e[1] << 8) | (e[2] << 16) | (e[3] << 24),
              e[4] | (e[5] << 8) | (e[6] << 16) | (e[7] << 24),
              t,
            )
          }),
          (n.fromBytesBE = function (e, t) {
            return new n(
              (e[4] << 24) | (e[5] << 16) | (e[6] << 8) | e[7],
              (e[0] << 24) | (e[1] << 16) | (e[2] << 8) | e[3],
              t,
            )
          })
      },
      312: function (e, t) {
        var n, r
        ;(n = function (e) {
          'use strict'
          var t =
            Object.assign ||
            function (e) {
              for (var t = 1; t < arguments.length; t++) {
                var n = arguments[t]
                for (var r in n)
                  Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r])
              }
              return e
            }
          function n(e) {
            if (Array.isArray(e)) {
              for (var t = 0, n = Array(e.length); t < e.length; t++)
                n[t] = e[t]
              return n
            }
            return Array.from(e)
          }
          var r = { order: 2, precision: 2, period: null }
          function s(e, t) {
            var n = [],
              r = []
            e.forEach(function (e, s) {
              null !== e[1] && (r.push(e), n.push(t[s]))
            })
            var s =
                r.reduce(function (e, t) {
                  return e + t[1]
                }, 0) / r.length,
              a = r.reduce(function (e, t) {
                var n = t[1] - s
                return e + n * n
              }, 0)
            return (
              1 -
              r.reduce(function (e, t, r) {
                var s = n[r],
                  a = t[1] - s[1]
                return e + a * a
              }, 0) /
                a
            )
          }
          function a(e, t) {
            var n = Math.pow(10, t)
            return Math.round(e * n) / n
          }
          var i = {
            linear: function (e, t) {
              for (var n = [0, 0, 0, 0, 0], r = 0, i = 0; i < e.length; i++)
                null !== e[i][1] &&
                  (r++,
                  (n[0] += e[i][0]),
                  (n[1] += e[i][1]),
                  (n[2] += e[i][0] * e[i][0]),
                  (n[3] += e[i][0] * e[i][1]),
                  (n[4] += e[i][1] * e[i][1]))
              var o = r * n[2] - n[0] * n[0],
                l = r * n[3] - n[0] * n[1],
                u = 0 === o ? 0 : a(l / o, t.precision),
                c = a(n[1] / r - (u * n[0]) / r, t.precision),
                h = function (e) {
                  return [a(e, t.precision), a(u * e + c, t.precision)]
                },
                p = e.map(function (e) {
                  return h(e[0])
                })
              return {
                points: p,
                predict: h,
                equation: [u, c],
                r2: a(s(e, p), t.precision),
                string: 0 === c ? 'y = ' + u + 'x' : 'y = ' + u + 'x + ' + c,
              }
            },
            exponential: function (e, t) {
              for (var n = [0, 0, 0, 0, 0, 0], r = 0; r < e.length; r++)
                null !== e[r][1] &&
                  ((n[0] += e[r][0]),
                  (n[1] += e[r][1]),
                  (n[2] += e[r][0] * e[r][0] * e[r][1]),
                  (n[3] += e[r][1] * Math.log(e[r][1])),
                  (n[4] += e[r][0] * e[r][1] * Math.log(e[r][1])),
                  (n[5] += e[r][0] * e[r][1]))
              var i = n[1] * n[2] - n[5] * n[5],
                o = Math.exp((n[2] * n[3] - n[5] * n[4]) / i),
                l = (n[1] * n[4] - n[5] * n[3]) / i,
                u = a(o, t.precision),
                c = a(l, t.precision),
                h = function (e) {
                  return [
                    a(e, t.precision),
                    a(u * Math.exp(c * e), t.precision),
                  ]
                },
                p = e.map(function (e) {
                  return h(e[0])
                })
              return {
                points: p,
                predict: h,
                equation: [u, c],
                string: 'y = ' + u + 'e^(' + c + 'x)',
                r2: a(s(e, p), t.precision),
              }
            },
            logarithmic: function (e, t) {
              for (var n = [0, 0, 0, 0], r = e.length, i = 0; i < r; i++)
                null !== e[i][1] &&
                  ((n[0] += Math.log(e[i][0])),
                  (n[1] += e[i][1] * Math.log(e[i][0])),
                  (n[2] += e[i][1]),
                  (n[3] += Math.pow(Math.log(e[i][0]), 2)))
              var o = a(
                  (r * n[1] - n[2] * n[0]) / (r * n[3] - n[0] * n[0]),
                  t.precision,
                ),
                l = a((n[2] - o * n[0]) / r, t.precision),
                u = function (e) {
                  return [
                    a(e, t.precision),
                    a(a(l + o * Math.log(e), t.precision), t.precision),
                  ]
                },
                c = e.map(function (e) {
                  return u(e[0])
                })
              return {
                points: c,
                predict: u,
                equation: [l, o],
                string: 'y = ' + l + ' + ' + o + ' ln(x)',
                r2: a(s(e, c), t.precision),
              }
            },
            power: function (e, t) {
              for (var n = [0, 0, 0, 0, 0], r = e.length, i = 0; i < r; i++)
                null !== e[i][1] &&
                  ((n[0] += Math.log(e[i][0])),
                  (n[1] += Math.log(e[i][1]) * Math.log(e[i][0])),
                  (n[2] += Math.log(e[i][1])),
                  (n[3] += Math.pow(Math.log(e[i][0]), 2)))
              var o = (r * n[1] - n[0] * n[2]) / (r * n[3] - Math.pow(n[0], 2)),
                l = (n[2] - o * n[0]) / r,
                u = a(Math.exp(l), t.precision),
                c = a(o, t.precision),
                h = function (e) {
                  return [
                    a(e, t.precision),
                    a(a(u * Math.pow(e, c), t.precision), t.precision),
                  ]
                },
                p = e.map(function (e) {
                  return h(e[0])
                })
              return {
                points: p,
                predict: h,
                equation: [u, c],
                string: 'y = ' + u + 'x^' + c,
                r2: a(s(e, p), t.precision),
              }
            },
            polynomial: function (e, t) {
              for (
                var r = [],
                  i = [],
                  o = 0,
                  l = 0,
                  u = e.length,
                  c = t.order + 1,
                  h = 0;
                h < c;
                h++
              ) {
                for (var p = 0; p < u; p++)
                  null !== e[p][1] && (o += Math.pow(e[p][0], h) * e[p][1])
                r.push(o), (o = 0)
                for (var d = [], f = 0; f < c; f++) {
                  for (var m = 0; m < u; m++)
                    null !== e[m][1] && (l += Math.pow(e[m][0], h + f))
                  d.push(l), (l = 0)
                }
                i.push(d)
              }
              i.push(r)
              for (
                var g = (function (e, t) {
                    for (
                      var n = e, r = e.length - 1, s = [t], a = 0;
                      a < r;
                      a++
                    ) {
                      for (var i = a, o = a + 1; o < r; o++)
                        Math.abs(n[a][o]) > Math.abs(n[a][i]) && (i = o)
                      for (var l = a; l < r + 1; l++) {
                        var u = n[l][a]
                        ;(n[l][a] = n[l][i]), (n[l][i] = u)
                      }
                      for (var c = a + 1; c < r; c++)
                        for (var h = r; h >= a; h--)
                          n[h][c] -= (n[h][a] * n[a][c]) / n[a][a]
                    }
                    for (var p = r - 1; p >= 0; p--) {
                      for (var d = 0, f = p + 1; f < r; f++) d += n[f][p] * s[f]
                      s[p] = (n[r][p] - d) / n[p][p]
                    }
                    return s
                  })(i, c).map(function (e) {
                    return a(e, t.precision)
                  }),
                  y = function (e) {
                    return [
                      a(e, t.precision),
                      a(
                        g.reduce(function (t, n, r) {
                          return t + n * Math.pow(e, r)
                        }, 0),
                        t.precision,
                      ),
                    ]
                  },
                  b = e.map(function (e) {
                    return y(e[0])
                  }),
                  x = 'y = ',
                  w = g.length - 1;
                w >= 0;
                w--
              )
                x +=
                  w > 1
                    ? g[w] + 'x^' + w + ' + '
                    : 1 === w
                      ? g[w] + 'x + '
                      : g[w]
              return {
                string: x,
                points: b,
                predict: y,
                equation: [].concat(n(g)).reverse(),
                r2: a(s(e, b), t.precision),
              }
            },
          }
          e.exports = Object.keys(i).reduce(function (e, n) {
            return t(
              { _round: a },
              e,
              (function (e, t, n) {
                return (
                  t in e
                    ? Object.defineProperty(e, t, {
                        value: n,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                      })
                    : (e[t] = n),
                  e
                )
              })({}, n, function (e, s) {
                return i[n](e, t({}, r, s))
              }),
            )
          }, {})
        }),
          void 0 === (r = n.apply(t, [e])) || (e.exports = r)
      },
      391: (e, t, n) => {
        var r = n(180),
          s = n(181),
          a = n(31),
          i = n(67),
          o = n(833),
          l = n(717),
          u = n(801)
        ;(u.alea = r),
          (u.xor128 = s),
          (u.xorwow = a),
          (u.xorshift7 = i),
          (u.xor4096 = o),
          (u.tychei = l),
          (e.exports = u)
      },
      180: function (e, t, n) {
        var r
        !(function (e, s) {
          function a(e) {
            var t = this,
              n = (function () {
                var e = 4022871197
                return function (t) {
                  t = String(t)
                  for (var n = 0; n < t.length; n++) {
                    var r = 0.02519603282416938 * (e += t.charCodeAt(n))
                    ;(r -= e = r >>> 0),
                      (e = (r *= e) >>> 0),
                      (e += 4294967296 * (r -= e))
                  }
                  return 2.3283064365386963e-10 * (e >>> 0)
                }
              })()
            ;(t.next = function () {
              var e = 2091639 * t.s0 + 2.3283064365386963e-10 * t.c
              return (t.s0 = t.s1), (t.s1 = t.s2), (t.s2 = e - (t.c = 0 | e))
            }),
              (t.c = 1),
              (t.s0 = n(' ')),
              (t.s1 = n(' ')),
              (t.s2 = n(' ')),
              (t.s0 -= n(e)),
              t.s0 < 0 && (t.s0 += 1),
              (t.s1 -= n(e)),
              t.s1 < 0 && (t.s1 += 1),
              (t.s2 -= n(e)),
              t.s2 < 0 && (t.s2 += 1),
              (n = null)
          }
          function i(e, t) {
            return (t.c = e.c), (t.s0 = e.s0), (t.s1 = e.s1), (t.s2 = e.s2), t
          }
          function o(e, t) {
            var n = new a(e),
              r = t && t.state,
              s = n.next
            return (
              (s.int32 = function () {
                return (4294967296 * n.next()) | 0
              }),
              (s.double = function () {
                return s() + 11102230246251565e-32 * ((2097152 * s()) | 0)
              }),
              (s.quick = s),
              r &&
                ('object' == typeof r && i(r, n),
                (s.state = function () {
                  return i(n, {})
                })),
              s
            )
          }
          s && s.exports
            ? (s.exports = o)
            : n.amdD && n.amdO
              ? void 0 ===
                  (r = function () {
                    return o
                  }.call(t, n, t, s)) || (s.exports = r)
              : (this.alea = o)
        })(0, (e = n.nmd(e)), n.amdD)
      },
      717: function (e, t, n) {
        var r
        !(function (e, s) {
          function a(e) {
            var t = this,
              n = ''
            ;(t.next = function () {
              var e = t.b,
                n = t.c,
                r = t.d,
                s = t.a
              return (
                (e = (e << 25) ^ (e >>> 7) ^ n),
                (n = (n - r) | 0),
                (r = (r << 24) ^ (r >>> 8) ^ s),
                (s = (s - e) | 0),
                (t.b = e = (e << 20) ^ (e >>> 12) ^ n),
                (t.c = n = (n - r) | 0),
                (t.d = (r << 16) ^ (n >>> 16) ^ s),
                (t.a = (s - e) | 0)
              )
            }),
              (t.a = 0),
              (t.b = 0),
              (t.c = -1640531527),
              (t.d = 1367130551),
              e === Math.floor(e)
                ? ((t.a = (e / 4294967296) | 0), (t.b = 0 | e))
                : (n += e)
            for (var r = 0; r < n.length + 20; r++)
              (t.b ^= 0 | n.charCodeAt(r)), t.next()
          }
          function i(e, t) {
            return (t.a = e.a), (t.b = e.b), (t.c = e.c), (t.d = e.d), t
          }
          function o(e, t) {
            var n = new a(e),
              r = t && t.state,
              s = function () {
                return (n.next() >>> 0) / 4294967296
              }
            return (
              (s.double = function () {
                do {
                  var e =
                    ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) /
                    (1 << 21)
                } while (0 === e)
                return e
              }),
              (s.int32 = n.next),
              (s.quick = s),
              r &&
                ('object' == typeof r && i(r, n),
                (s.state = function () {
                  return i(n, {})
                })),
              s
            )
          }
          s && s.exports
            ? (s.exports = o)
            : n.amdD && n.amdO
              ? void 0 ===
                  (r = function () {
                    return o
                  }.call(t, n, t, s)) || (s.exports = r)
              : (this.tychei = o)
        })(0, (e = n.nmd(e)), n.amdD)
      },
      181: function (e, t, n) {
        var r
        !(function (e, s) {
          function a(e) {
            var t = this,
              n = ''
            ;(t.x = 0),
              (t.y = 0),
              (t.z = 0),
              (t.w = 0),
              (t.next = function () {
                var e = t.x ^ (t.x << 11)
                return (
                  (t.x = t.y),
                  (t.y = t.z),
                  (t.z = t.w),
                  (t.w ^= (t.w >>> 19) ^ e ^ (e >>> 8))
                )
              }),
              e === (0 | e) ? (t.x = e) : (n += e)
            for (var r = 0; r < n.length + 64; r++)
              (t.x ^= 0 | n.charCodeAt(r)), t.next()
          }
          function i(e, t) {
            return (t.x = e.x), (t.y = e.y), (t.z = e.z), (t.w = e.w), t
          }
          function o(e, t) {
            var n = new a(e),
              r = t && t.state,
              s = function () {
                return (n.next() >>> 0) / 4294967296
              }
            return (
              (s.double = function () {
                do {
                  var e =
                    ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) /
                    (1 << 21)
                } while (0 === e)
                return e
              }),
              (s.int32 = n.next),
              (s.quick = s),
              r &&
                ('object' == typeof r && i(r, n),
                (s.state = function () {
                  return i(n, {})
                })),
              s
            )
          }
          s && s.exports
            ? (s.exports = o)
            : n.amdD && n.amdO
              ? void 0 ===
                  (r = function () {
                    return o
                  }.call(t, n, t, s)) || (s.exports = r)
              : (this.xor128 = o)
        })(0, (e = n.nmd(e)), n.amdD)
      },
      833: function (e, t, n) {
        var r
        !(function (e, s) {
          function a(e) {
            var t = this
            ;(t.next = function () {
              var e,
                n,
                r = t.w,
                s = t.X,
                a = t.i
              return (
                (t.w = r = (r + 1640531527) | 0),
                (n = s[(a + 34) & 127]),
                (e = s[(a = (a + 1) & 127)]),
                (n ^= n << 13),
                (e ^= e << 17),
                (n ^= n >>> 15),
                (e ^= e >>> 12),
                (n = s[a] = n ^ e),
                (t.i = a),
                (n + (r ^ (r >>> 16))) | 0
              )
            }),
              (function (e, t) {
                var n,
                  r,
                  s,
                  a,
                  i,
                  o = [],
                  l = 128
                for (
                  t === (0 | t)
                    ? ((r = t), (t = null))
                    : ((t += '\0'), (r = 0), (l = Math.max(l, t.length))),
                    s = 0,
                    a = -32;
                  a < l;
                  ++a
                )
                  t && (r ^= t.charCodeAt((a + 32) % t.length)),
                    0 === a && (i = r),
                    (r ^= r << 10),
                    (r ^= r >>> 15),
                    (r ^= r << 4),
                    (r ^= r >>> 13),
                    a >= 0 &&
                      ((i = (i + 1640531527) | 0),
                      (s = 0 == (n = o[127 & a] ^= r + i) ? s + 1 : 0))
                for (
                  s >= 128 && (o[127 & ((t && t.length) || 0)] = -1),
                    s = 127,
                    a = 512;
                  a > 0;
                  --a
                )
                  (r = o[(s + 34) & 127]),
                    (n = o[(s = (s + 1) & 127)]),
                    (r ^= r << 13),
                    (n ^= n << 17),
                    (r ^= r >>> 15),
                    (n ^= n >>> 12),
                    (o[s] = r ^ n)
                ;(e.w = i), (e.X = o), (e.i = s)
              })(t, e)
          }
          function i(e, t) {
            return (t.i = e.i), (t.w = e.w), (t.X = e.X.slice()), t
          }
          function o(e, t) {
            null == e && (e = +new Date())
            var n = new a(e),
              r = t && t.state,
              s = function () {
                return (n.next() >>> 0) / 4294967296
              }
            return (
              (s.double = function () {
                do {
                  var e =
                    ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) /
                    (1 << 21)
                } while (0 === e)
                return e
              }),
              (s.int32 = n.next),
              (s.quick = s),
              r &&
                (r.X && i(r, n),
                (s.state = function () {
                  return i(n, {})
                })),
              s
            )
          }
          s && s.exports
            ? (s.exports = o)
            : n.amdD && n.amdO
              ? void 0 ===
                  (r = function () {
                    return o
                  }.call(t, n, t, s)) || (s.exports = r)
              : (this.xor4096 = o)
        })(0, (e = n.nmd(e)), n.amdD)
      },
      67: function (e, t, n) {
        var r
        !(function (e, s) {
          function a(e) {
            var t = this
            ;(t.next = function () {
              var e,
                n,
                r = t.x,
                s = t.i
              return (
                (e = r[s]),
                (n = (e ^= e >>> 7) ^ (e << 24)),
                (n ^= (e = r[(s + 1) & 7]) ^ (e >>> 10)),
                (n ^= (e = r[(s + 3) & 7]) ^ (e >>> 3)),
                (n ^= (e = r[(s + 4) & 7]) ^ (e << 7)),
                (e = r[(s + 7) & 7]),
                (n ^= (e ^= e << 13) ^ (e << 9)),
                (r[s] = n),
                (t.i = (s + 1) & 7),
                n
              )
            }),
              (function (e, t) {
                var n,
                  r = []
                if (t === (0 | t)) r[0] = t
                else
                  for (t = '' + t, n = 0; n < t.length; ++n)
                    r[7 & n] =
                      (r[7 & n] << 15) ^
                      ((t.charCodeAt(n) + r[(n + 1) & 7]) << 13)
                for (; r.length < 8; ) r.push(0)
                for (n = 0; n < 8 && 0 === r[n]; ++n);
                for (
                  8 == n ? (r[7] = -1) : r[n], e.x = r, e.i = 0, n = 256;
                  n > 0;
                  --n
                )
                  e.next()
              })(t, e)
          }
          function i(e, t) {
            return (t.x = e.x.slice()), (t.i = e.i), t
          }
          function o(e, t) {
            null == e && (e = +new Date())
            var n = new a(e),
              r = t && t.state,
              s = function () {
                return (n.next() >>> 0) / 4294967296
              }
            return (
              (s.double = function () {
                do {
                  var e =
                    ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) /
                    (1 << 21)
                } while (0 === e)
                return e
              }),
              (s.int32 = n.next),
              (s.quick = s),
              r &&
                (r.x && i(r, n),
                (s.state = function () {
                  return i(n, {})
                })),
              s
            )
          }
          s && s.exports
            ? (s.exports = o)
            : n.amdD && n.amdO
              ? void 0 ===
                  (r = function () {
                    return o
                  }.call(t, n, t, s)) || (s.exports = r)
              : (this.xorshift7 = o)
        })(0, (e = n.nmd(e)), n.amdD)
      },
      31: function (e, t, n) {
        var r
        !(function (e, s) {
          function a(e) {
            var t = this,
              n = ''
            ;(t.next = function () {
              var e = t.x ^ (t.x >>> 2)
              return (
                (t.x = t.y),
                (t.y = t.z),
                (t.z = t.w),
                (t.w = t.v),
                ((t.d = (t.d + 362437) | 0) +
                  (t.v = t.v ^ (t.v << 4) ^ e ^ (e << 1))) |
                  0
              )
            }),
              (t.x = 0),
              (t.y = 0),
              (t.z = 0),
              (t.w = 0),
              (t.v = 0),
              e === (0 | e) ? (t.x = e) : (n += e)
            for (var r = 0; r < n.length + 64; r++)
              (t.x ^= 0 | n.charCodeAt(r)),
                r == n.length && (t.d = (t.x << 10) ^ (t.x >>> 4)),
                t.next()
          }
          function i(e, t) {
            return (
              (t.x = e.x),
              (t.y = e.y),
              (t.z = e.z),
              (t.w = e.w),
              (t.v = e.v),
              (t.d = e.d),
              t
            )
          }
          function o(e, t) {
            var n = new a(e),
              r = t && t.state,
              s = function () {
                return (n.next() >>> 0) / 4294967296
              }
            return (
              (s.double = function () {
                do {
                  var e =
                    ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) /
                    (1 << 21)
                } while (0 === e)
                return e
              }),
              (s.int32 = n.next),
              (s.quick = s),
              r &&
                ('object' == typeof r && i(r, n),
                (s.state = function () {
                  return i(n, {})
                })),
              s
            )
          }
          s && s.exports
            ? (s.exports = o)
            : n.amdD && n.amdO
              ? void 0 ===
                  (r = function () {
                    return o
                  }.call(t, n, t, s)) || (s.exports = r)
              : (this.xorwow = o)
        })(0, (e = n.nmd(e)), n.amdD)
      },
      801: function (e, t, n) {
        var r
        !(function (s, a, i) {
          var o,
            l = 256,
            u = i.pow(l, 6),
            c = i.pow(2, 52),
            h = 2 * c,
            p = 255
          function d(e, t, n) {
            var r = [],
              p = y(
                g(
                  (t = 1 == t ? { entropy: !0 } : t || {}).entropy
                    ? [e, b(a)]
                    : null == e
                      ? (function () {
                          try {
                            var e
                            return (
                              o && (e = o.randomBytes)
                                ? (e = e(l))
                                : ((e = new Uint8Array(l)),
                                  (s.crypto || s.msCrypto).getRandomValues(e)),
                              b(e)
                            )
                          } catch (e) {
                            var t = s.navigator,
                              n = t && t.plugins
                            return [+new Date(), s, n, s.screen, b(a)]
                          }
                        })()
                      : e,
                  3,
                ),
                r,
              ),
              d = new f(r),
              x = function () {
                for (var e = d.g(6), t = u, n = 0; e < c; )
                  (e = (e + n) * l), (t *= l), (n = d.g(1))
                for (; e >= h; ) (e /= 2), (t /= 2), (n >>>= 1)
                return (e + n) / t
              }
            return (
              (x.int32 = function () {
                return 0 | d.g(4)
              }),
              (x.quick = function () {
                return d.g(4) / 4294967296
              }),
              (x.double = x),
              y(b(d.S), a),
              (
                t.pass ||
                n ||
                function (e, t, n, r) {
                  return (
                    r &&
                      (r.S && m(r, d),
                      (e.state = function () {
                        return m(d, {})
                      })),
                    n ? ((i.random = e), t) : e
                  )
                }
              )(x, p, 'global' in t ? t.global : this == i, t.state)
            )
          }
          function f(e) {
            var t,
              n = e.length,
              r = this,
              s = 0,
              a = (r.i = r.j = 0),
              i = (r.S = [])
            for (n || (e = [n++]); s < l; ) i[s] = s++
            for (s = 0; s < l; s++)
              (i[s] = i[(a = p & (a + e[s % n] + (t = i[s])))]), (i[a] = t)
            ;(r.g = function (e) {
              for (var t, n = 0, s = r.i, a = r.j, i = r.S; e--; )
                (t = i[(s = p & (s + 1))]),
                  (n =
                    n * l + i[p & ((i[s] = i[(a = p & (a + t))]) + (i[a] = t))])
              return (r.i = s), (r.j = a), n
            })(l)
          }
          function m(e, t) {
            return (t.i = e.i), (t.j = e.j), (t.S = e.S.slice()), t
          }
          function g(e, t) {
            var n,
              r = [],
              s = typeof e
            if (t && 'object' == s)
              for (n in e)
                try {
                  r.push(g(e[n], t - 1))
                } catch (e) {}
            return r.length ? r : 'string' == s ? e : e + '\0'
          }
          function y(e, t) {
            for (var n, r = e + '', s = 0; s < r.length; )
              t[p & s] = p & ((n ^= 19 * t[p & s]) + r.charCodeAt(s++))
            return b(t)
          }
          function b(e) {
            return String.fromCharCode.apply(0, e)
          }
          if ((y(i.random(), a), e.exports)) {
            e.exports = d
            try {
              o = n(234)
            } catch (e) {}
          } else
            void 0 ===
              (r = function () {
                return d
              }.call(t, n, t, e)) || (e.exports = r)
        })('undefined' != typeof self ? self : this, [], Math)
      },
      190: () => {
        ;(window.requestAnimFrame =
          window.requestAnimationFrame ||
          window.webkitRequestAnimationFrame ||
          window.mozRequestAnimationFrame ||
          window.oRequestAnimationFrame ||
          window.msRequestAnimationFrame ||
          function (e, t) {
            return window.setTimeout(e, 1e3 / 60)
          }),
          (window.cancelRequestAnimFrame =
            window.cancelCancelRequestAnimationFrame ||
            window.webkitCancelRequestAnimationFrame ||
            window.mozCancelRequestAnimationFrame ||
            window.oCancelRequestAnimationFrame ||
            window.msCancelRequestAnimationFrame ||
            window.clearTimeout)
      },
      817: () => {},
      590: () => {},
      530: () => {},
      108: () => {},
      551: () => {},
      234: () => {},
    },
    t = {}
  function n(r) {
    var s = t[r]
    if (void 0 !== s) return s.exports
    var a = (t[r] = { id: r, loaded: !1, exports: {} })
    return e[r].call(a.exports, a, a.exports, n), (a.loaded = !0), a.exports
  }
  ;(n.amdD = function () {
    throw new Error('define cannot be used indirect')
  }),
    (n.amdO = {}),
    (n.n = (e) => {
      var t = e && e.__esModule ? () => e.default : () => e
      return n.d(t, { a: t }), t
    }),
    (n.d = (e, t) => {
      for (var r in t)
        n.o(t, r) &&
          !n.o(e, r) &&
          Object.defineProperty(e, r, { enumerable: !0, get: t[r] })
    }),
    (n.g = (function () {
      if ('object' == typeof globalThis) return globalThis
      try {
        return this || new Function('return this')()
      } catch (e) {
        if ('object' == typeof window) return window
      }
    })()),
    (n.o = (e, t) => Object.prototype.hasOwnProperty.call(e, t)),
    (n.r = (e) => {
      'undefined' != typeof Symbol &&
        Symbol.toStringTag &&
        Object.defineProperty(e, Symbol.toStringTag, { value: 'Module' }),
        Object.defineProperty(e, '__esModule', { value: !0 })
    }),
    (n.nmd = (e) => ((e.paths = []), e.children || (e.children = []), e))
  var r = {}
  ;(() => {
    'use strict'
    n.d(r, { default: () => eB })
    var e = {}
    n.r(e),
      n.d(e, {
        browserFiles: () => ei,
        browserHTTPRequest: () => ui,
        concatenateArrayBuffers: () => ra,
        copyModel: () => Ua,
        decodeWeights: () => Qs,
        encodeWeights: () => Js,
        fromMemory: () => di,
        fromMemorySync: () => fi,
        getLoadHandlers: () => ma,
        getModelArtifactsForJSON: () => oa,
        getModelArtifactsForJSONSync: () => ia,
        getModelArtifactsInfoForJSON: () => la,
        getSaveHandlers: () => fa,
        getWeightSpecs: () => ua,
        http: () => li,
        isHTTPScheme: () => ii,
        listModels: () => Wa,
        loadWeights: () => ri,
        moveModel: () => Ga,
        registerLoadRouter: () => da,
        registerSaveRouter: () => pa,
        removeModel: () => Va,
        weightsLoaderFactory: () => si,
        withSaveHandler: () => mi,
        withSaveHandlerSync: () => gi,
      })
    var t = {}
    n.r(t),
      n.d(t, {
        assertParamsValid: () => Si,
        computeFlatOffset: () => zi,
        computeOutShape: () => Ci,
        getNormalizedAxes: () => Ai,
        isSliceContinous: () => Li,
        maskToAxes: () => Ti,
        parseSliceParams: () => Pi,
        sliceInfo: () => Bi,
        startForAxis: () => Oi,
        startIndicesWithElidedDims: () => _i,
        stopForAxis: () => Mi,
        stopIndicesWithElidedDims: () => Fi,
        stridesForAxis: () => Di,
        stridesWithElidedDims: () => $i,
      })
    var s = {}
    n.r(s),
      n.d(s, { conv2d: () => bh, depthwiseConv2d: () => vh, matMul: () => kh })
    var a = {}
    n.r(a),
      n.d(a, {
        collectGatherOpShapeInfo: () => Md,
        computeOutShape: () => Od,
        segOpComputeOptimalWindowSize: () => Dd,
      })
    var i = {}
    n.r(i),
      n.d(i, {
        ERF_A1: () => Jp,
        ERF_A2: () => Qp,
        ERF_A3: () => ed,
        ERF_A4: () => td,
        ERF_A5: () => nd,
        ERF_P: () => Zp,
        PARALLELIZE_THRESHOLD: () => Bp,
        RowPartitionType: () => Op,
        SELU_SCALE: () => Yp,
        SELU_SCALEALPHA: () => Xp,
        applyActivation: () => gh,
        assertAndGetBroadcastShape: () => xi,
        assertAxesAreInnerMostDims: () => Rl,
        assertParamsConsistent: () => Fp,
        assignToTypedArray: () => ld,
        axesAreInnerMostDims: () => Tl,
        calculateShapes: () => ah,
        checkEinsumDimSizes: () => yd,
        checkPadOnDimRoundingMode: () => $o,
        combineLocations: () => Cl,
        combineRaggedTensorToTensorShapes: () => Mp,
        complexWithEvenIndex: () => ad,
        complexWithOddIndex: () => id,
        computeConv2DInfo: () => bo,
        computeConv3DInfo: () => xo,
        computeDefaultPad: () => wo,
        computeDilation2DInfo: () => mo,
        computeOptimalWindowSize: () => Wp,
        computeOutAndReduceShapes: () => $l,
        computeOutShape: () => Dp,
        computePool2DInfo: () => go,
        computePool3DInfo: () => yo,
        convertConv2DDataFormat: () => Co,
        decodeEinsumEquation: () => md,
        eitherStridesOrDilationsAreOne: () => To,
        expandShapeToKeepDim: () => El,
        exponent: () => cd,
        exponents: () => ud,
        fromStringArrayToUint8: () => zd,
        fromUint8ToStringArray: () => Ld,
        getAxesPermutation: () => Al,
        getBroadcastDims: () => yi,
        getComplexWithIndex: () => od,
        getEinsumComputePath: () => bd,
        getEinsumPermutation: () => gd,
        getFusedBiasGradient: () => mh,
        getFusedDyActivation: () => fh,
        getImageCenter: () => Vp,
        getInnerMostAxes: () => Fl,
        getPermuted: () => Gp,
        getRaggedRank: () => zp,
        getReductionAxes: () => bi,
        getReshaped: () => Up,
        getReshapedPermuted: () => Hp,
        getRowPartitionTypesHelper: () => Lp,
        getSliceBeginCoords: () => jp,
        getSliceSize: () => qp,
        getSparseFillEmptyRowsIndicesDenseShapeMismatch: () => kd,
        getSparseFillEmptyRowsNegativeIndexErrorMessage: () => Id,
        getSparseFillEmptyRowsOutOfRangeIndexErrorMessage: () => Nd,
        getSparseReshapeEmptyTensorZeroOutputDimErrorMessage: () => Cd,
        getSparseReshapeInputOutputMismatchErrorMessage: () => Ed,
        getSparseReshapeInputOutputMultipleErrorMessage: () => $d,
        getSparseReshapeMultipleNegativeOneOutputDimErrorMessage: () => Sd,
        getSparseReshapeNegativeOutputDimErrorMessage: () => Td,
        getSparseSegmentReductionIndicesOutOfRangeErrorMessage: () => Fd,
        getSparseSegmentReductionNegativeSegmentIdsErrorMessage: () => Rd,
        getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage: () => Ad,
        getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage: () => _d,
        getUndoAxesPermutation: () => _l,
        isIdentityPermutation: () => xd,
        log: () => Rr,
        mergeRealAndImagArrays: () => rd,
        prepareAndValidate: () => Kp,
        prepareSplitSize: () => vd,
        segment_util: () => a,
        shouldFuse: () => yh,
        slice_util: () => t,
        splitRealAndImagArrays: () => sd,
        tupleValuesAreOne: () => So,
        upcastType: () => Ss,
        validateDefaultValueShape: () => Pp,
        validateInput: () => sh,
        validateUpdateShape: () => rh,
        warn: () => Er,
      })
    var o = {}
    n.r(o), n.d(o, { json: () => tv })
    var l = {}
    n.r(l), n.d(l, { json: () => nv })
    var u = {}
    n.r(u), n.d(u, { json: () => rv })
    var c = {}
    n.r(c), n.d(c, { json: () => sv })
    var h = {}
    n.r(h), n.d(h, { json: () => av })
    var p = {}
    n.r(p), n.d(p, { json: () => iv })
    var d = {}
    n.r(d), n.d(d, { json: () => ov })
    var f = {}
    n.r(f), n.d(f, { json: () => lv })
    var m = {}
    n.r(m), n.d(m, { json: () => uv })
    var g = {}
    n.r(g), n.d(g, { json: () => cv })
    var y = {}
    n.r(y), n.d(y, { json: () => hv })
    var b = {}
    n.r(b), n.d(b, { json: () => pv })
    var x = {}
    n.r(x), n.d(x, { json: () => dv })
    var w = {}
    n.r(w), n.d(w, { json: () => fv })
    var v = {}
    n.r(v), n.d(v, { json: () => mv })
    var k = {}
    n.r(k), n.d(k, { json: () => gv })
    var I = {}
    n.r(I), n.d(I, { json: () => yv })
    var N = {}
    n.r(N), n.d(N, { json: () => bv })
    var S = {}
    n.r(S), n.d(S, { json: () => xv })
    var T = {}
    n.r(T),
      n.d(T, {
        OP_SCOPE_SUFFIX: () => Hs,
        abs: () => eo,
        acos: () => to,
        acosh: () => no,
        add: () => ro,
        addN: () => so,
        all: () => ao,
        any: () => io,
        argMax: () => oo,
        argMin: () => lo,
        asin: () => uo,
        asinh: () => co,
        atan: () => ho,
        atan2: () => po,
        atanh: () => fo,
        avgPool: () => Ro,
        avgPool3d: () => Ao,
        basicLSTMCell: () => zo,
        batchNorm: () => Bo,
        batchNorm2d: () => Wo,
        batchNorm3d: () => Vo,
        batchNorm4d: () => Uo,
        batchToSpaceND: () => Po,
        bincount: () => Go,
        booleanMaskAsync: () => eh,
        broadcastArgs: () => Ho,
        broadcastTo: () => jo,
        buffer: () => qa,
        cast: () => Ka,
        ceil: () => qo,
        clipByValue: () => Xo,
        clone: () => Xa,
        complex: () => qs,
        concat: () => _o,
        concat1d: () => Yo,
        concat2d: () => Zo,
        concat3d: () => Jo,
        concat4d: () => Qo,
        conv1d: () => tl,
        conv2d: () => el,
        conv2dTranspose: () => rl,
        conv3d: () => sl,
        conv3dTranspose: () => il,
        cos: () => ol,
        cosh: () => ll,
        cosineWindow: () => hh,
        cumprod: () => ul,
        cumsum: () => cl,
        denseBincount: () => hl,
        depthToSpace: () => pl,
        depthwiseConv2d: () => dl,
        diag: () => fl,
        dilation2d: () => ml,
        div: () => yl,
        divNoNan: () => vl,
        dot: () => kl,
        dropout: () => uh,
        einsum: () => Il,
        elu: () => Nl,
        enclosingPowerOfTwo: () => ch,
        equal: () => bl,
        erf: () => Sl,
        euclideanNorm: () => Vl,
        exp: () => Ul,
        expandDims: () => Gl,
        expm1: () => Hl,
        eye: () => ql,
        fft: () => Ec,
        fill: () => Ko,
        floor: () => Kl,
        floorDiv: () => gl,
        fused: () => s,
        gather: () => Xl,
        gatherND: () => lh,
        greater: () => Yl,
        greaterEqual: () => Zl,
        ifft: () => Rc,
        imag: () => Jl,
        image: () => yp,
        inTopKAsync: () => ph,
        irfft: () => Ac,
        isFinite: () => Ql,
        isInf: () => eu,
        isNaN: () => tu,
        leakyRelu: () => nu,
        less: () => ru,
        lessEqual: () => su,
        linalg: () => bp,
        linspace: () => au,
        localResponseNormalization: () => iu,
        log: () => ou,
        log1p: () => lu,
        logSigmoid: () => hu,
        logSoftmax: () => du,
        logSumExp: () => fu,
        logicalAnd: () => mu,
        logicalNot: () => gu,
        logicalOr: () => yu,
        logicalXor: () => bu,
        losses: () => xp,
        lowerBound: () => vu,
        matMul: () => Fo,
        max: () => Dl,
        maxPool: () => ku,
        maxPool3d: () => Iu,
        maxPoolWithArgmax: () => Nu,
        maximum: () => Su,
        mean: () => Tu,
        meshgrid: () => Eu,
        min: () => Ol,
        minimum: () => Ru,
        mirrorPad: () => Au,
        mod: () => _u,
        moments: () => Fu,
        movingAverage: () => nh,
        mul: () => Do,
        multiRNNCell: () => Du,
        multinomial: () => Ou,
        neg: () => uu,
        norm: () => Wl,
        notEqual: () => Mu,
        oneHot: () => Lu,
        ones: () => $u,
        onesLike: () => zu,
        op: () => js,
        outerProduct: () => Pu,
        pad: () => Bu,
        pad1d: () => Wu,
        pad2d: () => Vu,
        pad3d: () => Uu,
        pad4d: () => Gu,
        pool: () => ju,
        pow: () => Ml,
        prelu: () => qu,
        print: () => Ya,
        prod: () => Ku,
        raggedGather: () => Xu,
        raggedTensorToTensor: () => Yu,
        rand: () => Zu,
        randomGamma: () => nc,
        randomNormal: () => rc,
        randomStandardNormal: () => sc,
        randomUniform: () => ac,
        range: () => ic,
        real: () => oc,
        reciprocal: () => lc,
        relu: () => uc,
        relu6: () => cc,
        reshape: () => Eo,
        reverse: () => hc,
        reverse1d: () => pc,
        reverse2d: () => dc,
        reverse3d: () => fc,
        reverse4d: () => mc,
        rfft: () => Fc,
        round: () => gc,
        rsqrt: () => yc,
        scalar: () => Ji,
        scatterND: () => ih,
        searchSorted: () => wu,
        selu: () => bc,
        separableConv2d: () => xc,
        setdiff1dAsync: () => wc,
        sigmoid: () => Oo,
        sign: () => vc,
        signal: () => gp,
        sin: () => kc,
        sinh: () => Ic,
        slice: () => Mo,
        slice1d: () => Nc,
        slice2d: () => Sc,
        slice3d: () => Tc,
        slice4d: () => Cc,
        softmax: () => $c,
        softplus: () => cu,
        spaceToBatchND: () => Hu,
        sparse: () => wp,
        sparseToDense: () => oh,
        spectral: () => mp,
        split: () => _c,
        sqrt: () => Ll,
        square: () => zl,
        squaredDifference: () => Dc,
        squeeze: () => Oc,
        stack: () => Mc,
        step: () => Lc,
        stridedSlice: () => zc,
        string: () => vp,
        sub: () => pu,
        sum: () => Pl,
        tan: () => Pc,
        tanh: () => Lo,
        tensor: () => Xs,
        tensor1d: () => Bc,
        tensor2d: () => Wc,
        tensor3d: () => wi,
        tensor4d: () => Vc,
        tensor5d: () => Uc,
        tensor6d: () => Gc,
        tile: () => jl,
        topk: () => Hc,
        transpose: () => th,
        truncatedNormal: () => jc,
        unique: () => qc,
        unsortedSegmentSum: () => Kc,
        unstack: () => Xc,
        upperBound: () => Yc,
        variable: () => Zc,
        where: () => xl,
        whereAsync: () => Qc,
        zeros: () => Cu,
        zerosLike: () => wl,
      })
    var C = {}
    n.r(C),
      n.d(C, {
        mx: () => dI,
        XI: () => aN,
        Nk: () => iN,
        ct: () => lI,
        YG: () => uN,
        hH: () => mN,
        z3: () => JN,
        sG: () => uS,
        uM: () => fS,
        vS: () => AS,
        qB: () => PS,
        GG: () => WS,
        lg: () => jS,
        rq: () => US,
        cu: () => aT,
        WR: () => nT,
        GE: () => lT,
        px: () => cT,
        jC: () => ST,
        He: () => $T,
        hE: () => zT,
        BF: () => GN,
        Dk: () => KT,
        cl: () => nC,
        _B: () => mC,
        ub: () => bC,
        Ku: () => NC,
        qy: () => TC,
        Zy: () => zC,
        bu: () => WC,
        zv: () => Qk,
        dH: () => kI,
        HS: () => tN,
        yH: () => o$,
        l3: () => u$,
        z9: () => h$,
        x6: () => g$,
        eW: () => S$,
        GK: () => $$,
        SP: () => A$,
        f6: () => F$,
        dl: () => wS,
        Dw: () => z$,
        xT: () => V$,
        _X: () => EI,
        wz: () => X$,
      })
    class $ {
      constructor(e, t) {
        ;(this.backend = e),
          (this.dataMover = t),
          (this.data = new WeakMap()),
          (this.dataIdsCount = 0)
      }
      get(e) {
        return (
          this.data.has(e) || this.dataMover.moveData(this.backend, e),
          this.data.get(e)
        )
      }
      set(e, t) {
        this.dataIdsCount++, this.data.set(e, t)
      }
      has(e) {
        return this.data.has(e)
      }
      delete(e) {
        return this.dataIdsCount--, this.data.delete(e)
      }
      numDataIds() {
        return this.dataIdsCount
      }
    }
    class E {
      refCount(e) {
        return R('refCount')
      }
      incRef(e) {
        return R('incRef')
      }
      timerAvailable() {
        return !0
      }
      time(e) {
        return R('time')
      }
      read(e) {
        return R('read')
      }
      readSync(e) {
        return R('readSync')
      }
      readToGPU(e, t) {
        return R('readToGPU')
      }
      numDataIds() {
        return R('numDataIds')
      }
      disposeData(e, t) {
        return R('disposeData')
      }
      write(e, t, n) {
        return R('write')
      }
      move(e, t, n, r, s) {
        return R('move')
      }
      memory() {
        return R('memory')
      }
      floatPrecision() {
        return R('floatPrecision')
      }
      epsilon() {
        return 32 === this.floatPrecision() ? 1e-7 : 1e-4
      }
      dispose() {
        return R('dispose')
      }
    }
    function R(e) {
      throw new Error(
        `'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`,
      )
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function A(e) {
      let t = e.length,
        n = 0
      for (; t > 0; ) (n = (Math.random() * t) | 0), t--, D(e, t, n)
    }
    function _(e, t, n) {
      return Math.max(e, Math.min(t, n))
    }
    function F(e) {
      return e % 2 == 0 ? e : e + 1
    }
    function D(e, t, n) {
      const r = e[t]
      ;(e[t] = e[n]), (e[n] = r)
    }
    function O(e, t) {
      if (!e) throw new Error('string' == typeof t ? t : t())
    }
    function M(e, t, n = '') {
      O(B(e, t), () => n + ` Shapes ${e} and ${t} must match`)
    }
    function L(e) {
      O(
        null != e,
        () => 'The input to the tensor constructor must be a non-null value.',
      )
    }
    function z(e, t = [], n = !1) {
      if ((null == t && (t = []), Array.isArray(e) || (Z(e) && !n)))
        for (let r = 0; r < e.length; ++r) z(e[r], t, n)
      else t.push(e)
      return t
    }
    function P(e) {
      if (0 === e.length) return 1
      let t = e[0]
      for (let n = 1; n < e.length; n++) t *= e[n]
      return t
    }
    function B(e, t) {
      if (e === t) return !0
      if (null == e || null == t) return !1
      if (e.length !== t.length) return !1
      for (let n = 0; n < e.length; n++) if (e[n] !== t[n]) return !1
      return !0
    }
    function W(e) {
      return e % 1 == 0
    }
    function V(e) {
      const t = Math.ceil(Math.sqrt(e))
      return [t, Math.ceil(e / t)]
    }
    function U(e, t) {
      return t <= e.length ? e : e + ' '.repeat(t - e.length)
    }
    function G(e, t = (e) => 0, n, r = setTimeout) {
      return new Promise((s, a) => {
        let i = 0
        const o = () => {
          if (e()) return void s()
          i++
          const l = t(i)
          null != n && i >= n ? a() : r(o, l)
        }
        o()
      })
    }
    function H(e, t) {
      let n = 1,
        r = -1
      for (let t = 0; t < e.length; ++t)
        if (e[t] >= 0) n *= e[t]
        else if (-1 === e[t]) {
          if (-1 !== r)
            throw Error(
              `Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${t}`,
            )
          r = t
        } else if (e[t] < 0)
          throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`)
      if (-1 === r) {
        if (t > 0 && t !== n)
          throw Error(`Size(${t}) must match the product of shape ${e}`)
        return e
      }
      if (0 === n)
        throw Error(
          `Cannot infer the missing size in [${e}] when there are 0 elements`,
        )
      if (t % n != 0)
        throw Error(
          `The implicit shape can't be a fractional number. Got ${t} / ${n}`,
        )
      const s = e.slice()
      return (s[r] = t / n), s
    }
    function j(e, t) {
      const n = t.length
      return (
        O(
          (e = null == e ? t.map((e, t) => t) : [].concat(e)).every(
            (e) => e >= -n && e < n,
          ),
          () =>
            `All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`,
        ),
        O(
          e.every((e) => W(e)),
          () => `All values in axis param must be integers but got axis ${e}`,
        ),
        e.map((e) => (e < 0 ? n + e : e))
      )
    }
    function q(e, t) {
      const n = [],
        r = [],
        s = null != t && Array.isArray(t) && 0 === t.length,
        a = null == t || s ? null : j(t, e).sort()
      let i = 0
      for (let t = 0; t < e.length; ++t) {
        if (null != a) {
          if (a[i] === t && 1 !== e[t])
            throw new Error(
              `Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`,
            )
          ;(null == a[i] || a[i] > t) &&
            1 === e[t] &&
            (n.push(e[t]), r.push(t)),
            a[i] <= t && i++
        }
        1 !== e[t] && (n.push(e[t]), r.push(t))
      }
      return { newShape: n, keptDims: r }
    }
    function K(e, t) {
      let n = null
      if (null == e || 'float32' === e) n = new Float32Array(t)
      else if ('int32' === e) n = new Int32Array(t)
      else {
        if ('bool' !== e) throw new Error(`Unknown data type ${e}`)
        n = new Uint8Array(t)
      }
      return n
    }
    function X(e, t) {
      let n = null
      if (null == e || 'float32' === e) n = new Float32Array(t)
      else if ('int32' === e) n = new Int32Array(t)
      else if ('bool' === e) n = new Uint8Array(t)
      else {
        if ('string' !== e) throw new Error(`Unknown data type ${e}`)
        n = new Array(t)
      }
      return n
    }
    function Y(e, t) {
      return !(
        'complex64' === t ||
        ('float32' === t && 'complex64' !== e) ||
        ('int32' === t && 'float32' !== e && 'complex64' !== e) ||
        ('bool' === t && 'bool' === e)
      )
    }
    function Z(e) {
      return (
        e instanceof Float32Array ||
        e instanceof Int32Array ||
        e instanceof Uint8Array ||
        e instanceof Uint8ClampedArray
      )
    }
    function J(e) {
      if ('float32' === e || 'int32' === e) return 4
      if ('complex64' === e) return 8
      if ('bool' === e) return 1
      throw new Error(`Unknown dtype ${e}`)
    }
    function Q(e) {
      return 'string' == typeof e || e instanceof String
    }
    function ee(e) {
      return 'number' == typeof e
    }
    function te(e) {
      return Array.isArray(e)
        ? te(e[0])
        : e instanceof Float32Array
          ? 'float32'
          : e instanceof Int32Array ||
              e instanceof Uint8Array ||
              e instanceof Uint8ClampedArray
            ? 'int32'
            : ee(e)
              ? 'float32'
              : Q(e)
                ? 'string'
                : 'boolean' == typeof e
                  ? 'bool'
                  : 'float32'
    }
    function ne(e) {
      return !!(e && e.constructor && e.call && e.apply)
    }
    function re(e, t) {
      for (let n = t; n < e; ++n) if (e % n == 0) return n
      return e
    }
    function se(e) {
      const t = e.length
      if (t < 2) return []
      const n = new Array(t - 1)
      n[t - 2] = e[t - 1]
      for (let r = t - 3; r >= 0; --r) n[r] = n[r + 1] * e[r + 1]
      return n
    }
    function ae(e, t, n, r = !1) {
      const s = new Array()
      if (1 === t.length) {
        const a = t[0] * (r ? 2 : 1)
        for (let t = 0; t < a; t++) s[t] = n[e + t]
      } else {
        const a = t[0],
          i = t.slice(1),
          o = i.reduce((e, t) => e * t) * (r ? 2 : 1)
        for (let t = 0; t < a; t++) s[t] = ae(e + t * o, i, n, r)
      }
      return s
    }
    function ie(e, t, n = !1) {
      if (0 === e.length) return t[0]
      const r = e.reduce((e, t) => e * t) * (n ? 2 : 1)
      if (0 === r) return []
      if (r !== t.length)
        throw new Error(
          `[${e}] does not match the input size ${t.length}${n ? ' for a complex tensor' : ''}.`,
        )
      return ae(0, e, t, n)
    }
    function oe(e, t) {
      const n = le(e, t)
      for (let e = 0; e < n.length; e++) n[e] = 1
      return n
    }
    function le(e, t) {
      if (null == t || 'float32' === t || 'complex64' === t)
        return new Float32Array(e)
      if ('int32' === t) return new Int32Array(e)
      if ('bool' === t) return new Uint8Array(e)
      throw new Error(`Unknown data type ${t}`)
    }
    function ue(e, t) {
      const n = e.reduce((e, t) => e * t, 1)
      if (null == t || 'float32' === t) return ie(e, new Float32Array(n))
      if ('int32' === t) return ie(e, new Int32Array(n))
      if ('bool' === t) return ie(e, new Uint8Array(n))
      throw new Error(`Unknown data type ${t}`)
    }
    function ce(e) {
      e.forEach((t) => {
        O(
          Number.isInteger(t) && t >= 0,
          () =>
            `Tensor must have a shape comprised of positive integers but got shape [${e}].`,
        )
      })
    }
    function he(e, t, n) {
      if (0 === t) return 0
      if (1 === t) return e[0]
      let r = e[e.length - 1]
      for (let t = 0; t < e.length - 1; ++t) r += n[t] * e[t]
      return r
    }
    function pe(e, t, n) {
      if (0 === t) return []
      if (1 === t) return [e]
      const r = new Array(t)
      for (let t = 0; t < r.length - 1; ++t)
        (r[t] = Math.floor(e / n[t])), (e -= r[t] * n[t])
      return (r[r.length - 1] = e), r
    }
    function de(e) {
      return e && e.then && 'function' == typeof e.then
    }
    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const fe = 'tfjsflags'
    class me {
      constructor(e) {
        ;(this.global = e),
          (this.flags = {}),
          (this.flagRegistry = {}),
          (this.urlFlags = {}),
          (this.getQueryParams = ge),
          this.populateURLFlags()
      }
      setPlatform(e, t) {
        null != this.platform &&
          (ye().getBool('IS_TEST') ||
            ye().getBool('PROD') ||
            console.warn(
              `Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`,
            )),
          (this.platformName = e),
          (this.platform = t)
      }
      registerFlag(e, t, n) {
        if (
          ((this.flagRegistry[e] = { evaluationFn: t, setHook: n }),
          null != this.urlFlags[e])
        ) {
          const t = this.urlFlags[e]
          ye().getBool('IS_TEST') ||
            ye().getBool('PROD') ||
            console.warn(`Setting feature override from URL ${e}: ${t}.`),
            this.set(e, t)
        }
      }
      async getAsync(e) {
        return (
          e in this.flags || (this.flags[e] = await this.evaluateFlag(e)),
          this.flags[e]
        )
      }
      get(e) {
        if (e in this.flags) return this.flags[e]
        const t = this.evaluateFlag(e)
        if (de(t))
          throw new Error(
            `Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`,
          )
        return (this.flags[e] = t), this.flags[e]
      }
      getNumber(e) {
        return this.get(e)
      }
      getBool(e) {
        return this.get(e)
      }
      getFlags() {
        return this.flags
      }
      get features() {
        return this.flags
      }
      set(e, t) {
        if (null == this.flagRegistry[e])
          throw new Error(`Cannot set flag ${e} as it has not been registered.`)
        ;(this.flags[e] = t),
          null != this.flagRegistry[e].setHook &&
            this.flagRegistry[e].setHook(t)
      }
      evaluateFlag(e) {
        if (null == this.flagRegistry[e])
          throw new Error(
            `Cannot evaluate flag '${e}': no evaluation function found.`,
          )
        return this.flagRegistry[e].evaluationFn()
      }
      setFlags(e) {
        this.flags = Object.assign({}, e)
      }
      reset() {
        ;(this.flags = {}), (this.urlFlags = {}), this.populateURLFlags()
      }
      populateURLFlags() {
        if (
          void 0 === this.global ||
          void 0 === this.global.location ||
          void 0 === this.global.location.search
        )
          return
        const e = this.getQueryParams(this.global.location.search)
        fe in e &&
          e[fe].split(',').forEach((e) => {
            const [t, n] = e.split(':')
            this.urlFlags[t] = (function (e, t) {
              if ('true' === (t = t.toLowerCase()) || 'false' === t)
                return 'true' === t
              if ('' + +t === t) return +t
              throw new Error(
                `Could not parse value flag value ${t} for flag ${e}.`,
              )
            })(t, n)
          })
      }
    }
    function ge(e) {
      const t = {}
      return (
        e.replace(
          /[?&]([^=?&]+)(?:=([^&]*))?/g,
          (e, ...n) => (
            (function (e, t, n) {
              e[decodeURIComponent(t)] = decodeURIComponent(n || '')
            })(t, n[0], n[1]),
            n.join('=')
          ),
        ),
        t
      )
    }
    function ye() {
      return xe
    }
    let be,
      xe = null
    function we() {
      if (null == be) {
        let e
        if ('undefined' != typeof window) e = window
        else if (void 0 !== n.g) e = n.g
        else if ('undefined' != typeof process) e = process
        else {
          if ('undefined' == typeof self)
            throw new Error('Could not find a global object')
          e = self
        }
        be = e
      }
      return be
    }
    function ve(e, t) {
      const n = (function () {
        const e = we()
        return null == e._tfGlobals && (e._tfGlobals = new Map()), e._tfGlobals
      })()
      if (n.has(e)) return n.get(e)
      {
        const r = t()
        return n.set(e, r), n.get(e)
      }
    }
    const ke = 'Abs',
      Ie = 'Acos',
      Ne = 'Acosh',
      Se = 'Add',
      Te = 'AddN',
      Ce = 'All',
      $e = 'Any',
      Ee = 'ArgMax',
      Re = 'ArgMin',
      Ae = 'Asin',
      _e = 'Asinh',
      Fe = 'Atan',
      De = 'Atanh',
      Oe = 'Atan2',
      Me = 'AvgPool',
      Le = 'AvgPoolGrad',
      ze = 'AvgPool3D',
      Pe = 'AvgPool3DGrad',
      Be = 'BatchMatMul',
      We = 'BatchToSpaceND',
      Ve = 'Bincount',
      Ue = 'BroadcastArgs',
      Ge = 'Cast',
      He = 'Ceil',
      je = 'ClipByValue',
      qe = 'Complex',
      Ke = 'ComplexAbs',
      Xe = 'Concat',
      Ye = 'Conv2D',
      Ze = 'Conv2DBackpropFilter',
      Je = 'Conv2DBackpropInput',
      Qe = 'Conv3D',
      et = 'Conv3DBackpropFilterV2',
      tt = 'Conv3DBackpropInputV2',
      nt = 'Cos',
      rt = 'Cosh',
      st = 'Cumprod',
      at = 'Cumsum',
      it = 'CropAndResize',
      ot = 'DenseBincount',
      lt = 'DepthToSpace',
      ut = 'DepthwiseConv2dNative',
      ct = 'DepthwiseConv2dNativeBackpropFilter',
      ht = 'DepthwiseConv2dNativeBackpropInput',
      pt = 'Diag',
      dt = 'Dilation2D',
      ft = 'Dilation2DBackpropInput',
      mt = 'Dilation2DBackpropFilter',
      gt = 'RealDiv',
      yt = 'Einsum',
      bt = 'Elu',
      xt = 'EluGrad',
      wt = 'Erf',
      vt = 'Equal',
      kt = 'Exp',
      It = 'ExpandDims',
      Nt = 'Expm1',
      St = 'FFT',
      Tt = 'Fill',
      Ct = 'FlipLeftRight',
      $t = 'Floor',
      Et = 'FloorDiv',
      Rt = 'FusedBatchNorm',
      At = 'GatherV2',
      _t = 'GatherNd',
      Ft = 'Greater',
      Dt = 'GreaterEqual',
      Ot = 'Identity',
      Mt = 'IFFT',
      Lt = 'Imag',
      zt = 'IsFinite',
      Pt = 'IsInf',
      Bt = 'IsNan',
      Wt = 'LeakyRelu',
      Vt = 'Less',
      Ut = 'LessEqual',
      Gt = 'LinSpace',
      Ht = 'Log',
      jt = 'Log1p',
      qt = 'LogicalAnd',
      Kt = 'LogicalNot',
      Xt = 'LogicalOr',
      Yt = 'LRN',
      Zt = 'LRNGrad',
      Jt = 'Max',
      Qt = 'Maximum',
      en = 'MaxPool',
      tn = 'MaxPoolGrad',
      nn = 'MaxPool3D',
      rn = 'MaxPool3DGrad',
      sn = 'MaxPoolWithArgmax',
      an = 'Mean',
      on = 'Min',
      ln = 'Minimum',
      un = 'MirrorPad',
      cn = 'Mod',
      hn = 'Multinomial',
      pn = 'Multiply',
      dn = 'Neg',
      fn = 'NotEqual',
      mn = 'NonMaxSuppressionV3',
      gn = 'NonMaxSuppressionV4',
      yn = 'NonMaxSuppressionV5',
      bn = 'OnesLike',
      xn = 'OneHot',
      wn = 'Pack',
      vn = 'PadV2',
      kn = 'Pow',
      In = 'Prelu',
      Nn = 'Prod',
      Sn = 'RaggedGather',
      Tn = 'RaggedTensorToTensor',
      Cn = 'Range',
      $n = 'Real',
      En = 'Reciprocal',
      Rn = 'Relu',
      An = 'Reshape',
      _n = 'ResizeNearestNeighbor',
      Fn = 'ResizeNearestNeighborGrad',
      Dn = 'ResizeBilinear',
      On = 'ResizeBilinearGrad',
      Mn = 'Relu6',
      Ln = 'Reverse',
      zn = 'Round',
      Pn = 'Rsqrt',
      Bn = 'ScatterNd',
      Wn = 'SearchSorted',
      Vn = 'Select',
      Un = 'Selu',
      Gn = 'Slice',
      Hn = 'Sin',
      jn = 'Sinh',
      qn = 'Sign',
      Kn = 'Sigmoid',
      Xn = 'Softplus',
      Yn = 'Sqrt',
      Zn = 'Sum',
      Jn = 'SpaceToBatchND',
      Qn = 'SplitV',
      er = 'Softmax',
      tr = 'SparseFillEmptyRows',
      nr = 'SparseReshape',
      rr = 'SparseSegmentMean',
      sr = 'SparseSegmentSum',
      ar = 'SparseToDense',
      ir = 'SquaredDifference',
      or = 'Square',
      lr = 'StridedSlice',
      ur = 'StringNGrams',
      cr = 'StringSplit',
      hr = 'StringToHashBucketFast',
      pr = 'Sub',
      dr = 'Tan',
      fr = 'Tanh',
      mr = 'Tile',
      gr = 'TopK',
      yr = 'Transform',
      br = 'Transpose',
      xr = 'Unique',
      wr = 'Unpack',
      vr = 'UnsortedSegmentSum',
      kr = 'ZerosLike',
      Ir = 'Step',
      Nr = 'FromPixels',
      Sr = 'RotateWithOffset',
      Tr = '_FusedMatMul',
      Cr = 'FusedConv2D',
      $r = 'FusedDepthwiseConv2D'
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Er(...e) {
      ye().getBool('IS_TEST') || ye().getBool('PROD') || console.warn(...e)
    }
    function Rr(...e) {
      ye().getBool('IS_TEST') || ye().getBool('PROD') || console.log(...e)
    }
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Ar = ve('kernelRegistry', () => new Map()),
      _r = ve('gradRegistry', () => new Map())
    function Fr(e, t) {
      const n = zr(e, t)
      return Ar.get(n)
    }
    function Dr(e) {
      return _r.get(e)
    }
    function Or(e) {
      const t = Ar.entries(),
        n = []
      for (;;) {
        const { done: r, value: s } = t.next()
        if (r) break
        const [a, i] = s,
          [o] = a.split('_')
        o === e && n.push(i)
      }
      return n
    }
    function Mr(e) {
      const { kernelName: t, backendName: n } = e,
        r = zr(t, n)
      Ar.has(r) &&
        Er(`The kernel '${t}' for backend '${n}' is already registered`),
        Ar.set(r, e)
    }
    function Lr(e) {
      const { kernelName: t } = e
      _r.has(t) &&
        ye().getBool('DEBUG') &&
        Er(`Overriding the gradient for '${t}'`),
        _r.set(t, e)
    }
    function zr(e, t) {
      return `${t}_${e}`
    }
    var Pr = n(570)
    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Br = n.n(Pr)() || Pr
    function Wr(e) {
      return Br.fromString(e, !0, 16)
    }
    const Vr = Wr('c3a5c85c97cb3127'),
      Ur = Wr('b492b66fbe98f273'),
      Gr = Wr('9ae16a3b2f90404f')
    function Hr(e) {
      return e.xor(e.shru(47))
    }
    function jr(e, t, n) {
      const r = e.slice(t, t + n)
      return Br.fromBytes(Array.from(r), !0, !0)
    }
    function qr(e, t) {
      return jr(e, t, 8)
    }
    function Kr(e, t) {
      return jr(e, t, 4)
    }
    function Xr(e, t) {
      return 0 === t ? e : e.shru(t).or(e.shl(64 - t))
    }
    function Yr(e, t, n = Wr('9ddfea08eb382d69')) {
      let r = e.xor(t).mul(n)
      r = r.xor(r.shru(47))
      let s = t.xor(r).mul(n)
      return (s = s.xor(s.shru(47))), (s = s.mul(n)), s
    }
    function Zr(e, t, n, r) {
      return (function (e, t, n, r, s, a) {
        ;(s = s.add(e)), (a = Xr(a.add(s).add(r), 21))
        const i = s
        return (
          (s = (s = s.add(t)).add(n)),
          (a = a.add(Xr(s, 44))),
          [s.add(r), a.add(i)]
        )
      })(qr(e, t), qr(e, t + 8), qr(e, t + 16), qr(e, t + 24), n, r)
    }
    function Jr(e, t = e.length) {
      const n = Br.fromNumber(81, !0)
      if (t <= 32)
        return t <= 16
          ? (function (e, t = e.length) {
              if (t >= 8) {
                const n = Gr.add(2 * t),
                  r = qr(e, 0).add(Gr),
                  s = qr(e, t - 8)
                return Yr(Xr(s, 37).mul(n).add(r), Xr(r, 25).add(s).mul(n), n)
              }
              if (t >= 4) {
                const n = Gr.add(2 * t)
                return Yr(Kr(e, 0).shl(3).add(t), Kr(e, t - 4), n)
              }
              if (t > 0) {
                const n = e[0] + (e[t >> 1] << 8),
                  r = t + (e[t - 1] << 2)
                return Hr(Gr.mul(n).xor(Vr.mul(r))).mul(Gr)
              }
              return Gr
            })(e, t)
          : (function (e, t = e.length) {
              const n = Gr.add(2 * t),
                r = qr(e, 0).mul(Ur),
                s = qr(e, 8),
                a = qr(e, t - 8).mul(n),
                i = qr(e, t - 16).mul(Gr)
              return Yr(
                Xr(r.add(s), 43).add(Xr(a, 30)).add(i),
                r.add(Xr(s.add(Gr), 18)).add(a),
                n,
              )
            })(e, t)
      if (t <= 64)
        return (function (e, t = e.length) {
          const n = Gr.add(2 * t),
            r = qr(e, 0).mul(Gr),
            s = qr(e, 8),
            a = qr(e, t - 8).mul(n),
            i = qr(e, t - 16).mul(Gr),
            o = Xr(r.add(s), 43).add(Xr(a, 30)).add(i),
            l = Yr(o, r.add(Xr(s.add(Gr), 18)).add(a), n),
            u = qr(e, 16).mul(n),
            c = qr(e, 24),
            h = o.add(qr(e, t - 32)).mul(n),
            p = l.add(qr(e, t - 24)).mul(n)
          return Yr(
            Xr(u.add(c), 43).add(Xr(h, 30)).add(p),
            u.add(Xr(c.add(r), 18)).add(h),
            n,
          )
        })(e, t)
      let r = n,
        s = n.mul(Ur).add(113),
        a = Hr(s.mul(Gr).add(113)).mul(Gr),
        i = [Br.UZERO, Br.UZERO],
        o = [Br.UZERO, Br.UZERO]
      r = r.mul(Gr).add(qr(e, 0))
      let l = 0
      const u = 64 * ((t - 1) >> 6),
        c = u + ((t - 1) & 63) - 63
      do {
        ;(r = Xr(
          r
            .add(s)
            .add(i[0])
            .add(qr(e, l + 8)),
          37,
        ).mul(Ur)),
          (s = Xr(s.add(i[1]).add(qr(e, l + 48)), 42).mul(Ur)),
          (r = r.xor(o[1])),
          (s = s.add(i[0]).add(qr(e, l + 40))),
          (a = Xr(a.add(o[0]), 33).mul(Ur)),
          (i = Zr(e, l, i[1].mul(Ur), r.add(o[0]))),
          (o = Zr(e, l + 32, a.add(o[1]), s.add(qr(e, l + 16)))),
          ([a, r] = [r, a]),
          (l += 64)
      } while (l !== u)
      const h = Ur.add(a.and(255).shl(1))
      return (
        (l = c),
        (o[0] = o[0].add((t - 1) & 63)),
        (i[0] = i[0].add(o[0])),
        (o[0] = o[0].add(i[0])),
        (r = Xr(
          r
            .add(s)
            .add(i[0])
            .add(qr(e, l + 8)),
          37,
        ).mul(h)),
        (s = Xr(s.add(i[1]).add(qr(e, l + 48)), 42).mul(h)),
        (r = r.xor(o[1].mul(9))),
        (s = s.add(i[0].mul(9).add(qr(e, l + 40)))),
        (a = Xr(a.add(o[0]), 33).mul(h)),
        (i = Zr(e, l, i[1].mul(h), r.add(o[0]))),
        (o = Zr(e, l + 32, a.add(o[1]), s.add(qr(e, l + 16)))),
        ([a, r] = [r, a]),
        Yr(
          Yr(i[0], o[0], h).add(Hr(s).mul(Vr)).add(a),
          Yr(i[1], o[1], h).add(r),
          h,
        )
      )
    }
    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Qr(e, t) {
      return 'string' === t ? ns(e) : es([e], t)
    }
    function es(e, t) {
      if ('string' === t)
        throw new Error('Cannot convert a string[] to a TypedArray')
      if (
        (Array.isArray(e) && (e = z(e)),
        ye().getBool('DEBUG') &&
          (function (e, t) {
            for (let n = 0; n < e.length; n++) {
              const r = e[n]
              if (isNaN(r) || !isFinite(r))
                throw Error(
                  `A tensor of type ${t} being uploaded contains ${r}.`,
                )
            }
          })(e, t),
        (function (e, t) {
          return (
            (e instanceof Float32Array && 'float32' === t) ||
            (e instanceof Int32Array && 'int32' === t) ||
            (e instanceof Uint8Array && 'bool' === t)
          )
        })(e, t))
      )
        return e
      if (null == t || 'float32' === t || 'complex64' === t)
        return new Float32Array(e)
      if ('int32' === t) return new Int32Array(e)
      if ('bool' === t) {
        const t = new Uint8Array(e.length)
        for (let n = 0; n < t.length; ++n) 0 !== Math.round(e[n]) && (t[n] = 1)
        return t
      }
      throw new Error(`Unknown data type ${t}`)
    }
    function ts() {
      return ye().platform.now()
    }
    function ns(e, t = 'utf-8') {
      return (t = t || 'utf-8'), ye().platform.encode(e, t)
    }
    function rs(e, t = 'utf-8') {
      return (t = t || 'utf-8'), ye().platform.decode(e, t)
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class ss {
      constructor(e, t) {
        ;(this.backendTimer = e),
          (this.logger = t),
          null == t && (this.logger = new is())
      }
      profileKernel(e, t, n) {
        let r
        const s = () => {
          r = n()
        }
        let a
        const i = ts()
        if (this.backendTimer.timerAvailable()) a = this.backendTimer.time(s)
        else {
          s()
          for (const e of r) e.dataSync()
          a = Promise.resolve({ kernelMs: ts() - i })
        }
        if (ye().getBool('CHECK_COMPUTATION_FOR_ERRORS'))
          for (let t = 0; t < r.length; t++) {
            const n = r[t]
            n.data().then((t) => {
              as(t, n.dtype, e)
            })
          }
        return {
          kernelName: e,
          outputs: r,
          inputs: t,
          timeMs: a.then((e) => e.kernelMs),
          extraInfo: a.then((e) =>
            null != e.getExtraProfileInfo ? e.getExtraProfileInfo() : '',
          ),
        }
      }
      logKernelProfile(e) {
        const {
          kernelName: t,
          outputs: n,
          timeMs: r,
          inputs: s,
          extraInfo: a,
        } = e
        n.forEach((e) => {
          Promise.all([e.data(), r, a]).then((n) => {
            this.logger.logKernelProfile(t, e, n[0], n[1], s, n[2])
          })
        })
      }
    }
    function as(e, t, n) {
      if ('float32' !== t) return !1
      for (let t = 0; t < e.length; t++) {
        const r = e[t]
        if (isNaN(r) || !isFinite(r))
          return console.warn(`Found ${r} in the result of '${n}'`), !0
      }
      return !1
    }
    class is {
      logKernelProfile(e, t, n, r, s, a) {
        const i = 'number' == typeof r ? U(`${r}ms`, 9) : r.error,
          o = U(e, 25),
          l = t.rank,
          u = t.size,
          c = U(t.shape.toString(), 14)
        let h = ''
        for (const e in s) {
          const n = s[e]
          if (null != n) {
            const r = n.shape || t.shape,
              s = r.length
            h += `${e}: ${s}D ${s > 0 ? r : ''} `
          }
        }
        console.log(
          `%c${o}\t%c${i}\t%c${l}D ${c}\t%c${u}\t%c${h}\t%c${a}`,
          'font-weight:bold',
          'color:red',
          'color:blue',
          'color: orange',
          'color: green',
          'color: steelblue',
        )
      }
    }
    function os(e, t, n, r) {
      const s = se(t),
        a = (function (e, t, n, r) {
          const s = P(t),
            a = r[r.length - 1],
            i = new Array(a).fill(0),
            o = t.length,
            l = 'complex64' === n ? hs(e) : e
          if (o > 1)
            for (let e = 0; e < s / a; e++) {
              const t = e * a
              for (let e = 0; e < a; e++)
                i[e] = Math.max(i[e], ls(l[t + e], 0, n).length)
            }
          return i
        })(e, t, n, s),
        i = t.length,
        o = cs(e, t, n, s, a),
        l = ['Tensor']
      return (
        r &&
          (l.push(`  dtype: ${n}`),
          l.push(`  rank: ${i}`),
          l.push(`  shape: [${t}]`),
          l.push('  values:')),
        l.push(o.map((e) => '    ' + e).join('\n')),
        l.join('\n')
      )
    }
    function ls(e, t, n) {
      let r
      return (
        (r = Array.isArray(e)
          ? `${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`
          : Q(e)
            ? `'${e}'`
            : 'bool' === n
              ? us(e)
              : parseFloat(e.toFixed(7)).toString()),
        U(r, t)
      )
    }
    function us(e) {
      return 0 === e ? 'false' : 'true'
    }
    function cs(e, t, n, r, s, a = !0) {
      const i = 'complex64' === n ? 2 : 1,
        o = t[0],
        l = t.length
      if (0 === l)
        return 'complex64' === n
          ? [ls(hs(e)[0], 0, n)]
          : 'bool' === n
            ? [us(e[0])]
            : [e[0].toString()]
      if (1 === l) {
        if (o > 20) {
          const t = 3 * i
          let r = Array.from(e.slice(0, t)),
            a = Array.from(e.slice((o - 3) * i, o * i))
          return (
            'complex64' === n && ((r = hs(r)), (a = hs(a))),
            [
              '[' +
                r.map((e, t) => ls(e, s[t], n)).join(', ') +
                ', ..., ' +
                a.map((e, t) => ls(e, s[o - 3 + t], n)).join(', ') +
                ']',
            ]
          )
        }
        return [
          '[' +
            ('complex64' === n ? hs(e) : Array.from(e))
              .map((e, t) => ls(e, s[t], n))
              .join(', ') +
            ']',
        ]
      }
      const u = t.slice(1),
        c = r.slice(1),
        h = r[0] * i,
        p = []
      if (o > 20) {
        for (let t = 0; t < 3; t++) {
          const r = t * h,
            a = r + h
          p.push(...cs(e.slice(r, a), u, n, c, s, !1))
        }
        p.push('...')
        for (let t = o - 3; t < o; t++) {
          const r = t * h,
            a = r + h
          p.push(...cs(e.slice(r, a), u, n, c, s, t === o - 1))
        }
      } else
        for (let t = 0; t < o; t++) {
          const r = t * h,
            a = r + h
          p.push(...cs(e.slice(r, a), u, n, c, s, t === o - 1))
        }
      const d = 2 === l ? ',' : ''
      p[0] = '[' + p[0] + d
      for (let e = 1; e < p.length - 1; e++) p[e] = ' ' + p[e] + d
      let f = ',\n'
      for (let e = 2; e < l; e++) f += '\n'
      return (p[p.length - 1] = ' ' + p[p.length - 1] + ']' + (a ? '' : f)), p
    }
    function hs(e) {
      const t = []
      for (let n = 0; n < e.length; n += 2) t.push([e[n], e[n + 1]])
      return t
    }
    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class ps {
      constructor(e, t, n) {
        if (
          ((this.dtype = t),
          (this.shape = e.slice()),
          (this.size = P(e)),
          null != n)
        ) {
          const e = n.length
          O(
            e === this.size,
            () =>
              `Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`,
          )
        }
        if ('complex64' === t)
          throw new Error(
            'complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).',
          )
        ;(this.values = n || X(t, this.size)), (this.strides = se(e))
      }
      set(e, ...t) {
        0 === t.length && (t = [0]),
          O(
            t.length === this.rank,
            () =>
              `The number of provided coordinates (${t.length}) must match the rank (${this.rank})`,
          )
        const n = this.locToIndex(t)
        this.values[n] = e
      }
      get(...e) {
        0 === e.length && (e = [0])
        let t = 0
        for (const n of e) {
          if (n < 0 || n >= this.shape[t]) {
            const t = `Requested out of range element at ${e}.   Buffer shape=${this.shape}`
            throw new Error(t)
          }
          t++
        }
        let n = e[e.length - 1]
        for (let t = 0; t < e.length - 1; ++t) n += this.strides[t] * e[t]
        return this.values[n]
      }
      locToIndex(e) {
        if (0 === this.rank) return 0
        if (1 === this.rank) return e[0]
        let t = e[e.length - 1]
        for (let n = 0; n < e.length - 1; ++n) t += this.strides[n] * e[n]
        return t
      }
      indexToLoc(e) {
        if (0 === this.rank) return []
        if (1 === this.rank) return [e]
        const t = new Array(this.shape.length)
        for (let n = 0; n < t.length - 1; ++n)
          (t[n] = Math.floor(e / this.strides[n])),
            (e -= t[n] * this.strides[n])
        return (t[t.length - 1] = e), t
      }
      get rank() {
        return this.shape.length
      }
      toTensor() {
        return ds().makeTensor(this.values, this.shape, this.dtype)
      }
    }
    let ds = null,
      fs = null,
      ms = null
    class gs {
      constructor(e, t, n, r) {
        ;(this.kept = !1),
          (this.isDisposedInternal = !1),
          (this.shape = e.slice()),
          (this.dtype = t || 'float32'),
          (this.size = P(e)),
          (this.strides = se(e)),
          (this.dataId = n),
          (this.id = r),
          (this.rankType = this.rank < 5 ? this.rank.toString() : 'higher')
      }
      get rank() {
        return this.shape.length
      }
      async buffer() {
        const e = await this.data()
        return fs.buffer(this.shape, this.dtype, e)
      }
      bufferSync() {
        return fs.buffer(this.shape, this.dtype, this.dataSync())
      }
      async array() {
        const e = await this.data()
        return ie(this.shape, e, 'complex64' === this.dtype)
      }
      arraySync() {
        return ie(this.shape, this.dataSync(), 'complex64' === this.dtype)
      }
      async data() {
        this.throwIfDisposed()
        const e = ds().read(this.dataId)
        if ('string' === this.dtype) {
          const t = await e
          try {
            return t.map((e) => rs(e))
          } catch (e) {
            throw new Error(
              'Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().',
            )
          }
        }
        return e
      }
      dataToGPU(e) {
        return this.throwIfDisposed(), ds().readToGPU(this.dataId, e)
      }
      dataSync() {
        this.throwIfDisposed()
        const e = ds().readSync(this.dataId)
        if ('string' === this.dtype)
          try {
            return e.map((e) => rs(e))
          } catch (e) {
            throw new Error(
              'Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().',
            )
          }
        return e
      }
      async bytes() {
        this.throwIfDisposed()
        const e = await ds().read(this.dataId)
        return 'string' === this.dtype ? e : new Uint8Array(e.buffer)
      }
      dispose() {
        this.isDisposed ||
          (ds().disposeTensor(this), (this.isDisposedInternal = !0))
      }
      get isDisposed() {
        return this.isDisposedInternal
      }
      throwIfDisposed() {
        if (this.isDisposed) throw new Error('Tensor is disposed.')
      }
      print(e = !1) {
        return fs.print(this, e)
      }
      clone() {
        return this.throwIfDisposed(), fs.clone(this)
      }
      toString(e = !1) {
        return os(this.dataSync(), this.shape, this.dtype, e)
      }
      cast(e) {
        return this.throwIfDisposed(), fs.cast(this, e)
      }
      variable(e = !0, t, n) {
        return this.throwIfDisposed(), ds().makeVariable(this, e, t, n)
      }
    }
    function ys() {
      return ve('Tensor', () => gs)
    }
    Object.defineProperty(gs, Symbol.hasInstance, {
      value: (e) =>
        !!e &&
        null != e.data &&
        null != e.dataSync &&
        null != e.throwIfDisposed,
    }),
      ys()
    class bs extends gs {
      constructor(e, t, n, r) {
        super(e.shape, e.dtype, e.dataId, r),
          (this.trainable = t),
          (this.name = n)
      }
      assign(e) {
        if (e.dtype !== this.dtype)
          throw new Error(
            `dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`,
          )
        if (!B(e.shape, this.shape))
          throw new Error(
            `shape of the new value (${e.shape}) and previous value (${this.shape}) must match`,
          )
        ds().disposeTensor(this),
          (this.dataId = e.dataId),
          ds().incRef(this, null)
      }
      dispose() {
        ds().disposeVariable(this), (this.isDisposedInternal = !0)
        /**
         * @license
         * Copyright 2017 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
      }
    }
    var xs, ws, vs, ks, Is
    Object.defineProperty(bs, Symbol.hasInstance, {
      value: (e) =>
        e instanceof gs && null != e.assign && e.assign instanceof Function,
    }),
      (function (e) {
        ;(e.R0 = 'R0'),
          (e.R1 = 'R1'),
          (e.R2 = 'R2'),
          (e.R3 = 'R3'),
          (e.R4 = 'R4'),
          (e.R5 = 'R5'),
          (e.R6 = 'R6')
      })(xs || (xs = {})),
      (function (e) {
        ;(e.float32 = 'float32'),
          (e.int32 = 'int32'),
          (e.bool = 'int32'),
          (e.complex64 = 'complex64')
      })(ws || (ws = {})),
      (function (e) {
        ;(e.float32 = 'float32'),
          (e.int32 = 'int32'),
          (e.bool = 'bool'),
          (e.complex64 = 'complex64')
      })(vs || (vs = {})),
      (function (e) {
        ;(e.float32 = 'float32'),
          (e.int32 = 'float32'),
          (e.bool = 'float32'),
          (e.complex64 = 'complex64')
      })(ks || (ks = {})),
      (function (e) {
        ;(e.float32 = 'complex64'),
          (e.int32 = 'complex64'),
          (e.bool = 'complex64'),
          (e.complex64 = 'complex64')
      })(Is || (Is = {}))
    const Ns = { float32: ks, int32: ws, bool: vs, complex64: Is }
    function Ss(e, t) {
      if ('string' === e || 'string' === t) {
        if ('string' === e && 'string' === t) return 'string'
        throw new Error(`Can not upcast ${e} with ${t}`)
      }
      return Ns[e][t]
    }
    function Ts(e) {
      return Ss(e, 'int32')
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Cs(e, t) {
      if (e.dtype === t.dtype) return [e, t]
      const n = Ss(e.dtype, t.dtype)
      return [e.cast(n), t.cast(n)]
    }
    function $s(e, t) {
      return t.some((t) => t.id === e.id)
    }
    function Es(e) {
      const t = []
      return Rs(e, t, new Set()), t
    }
    function Rs(e, t, n) {
      if (null == e) return
      if (e instanceof gs) return void t.push(e)
      if (((r = e), !Array.isArray(r) && 'object' != typeof r)) return
      var r
      const s = e
      for (const e in s) {
        const r = s[e]
        n.has(r) ||
          (n.add(r), Rs(r, t, n))
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
      }
    }
    function As(e) {
      return null != e.kernelName
    }
    class _s {
      constructor() {
        ;(this.registeredVariables = {}),
          (this.nextTapeNodeId = 0),
          (this.numBytes = 0),
          (this.numTensors = 0),
          (this.numStringTensors = 0),
          (this.numDataBuffers = 0),
          (this.gradientDepth = 0),
          (this.kernelDepth = 0),
          (this.scopeStack = []),
          (this.numDataMovesStack = []),
          (this.nextScopeId = 0),
          (this.tensorInfo = new WeakMap()),
          (this.profiling = !1),
          (this.activeProfile = {
            newBytes: 0,
            newTensors: 0,
            peakBytes: 0,
            kernels: [],
            result: null,
            get kernelNames() {
              return Array.from(new Set(this.kernels.map((e) => e.name)))
            },
          })
      }
      dispose() {
        for (const e in this.registeredVariables)
          this.registeredVariables[e].dispose()
      }
    }
    class Fs {
      constructor(e) {
        ;(this.ENV = e),
          (this.registry = {}),
          (this.registryFactory = {}),
          (this.pendingBackendInitId = 0),
          (this.state = new _s())
      }
      async ready() {
        if (null != this.pendingBackendInit)
          return this.pendingBackendInit.then(() => {})
        if (null != this.backendInstance) return
        const e = this.getSortedBackends()
        for (let t = 0; t < e.length; t++) {
          const n = e[t]
          if (await this.initializeBackend(n).success)
            return void (await this.setBackend(n))
        }
        throw new Error(
          'Could not initialize any backends, all backend initializations failed.',
        )
      }
      get backend() {
        if (null != this.pendingBackendInit)
          throw new Error(
            `Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`,
          )
        if (null == this.backendInstance) {
          const { name: e, asyncInit: t } =
            this.initializeBackendsAndReturnBest()
          if (t)
            throw new Error(
              `The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`,
            )
          this.setBackend(e)
        }
        return this.backendInstance
      }
      backendNames() {
        return Object.keys(this.registryFactory)
      }
      findBackend(e) {
        if (!(e in this.registry)) {
          if (!(e in this.registryFactory)) return null
          {
            const { asyncInit: t } = this.initializeBackend(e)
            if (t) return null
          }
        }
        return this.registry[e]
      }
      findBackendFactory(e) {
        return e in this.registryFactory
          ? this.registryFactory[e].factory
          : null
      }
      registerBackend(e, t, n = 1) {
        return e in this.registryFactory
          ? (Er(
              `${e} backend was already registered. Reusing existing backend factory.`,
            ),
            !1)
          : ((this.registryFactory[e] = { factory: t, priority: n }), !0)
      }
      async setBackend(e) {
        if (null == this.registryFactory[e])
          throw new Error(`Backend name '${e}' not found in registry`)
        if (((this.backendName = e), null == this.registry[e])) {
          this.backendInstance = null
          const { success: t, asyncInit: n } = this.initializeBackend(e)
          if (!(n ? await t : t)) return !1
        }
        return (
          (this.backendInstance = this.registry[e]),
          this.setupRegisteredKernels(),
          (this.profiler = new ss(this.backendInstance)),
          !0
        )
      }
      setupRegisteredKernels() {
        Or(this.backendName).forEach((e) => {
          null != e.setupFunc && e.setupFunc(this.backendInstance)
        })
      }
      disposeRegisteredKernels(e) {
        Or(e).forEach((t) => {
          null != t.disposeFunc && t.disposeFunc(this.registry[e])
        })
      }
      initializeBackend(e) {
        const t = this.registryFactory[e]
        if (null == t)
          throw new Error(
            `Cannot initialize backend ${e}, no registration found.`,
          )
        try {
          const n = t.factory()
          if (!n || n instanceof E || 'function' != typeof n.then)
            return (this.registry[e] = n), { success: !0, asyncInit: !1 }
          {
            const t = ++this.pendingBackendInitId,
              r = n
                .then(
                  (n) =>
                    !(
                      t < this.pendingBackendInitId ||
                      ((this.registry[e] = n),
                      (this.pendingBackendInit = null),
                      0)
                    ),
                )
                .catch(
                  (n) => (
                    t < this.pendingBackendInitId ||
                      ((this.pendingBackendInit = null),
                      Er(`Initialization of backend ${e} failed`),
                      Er(n.stack || n.message)),
                    !1
                  ),
                )
            return (this.pendingBackendInit = r), { success: r, asyncInit: !0 }
          }
        } catch (t) {
          return (
            Er(`Initialization of backend ${e} failed`),
            Er(t.stack || t.message),
            { success: !1, asyncInit: !1 }
          )
        }
      }
      removeBackend(e) {
        if (!(e in this.registryFactory))
          throw new Error(`${e} backend not found in registry`)
        this.backendName === e &&
          null != this.pendingBackendInit &&
          this.pendingBackendInitId++,
          e in this.registry &&
            (this.disposeRegisteredKernels(e),
            this.registry[e].dispose(),
            delete this.registry[e]),
          delete this.registryFactory[e],
          this.backendName === e &&
            ((this.pendingBackendInit = null),
            (this.backendName = null),
            (this.backendInstance = null))
      }
      getSortedBackends() {
        if (0 === Object.keys(this.registryFactory).length)
          throw new Error('No backend found in registry.')
        return Object.keys(this.registryFactory).sort(
          (e, t) =>
            this.registryFactory[t].priority - this.registryFactory[e].priority,
        )
      }
      initializeBackendsAndReturnBest() {
        const e = this.getSortedBackends()
        for (let t = 0; t < e.length; t++) {
          const n = e[t],
            { success: r, asyncInit: s } = this.initializeBackend(n)
          if (s || r) return { name: n, asyncInit: s }
        }
        throw new Error(
          'Could not initialize any backends, all backend initializations failed.',
        )
      }
      moveData(e, t) {
        const n = this.state.tensorInfo.get(t),
          r = n.backend,
          s = this.readSync(t),
          a = r.refCount(t)
        r.disposeData(t, !0),
          (n.backend = e),
          e.move(t, s, n.shape, n.dtype, a),
          this.shouldCheckForMemLeaks() &&
            this.state.numDataMovesStack[
              this.state.numDataMovesStack.length - 1
            ]++
      }
      tidy(e, t) {
        let n,
          r = null
        if (null == t) {
          if ('function' != typeof e)
            throw new Error('Please provide a function to tidy()')
          t = e
        } else {
          if ('string' != typeof e && !(e instanceof String))
            throw new Error(
              'When calling with two arguments, the first argument to tidy() must be a string',
            )
          if ('function' != typeof t)
            throw new Error(
              'When calling with two arguments, the 2nd argument to tidy() must be a function',
            )
          r = e
        }
        return this.scopedRun(
          () => this.startScope(r),
          () => this.endScope(n),
          () => (
            (n = t()),
            n instanceof Promise &&
              console.error('Cannot return a Promise inside of tidy.'),
            n
          ),
        )
      }
      scopedRun(e, t, n) {
        e()
        try {
          const e = n()
          return t(), e
        } catch (e) {
          throw (t(), e)
        }
      }
      nextTensorId() {
        return Fs.nextTensorId++
      }
      nextVariableId() {
        return Fs.nextVariableId++
      }
      clone(e) {
        const t = Os.runKernel(Ot, { x: e }),
          n = { x: e }
        return (
          this.addTapeNode(
            this.state.activeScope.name,
            n,
            [t],
            (e) => ({
              x: () => {
                const t = { x: e }
                return Os.runKernel(Ge, t, { dtype: 'float32' })
              },
            }),
            [],
            {},
          ),
          t
        )
      }
      runKernel(e, t, n) {
        if (
          (null == this.backendName && this.backend,
          null == Fr(e, this.backendName))
        )
          throw new Error(
            `Kernel '${e}' not registered for backend '${this.backendName}'`,
          )
        return this.runKernelFunc({ kernelName: e, inputs: t, attrs: n })
      }
      shouldCheckForMemLeaks() {
        return this.ENV.getBool('IS_TEST')
      }
      checkKernelForMemLeak(e, t, n) {
        const r = this.backend.numDataIds()
        let s = 0
        n.forEach((e) => {
          s += 'complex64' === e.dtype ? 3 : 1
        })
        const a =
            this.state.numDataMovesStack[
              this.state.numDataMovesStack.length - 1
            ],
          i = r - t - s - a
        if (i > 0)
          throw new Error(
            `Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${e}'`,
          )
      }
      runKernelFunc(e) {
        let t,
          n = []
        const r = this.isTapeOn(),
          s = this.state.numBytes,
          a = this.state.numTensors
        let i, o
        this.shouldCheckForMemLeaks() && this.state.numDataMovesStack.push(0),
          null == this.backendName && this.backend
        const l = As(e)
          ? e.kernelName
          : null != this.state.activeScope
            ? this.state.activeScope.name
            : ''
        if (As(e)) {
          const { kernelName: t, inputs: s, attrs: a } = e
          null == this.backendName && this.backend
          const l = Fr(t, this.backendName)
          O(
            null != l,
            () =>
              `Cannot find registered kernel '${t}' for backend '${this.backendName}'`,
          ),
            (i = () => {
              const e = this.backend.numDataIds()
              o = l.kernelFunc({ inputs: s, attrs: a, backend: this.backend })
              const i = Array.isArray(o) ? o : [o]
              this.shouldCheckForMemLeaks() &&
                this.checkKernelForMemLeak(t, e, i)
              const u = i.map((e) =>
                null != e.rank ? e : this.makeTensorFromTensorInfo(e),
              )
              if (r) {
                const e = this.getTensorsForGradient(t, s, u)
                n = this.saveTensorsForBackwardMode(e)
              }
              return u
            })
        } else {
          const { forwardFunc: t } = e,
            s = (e) => {
              r && (n = e.map((e) => this.keep(this.clone(e))))
            }
          i = () => {
            const e = this.backend.numDataIds()
            o = this.tidy(() => t(this.backend, s))
            const n = Array.isArray(o) ? o : [o]
            return (
              this.shouldCheckForMemLeaks() &&
                this.checkKernelForMemLeak(l, e, n),
              n
            )
          }
        }
        const { inputs: u, attrs: c } = e,
          h = As(e) ? null : e.backwardsFunc
        let p
        return (
          this.scopedRun(
            () => this.state.kernelDepth++,
            () => this.state.kernelDepth--,
            () => {
              this.ENV.getBool('DEBUG') || this.state.profiling
                ? ((p = this.profiler.profileKernel(l, u, () => i())),
                  this.ENV.getBool('DEBUG') &&
                    this.profiler.logKernelProfile(p),
                  (t = p.outputs))
                : (t = i())
            },
          ),
          r && this.addTapeNode(l, u, t, h, n, c),
          this.state.profiling &&
            this.state.activeProfile.kernels.push({
              name: l,
              bytesAdded: this.state.numBytes - s,
              totalBytesSnapshot: this.state.numBytes,
              tensorsAdded: this.state.numTensors - a,
              totalTensorsSnapshot: this.state.numTensors,
              inputShapes: Object.keys(u).map((e) =>
                null != u[e] ? u[e].shape : null,
              ),
              outputShapes: t.map((e) => e.shape),
              kernelTimeMs: p.timeMs,
              extraInfo: p.extraInfo,
            }),
          Array.isArray(o) ? t : t[0]
        )
      }
      saveTensorsForBackwardMode(e) {
        return e.map((e) => this.keep(this.clone(e)))
      }
      getTensorsForGradient(e, t, n) {
        const r = Dr(e)
        if (null != r) {
          const e = r.inputsToSave || [],
            s = r.outputsToSave || []
          let a
          r.saveAllInputs
            ? (O(
                Array.isArray(t),
                () => 'saveAllInputs is true, expected inputs to be an array.',
              ),
              (a = Object.keys(t).map((e) => t[e])))
            : (a = e.map((e) => t[e]))
          const i = n.filter((e, t) => s[t])
          return a.concat(i)
        }
        return []
      }
      makeTensor(e, t, n, r) {
        if (null == e)
          throw new Error('Values passed to engine.makeTensor() are null')
        ;(n = n || 'float32'), (r = r || this.backend)
        let s = e
        'string' === n && Q(e[0]) && (s = e.map((e) => ns(e)))
        const a = r.write(s, t, n),
          i = new gs(t, n, a, this.nextTensorId())
        if ((this.trackTensor(i, r), 'string' === n)) {
          const e = this.state.tensorInfo.get(a),
            t = (function (e) {
              if (null == e) return 0
              let t = 0
              return e.forEach((e) => (t += e.length)), t
            })(s)
          ;(this.state.numBytes += t - e.bytes), (e.bytes = t)
        }
        return i
      }
      makeTensorFromDataId(e, t, n, r) {
        const s = { dataId: e, shape: t, dtype: (n = n || 'float32') }
        return this.makeTensorFromTensorInfo(s, r)
      }
      makeTensorFromTensorInfo(e, t) {
        const { dataId: n, shape: r, dtype: s } = e,
          a = new gs(r, s, n, this.nextTensorId())
        return this.trackTensor(a, t), a
      }
      makeVariable(e, t = !0, n, r) {
        ;(n = n || this.nextVariableId().toString()),
          null != r && r !== e.dtype && (e = e.cast(r))
        const s = new bs(e, t, n, this.nextTensorId())
        if (null != this.state.registeredVariables[s.name])
          throw new Error(`Variable with name ${s.name} was already registered`)
        return (
          (this.state.registeredVariables[s.name] = s),
          this.incRef(s, this.backend),
          s
        )
      }
      trackTensor(e, t) {
        this.state.numTensors++,
          'string' === e.dtype && this.state.numStringTensors++
        let n = 0
        'complex64' !== e.dtype &&
          'string' !== e.dtype &&
          (n = e.size * J(e.dtype)),
          (this.state.numBytes += n),
          this.state.tensorInfo.has(e.dataId) ||
            (this.state.numDataBuffers++,
            this.state.tensorInfo.set(e.dataId, {
              backend: t || this.backend,
              dtype: e.dtype,
              shape: e.shape,
              bytes: n,
            })),
          e instanceof bs || this.track(e)
      }
      incRef(e, t) {
        this.trackTensor(e, t), this.backend.incRef(e.dataId)
      }
      removeDataId(e, t) {
        this.state.tensorInfo.has(e) &&
          this.state.tensorInfo.get(e).backend === t &&
          (this.state.tensorInfo.delete(e), this.state.numDataBuffers--)
      }
      disposeTensor(e) {
        if (!this.state.tensorInfo.has(e.dataId)) return
        const t = this.state.tensorInfo.get(e.dataId)
        if (
          (this.state.numTensors--,
          'string' === e.dtype &&
            (this.state.numStringTensors--, (this.state.numBytes -= t.bytes)),
          'complex64' !== e.dtype && 'string' !== e.dtype)
        ) {
          const t = e.size * J(e.dtype)
          this.state.numBytes -= t
        }
        t.backend.disposeData(e.dataId) &&
          this.removeDataId(e.dataId, t.backend)
      }
      disposeVariables() {
        for (const e in this.state.registeredVariables) {
          const t = this.state.registeredVariables[e]
          this.disposeVariable(t)
        }
      }
      disposeVariable(e) {
        this.disposeTensor(e),
          null != this.state.registeredVariables[e.name] &&
            delete this.state.registeredVariables[e.name]
      }
      memory() {
        const e = this.backend.memory()
        return (
          (e.numTensors = this.state.numTensors),
          (e.numDataBuffers = this.state.numDataBuffers),
          (e.numBytes = this.state.numBytes),
          this.state.numStringTensors > 0 &&
            ((e.unreliable = !0),
            null == e.reasons && (e.reasons = []),
            e.reasons.push(
              'Memory usage by string tensors is approximate (2 bytes per character)',
            )),
          e
        )
      }
      async profile(e) {
        this.state.profiling = !0
        const t = this.state.numBytes,
          n = this.state.numTensors
        ;(this.state.activeProfile.kernels = []),
          (this.state.activeProfile.result = await e()),
          (this.state.profiling = !1),
          (this.state.activeProfile.peakBytes = Math.max(
            ...this.state.activeProfile.kernels.map(
              (e) => e.totalBytesSnapshot,
            ),
          )),
          (this.state.activeProfile.newBytes = this.state.numBytes - t),
          (this.state.activeProfile.newTensors = this.state.numTensors - n)
        for (const e of this.state.activeProfile.kernels)
          (e.kernelTimeMs = await e.kernelTimeMs),
            (e.extraInfo = await e.extraInfo)
        return this.state.activeProfile
      }
      isTapeOn() {
        return this.state.gradientDepth > 0 && 0 === this.state.kernelDepth
      }
      addTapeNode(e, t, n, r, s, a) {
        const i = {
            id: this.state.nextTapeNodeId++,
            kernelName: e,
            inputs: t,
            outputs: n,
            saved: s,
          },
          o = Dr(e)
        null != o && (r = o.gradFunc),
          null != r &&
            (i.gradient = (e) => (
              (e = e.map((e, t) => {
                if (null == e) {
                  const e = n[t],
                    r = le(e.size, e.dtype)
                  return this.makeTensor(r, e.shape, e.dtype)
                }
                return e
              })),
              r(e.length > 1 ? e : e[0], s, a)
            )),
          this.state.activeTape.push(i)
      }
      keep(e) {
        return (e.kept = !0), e
      }
      startTape() {
        0 === this.state.gradientDepth && (this.state.activeTape = []),
          this.state.gradientDepth++
      }
      endTape() {
        this.state.gradientDepth--
      }
      startScope(e) {
        const t = {
          track: [],
          name: 'unnamed scope',
          id: this.state.nextScopeId++,
        }
        e && (t.name = e),
          this.state.scopeStack.push(t),
          (this.state.activeScope = t)
      }
      endScope(e) {
        const t = Es(e),
          n = new Set(t.map((e) => e.id))
        for (let e = 0; e < this.state.activeScope.track.length; e++) {
          const t = this.state.activeScope.track[e]
          t.kept || n.has(t.id) || t.dispose()
        }
        const r = this.state.scopeStack.pop()
        ;(this.state.activeScope =
          0 === this.state.scopeStack.length
            ? null
            : this.state.scopeStack[this.state.scopeStack.length - 1]),
          t.forEach((e) => {
            e.kept || e.scopeId !== r.id || this.track(e)
          })
      }
      gradients(e, t, n, r = !1) {
        if (
          (O(t.length > 0, () => 'gradients() received an empty list of xs.'),
          null != n && 'float32' !== n.dtype)
        )
          throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`)
        const s = this.scopedRun(
          () => this.startTape(),
          () => this.endTape(),
          () => this.tidy('forward', e),
        )
        O(
          s instanceof gs,
          () => 'The result y returned by f() must be a tensor.',
        )
        const a =
          /**
           * @license
           * Copyright 2017 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          (function (e, t, n) {
            const r = {},
              s = {}
            for (let e = 0; e < t.length; e++) r[t[e].id] = !0
            for (let n = 0; n < e.length; n++) {
              const a = e[n],
                i = a.inputs
              for (const e in i) {
                const n = i[e]
                let o = !1
                for (let e = 0; e < t.length; e++)
                  if (r[n.id]) {
                    a.outputs.forEach((e) => (r[e.id] = !0)),
                      (o = !0),
                      (s[a.id] = !0)
                    break
                  }
                if (o) break
              }
            }
            const a = {}
            a[n.id] = !0
            const i = {}
            for (let t = e.length - 1; t >= 0; t--) {
              const n = e[t],
                r = n.inputs
              for (let e = 0; e < n.outputs.length; e++)
                if (a[n.outputs[e].id]) {
                  for (const e in r) (a[r[e].id] = !0), (i[n.id] = !0)
                  break
                }
            }
            const o = []
            for (let t = 0; t < e.length; t++) {
              const n = e[t]
              if (s[n.id] && i[n.id]) {
                const e = {}
                for (const t in n.inputs) {
                  const s = n.inputs[t]
                  r[s.id] && (e[t] = s)
                }
                const t = Object.assign({}, n)
                ;(t.inputs = e), (t.outputs = n.outputs), o.push(t)
              }
            }
            return o
          })(this.state.activeTape, t, s)
        if (!r && 0 === a.length && t.length > 0)
          throw new Error(
            'Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.',
          )
        return this.tidy('backward', () => {
          const e = {}
          ;(e[s.id] =
            null == n
              ? (function (e) {
                  const t = oe(P(e), 'float32')
                  return Os.makeTensor(t, e, 'float32')
                })(s.shape)
              : n),
            (function (e, t, n, r) {
              for (let s = t.length - 1; s >= 0; s--) {
                const a = t[s],
                  i = []
                if (
                  (a.outputs.forEach((t) => {
                    const n = e[t.id]
                    null != n ? i.push(n) : i.push(null)
                  }),
                  null == a.gradient)
                )
                  throw new Error(
                    `Cannot compute gradient: gradient function not found for ${a.kernelName}.`,
                  )
                const o = a.gradient(i)
                for (const t in a.inputs) {
                  if (!(t in o))
                    throw new Error(
                      `Cannot backprop through input ${t}. Available gradients found: ${Object.keys(o)}.`,
                    )
                  const s = n(() => o[t]())
                  if ('float32' !== s.dtype)
                    throw new Error(
                      `Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${s.dtype}'`,
                    )
                  const i = a.inputs[t]
                  if (!B(s.shape, i.shape))
                    throw new Error(
                      `Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${s.shape}', which does not match the shape of the input '${i.shape}'`,
                    )
                  if (null == e[i.id]) e[i.id] = s
                  else {
                    const t = e[i.id]
                    ;(e[i.id] = r(t, s)), t.dispose()
                  }
                }
              }
            })(e, a, (e) => this.tidy(e), Ms)
          const r = t.map((t) => e[t.id])
          return (
            0 === this.state.gradientDepth &&
              (this.state.activeTape.forEach((e) => {
                for (const t of e.saved) t.dispose()
              }),
              (this.state.activeTape = null)),
            { value: s, grads: r }
          )
        })
      }
      customGrad(e) {
        return (
          O(ne(e), () => 'The f passed in customGrad(f) must be a function.'),
          (...t) => {
            let n
            O(
              t.every((e) => e instanceof gs),
              () =>
                'The args passed in customGrad(f)(x1, x2,...) must all be tensors',
            )
            const r = {}
            return (
              t.forEach((e, t) => {
                r[t] = e
              }),
              this.runKernelFunc({
                forwardFunc: (r, s) => (
                  (n = e(...t, s)),
                  O(
                    n.value instanceof gs,
                    () =>
                      'The function f passed in customGrad(f) must return an object where `obj.value` is a tensor',
                  ),
                  O(
                    ne(n.gradFunc),
                    () =>
                      'The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.',
                  ),
                  n.value
                ),
                backwardsFunc: (e, r) => {
                  const s = n.gradFunc(e, r),
                    a = Array.isArray(s) ? s : [s]
                  O(
                    a.length === t.length,
                    () =>
                      'The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).',
                  ),
                    O(
                      a.every((e) => e instanceof gs),
                      () =>
                        'The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.',
                    )
                  const i = {}
                  return (
                    a.forEach((e, t) => {
                      i[t] = () => e
                    }),
                    i
                  )
                },
                inputs: r,
              })
            )
          }
        )
      }
      readSync(e) {
        return this.state.tensorInfo.get(e).backend.readSync(e)
      }
      read(e) {
        return this.state.tensorInfo.get(e).backend.read(e)
      }
      readToGPU(e, t) {
        return this.state.tensorInfo.get(e).backend.readToGPU(e, t)
      }
      async time(e) {
        const t = ts(),
          n = await this.backend.time(e)
        return (n.wallMs = ts() - t), n
      }
      track(e) {
        return (
          null != this.state.activeScope &&
            ((e.scopeId = this.state.activeScope.id),
            this.state.activeScope.track.push(e)),
          e
        )
      }
      get registeredVariables() {
        return this.state.registeredVariables
      }
      reset() {
        this.pendingBackendInitId++,
          this.state.dispose(),
          this.ENV.reset(),
          (this.state = new _s())
        for (const e in this.registry)
          this.disposeRegisteredKernels(e),
            this.registry[e].dispose(),
            delete this.registry[e]
        ;(this.backendName = null),
          (this.backendInstance = null),
          (this.pendingBackendInit = null)
      }
    }
    function Ds() {
      const e = we()
      if (null == e._tfengine) {
        const t = new me(e)
        e._tfengine = new Fs(t)
      }
      var t
      return (
        (t = e._tfengine.ENV), (xe = t), (ds = () => e._tfengine), e._tfengine
      )
    }
    ;(Fs.nextTensorId = 0), (Fs.nextVariableId = 0)
    const Os = Ds()
    function Ms(e, t) {
      const n = { a: e, b: t }
      return Os.runKernel(Se, n)
    }
    function Ls(e) {
      if (e || ('undefined' != typeof navigator && null != navigator)) {
        if ((e || (e = navigator), 'ReactNative' === e.product)) return !0
        const t =
          e.userAgent ||
          e.vendor ||
          ('undefined' != typeof window ? window.opera : '')
        if (!t) {
          const t = e
          return t.userAgentData && t.userAgentData.mobile
        }
        return (
          /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(
            t,
          ) ||
          /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(
            t.substr(0, 4),
          )
        )
      }
      return !1
    }
    function zs() {
      return (
        ('undefined' != typeof window && null != window.document) ||
        'undefined' != typeof WorkerGlobalScope
      )
    }
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Ps = ye()
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Bs(e, t) {
      let n = e
      if (Z(e)) return 'string' === t ? [] : [e.length]
      if (!Array.isArray(e)) return []
      const r = []
      for (; Array.isArray(n) || (Z(n) && 'string' !== t); )
        r.push(n.length), (n = n[0])
      return (
        Array.isArray(e) &&
          ye().getBool('TENSORLIKE_CHECK_SHAPE_CONSISTENCY') &&
          Ws(e, r, []),
        r
      )
    }
    function Ws(e, t, n) {
      if (((n = n || []), !Array.isArray(e) && !Z(e)))
        return void O(
          0 === t.length,
          () =>
            `Element arr[${n.join('][')}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`,
        )
      O(
        t.length > 0,
        () =>
          `Element arr[${n.join('][')}] should be a primitive, but is an array of ${e.length} elements`,
      ),
        O(
          e.length === t[0],
          () =>
            `Element arr[${n.join('][')}] should have ${t[0]} elements, but has ${e.length} elements`,
        )
      const r = t.slice(1)
      for (let t = 0; t < e.length; ++t) Ws(e[t], r, n.concat(t))
    }
    function Vs(e, t, n, r) {
      if ('string_or_numeric' !== e) {
        if (null == e) throw new Error('Expected dtype cannot be null.')
        if (('numeric' !== e && e !== t) || ('numeric' === e && 'string' === t))
          throw new Error(
            `Argument '${n}' passed to '${r}' must be ${e} tensor, but got ${t} tensor`,
          )
      }
    }
    function Us(e, t, n, r = 'numeric') {
      if (e instanceof gs) return Vs(r, e.dtype, t, n), e
      let s = te(e)
      if (
        ('string' !== s &&
          ['bool', 'int32', 'float32'].indexOf(r) >= 0 &&
          (s = r),
        Vs(r, s, t, n),
        null == e ||
          (!Z(e) &&
            !Array.isArray(e) &&
            'number' != typeof e &&
            'boolean' != typeof e &&
            'string' != typeof e))
      ) {
        const r = null == e ? 'null' : e.constructor.name
        throw new Error(
          `Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`,
        )
      }
      const a = Bs(e, s)
      Z(e) || Array.isArray(e) || (e = [e])
      const i = 'string' !== s ? es(e, s) : z(e, [], !0)
      return Os.makeTensor(i, a, s)
    }
    function Gs(e, t, n, r = 'numeric') {
      if (!Array.isArray(e))
        throw new Error(
          `Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``,
        )
      return e.map((e, s) => Us(e, `${t}[${s}]`, n, r))
    }
    Ps.registerFlag(
      'DEBUG',
      () => !1,
      (e) => {
        e &&
          console.warn(
            'Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.',
          )
      },
    ),
      Ps.registerFlag('IS_BROWSER', () => zs()),
      Ps.registerFlag(
        'IS_NODE',
        () =>
          'undefined' != typeof process &&
          void 0 !== process.versions &&
          void 0 !== process.versions.node,
      ),
      Ps.registerFlag(
        'IS_CHROME',
        () =>
          'undefined' != typeof navigator &&
          null != navigator &&
          null != navigator.userAgent &&
          /Chrome/.test(navigator.userAgent) &&
          /Google Inc/.test(navigator.vendor),
      ),
      Ps.registerFlag('PROD', () => !1),
      Ps.registerFlag('TENSORLIKE_CHECK_SHAPE_CONSISTENCY', () =>
        Ps.getBool('DEBUG'),
      ),
      Ps.registerFlag('DEPRECATION_WARNINGS_ENABLED', () => !0),
      Ps.registerFlag('IS_TEST', () => !1),
      Ps.registerFlag('CHECK_COMPUTATION_FOR_ERRORS', () => !0),
      Ps.registerFlag('WRAP_TO_IMAGEBITMAP', () => !1),
      Ps.registerFlag('ENGINE_COMPILE_ONLY', () => !1),
      Ps.registerFlag('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU', () => !1),
      Ps.registerFlag('USE_SETTIMEOUTCUSTOM', () => !1)
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const Hs = '__op'
    function js(e) {
      const t = Object.keys(e)
      if (1 !== t.length)
        throw new Error(
          `Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`,
        )
      let n = t[0]
      const r = e[n]
      n.endsWith('_') && (n = n.substring(0, n.length - 1)), (n += Hs)
      const s = (...e) => {
        Os.startScope(n)
        try {
          const t = r(...e)
          return (
            de(t) && console.error('Cannot return a Promise inside of tidy.'),
            Os.endScope(t),
            t
          )
        } catch (e) {
          throw (Os.endScope(null), e)
        }
      }
      return Object.defineProperty(s, 'name', { value: n, configurable: !0 }), s
    }
    const qs = js({
      complex_:
        /**
         * @license
         * Copyright 2020 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (e, t) {
          const n = Us(e, 'real', 'complex'),
            r = Us(t, 'imag', 'complex')
          M(
            n.shape,
            r.shape,
            `real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`,
          )
          const s = { real: n, imag: r }
          return Os.runKernel(qe, s)
        },
    })
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Ks(e, t, n, r) {
      if ((null == r && (r = te(e)), 'complex64' === r))
        throw new Error(
          'Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).',
        )
      if (
        !Z(e) &&
        !Array.isArray(e) &&
        'number' != typeof e &&
        'boolean' != typeof e &&
        'string' != typeof e
      )
        throw new Error(
          'values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray',
        )
      if (null != t) {
        ce(t)
        const e = P(t),
          r = P(n)
        O(
          e === r,
          () =>
            `Based on the provided shape, [${t}], the tensor should have ${e} values but has ${r}`,
        )
        for (let e = 0; e < n.length; ++e) {
          const r = n[e],
            s = e !== n.length - 1 || r !== P(t.slice(e))
          O(
            n[e] === t[e] || !s,
            () =>
              `Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `,
          )
        }
      }
      return (
        Z(e) || Array.isArray(e) || (e = [e]),
        (t = t || n),
        (e = 'string' !== r ? es(e, r) : z(e, [], !0)),
        Os.makeTensor(e, t, r)
      )
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Xs(e, t, n) {
      return Ks(e, t, Bs(e, n), n)
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Ys = {
        float32: 4,
        float16: 2,
        int32: 4,
        uint16: 2,
        uint8: 1,
        bool: 1,
        complex64: 8,
      },
      Zs = 4
    async function Js(e, t) {
      const n = [],
        r = [],
        s = Array.isArray(e) ? e.map((e) => e.name) : Object.keys(e)
      for (let a = 0; a < s.length; ++a) {
        const i = s[a],
          o = Array.isArray(e) ? e[a].tensor : e[i]
        if (
          'float32' !== o.dtype &&
          'int32' !== o.dtype &&
          'bool' !== o.dtype &&
          'string' !== o.dtype &&
          'complex64' !== o.dtype
        )
          throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`)
        const l = { name: i, shape: o.shape, dtype: o.dtype }
        if ('string' === o.dtype) {
          const e = new Promise(async (e) => {
            const t = await o.bytes(),
              n = t.reduce((e, t) => e + t.length, 0) + Zs * t.length,
              r = new Uint8Array(n)
            let s = 0
            for (let e = 0; e < t.length; e++) {
              const n = t[e],
                a = new Uint8Array(new Uint32Array([n.length]).buffer)
              r.set(a, s), (s += Zs), r.set(n, s), (s += n.length)
            }
            e(r)
          })
          r.push(e)
        } else r.push(o.data())
        null != t && (l.group = t), n.push(l)
      }
      return { data: ea(await Promise.all(r)), specs: n }
    }
    function Qs(e, t) {
      const n = {}
      let r,
        s = 0
      for (const a of t) {
        const t = a.name,
          i = a.dtype,
          o = a.shape,
          l = P(o)
        let u
        if ('quantization' in a) {
          const n = a.quantization
          if ('uint8' === n.dtype || 'uint16' === n.dtype) {
            if (!('min' in n) || !('scale' in n))
              throw new Error(
                `Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`,
              )
          } else {
            if ('float16' !== n.dtype)
              throw new Error(
                `Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`,
              )
            if ('float32' !== i)
              throw new Error(
                `Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${i}.`,
              )
          }
          const o = Ys[n.dtype],
            c = e.slice(s, s + l * o),
            h = 'uint8' === n.dtype ? new Uint8Array(c) : new Uint16Array(c)
          if ('float32' === i)
            if ('uint8' === n.dtype || 'uint16' === n.dtype) {
              u = new Float32Array(h.length)
              for (let e = 0; e < h.length; e++) {
                const t = h[e]
                u[e] = t * n.scale + n.min
              }
            } else {
              if ('float16' !== n.dtype)
                throw new Error(
                  `Unsupported quantization type ${n.dtype} for weight type float32.`,
                )
              void 0 === r && (r = ca()), (u = r(h))
            }
          else {
            if ('int32' !== i)
              throw new Error(`Unsupported dtype in weight '${t}': ${i}`)
            if ('uint8' !== n.dtype && 'uint16' !== n.dtype)
              throw new Error(
                `Unsupported quantization type ${n.dtype} for weight type int32.`,
              )
            u = new Int32Array(h.length)
            for (let e = 0; e < h.length; e++) {
              const t = h[e]
              u[e] = Math.round(t * n.scale + n.min)
            }
          }
          s += l * o
        } else if ('string' === i) {
          const t = P(a.shape)
          u = []
          for (let n = 0; n < t; n++) {
            const t = new Uint32Array(e.slice(s, s + Zs))[0]
            s += Zs
            const n = new Uint8Array(e.slice(s, s + t))
            u.push(n), (s += t)
          }
        } else {
          const r = Ys[i],
            a = e.slice(s, s + l * r)
          if ('float32' === i) u = new Float32Array(a)
          else if ('int32' === i) u = new Int32Array(a)
          else if ('bool' === i) u = new Uint8Array(a)
          else {
            if ('complex64' !== i)
              throw new Error(`Unsupported dtype in weight '${t}': ${i}`)
            {
              u = new Float32Array(a)
              const e = new Float32Array(u.length / 2),
                r = new Float32Array(u.length / 2)
              for (let t = 0; t < e.length; t++)
                (e[t] = u[2 * t]), (r[t] = u[2 * t + 1])
              const s = Xs(e, o, 'float32'),
                i = Xs(r, o, 'float32')
              ;(n[t] = qs(s, i)), s.dispose(), i.dispose()
            }
          }
          s += l * r
        }
        'complex64' !== i && (n[t] = Xs(u, o, i))
      }
      return n
    }
    function ea(e) {
      if (null === e)
        throw new Error(`Invalid input value: ${JSON.stringify(e)}`)
      let t = 0
      const n = []
      e.forEach((e) => {
        if (
          ((t += e.byteLength),
          n.push(
            e.byteLength === e.buffer.byteLength ? e : new e.constructor(e),
          ),
          !(
            e instanceof Float32Array ||
            e instanceof Int32Array ||
            e instanceof Uint8Array
          ))
        )
          throw new Error(
            `Unsupported TypedArray subtype: ${e.constructor.name}`,
          )
      })
      const r = new Uint8Array(t)
      let s = 0
      return (
        n.forEach((e) => {
          r.set(new Uint8Array(e.buffer), s), (s += e.byteLength)
        }),
        r.buffer
      )
    }
    const ta =
      'undefined' != typeof Buffer &&
      ('undefined' == typeof Blob ||
        'undefined' == typeof atob ||
        'undefined' == typeof btoa)
    function na(e) {
      return ta ? Buffer.byteLength(e) : new Blob([e]).size
    }
    function ra(e) {
      if (1 === e.length) return e[0]
      let t = 0
      e.forEach((e) => {
        t += e.byteLength
      })
      const n = new Uint8Array(t)
      let r = 0
      return (
        e.forEach((e) => {
          n.set(new Uint8Array(e), r), (r += e.byteLength)
        }),
        n.buffer
      )
    }
    function sa(e) {
      for (e = e.trim(); e.endsWith('/'); ) e = e.slice(0, e.length - 1)
      const t = e.split('/')
      return t[t.length - 1]
    }
    function aa(e, t) {
      const n = {
        modelTopology: e.modelTopology,
        format: e.format,
        generatedBy: e.generatedBy,
        convertedBy: e.convertedBy,
        weightsManifest: t,
      }
      return (
        null != e.signature && (n.signature = e.signature),
        null != e.userDefinedMetadata &&
          (n.userDefinedMetadata = e.userDefinedMetadata),
        null != e.modelInitializer && (n.modelInitializer = e.modelInitializer),
        null != e.trainingConfig && (n.trainingConfig = e.trainingConfig),
        n
      )
    }
    function ia(e, t, n) {
      const r = {
        modelTopology: e.modelTopology,
        format: e.format,
        generatedBy: e.generatedBy,
        convertedBy: e.convertedBy,
      }
      if (
        (null != e.trainingConfig && (r.trainingConfig = e.trainingConfig),
        null != e.weightsManifest)
      ) {
        if (!t)
          throw new Error(
            'modelJSON has weightsManifest but weightSpecs is null',
          )
        if (!n)
          throw new Error(
            'modelJSON has weightsManifest but weightData is null',
          )
        ;(r.weightSpecs = t), (r.weightData = n)
      }
      return (
        null != e.signature && (r.signature = e.signature),
        null != e.userDefinedMetadata &&
          (r.userDefinedMetadata = e.userDefinedMetadata),
        null != e.modelInitializer && (r.modelInitializer = e.modelInitializer),
        r
      )
    }
    async function oa(e, t) {
      let n, r
      return (
        null != e.weightsManifest && ([n, r] = await t(e.weightsManifest)),
        ia(e, n, r)
      )
    }
    function la(e) {
      if (e.modelTopology instanceof ArrayBuffer)
        throw new Error('Expected JSON model topology, received ArrayBuffer.')
      return {
        dateSaved: new Date(),
        modelTopologyType: 'JSON',
        modelTopologyBytes:
          null == e.modelTopology ? 0 : na(JSON.stringify(e.modelTopology)),
        weightSpecsBytes:
          null == e.weightSpecs ? 0 : na(JSON.stringify(e.weightSpecs)),
        weightDataBytes: null == e.weightData ? 0 : e.weightData.byteLength,
      }
    }
    function ua(e) {
      const t = []
      for (const n of e) t.push(...n.weights)
      return t
    }
    function ca() {
      const e = (function () {
          const e = (e) => {
              let t = e << 13,
                n = 0
              for (; !(8388608 & t); ) (n -= 8388608), (t <<= 1)
              return (t &= -8388609), (n += 947912704), t | n
            },
            t = new Uint32Array(2048)
          t[0] = 0
          for (let n = 1; n < 1024; n++) t[n] = e(n)
          for (let e = 1024; e < 2048; e++)
            t[e] = 939524096 + ((e - 1024) << 13)
          return t
        })(),
        t = (function () {
          const e = new Uint32Array(64)
          ;(e[0] = 0),
            (e[31] = 1199570944),
            (e[32] = 2147483648),
            (e[63] = 3347054592)
          for (let t = 1; t < 31; t++) e[t] = t << 23
          for (let t = 33; t < 63; t++) e[t] = 2147483648 + ((t - 32) << 23)
          return e
        })(),
        n = (function () {
          const e = new Uint32Array(64)
          for (let t = 0; t < 64; t++) e[t] = 1024
          return (e[0] = e[32] = 0), e
        })()
      return (r) => {
        const s = new ArrayBuffer(4 * r.length),
          a = new Uint32Array(s)
        for (let s = 0; s < r.length; s++) {
          const i = r[s],
            o = e[n[i >> 10] + (1023 & i)] + t[i >> 10]
          a[s] = o
        }
        return new Float32Array(s)
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class ha {
      constructor() {
        ;(this.saveRouters = []), (this.loadRouters = [])
      }
      static getInstance() {
        return null == ha.instance && (ha.instance = new ha()), ha.instance
      }
      static registerSaveRouter(e) {
        ha.getInstance().saveRouters.push(e)
      }
      static registerLoadRouter(e) {
        ha.getInstance().loadRouters.push(e)
      }
      static getSaveHandlers(e) {
        return ha.getHandlers(e, 'save')
      }
      static getLoadHandlers(e, t) {
        return ha.getHandlers(e, 'load', t)
      }
      static getHandlers(e, t, n) {
        const r = []
        return (
          ('load' === t
            ? ha.getInstance().loadRouters
            : ha.getInstance().saveRouters
          ).forEach((t) => {
            const s = t(e, n)
            null !== s && r.push(s)
          }),
          r
        )
      }
    }
    const pa = (e) => ha.registerSaveRouter(e),
      da = (e) => ha.registerLoadRouter(e),
      fa = (e) => ha.getSaveHandlers(e),
      ma = (e, t) => ha.getLoadHandlers(e, t),
      ga = 'tensorflowjs',
      ya = 'models_store',
      ba = 'model_info_store'
    function xa() {
      if (!ye().getBool('IS_BROWSER'))
        throw new Error(
          'Failed to obtain IndexedDB factory because the current environmentis not a web browser.',
        )
      const e = 'undefined' == typeof window ? self : window,
        t =
          e.indexedDB ||
          e.mozIndexedDB ||
          e.webkitIndexedDB ||
          e.msIndexedDB ||
          e.shimIndexedDB
      if (null == t)
        throw new Error(
          'The current browser does not appear to support IndexedDB.',
        )
      return t
    }
    function wa(e) {
      const t = e.result
      t.createObjectStore(ya, { keyPath: 'modelPath' }),
        t.createObjectStore(ba, { keyPath: 'modelPath' })
    }
    class va {
      constructor(e) {
        if (((this.indexedDB = xa()), null == e || !e))
          throw new Error(
            'For IndexedDB, modelPath must not be null, undefined or empty.',
          )
        this.modelPath = e
      }
      async save(e) {
        if (e.modelTopology instanceof ArrayBuffer)
          throw new Error(
            'BrowserLocalStorage.save() does not support saving model topology in binary formats yet.',
          )
        return this.databaseAction(this.modelPath, e)
      }
      async load() {
        return this.databaseAction(this.modelPath)
      }
      databaseAction(e, t) {
        return new Promise((e, n) => {
          const r = this.indexedDB.open(ga, 1)
          ;(r.onupgradeneeded = () => wa(r)),
            (r.onsuccess = () => {
              const s = r.result
              if (null == t) {
                const t = s.transaction(ya, 'readonly'),
                  r = t.objectStore(ya).get(this.modelPath)
                ;(r.onsuccess = () => {
                  if (null == r.result)
                    return (
                      s.close(),
                      n(
                        new Error(
                          `Cannot find model with path '${this.modelPath}' in IndexedDB.`,
                        ),
                      )
                    )
                  e(r.result.modelArtifacts)
                }),
                  (r.onerror = (e) => (s.close(), n(r.error))),
                  (t.oncomplete = () => s.close())
              } else {
                const r = la(t),
                  a = s.transaction(ba, 'readwrite')
                let i = a.objectStore(ba)
                const o = i.put({
                  modelPath: this.modelPath,
                  modelArtifactsInfo: r,
                })
                let l
                ;(o.onsuccess = () => {
                  l = s.transaction(ya, 'readwrite')
                  const o = l
                    .objectStore(ya)
                    .put({
                      modelPath: this.modelPath,
                      modelArtifacts: t,
                      modelArtifactsInfo: r,
                    })
                  ;(o.onsuccess = () => e({ modelArtifactsInfo: r })),
                    (o.onerror = (e) => {
                      i = a.objectStore(ba)
                      const t = i.delete(this.modelPath)
                      ;(t.onsuccess = () => (s.close(), n(o.error))),
                        (t.onerror = (e) => (s.close(), n(o.error)))
                    })
                }),
                  (o.onerror = (e) => (s.close(), n(o.error))),
                  (a.oncomplete = () => {
                    null == l ? s.close() : (l.oncomplete = () => s.close())
                  })
              }
            }),
            (r.onerror = (e) => n(r.error))
        })
      }
    }
    va.URL_SCHEME = 'indexeddb://'
    const ka = (e) => {
      return ye().getBool('IS_BROWSER') &&
        !Array.isArray(e) &&
        e.startsWith(va.URL_SCHEME)
        ? ((t = e.slice(va.URL_SCHEME.length)), new va(t))
        : null
      var t
    }
    ha.registerSaveRouter(ka), ha.registerLoadRouter(ka)
    class Ia {
      constructor() {
        this.indexedDB = xa()
      }
      async listModels() {
        return new Promise((e, t) => {
          const n = this.indexedDB.open(ga, 1)
          ;(n.onupgradeneeded = () => wa(n)),
            (n.onsuccess = () => {
              const r = n.result,
                s = r.transaction(ba, 'readonly'),
                a = s.objectStore(ba).getAll()
              ;(a.onsuccess = () => {
                const t = {}
                for (const e of a.result) t[e.modelPath] = e.modelArtifactsInfo
                e(t)
              }),
                (a.onerror = (e) => (r.close(), t(a.error))),
                (s.oncomplete = () => r.close())
            }),
            (n.onerror = (e) => t(n.error))
        })
      }
      async removeModel(e) {
        var t
        return (
          (e = (t = e).startsWith(va.URL_SCHEME)
            ? t.slice(va.URL_SCHEME.length)
            : t),
          new Promise((t, n) => {
            const r = this.indexedDB.open(ga, 1)
            ;(r.onupgradeneeded = () => wa(r)),
              (r.onsuccess = () => {
                const s = r.result,
                  a = s.transaction(ba, 'readwrite'),
                  i = a.objectStore(ba),
                  o = i.get(e)
                let l
                ;(o.onsuccess = () => {
                  if (null == o.result)
                    return (
                      s.close(),
                      n(
                        new Error(
                          `Cannot find model with path '${e}' in IndexedDB.`,
                        ),
                      )
                    )
                  {
                    const r = i.delete(e),
                      a = () => {
                        l = s.transaction(ya, 'readwrite')
                        const r = l.objectStore(ya).delete(e)
                        ;(r.onsuccess = () => t(o.result.modelArtifactsInfo)),
                          (r.onerror = (e) => n(o.error))
                      }
                    ;(r.onsuccess = a),
                      (r.onerror = (e) => (a(), s.close(), n(o.error)))
                  }
                }),
                  (o.onerror = (e) => (s.close(), n(o.error))),
                  (a.oncomplete = () => {
                    null == l ? s.close() : (l.oncomplete = () => s.close())
                  })
              }),
              (r.onerror = (e) => n(r.error))
          })
        )
        /**
         * @license
         * Copyright 2018 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
      }
    }
    const Na = '/',
      Sa = 'tensorflowjs_models',
      Ta = 'info',
      Ca = 'model_topology',
      $a = 'weight_specs',
      Ea = 'weight_data',
      Ra = 'model_metadata'
    function Aa(e) {
      return {
        info: [Sa, e, Ta].join(Na),
        topology: [Sa, e, Ca].join(Na),
        weightSpecs: [Sa, e, $a].join(Na),
        weightData: [Sa, e, Ea].join(Na),
        modelMetadata: [Sa, e, Ra].join(Na),
      }
    }
    function _a(e) {
      for (const t of Object.values(e)) window.localStorage.removeItem(t)
    }
    function Fa(e) {
      const t = e.split(Na)
      if (t.length < 3) throw new Error(`Invalid key format: ${e}`)
      return t.slice(1, t.length - 1).join(Na)
    }
    class Da {
      constructor(e) {
        if (
          !ye().getBool('IS_BROWSER') ||
          'undefined' == typeof window ||
          void 0 === window.localStorage
        )
          throw new Error(
            'The current environment does not support local storage.',
          )
        if (((this.LS = window.localStorage), null == e || !e))
          throw new Error(
            'For local storage, modelPath must not be null, undefined or empty.',
          )
        ;(this.modelPath = e), (this.keys = Aa(this.modelPath))
      }
      async save(e) {
        if (e.modelTopology instanceof ArrayBuffer)
          throw new Error(
            'BrowserLocalStorage.save() does not support saving model topology in binary formats yet.',
          )
        {
          const t = JSON.stringify(e.modelTopology),
            n = JSON.stringify(e.weightSpecs),
            r = la(e)
          try {
            this.LS.setItem(this.keys.info, JSON.stringify(r)),
              this.LS.setItem(this.keys.topology, t),
              this.LS.setItem(this.keys.weightSpecs, n),
              this.LS.setItem(
                this.keys.weightData,
                (function (e) {
                  if (ta) return Buffer.from(e).toString('base64')
                  const t = new Uint8Array(e)
                  let n = ''
                  for (let e = 0, r = t.length; e < r; e++)
                    n += String.fromCharCode(t[e])
                  return btoa(n)
                })(e.weightData),
              )
            const s = {
              format: e.format,
              generatedBy: e.generatedBy,
              convertedBy: e.convertedBy,
              signature: null != e.signature ? e.signature : void 0,
              userDefinedMetadata:
                null != e.userDefinedMetadata ? e.userDefinedMetadata : void 0,
              modelInitializer:
                null != e.modelInitializer ? e.modelInitializer : void 0,
              trainingConfig:
                null != e.trainingConfig ? e.trainingConfig : void 0,
            }
            return (
              this.LS.setItem(this.keys.modelMetadata, JSON.stringify(s)),
              { modelArtifactsInfo: r }
            )
          } catch (e) {
            throw (
              (_a(this.keys),
              new Error(
                `Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`,
              ))
            )
          }
        }
      }
      async load() {
        const e = JSON.parse(this.LS.getItem(this.keys.info))
        if (null == e)
          throw new Error(
            `In local storage, there is no model with name '${this.modelPath}'`,
          )
        if ('JSON' !== e.modelTopologyType)
          throw new Error(
            'BrowserLocalStorage does not support loading non-JSON model topology yet.',
          )
        const t = {},
          n = JSON.parse(this.LS.getItem(this.keys.topology))
        if (null == n)
          throw new Error(
            `In local storage, the topology of model '${this.modelPath}' is missing.`,
          )
        t.modelTopology = n
        const r = JSON.parse(this.LS.getItem(this.keys.weightSpecs))
        if (null == r)
          throw new Error(
            `In local storage, the weight specs of model '${this.modelPath}' are missing.`,
          )
        t.weightSpecs = r
        const s = this.LS.getItem(this.keys.modelMetadata)
        if (null != s) {
          const e = JSON.parse(s)
          ;(t.format = e.format),
            (t.generatedBy = e.generatedBy),
            (t.convertedBy = e.convertedBy),
            null != e.signature && (t.signature = e.signature),
            null != e.userDefinedMetadata &&
              (t.userDefinedMetadata = e.userDefinedMetadata),
            null != e.modelInitializer &&
              (t.modelInitializer = e.modelInitializer),
            null != e.trainingConfig && (t.trainingConfig = e.trainingConfig)
        }
        const a = this.LS.getItem(this.keys.weightData)
        if (null == a)
          throw new Error(
            `In local storage, the binary weight values of model '${this.modelPath}' are missing.`,
          )
        return (
          (t.weightData = (function (e) {
            if (ta) {
              const t = Buffer.from(e, 'base64')
              return t.buffer.slice(t.byteOffset, t.byteOffset + t.byteLength)
            }
            const t = atob(e),
              n = new Uint8Array(t.length)
            for (let e = 0; e < t.length; ++e) n.set([t.charCodeAt(e)], e)
            return n.buffer
          })(a)),
          t
        )
      }
    }
    Da.URL_SCHEME = 'localstorage://'
    const Oa = (e) => {
      return ye().getBool('IS_BROWSER') &&
        !Array.isArray(e) &&
        e.startsWith(Da.URL_SCHEME)
        ? ((t = e.slice(Da.URL_SCHEME.length)), new Da(t))
        : null
      var t
    }
    ha.registerSaveRouter(Oa), ha.registerLoadRouter(Oa)
    class Ma {
      constructor() {
        O(
          ye().getBool('IS_BROWSER'),
          () => 'Current environment is not a web browser',
        ),
          O(
            'undefined' == typeof window || void 0 !== window.localStorage,
            () => 'Current browser does not appear to support localStorage',
          ),
          (this.LS = window.localStorage)
      }
      async listModels() {
        const e = {},
          t = Sa + Na,
          n = Na + Ta
        for (let r = 0; r < this.LS.length; ++r) {
          const s = this.LS.key(r)
          s.startsWith(t) &&
            s.endsWith(n) &&
            (e[Fa(s)] = JSON.parse(this.LS.getItem(s)))
        }
        return e
      }
      async removeModel(e) {
        var t
        const n = Aa(
          (e = (t = e).startsWith(Da.URL_SCHEME)
            ? t.slice(Da.URL_SCHEME.length)
            : t),
        )
        if (null == this.LS.getItem(n.info))
          throw new Error(`Cannot find model at path '${e}'`)
        const r = JSON.parse(this.LS.getItem(n.info))
        return _a(n), r
        /**
         * @license
         * Copyright 2018 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
      }
    }
    const La = '://'
    class za {
      constructor() {
        this.managers = {}
      }
      static getInstance() {
        return null == za.instance && (za.instance = new za()), za.instance
      }
      static registerManager(e, t) {
        O(null != e, () => 'scheme must not be undefined or null.'),
          e.endsWith(La) && (e = e.slice(0, e.indexOf(La))),
          O(e.length > 0, () => 'scheme must not be an empty string.')
        const n = za.getInstance()
        O(
          null == n.managers[e],
          () =>
            `A model store manager is already registered for scheme '${e}'.`,
        ),
          (n.managers[e] = t)
      }
      static getManager(e) {
        const t = za.getInstance().managers[e]
        if (null == t)
          throw new Error(`Cannot find model manager for scheme '${e}'`)
        return t
      }
      static getSchemes() {
        return Object.keys(za.getInstance().managers)
      }
    }
    function Pa(e) {
      if (-1 === e.indexOf(La))
        throw new Error(
          `The url string provided does not contain a scheme. Supported schemes are: ${za.getSchemes().join(',')}`,
        )
      return { scheme: e.split(La)[0], path: e.split(La)[1] }
    }
    async function Ba(e, t, n = !1) {
      O(e !== t, () => `Old path and new path are the same: '${e}'`)
      const r = ha.getLoadHandlers(e)
      O(
        r.length > 0,
        () =>
          `Copying failed because no load handler is found for source URL ${e}.`,
      ),
        O(
          r.length < 2,
          () =>
            `Copying failed because more than one (${r.length}) load handlers for source URL ${e}.`,
        )
      const s = r[0],
        a = ha.getSaveHandlers(t)
      O(
        a.length > 0,
        () =>
          `Copying failed because no save handler is found for destination URL ${t}.`,
      ),
        O(
          a.length < 2,
          () =>
            `Copying failed because more than one (${r.length}) save handlers for destination URL ${t}.`,
        )
      const i = a[0],
        o = Pa(e).scheme,
        l = Pa(e).path,
        u = o === Pa(e).scheme,
        c = await s.load()
      n && u && (await za.getManager(o).removeModel(l))
      const h = await i.save(c)
      return (
        n && !u && (await za.getManager(o).removeModel(l)), h.modelArtifactsInfo
      )
    }
    async function Wa() {
      const e = za.getSchemes(),
        t = {}
      for (const n of e) {
        const e = await za.getManager(n).listModels()
        for (const r in e) t[n + La + r] = e[r]
      }
      return t
    }
    async function Va(e) {
      const t = Pa(e)
      return za.getManager(t.scheme).removeModel(t.path)
    }
    async function Ua(e, t) {
      return Ba(e, t, !1)
    }
    async function Ga(e, t) {
      return Ba(e, t, !0)
    }
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Ha {
      constructor() {
        ;(this.messageName = 'setTimeoutCustom'),
          (this.functionRefs = []),
          (this.handledMessageCount = 0),
          (this.hasEventListener = !1)
      }
      fetch(e, t) {
        return fetch(e, t)
      }
      now() {
        return performance.now()
      }
      encode(e, t) {
        if ('utf-8' !== t && 'utf8' !== t)
          throw new Error(`Browser's encoder only supports utf-8, but got ${t}`)
        return (
          null == this.textEncoder && (this.textEncoder = new TextEncoder()),
          this.textEncoder.encode(e)
        )
      }
      decode(e, t) {
        return new TextDecoder(t).decode(e)
      }
      setTimeoutCustom(e, t) {
        window && ye().getBool('USE_SETTIMEOUTCUSTOM')
          ? (this.functionRefs.push(e),
            setTimeout(() => {
              window.postMessage(
                { name: this.messageName, index: this.functionRefs.length - 1 },
                '*',
              )
            }, t),
            this.hasEventListener ||
              ((this.hasEventListener = !0),
              window.addEventListener(
                'message',
                (e) => {
                  e.source === window &&
                    e.data.name === this.messageName &&
                    (e.stopPropagation(),
                    (0, this.functionRefs[e.data.index])(),
                    this.handledMessageCount++,
                    this.handledMessageCount === this.functionRefs.length &&
                      ((this.functionRefs = []),
                      (this.handledMessageCount = 0)))
                },
                !0,
              )))
          : setTimeout(e, t)
      }
    }
    if (ye().get('IS_BROWSER')) {
      ye().setPlatform('browser', new Ha())
      try {
        za.registerManager(Da.URL_SCHEME, new Ma())
      } catch (e) {}
      try {
        za.registerManager(va.URL_SCHEME, new Ia())
      } catch (e) {}
    }
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ let ja
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function qa(e, t = 'float32', n) {
      return (t = t || 'float32'), ce(e), new ps(e, t, n)
    }
    ye().get('IS_NODE') &&
      !ye().get('IS_BROWSER') &&
      ye().setPlatform(
        'node',
        new (class {
          constructor() {
            ;(this.util = n(590)),
              (this.textEncoder = new this.util.TextEncoder())
          }
          fetch(e, t) {
            return null != ye().global.fetch
              ? ye().global.fetch(e, t)
              : (null == ja && (ja = n(817)), ja(e, t))
          }
          now() {
            const e = process.hrtime()
            return 1e3 * e[0] + e[1] / 1e6
          }
          encode(e, t) {
            if ('utf-8' !== t && 'utf8' !== t)
              throw new Error(
                `Node built-in encoder only supports utf-8, but got ${t}`,
              )
            return this.textEncoder.encode(e)
          }
          decode(e, t) {
            return 0 === e.length ? '' : new this.util.TextDecoder(t).decode(e)
          }
        })(),
      )
    const Ka = js({
        cast_:
          /**
           * @license
           * Copyright 2020 Google Inc. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t) {
            const n = Us(e, 'x', 'cast')
            if (
              !(function (e) {
                return (
                  'bool' === e ||
                  'complex64' === e ||
                  'float32' === e ||
                  'int32' === e ||
                  'string' === e
                )
              })(t)
            )
              throw new Error(`Failed to cast to unknown dtype ${t}`)
            if (
              ('string' === t && 'string' !== n.dtype) ||
              ('string' !== t && 'string' === n.dtype)
            )
              throw new Error('Only strings can be casted to strings')
            const r = { x: n },
              s = { dtype: t }
            return Os.runKernel(Ge, r, s)
          },
      }),
      Xa = js({
        clone_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = { x: Us(e, 'x', 'clone', 'string_or_numeric') }
            return Os.runKernel(Ot, t)
          },
      })
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Ya(e, t = !1) {
      console.log(e.toString(t))
    }
    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Za(e) {
      return new Promise((e) => setTimeout(e)).then(e)
    }
    Ds(), (fs = { buffer: qa, cast: Ka, clone: Xa, print: Ya })
    class Ja {
      constructor(e) {
        if (!ye().getBool('IS_BROWSER'))
          throw new Error(
            'browserDownloads() cannot proceed because the current environment is not a browser.',
          )
        e.startsWith(Ja.URL_SCHEME) && (e = e.slice(Ja.URL_SCHEME.length)),
          (null != e && 0 !== e.length) || (e = 'model'),
          (this.modelJsonFileName = e + '.json'),
          (this.weightDataFileName = e + '.weights.bin')
      }
      async save(e) {
        if ('undefined' == typeof document)
          throw new Error(
            'Browser downloads are not supported in this environment since `document` is not present',
          )
        const t = window.URL.createObjectURL(
          new Blob([e.weightData], { type: 'application/octet-stream' }),
        )
        if (e.modelTopology instanceof ArrayBuffer)
          throw new Error(
            'BrowserDownloads.save() does not support saving model topology in binary formats yet.',
          )
        {
          const n = aa(e, [
              {
                paths: ['./' + this.weightDataFileName],
                weights: e.weightSpecs,
              },
            ]),
            r = window.URL.createObjectURL(
              new Blob([JSON.stringify(n)], { type: 'application/json' }),
            ),
            s =
              null == this.modelJsonAnchor
                ? document.createElement('a')
                : this.modelJsonAnchor
          if (
            ((s.download = this.modelJsonFileName),
            (s.href = r),
            await Za(() => s.dispatchEvent(new MouseEvent('click'))),
            null != e.weightData)
          ) {
            const e =
              null == this.weightDataAnchor
                ? document.createElement('a')
                : this.weightDataAnchor
            ;(e.download = this.weightDataFileName),
              (e.href = t),
              await Za(() => e.dispatchEvent(new MouseEvent('click')))
          }
          return { modelArtifactsInfo: la(e) }
        }
      }
    }
    Ja.URL_SCHEME = 'downloads://'
    class Qa {
      constructor(e) {
        if (null == e || e.length < 1)
          throw new Error(
            `When calling browserFiles, at least 1 file is required, but received ${e}`,
          )
        ;(this.jsonFile = e[0]), (this.weightsFiles = e.slice(1))
      }
      async load() {
        return new Promise((e, t) => {
          const n = new FileReader()
          ;(n.onload = (n) => {
            const r = JSON.parse(n.target.result),
              s = r.modelTopology
            if (null == s)
              return void t(
                new Error(
                  `modelTopology field is missing from file ${this.jsonFile.name}`,
                ),
              )
            if (null == r.weightsManifest)
              return void t(
                new Error(
                  `weightManifest field is missing from file ${this.jsonFile.name}`,
                ),
              )
            if (0 === this.weightsFiles.length)
              return void e({ modelTopology: s })
            const a = oa(r, (e) => this.loadWeights(e))
            e(a)
          }),
            (n.onerror = (e) =>
              t(
                `Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`,
              )),
            n.readAsText(this.jsonFile)
        })
      }
      loadWeights(e) {
        const t = [],
          n = []
        for (const r of e) t.push(...r.weights), n.push(...r.paths)
        const r = this.checkManifestAndWeightFiles(e),
          s = n.map((e) => this.loadWeightsFile(e, r[e]))
        return Promise.all(s).then((e) => [t, ra(e)])
      }
      loadWeightsFile(e, t) {
        return new Promise((n, r) => {
          const s = new FileReader()
          ;(s.onload = (e) => {
            const t = e.target.result
            n(t)
          }),
            (s.onerror = (t) =>
              r(`Failed to weights data from file of path '${e}'.`)),
            s.readAsArrayBuffer(t)
        })
      }
      checkManifestAndWeightFiles(e) {
        const t = [],
          n = this.weightsFiles.map((e) => sa(e.name)),
          r = {}
        for (const s of e)
          s.paths.forEach((e) => {
            const s = sa(e)
            if (-1 !== t.indexOf(s))
              throw new Error(
                `Duplicate file basename found in weights manifest: '${s}'`,
              )
            if ((t.push(s), -1 === n.indexOf(s)))
              throw new Error(
                `Weight file with basename '${s}' is not provided.`,
              )
            r[e] = this.weightsFiles[n.indexOf(s)]
          })
        if (t.length !== this.weightsFiles.length)
          throw new Error(
            `Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`,
          )
        return r
      }
    }
    function ei(e) {
      return new Qa(e)
    }
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function ti(e, t, n, r) {
      !(function (e) {
        O(
          null != e && Array.isArray(e) && e.length > 0,
          () => 'promises must be a none empty array',
        )
      })(e),
        (function (e, t) {
          O(
            e >= 0 && e <= 1,
            () =>
              `Progress fraction must be in range [0, 1], but got startFraction ${e}`,
          ),
            O(
              t >= 0 && t <= 1,
              () =>
                `Progress fraction must be in range [0, 1], but got endFraction ${t}`,
            ),
            O(
              t >= e,
              () =>
                `startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`,
            )
        })((n = null == n ? 0 : n), (r = null == r ? 1 : r))
      let s = 0
      return Promise.all(
        e.map(
          (a) => (
            a.then((a) => {
              const i = n + (++s / e.length) * (r - n)
              return t(i), a
            }),
            a
          ),
        ),
      )
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ async function ni(e, t) {
      null == t && (t = {})
      const n = null == t.fetchFunc ? ye().platform.fetch : t.fetchFunc,
        r = e.map((e) => n(e, t.requestInit, { isBinary: !0 })),
        s = (
          null == t.onProgress
            ? await Promise.all(r)
            : await ti(r, t.onProgress, 0, 0.5)
        ).map((e) => e.arrayBuffer())
      return null == t.onProgress
        ? await Promise.all(s)
        : await ti(s, t.onProgress, 0.5, 1)
    }
    async function ri(e, t = '', n, r) {
      return si((e) => ni(e, { requestInit: r }))(e, t, n)
    }
    function si(e) {
      return async (t, n = '', r) => {
        const s = t.map(() => !1),
          a = {},
          i = null != r ? r.map(() => !1) : [],
          o = []
        if (
          (t.forEach((e, t) => {
            let n = 0
            e.weights.forEach((e) => {
              const l = 'quantization' in e ? e.quantization.dtype : e.dtype,
                u = Ys[l] * P(e.shape),
                c = () => {
                  ;(s[t] = !0),
                    null == a[t] && (a[t] = []),
                    a[t].push({
                      manifestEntry: e,
                      groupOffset: n,
                      sizeBytes: u,
                    })
                }
              null != r
                ? r.forEach((t, n) => {
                    t === e.name && (c(), (i[n] = !0))
                  })
                : c(),
                o.push(e.name),
                (n += u)
            })
          }),
          !i.every((e) => e))
        ) {
          const e = r.filter((e, t) => !i[t])
          throw new Error(
            `Could not find weights in manifest with names: ${e.join(', ')}. \nManifest JSON has weights with names: ${o.join(', ')}.`,
          )
        }
        const l = s.reduce((e, t, n) => (t && e.push(n), e), []),
          u = []
        l.forEach((e) => {
          t[e].paths.forEach((e) => {
            const t = n + (n.endsWith('/') ? '' : '/') + e
            u.push(t)
          })
        })
        const c = await e(u),
          h = {}
        let p = 0
        return (
          l.forEach((e) => {
            const n = t[e].paths.length
            let r = 0
            for (let e = 0; e < n; e++) r += c[p + e].byteLength
            const s = new ArrayBuffer(r),
              i = new Uint8Array(s)
            let o = 0
            for (let e = 0; e < n; e++) {
              const t = new Uint8Array(c[p + e])
              i.set(t, o), (o += t.byteLength)
            }
            a[e].forEach((e) => {
              const t = Qs(
                s.slice(e.groupOffset, e.groupOffset + e.sizeBytes),
                [e.manifestEntry],
              )
              for (const e in t) h[e] = t[e]
            }),
              (p += n)
          }),
          h
        )
      }
    }
    ha.registerSaveRouter((e) =>
      ye().getBool('IS_BROWSER') &&
      !Array.isArray(e) &&
      e.startsWith(Ja.URL_SCHEME)
        ? (function (e = 'model') {
            return new Ja(e)
          })(e.slice(Ja.URL_SCHEME.length))
        : null,
    )
    class ai {
      constructor(e, t) {
        if (
          ((this.DEFAULT_METHOD = 'POST'),
          null == t && (t = {}),
          (this.weightPathPrefix = t.weightPathPrefix),
          (this.onProgress = t.onProgress),
          (this.weightUrlConverter = t.weightUrlConverter),
          null != t.fetchFunc
            ? (O(
                'function' == typeof t.fetchFunc,
                () =>
                  'Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)',
              ),
              (this.fetch = t.fetchFunc))
            : (this.fetch = ye().platform.fetch),
          O(
            null != e && e.length > 0,
            () => 'URL path for http must not be null, undefined or empty.',
          ),
          Array.isArray(e) &&
            O(
              2 === e.length,
              () =>
                `URL paths for http must have a length of 2, (actual length is ${e.length}).`,
            ),
          (this.path = e),
          null != t.requestInit && null != t.requestInit.body)
        )
          throw new Error(
            'requestInit is expected to have no pre-existing body, but has one.',
          )
        this.requestInit = t.requestInit || {}
      }
      async save(e) {
        if (e.modelTopology instanceof ArrayBuffer)
          throw new Error(
            'BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.',
          )
        const t = Object.assign(
          { method: this.DEFAULT_METHOD },
          this.requestInit,
        )
        t.body = new FormData()
        const n = aa(e, [
          { paths: ['./model.weights.bin'], weights: e.weightSpecs },
        ])
        t.body.append(
          'model.json',
          new Blob([JSON.stringify(n)], { type: 'application/json' }),
          'model.json',
        ),
          null != e.weightData &&
            t.body.append(
              'model.weights.bin',
              new Blob([e.weightData], { type: 'application/octet-stream' }),
              'model.weights.bin',
            )
        const r = await this.fetch(this.path, t)
        if (r.ok) return { modelArtifactsInfo: la(e), responses: [r] }
        throw new Error(
          `BrowserHTTPRequest.save() failed due to HTTP response status ${r.status}.`,
        )
      }
      async load() {
        const e = await this.fetch(this.path, this.requestInit)
        if (!e.ok)
          throw new Error(
            `Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`,
          )
        let t
        try {
          t = await e.json()
        } catch (e) {
          let t = `Failed to parse model JSON of response from ${this.path}.`
          throw (
            (this.path.endsWith('.pb')
              ? (t +=
                  " Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.")
              : (t +=
                  ' Please make sure the server is serving valid JSON for this request.'),
            new Error(t))
          )
        }
        const n = t.modelTopology,
          r = t.weightsManifest
        if (null == n && null == r)
          throw new Error(
            `The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`,
          )
        return oa(t, (e) => this.loadWeights(e))
      }
      async loadWeights(e) {
        const t = Array.isArray(this.path) ? this.path[1] : this.path,
          [n, r] = (function (e) {
            const t = e.lastIndexOf('/'),
              n = e.lastIndexOf('?')
            return [e.substring(0, t) + '/', n > t ? e.substring(n) : '']
          })(t),
          s = this.weightPathPrefix || n,
          a = ua(e),
          i = [],
          o = []
        for (const t of e)
          for (const e of t.paths)
            null != this.weightUrlConverter
              ? o.push(this.weightUrlConverter(e))
              : i.push(s + e + r)
        return (
          this.weightUrlConverter && i.push(...(await Promise.all(o))),
          [
            a,
            ra(
              await ni(i, {
                requestInit: this.requestInit,
                fetchFunc: this.fetch,
                onProgress: this.onProgress,
              }),
            ),
          ]
        )
      }
    }
    function ii(e) {
      return null != e.match(ai.URL_SCHEME_REGEX)
    }
    ai.URL_SCHEME_REGEX = /^https?:\/\//
    const oi = (e, t) => {
      if ('undefined' == typeof fetch && (null == t || null == t.fetchFunc))
        return null
      {
        let n = !0
        if (((n = Array.isArray(e) ? e.every((e) => ii(e)) : ii(e)), n))
          return li(e, t)
      }
      return null
    }
    function li(e, t) {
      return new ai(e, t)
    }
    function ui(e, t) {
      return li(e, t)
    }
    ha.registerSaveRouter(oi), ha.registerLoadRouter(oi)
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class ci {
      constructor(e) {
        this.modelArtifacts = e
      }
      load() {
        return this.modelArtifacts
      }
    }
    class hi {
      constructor(e) {
        this.saveHandler = e
      }
      save(e) {
        return this.saveHandler(e)
      }
    }
    class pi {
      constructor(e) {
        e.load && (this.load = () => Promise.resolve(e.load())),
          e.save && (this.save = (t) => Promise.resolve(e.save(t)))
      }
    }
    function di(e, t, n, r) {
      return new pi(fi(...arguments))
    }
    function fi(e, t, n, r) {
      return 1 === arguments.length
        ? null != e.modelTopology || null != e.weightSpecs
          ? new ci(e)
          : (console.warn(
              'Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release.',
            ),
            new ci({ modelTopology: e }))
        : (console.warn(
            'Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release.',
          ),
          new ci({
            modelTopology: e,
            weightSpecs: t,
            weightData: n,
            trainingConfig: r,
          }))
    }
    function mi(e) {
      return new hi(e)
    }
    function gi(e) {
      return new hi(e)
    }
    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function yi(e, t) {
      const n = e.length,
        r = []
      for (let s = 0; s < n; s++) {
        const a = n - 1 - s,
          i = e[a] || 1
        ;(t[t.length - 1 - s] || 1) > 1 && 1 === i && r.unshift(a)
      }
      return r
    }
    function bi(e, t) {
      const n = []
      for (let r = 0; r < t.length; r++) {
        const s = e[e.length - r - 1],
          a = t.length - r - 1,
          i = t[a]
        ;(null == s || (1 === s && i > 1)) && n.unshift(a)
      }
      return n
    }
    function xi(e, t) {
      const n = [],
        r = Math.max(e.length, t.length)
      for (let s = 0; s < r; s++) {
        let r = e[e.length - s - 1]
        null == r && (r = 1)
        let a = t[t.length - s - 1]
        if ((null == a && (a = 1), 1 === r)) n.unshift(a)
        else if (1 === a) n.unshift(r)
        else {
          if (r !== a)
            throw Error(
              `Operands could not be broadcast together with shapes ${e} and ${t}.`,
            )
          n.unshift(r)
        }
      }
      return n
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function wi(e, t, n) {
      if ((L(e), null != t && 3 !== t.length))
        throw new Error('tensor3d() requires shape to have three numbers')
      const r = Bs(e, n)
      if (3 !== r.length && 1 !== r.length)
        throw new Error(
          'tensor3d() requires values to be number[][][] or flat/TypedArray',
        )
      if (1 === r.length && null == t)
        throw new Error(
          'tensor3d() requires shape to be provided when `values` are a flat array',
        )
      return Ks(e, t, r, n)
    }
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ let vi
    const ki = js({
        fromPixels_: function (e, t = 3) {
          if (t > 4)
            throw new Error(
              'Cannot construct Tensor with more than 4 channels from pixels.',
            )
          if (null == e)
            throw new Error(
              'pixels passed to tf.browser.fromPixels() can not be null',
            )
          let n = !1,
            r = !1,
            s = !1,
            a = !1,
            i = !1,
            o = !1
          if (e.data instanceof Uint8Array) n = !0
          else if ('undefined' != typeof ImageData && e instanceof ImageData)
            r = !0
          else if (
            'undefined' != typeof HTMLVideoElement &&
            e instanceof HTMLVideoElement
          )
            s = !0
          else if (
            'undefined' != typeof HTMLImageElement &&
            e instanceof HTMLImageElement
          )
            a = !0
          else if (null != e.getContext) i = !0
          else {
            if (
              !('undefined' != typeof ImageBitmap && e instanceof ImageBitmap)
            )
              throw new Error(
                `pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`,
              )
            o = !0
          }
          if (null != Fr(Nr, Os.backendName)) {
            const n = { pixels: e },
              r = { numChannels: t }
            return Os.runKernel(Nr, n, r)
          }
          const [l, u] = s ? [e.videoWidth, e.videoHeight] : [e.width, e.height]
          let c, h
          if (i) c = e.getContext('2d').getImageData(0, 0, l, u).data
          else if (r || n) c = e.data
          else if (a || s || o) {
            if (null == vi)
              if ('undefined' == typeof document) {
                if (
                  'undefined' == typeof OffscreenCanvas ||
                  'undefined' == typeof OffscreenCanvasRenderingContext2D
                )
                  throw new Error(
                    'Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.',
                  )
                vi = new OffscreenCanvas(1, 1).getContext('2d')
              } else
                vi = document
                  .createElement('canvas')
                  .getContext('2d', { willReadFrequently: !0 })
            ;(vi.canvas.width = l),
              (vi.canvas.height = u),
              vi.drawImage(e, 0, 0, l, u),
              (c = vi.getImageData(0, 0, l, u).data)
          }
          if (4 === t) h = new Int32Array(c)
          else {
            const e = l * u
            h = new Int32Array(e * t)
            for (let n = 0; n < e; n++)
              for (let e = 0; e < t; ++e) h[n * t + e] = c[4 * n + e]
          }
          return wi(h, [u, l, t], 'int32')
        },
      }),
      Ii = -2,
      Ni = -1
    function Si(e, t, n) {
      const r = e.shape.length
      O(
        r === t.length,
        () =>
          `Error in slice${r}D: Length of begin ${t} must match the rank of the array (${r}).`,
      ),
        O(
          r === n.length,
          () =>
            `Error in slice${r}D: Length of size ${n} must match the rank of the array (${r}).`,
        )
      for (let s = 0; s < r; ++s)
        O(
          t[s] + n[s] <= e.shape[s],
          () =>
            `Error in slice${r}D: begin[${s}] + size[${s}] (${t[s] + n[s]}) would overflow input.shape[${s}] (${e.shape[s]})`,
        )
    }
    function Ti(e) {
      const t = []
      let n = 0
      for (; e > 0; ) 1 & e && t.push(n), (e /= 2), n++
      return t
    }
    function Ci(e, t, n) {
      const r = []
      for (let s = 0; s < e.length; s++) r[s] = Math.ceil((t[s] - e[s]) / n[s])
      return r
    }
    function $i(e, t, n, r) {
      const s = [...e]
      for (let e = s.length; e < r.length; e++) s.push(1)
      for (let e = 0; e < n; e++)
        0 === e ? (s[t] = 1) : (s.splice(t, 0, 1), s.pop())
      return s
    }
    function Ei(e, t, n) {
      return n <= e ? n : n - (t - 1)
    }
    function Ri(e, t) {
      const n = []
      for (let r = 0; r < e; r++) n.push(t + r)
      return n
    }
    function Ai(e, t, n, r, s, a, i, o, l) {
      const u = e.length
      let c = new Array(u),
        h = new Array(u),
        p = new Array(u)
      if (t.length && n > 0) {
        const l = t[0],
          u = n + 1
        ;(c = _i(i, l, u, r, e)), (h = Fi(o, l, u, s, e)), (p = $i(a, l, u, e))
      } else
        for (let t = 0; t < u; t++)
          (c[t] = Oi(i, r, a, e, t, l)),
            (h[t] = Mi(o, s, a, e, t, l)),
            (p[t] = Di(a, t, l))
      return { begin: c, end: h, strides: p }
    }
    function _i(e, t, n, r, s) {
      const a = [...s],
        i = Ri(n, t)
      for (let s = 0; s < a.length; s++)
        if (i.indexOf(s) > -1) a[s] = 0
        else {
          const i = Ei(t, n, s)
          let o = r[i]
          e & (1 << i) && (o = 0), (a[s] = o)
        }
      return a
    }
    function Fi(e, t, n, r, s) {
      const a = [...s],
        i = Ri(n, t)
      for (let s = 0; s < a.length; s++)
        if (i.indexOf(s) > -1) a[s] = Number.MAX_SAFE_INTEGER
        else {
          const i = Ei(t, n, s)
          let o = r[i]
          e & (1 << i) && (o = Number.MAX_SAFE_INTEGER), (a[s] = o)
        }
      for (let e = 0; e < a.length; e++) {
        const t = s[e]
        a[e] < 0 && (a[e] += t), (a[e] = _(0, a[e], s[e]))
      }
      return a
    }
    function Di(e, t, n) {
      let r = e[t]
      return (n & (1 << t) || null == r) && (r = 1), r
    }
    function Oi(e, t, n, r, s, a) {
      let i = t[s]
      const o = n[s] || 1
      ;(e & (1 << s) || a & (1 << s) || null == i) &&
        (i = o > 0 ? Number.MIN_SAFE_INTEGER : Number.MAX_SAFE_INTEGER)
      const l = r[s]
      return i < 0 && (i += l), (i = _(0, i, l - 1)), i
    }
    function Mi(e, t, n, r, s, a) {
      let i = t[s]
      const o = n[s] || 1
      ;(e & (1 << s) || a & (1 << s) || null == i) &&
        (i = o > 0 ? Number.MAX_SAFE_INTEGER : Number.MIN_SAFE_INTEGER)
      const l = r[s]
      return i < 0 && (i += l), (i = o > 0 ? _(0, i, l) : _(-1, i, l - 1)), i
    }
    function Li(e, t, n) {
      let r = n.length
      for (let e = 0; e < n.length; e++)
        if (n[e] > 1) {
          r = e
          break
        }
      for (let s = r + 1; s < n.length; s++)
        if (t[s] > 0 || n[s] !== e[s]) return !1
      return !0
    }
    function zi(e, t) {
      let n = e.length > 0 ? e[e.length - 1] : 1
      for (let r = 0; r < e.length - 1; r++) n += e[r] * t[r]
      return n
    }
    function Pi(e, t, n) {
      let r
      const s = e.shape.length
      let a
      return (
        (r =
          'number' == typeof t
            ? [t, ...new Array(s - 1).fill(0)]
            : t.length < s
              ? t.concat(new Array(s - t.length).fill(0))
              : t.slice()),
        r.forEach((e) => {
          O(-1 !== e, () => 'slice() does not support negative begin indexing.')
        }),
        (a =
          null == n
            ? new Array(s).fill(-1)
            : 'number' == typeof n
              ? [n, ...new Array(s - 1).fill(-1)]
              : n.length < s
                ? n.concat(new Array(s - n.length).fill(-1))
                : n),
        (a = a.map((t, n) =>
          t >= 0
            ? t
            : (O(
                -1 === t,
                () =>
                  `Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`,
              ),
              e.shape[n] - r[n]),
        )),
        [r, a]
      )
    }
    function Bi(e, t, n, r, s, a, i, o, l) {
      let u
      if (
        (null == r ? ((u = new Array(t.length)), u.fill(1)) : (u = r),
        null != i && i & (i - 1))
      )
        throw new Error('Multiple ellipses in slice is not allowed.')
      let c = !1
      const h = {
        dims: u.length,
        numAddAxisAfterEllipsis: 0,
        begin: t.slice(),
        end: n.slice(),
        strides: u.slice(),
        beginMask: s,
        endMask: a,
        ellipsisMask: i,
        newAxisMask: o,
        shrinkAxisMask: l,
      }
      for (let e = 0; e < h.dims; e++)
        c && (1 << e) & o && h.numAddAxisAfterEllipsis++,
          (1 << e) & i && (c = !0)
      c || ((h.ellipsisMask |= 1 << h.dims), h.dims++)
      const p = {
        dims: e.length,
        beginMask: 0,
        endMask: 0,
        beginValid: !1,
        endValid: !1,
      }
      !(function (e, t) {
        ;(t.beginMask = 0), (t.endMask = 0), (t.shrinkAxisMask = 0)
        let n = 0
        ;(t.beginValid = null != e.begin),
          (t.endValid = null != e.end),
          (t.begin = new Array(t.dims)),
          (t.end = new Array(t.dims)),
          (t.strides = new Array(t.dims)),
          (t.finalShapeGatherIndices = []),
          (t.finalShapeGatherIndicesSparse = []),
          (t.inputShapeGatherIndicesSparse = new Array(t.dims))
        for (let r = 0; r < e.dims; r++)
          if ((1 << r) & e.ellipsisMask) {
            const s = Math.min(
              t.dims - (e.dims - r) + 1 + e.numAddAxisAfterEllipsis,
              t.dims,
            )
            for (; n < s; n++)
              (t.begin[n] = 0),
                (t.end[n] = 0),
                (t.strides[n] = 1),
                (t.beginMask |= 1 << n),
                (t.endMask |= 1 << n),
                t.finalShapeGatherIndices.push(n),
                t.finalShapeGatherIndicesSparse.push(-1),
                (t.inputShapeGatherIndicesSparse[n] = r)
          } else if ((1 << r) & e.newAxisMask)
            t.finalShapeGatherIndices.push(Ii),
              t.finalShapeGatherIndicesSparse.push(-1)
          else {
            if (n === t.begin.length)
              throw Error(
                `Index out of range using input dim ${n}; input has only ${t.dims} dims, ${t.begin.length}.`,
              )
            null != e.begin && (t.begin[n] = e.begin[r]),
              null != e.end && (t.end[n] = e.end[r]),
              (t.strides[n] = e.strides[r]),
              e.beginMask & (1 << r) && (t.beginMask |= 1 << n),
              e.endMask & (1 << r) && (t.endMask |= 1 << n),
              e.shrinkAxisMask & (1 << r)
                ? (t.finalShapeGatherIndices.push(Ni),
                  t.finalShapeGatherIndicesSparse.push(-1),
                  (t.shrinkAxisMask |= 1 << n))
                : (t.finalShapeGatherIndices.push(n),
                  t.finalShapeGatherIndicesSparse.push(r)),
              (t.inputShapeGatherIndicesSparse[n] = r),
              n++
          }
      })(h, p)
      let d = !0,
        f = !0,
        m = !0
      const g = [],
        y = []
      for (let t = 0; t < e.length; ++t) {
        if (0 === p.strides[t]) throw Error(`strides[${t}] must be non-zero`)
        const n = !!(p.shrinkAxisMask & (1 << t)),
          r = e[t]
        if (-1 === r) {
          g.push(n ? 1 : -1)
          continue
        }
        const s = [p.beginMask & (1 << t), p.endMask & (1 << t)],
          a = [p.strides[t] > 0 ? 0 : -1, p.strides[t] > 0 ? r : r - 1]
        if (n && p.strides[t] <= 0)
          throw Error('only stride 1 allowed on non-range indexing.')
        m = m && 1 === p.strides[t]
        const i = !!(p.beginMask & (1 << t) && p.endMask & (1 << t))
        if (p.beginValid && p.endValid) {
          if (n) {
            const e = p.begin[t] < 0 ? r + p.begin[t] : p.begin[t]
            if (
              ((p.begin[t] = e), (p.end[t] = p.begin[t] + 1), e < 0 || e >= r)
            )
              throw Error(
                `slice index ${p.begin[t]} of dimension ${t} out of bounds.`,
              )
          } else
            (p.begin[t] = Wi(p.begin[t], 0, p.strides[t], r, s, a)),
              (p.end[t] = Wi(p.end[t], 1, p.strides[t], r, s, a))
          const e = 1 === p.strides[t] && 0 === p.begin[t] && p.end[t] === r
          ;(d = d && e), (f = f && ((0 === t && 1 === p.strides[t]) || e))
        } else
          (d = d && 1 === p.strides[t] && i),
            (f = f && ((0 === t && 1 === p.strides[t]) || i))
        let o,
          l = !1
        if (
          (p.beginValid && p.endValid
            ? ((o = p.end[t] - p.begin[t]), (l = !0))
            : n
              ? ((o = 1), (l = !0))
              : i && r >= 0 && ((o = p.strides[t] < 0 ? -r : r), (l = !0)),
          l)
        ) {
          let e
          ;(e =
            0 === o || o < 0 != p.strides[t] < 0
              ? 0
              : Math.trunc(o / p.strides[t]) + (o % p.strides[t] != 0 ? 1 : 0)),
            g.push(e)
        } else g.push(-1)
      }
      for (let e = 0; e < p.finalShapeGatherIndices.length; ++e) {
        const t = p.finalShapeGatherIndices[e]
        t >= 0 ? y.push(g[t]) : t === Ii && y.push(1)
      }
      return {
        finalShapeSparse: y.filter(
          (e, t) => p.finalShapeGatherIndices[t] !== Ii,
        ),
        finalShape: y,
        isIdentity: d,
        sliceDim0: f,
        isSimpleSlice: m,
        begin: p.begin,
        end: p.end,
        strides: p.strides,
      }
    }
    function Wi(e, t, n, r, s, a) {
      if (s[t]) return n > 0 ? a[t] : a[(t + 1) & 1]
      {
        const t = e < 0 ? r + e : e
        return t < a[0] ? a[0] : t > a[1] ? a[1] : t
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Vi {
      getClassName() {
        return this.constructor.className
      }
      static fromConfig(e, t) {
        return new e(t)
      }
    }
    class Ui {
      constructor() {
        this.classNameMap = {}
      }
      static getMap() {
        return null == Ui.instance && (Ui.instance = new Ui()), Ui.instance
      }
      static register(e) {
        Ui.getMap().classNameMap[e.className] = [e, e.fromConfig]
      }
    }
    function Gi(e) {
      O(
        null != e.className,
        () =>
          'Class being registered does not have the static className property defined.',
      ),
        O(
          'string' == typeof e.className,
          () =>
            'className is required to be a string, but got type ' +
            typeof e.className,
        ),
        O(
          e.className.length > 0,
          () =>
            'Class being registered has an empty-string as its className, which is disallowed.',
        ),
        Ui.register(e)
    }
    function Hi() {
      return Os
    }
    function ji() {
      return Os.memory()
    }
    function qi(e, t) {
      return Os.tidy(e, t)
    }
    function Ki(e) {
      Es(e).forEach((e) => e.dispose())
    }
    function Xi(e) {
      return Os.keep(e)
    }
    function Yi(e, t, n = 1) {
      return Os.registerBackend(e, t, n)
    }
    function Zi(e) {
      return Os.customGrad(e)
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Ji(e, t) {
      if (((Z(e) && 'string' !== t) || Array.isArray(e)) && 'complex64' !== t)
        throw new Error(
          'Error creating a new Scalar: value must be a primitive (number|boolean|string)',
        )
      if ('string' === t && Z(e) && !(e instanceof Uint8Array))
        throw new Error(
          'When making a scalar from encoded string, the value must be `Uint8Array`.',
        )
      return Ks(e, [], [], t)
    }
    ms = function (e) {
      ye().getBool('DEPRECATION_WARNINGS_ENABLED') &&
        console.warn(
          e +
            ' You can disable deprecation warnings with tf.disableDeprecationWarnings().',
        )
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class Qi extends Vi {
      minimize(e, t = !1, n) {
        const { value: r, grads: s } = this.computeGradients(e, n)
        if (null != n) {
          const e = n.map((e) => ({ name: e.name, tensor: s[e.name] }))
          this.applyGradients(e)
        } else this.applyGradients(s)
        return Ki(s), t ? r : (r.dispose(), null)
      }
      get iterations() {
        return (
          null == this.iterations_ && (this.iterations_ = 0), this.iterations_
        )
      }
      incrementIterations() {
        this.iterations_ = this.iterations + 1
      }
      computeGradients(e, t) {
        return (function (e, t) {
          O(ne(e), () => 'The f passed in variableGrads(f) must be a function'),
            O(
              null == t ||
                (Array.isArray(t) && t.every((e) => e instanceof bs)),
              () =>
                'The varList passed in variableGrads(f, varList) must be an array of variables',
            )
          const n = null != t
          if (!n) {
            t = []
            for (const e in Os.registeredVariables)
              t.push(Os.registeredVariables[e])
          }
          const r = n ? t.filter((e) => !e.trainable) : null,
            s = t.length
          ;(t = t.filter((e) => e.trainable)),
            O(
              t.length > 0,
              () =>
                `variableGrads() expects at least one of the input variables to be trainable, but none of the ${s} variables is trainable.`,
            )
          const { value: a, grads: i } = Os.gradients(e, t, null, !0)
          O(
            i.some((e) => null != e),
            () =>
              'Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().',
          ),
            O(
              0 === a.rank,
              () =>
                `The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`,
            )
          const o = {}
          return (
            t.forEach((e, t) => {
              null != i[t] && (o[e.name] = i[t])
            }),
            null != r && r.forEach((e) => (o[e.name] = null)),
            { value: a, grads: o }
          )
        })(e, t)
      }
      dispose() {
        null != this.iterations_ && Ki(this.iterations_)
      }
      async saveIterations() {
        return (
          null == this.iterations_ && (this.iterations_ = 0),
          { name: 'iter', tensor: Ji(this.iterations_, 'int32') }
        )
      }
      async getWeights() {
        throw new Error(
          'getWeights() is not implemented for this optimizer yet.',
        )
      }
      async setWeights(e) {
        throw new Error(
          `setWeights() is not implemented for this optimizer class ${this.getClassName()}`,
        )
      }
      async extractIterations(e) {
        return (this.iterations_ = (await e[0].tensor.data())[0]), e.slice(1)
      }
    }
    Object.defineProperty(Qi, Symbol.hasInstance, {
      value: (e) =>
        null != e.minimize &&
        null != e.computeGradients &&
        null != e.applyGradients,
    })
    const eo = js({
        abs_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = Us(e, 'x', 'abs')
            if ('complex64' === t.dtype) {
              const e = { x: t }
              return Os.runKernel(Ke, e)
            }
            {
              const e = { x: t }
              return Os.runKernel(ke, e)
            }
          },
      }),
      to = js({
        acos_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = { x: Us(e, 'x', 'acos') }
            return Os.runKernel(Ie, t)
          },
      }),
      no = js({
        acosh_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = { x: Us(e, 'x', 'acosh') }
            return Os.runKernel(Ne, t)
          },
      }),
      ro = js({
        add_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t) {
            let n = Us(e, 'a', 'add'),
              r = Us(t, 'b', 'add')
            ;[n, r] = Cs(n, r)
            const s = { a: n, b: r }
            return Os.runKernel(Se, s)
          },
      }),
      so = js({
        addN_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            O(
              Array.isArray(e),
              () =>
                'The argument passed to tf.addN() must be a list of tensors',
            ),
              O(
                e.length >= 1,
                () =>
                  `Must pass at least one tensor to tf.addN(), but got ${e.length}`,
              )
            const t = e.map((e, t) => Us(e, `tensors${t}`, 'addN')),
              n = t[0]
            t.forEach((e) => {
              if (e.dtype !== n.dtype)
                throw new Error(
                  'All tensors passed to tf.addN() must have the same dtype',
                )
            }),
              t.forEach((e) => {
                if (!B(e.shape, n.shape))
                  throw new Error(
                    'All tensors passed to tf.addN() must have the same shape',
                  )
              })
            const r = t
            return Os.runKernel(Te, r)
          },
      }),
      ao = js({
        all_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t = null, n = !1) {
            const r = { x: Us(e, 'x', 'all', 'bool') },
              s = { axis: t, keepDims: n }
            return Os.runKernel(Ce, r, s)
          },
      }),
      io = js({
        any_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t = null, n = !1) {
            const r = { x: Us(e, 'x', 'any', 'bool') },
              s = { axis: t, keepDims: n }
            return Os.runKernel($e, r, s)
          },
      }),
      oo = js({
        argMax_:
          /**
           * @license
           * Copyright 2020 Google Inc. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t = 0) {
            const n = { x: Us(e, 'x', 'argMax') },
              r = { axis: t }
            return Os.runKernel(Ee, n, r)
          },
      }),
      lo = js({
        argMin_:
          /**
           * @license
           * Copyright 2020 Google Inc. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t = 0) {
            const n = { x: Us(e, 'x', 'argMin') },
              r = { axis: t }
            return Os.runKernel(Re, n, r)
          },
      }),
      uo = js({
        asin_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = { x: Us(e, 'x', 'asin') }
            return Os.runKernel(Ae, t)
          },
      }),
      co = js({
        asinh_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = { x: Us(e, 'x', 'asinh') }
            return Os.runKernel(_e, t)
          },
      }),
      ho = js({
        atan_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = { x: Us(e, 'x', 'atan') }
            return Os.runKernel(Fe, t)
          },
      }),
      po = js({
        atan2_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t) {
            let n = Us(e, 'a', 'atan2'),
              r = Us(t, 'b', 'atan2')
            ;[n, r] = Cs(n, r)
            const s = { a: n, b: r }
            return Os.runKernel(Oe, s)
          },
      }),
      fo = js({
        atanh_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = { x: Us(e, 'x', 'atanh') }
            return Os.runKernel(De, t)
          },
      })
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function mo(e, t, n, r, s = 'NHWC', a) {
      return bo(e, [...t, e[3]], n, a, r, null, null, Co(s))
    }
    function go(e, t, n, r, s, a, i = 'channelsLast') {
      const [o, l] = vo(t)
      let u
      if ('channelsLast' === i) u = [o, l, e[3], e[3]]
      else {
        if ('channelsFirst' !== i) throw new Error(`Unknown dataFormat ${i}`)
        u = [o, l, e[1], e[1]]
      }
      return bo(e, u, n, r, s, a, !1, i)
    }
    function yo(e, t, n, r, s, a, i = 'NDHWC') {
      const [o, l, u] = ko(t)
      let c, h
      if ('NDHWC' === i) (h = 'channelsLast'), (c = [o, l, u, e[4], e[4]])
      else {
        if ('NCDHW' !== i) throw new Error(`Unknown dataFormat ${i}`)
        ;(h = 'channelsFirst'), (c = [o, l, u, e[1], e[1]])
      }
      return xo(e, c, n, r, s, !1, h, a)
    }
    function bo(e, t, n, r, s, a, i = !1, o = 'channelsLast') {
      let [l, u, c, h] = [-1, -1, -1, -1]
      if ('channelsLast' === o) [l, u, c, h] = e
      else {
        if ('channelsFirst' !== o) throw new Error(`Unknown dataFormat ${o}`)
        ;[l, h, u, c] = e
      }
      const [p, d, , f] = t,
        [m, g] = vo(n),
        [y, b] = vo(r),
        x = Io(p, y),
        w = Io(d, b),
        {
          padInfo: v,
          outHeight: k,
          outWidth: I,
        } = (function (e, t, n, r, s, a, i, o, l) {
          let u, c, h
          if ('number' == typeof e) {
            u = {
              top: e,
              bottom: e,
              left: e,
              right: e,
              type: 0 === e ? 'VALID' : 'NUMBER',
            }
            const s = (function (e, t, n, r, s) {
              null == r && (r = wo(e, t, n))
              const a = e[1]
              return [
                No((e[0] - t + 2 * r) / n + 1, s),
                No((a - t + 2 * r) / n + 1, s),
              ]
            })([t, n], a, r, e, o)
            ;(c = s[0]), (h = s[1])
          } else if ('same' === e) {
            ;(c = Math.ceil(t / r)), (h = Math.ceil(n / s))
            const e = Math.max(0, (c - 1) * r + a - t),
              o = Math.max(0, (h - 1) * s + i - n),
              l = Math.floor(e / 2),
              p = e - l,
              d = Math.floor(o / 2)
            u = { top: l, bottom: p, left: d, right: o - d, type: 'SAME' }
          } else if ('valid' === e)
            (u = { top: 0, bottom: 0, left: 0, right: 0, type: 'VALID' }),
              (c = Math.ceil((t - a + 1) / r)),
              (h = Math.ceil((n - i + 1) / s))
          else {
            if ('object' != typeof e)
              throw Error(`Unknown padding parameter: ${e}`)
            {
              const p = 'channelsLast' === l ? e[1][0] : e[2][0],
                d = 'channelsLast' === l ? e[1][1] : e[2][1],
                f = 'channelsLast' === l ? e[2][0] : e[3][0],
                m = 'channelsLast' === l ? e[2][1] : e[3][1]
              ;(u = {
                top: p,
                bottom: d,
                left: f,
                right: m,
                type:
                  0 === p && 0 === d && 0 === f && 0 === m
                    ? 'VALID'
                    : 'EXPLICIT',
              }),
                (c = No((t - a + p + d) / r + 1, o)),
                (h = No((n - i + f + m) / s + 1, o))
            }
          }
          return { padInfo: u, outHeight: c, outWidth: h }
        })(s, u, c, m, g, x, w, a, o),
        N = i ? f * h : f
      let S
      return (
        'channelsFirst' === o
          ? (S = [l, N, k, I])
          : 'channelsLast' === o && (S = [l, k, I, N]),
        {
          batchSize: l,
          dataFormat: o,
          inHeight: u,
          inWidth: c,
          inChannels: h,
          outHeight: k,
          outWidth: I,
          outChannels: N,
          padInfo: v,
          strideHeight: m,
          strideWidth: g,
          filterHeight: p,
          filterWidth: d,
          effectiveFilterHeight: x,
          effectiveFilterWidth: w,
          dilationHeight: y,
          dilationWidth: b,
          inShape: e,
          outShape: S,
          filterShape: t,
        }
      )
    }
    function xo(e, t, n, r, s, a = !1, i = 'channelsLast', o) {
      let [l, u, c, h, p] = [-1, -1, -1, -1, -1]
      if ('channelsLast' === i) [l, u, c, h, p] = e
      else {
        if ('channelsFirst' !== i) throw new Error(`Unknown dataFormat ${i}`)
        ;[l, p, u, c, h] = e
      }
      const [d, f, m, , g] = t,
        [y, b, x] = ko(n),
        [w, v, k] = ko(r),
        I = Io(d, w),
        N = Io(f, v),
        S = Io(m, k),
        {
          padInfo: T,
          outDepth: C,
          outHeight: $,
          outWidth: E,
        } = (function (e, t, n, r, s, a, i, o, l, u, c) {
          let h, p, d, f
          if ('number' == typeof e) {
            h = {
              top: e,
              bottom: e,
              left: e,
              right: e,
              front: e,
              back: e,
              type: 0 === e ? 'VALID' : 'NUMBER',
            }
            const a = (function (e, t, n, r, s, a) {
              null == s && (s = wo(e, t, r))
              const i = e[1],
                o = e[2]
              return [
                No((e[0] - t + 2 * s) / r + 1, a),
                No((i - t + 2 * s) / r + 1, a),
                No((o - t + 2 * s) / r + 1, a),
                1,
              ]
            })([t, n, r, 1], o, 0, s, e, c)
            ;(p = a[0]), (d = a[1]), (f = a[2])
          } else if ('same' === e) {
            ;(p = Math.ceil(t / s)),
              (d = Math.ceil(n / a)),
              (f = Math.ceil(r / i))
            const e = (p - 1) * s + o - t,
              c = (d - 1) * a + l - n,
              m = (f - 1) * i + u - r,
              g = Math.floor(e / 2),
              y = e - g,
              b = Math.floor(c / 2),
              x = c - b,
              w = Math.floor(m / 2)
            h = {
              top: b,
              bottom: x,
              left: w,
              right: m - w,
              front: g,
              back: y,
              type: 'SAME',
            }
          } else {
            if ('valid' !== e) throw Error(`Unknown padding parameter: ${e}`)
            ;(h = {
              top: 0,
              bottom: 0,
              left: 0,
              right: 0,
              front: 0,
              back: 0,
              type: 'VALID',
            }),
              (p = Math.ceil((t - o + 1) / s)),
              (d = Math.ceil((n - l + 1) / a)),
              (f = Math.ceil((r - u + 1) / i))
          }
          return { padInfo: h, outDepth: p, outHeight: d, outWidth: f }
        })(s, u, c, h, y, b, x, I, N, S, o),
        R = a ? g * p : g
      let A
      return (
        'channelsFirst' === i
          ? (A = [l, R, C, $, E])
          : 'channelsLast' === i && (A = [l, C, $, E, R]),
        {
          batchSize: l,
          dataFormat: i,
          inDepth: u,
          inHeight: c,
          inWidth: h,
          inChannels: p,
          outDepth: C,
          outHeight: $,
          outWidth: E,
          outChannels: R,
          padInfo: T,
          strideDepth: y,
          strideHeight: b,
          strideWidth: x,
          filterDepth: d,
          filterHeight: f,
          filterWidth: m,
          effectiveFilterDepth: I,
          effectiveFilterHeight: N,
          effectiveFilterWidth: S,
          dilationDepth: w,
          dilationHeight: v,
          dilationWidth: k,
          inShape: e,
          outShape: A,
          filterShape: t,
        }
      )
    }
    function wo(e, t, n, r = 1) {
      const s = Io(t, r)
      return Math.floor((e[0] * (n - 1) - n + s) / 2)
    }
    function vo(e) {
      return 'number' == typeof e
        ? [e, e, e]
        : 2 === e.length
          ? [e[0], e[1], 1]
          : e
    }
    function ko(e) {
      return 'number' == typeof e ? [e, e, e] : e
    }
    function Io(e, t) {
      return t <= 1 ? e : e + (e - 1) * (t - 1)
    }
    function No(e, t) {
      if (!t) return Math.trunc(e)
      switch (t) {
        case 'round':
          return Math.round(e)
        case 'ceil':
          return Math.ceil(e)
        case 'floor':
          return Math.floor(e)
        default:
          throw new Error(`Unknown roundingMode ${t}`)
      }
    }
    function So(e) {
      const [t, n, r] = vo(e)
      return 1 === t && 1 === n && 1 === r
    }
    function To(e, t) {
      return So(e) || So(t)
    }
    function Co(e) {
      if ('NHWC' === e) return 'channelsLast'
      if ('NCHW' === e) return 'channelsFirst'
      throw new Error(`Unknown dataFormat ${e}`)
    }
    function $o(e, t, n) {
      if (null != n) {
        if ('string' == typeof t)
          throw Error(
            `Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`,
          )
        if ('number' == typeof t)
          O(
            W(t),
            () =>
              `Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`,
          )
        else {
          if ('object' != typeof t)
            throw Error(`Error in ${e}: Unknown padding parameter: ${t}`)
          t.forEach((t) => {
            t.forEach((t) => {
              O(
                W(t),
                () =>
                  `Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`,
              )
            })
          })
        }
      }
    }
    const Eo = js({
        reshape_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t) {
            const n = { x: Us(e, 'x', 'reshape', 'string_or_numeric') },
              r = { shape: t }
            return Os.runKernel(An, n, r)
          },
      }),
      Ro = js({
        avgPool_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r, s) {
            const a = Us(e, 'x', 'avgPool', 'float32')
            O(
              To(n, 1),
              () =>
                `Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`,
            )
            let i = a,
              o = !1
            3 === a.rank &&
              ((o = !0), (i = Eo(a, [1, a.shape[0], a.shape[1], a.shape[2]]))),
              O(
                4 === i.rank,
                () =>
                  `Error in avgPool: x must be rank 4 but got rank ${i.rank}.`,
              ),
              $o('avgPool', r, s)
            const l = { x: i },
              u = { filterSize: t, strides: n, pad: r, dimRoundingMode: s }
            let c = Os.runKernel(Me, l, u)
            return (
              (c = Ka(c, a.dtype)),
              o ? Eo(c, [c.shape[1], c.shape[2], c.shape[3]]) : c
            )
          },
      }),
      Ao = js({
        avgPool3d_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r, s, a = 'NDHWC') {
            const i = Us(e, 'x', 'avgPool3d', 'float32')
            let o = i,
              l = !1
            4 === i.rank &&
              ((l = !0),
              (o = Eo(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]]))),
              O(
                5 === o.rank,
                () =>
                  `Error in avgPool3d: x must be rank 5 but got rank ${o.rank}.`,
              ),
              O(
                'NDHWC' === a,
                () =>
                  `Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`,
              ),
              $o('avgPool3d', r, s)
            const u = { x: o },
              c = {
                filterSize: t,
                strides: n,
                pad: r,
                dimRoundingMode: s,
                dataFormat: a,
              }
            let h = Os.runKernel(ze, u, c)
            return (
              (h = Ka(h, o.dtype)),
              l ? Eo(h, [h.shape[1], h.shape[2], h.shape[3], h.shape[4]]) : h
            )
          },
      }),
      _o = js({
        concat_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t = 0) {
            O(e.length >= 1, () => 'Pass at least one tensor to concat')
            const n = Gs(e, 'tensors', 'concat', 'string_or_numeric')
            if (
              ('complex64' === n[0].dtype &&
                n.forEach((e) => {
                  if ('complex64' !== e.dtype)
                    throw new Error(
                      `Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `,
                    )
                }),
              1 === n.length)
            )
              return Xa(n[0])
            const r = n,
              s = { axis: t }
            return Os.runKernel(Xe, r, s)
          },
      }),
      Fo = js({
        matMul_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n = !1, r = !1) {
            let s = Us(e, 'a', 'matMul'),
              a = Us(t, 'b', 'matMul')
            ;[s, a] = Cs(s, a)
            const i = { a: s, b: a },
              o = { transposeA: n, transposeB: r }
            return Os.runKernel(Be, i, o)
          },
      }),
      Do = js({
        mul_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t) {
            let n = Us(e, 'a', 'mul'),
              r = Us(t, 'b', 'mul')
            ;[n, r] = Cs(n, r)
            const s = { a: n, b: r }
            return Os.runKernel(pn, s)
          },
      }),
      Oo = js({
        sigmoid_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = { x: Us(e, 'x', 'sigmoid', 'float32') }
            return Os.runKernel(Kn, t)
          },
      }),
      Mo = js({
        slice_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n) {
            const r = Us(e, 'x', 'slice', 'string_or_numeric')
            if (0 === r.rank) throw new Error('Slicing scalar is not possible')
            const s = { x: r },
              a = { begin: t, size: n }
            return Os.runKernel(Gn, s, a)
          },
      }),
      Lo = js({
        tanh_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = { x: Us(e, 'x', 'tanh', 'float32') }
            return Os.runKernel(fr, t)
          },
      }),
      zo = js({
        basicLSTMCell_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r, s, a) {
            const i = Us(e, 'forgetBias', 'basicLSTMCell'),
              o = Us(t, 'lstmKernel', 'basicLSTMCell'),
              l = Us(n, 'lstmBias', 'basicLSTMCell'),
              u = Us(r, 'data', 'basicLSTMCell'),
              c = Us(s, 'c', 'basicLSTMCell'),
              h = Us(a, 'h', 'basicLSTMCell'),
              p = _o([u, h], 1),
              d = Fo(p, o),
              f = ro(d, l),
              m = f.shape[0],
              g = f.shape[1] / 4,
              y = [m, g],
              b = Mo(f, [0, 0], y),
              x = Mo(f, [0, g], y),
              w = Mo(f, [0, 2 * g], y),
              v = Mo(f, [0, 3 * g], y),
              k = ro(Do(Oo(b), Lo(x)), Do(c, Oo(ro(i, w))))
            return [k, Do(Lo(k), Oo(v))]
          },
      }),
      Po = js({
        batchToSpaceND_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n) {
            const r = Us(e, 'x', 'batchToSpaceND'),
              s = t.reduce((e, t) => e * t)
            O(
              r.rank >= 1 + t.length,
              () =>
                `input rank is ${r.rank} but should be > than blockShape.length ${t.length}`,
            ),
              O(
                n.length === t.length,
                () =>
                  `crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`,
              ),
              O(
                r.shape[0] % s == 0,
                () =>
                  `input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(' * ')} === ${s}`,
              )
            const a = { x: r },
              i = { blockShape: t, crops: n }
            return Os.runKernel(We, a, i)
          },
      }),
      Bo = js({
        batchNorm_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r, s, a) {
            null == a && (a = 0.001)
            const i = Us(e, 'x', 'batchNorm'),
              o = Us(t, 'mean', 'batchNorm'),
              l = Us(n, 'variance', 'batchNorm')
            let u, c
            null != s && (u = Us(s, 'scale', 'batchNorm')),
              null != r && (c = Us(r, 'offset', 'batchNorm')),
              O(
                o.rank === l.rank,
                () =>
                  'Batch normalization gradient requires mean and variance to have equal ranks.',
              ),
              O(
                null == c || o.rank === c.rank,
                () =>
                  'Batch normalization gradient requires mean and offset to have equal ranks.',
              ),
              O(
                null == u || o.rank === u.rank,
                () =>
                  'Batch normalization gradient requires mean and scale to have equal ranks.',
              )
            const h = (function (e) {
                let t
                return (
                  (t =
                    0 === e.rank || 1 === e.rank
                      ? Eo(e, [1, 1, 1, e.size])
                      : 2 === e.rank
                        ? Eo(e, [1, 1, e.shape[0], e.shape[1]])
                        : 3 === e.rank
                          ? Eo(e, [1, e.shape[0], e.shape[1], e.shape[2]])
                          : e),
                  t
                )
              })(i),
              p = { x: h, scale: u, offset: c, mean: o, variance: l },
              d = { varianceEpsilon: a },
              f = Os.runKernel(Rt, p, d)
            return Eo(f, i.shape)
          },
      }),
      Wo = js({
        batchNorm2d_: function (e, t, n, r, s, a) {
          const i = Us(e, 'x', 'batchNorm'),
            o = Us(t, 'mean', 'batchNorm'),
            l = Us(n, 'variance', 'batchNorm')
          let u, c
          return (
            null != s && (u = Us(s, 'scale', 'batchNorm')),
            null != r && (c = Us(r, 'offset', 'batchNorm')),
            O(
              2 === i.rank,
              () =>
                `Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`,
            ),
            O(
              2 === o.rank || 1 === o.rank,
              () =>
                `Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`,
            ),
            O(
              2 === l.rank || 1 === l.rank,
              () =>
                `Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`,
            ),
            null != u &&
              O(
                2 === u.rank || 1 === u.rank,
                () =>
                  `Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`,
              ),
            null != c &&
              O(
                2 === c.rank || 1 === c.rank,
                () =>
                  `Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`,
              ),
            Bo(i, o, l, c, u, a)
          )
        },
      }),
      Vo = js({
        batchNorm3d_: function (e, t, n, r, s, a) {
          const i = Us(e, 'x', 'batchNorm'),
            o = Us(t, 'mean', 'batchNorm'),
            l = Us(n, 'variance', 'batchNorm')
          let u, c
          return (
            null != s && (u = Us(s, 'scale', 'batchNorm')),
            null != r && (c = Us(r, 'offset', 'batchNorm')),
            O(
              3 === i.rank,
              () =>
                `Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`,
            ),
            O(
              3 === o.rank || 1 === o.rank,
              () =>
                `Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`,
            ),
            O(
              3 === l.rank || 1 === l.rank,
              () =>
                `Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`,
            ),
            null != u &&
              O(
                3 === u.rank || 1 === u.rank,
                () =>
                  `Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`,
              ),
            null != c &&
              O(
                3 === c.rank || 1 === c.rank,
                () =>
                  `Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`,
              ),
            Bo(i, o, l, c, u, a)
          )
        },
      }),
      Uo = js({
        batchNorm4d_: function (e, t, n, r, s, a) {
          const i = Us(e, 'x', 'batchNorm'),
            o = Us(t, 'mean', 'batchNorm'),
            l = Us(n, 'variance', 'batchNorm')
          let u, c
          return (
            null != s && (u = Us(s, 'scale', 'batchNorm')),
            null != r && (c = Us(r, 'offset', 'batchNorm')),
            O(
              4 === i.rank,
              () =>
                `Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`,
            ),
            O(
              4 === o.rank || 1 === o.rank,
              () =>
                `Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`,
            ),
            O(
              4 === l.rank || 1 === l.rank,
              () =>
                `Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`,
            ),
            null != u &&
              O(
                4 === u.rank || 1 === u.rank,
                () =>
                  `Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`,
              ),
            null != c &&
              O(
                4 === c.rank || 1 === c.rank,
                () =>
                  `Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`,
              ),
            Bo(i, o, l, c, u, a)
          )
        },
      }),
      Go = js({
        bincount_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n) {
            const r = Us(e, 'x', 'bincount'),
              s = Us(t, 'weights', 'bincount')
            O(
              'int32' === r.dtype,
              () =>
                `Error in bincount: input dtype must be int32, but got ${r.dtype}`,
            ),
              O(n >= 0, () => `size must be non-negative, but got ${n}.`),
              O(
                s.size === r.size || 0 === s.size,
                () =>
                  `Error in bincount: weights must have the same size as input or0-length, but got input shape: ${r.shape}, weights shape: ${s.shape}.`,
              )
            const a = { x: r, weights: s },
              i = { size: n }
            return Os.runKernel(Ve, a, i)
          },
      }),
      Ho = js({
        broadcastArgs_:
          /**
           * @license
           * Copyright 2021 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t) {
            const n = Us(e, 's0', 'broadcastArgs', 'int32'),
              r = Us(t, 's1', 'broadcastArgs', 'int32')
            if (1 !== n.rank)
              throw new Error(
                `broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`,
              )
            if (1 !== r.rank)
              throw new Error(
                `broadcastArgs(): second input must be a vector (rank=1). Has rank ${r.rank}`,
              )
            const s = { s0: n, s1: r }
            return Os.runKernel(Ue, s)
          },
      }),
      jo = js({
        broadcastTo_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t) {
            let n = Us(e, 'broadcastTo', 'x')
            const r = n.shape
            if (t.some((e) => !(e > 0) || e % 1 != 0))
              throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`)
            if (t.length < n.rank)
              throw new Error(
                `broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`,
              )
            if (t.length > n.rank) {
              const e = n.shape.slice()
              for (; e.length < t.length; ) e.unshift(1)
              n = Eo(n, e)
            }
            const s = n.shape,
              a = Array.from(t)
            for (let e = t.length - 1; e >= 0; e--)
              if (s[e] === t[e]) a[e] = 1
              else if (1 !== n.shape[e])
                throw new Error(
                  `broadcastTo(): [${r}] cannot be broadcast to [${t}].`,
                )
            if (
              0 ===
              a.map((e, t) => (e > 1 ? t : -1)).filter((e) => e >= 0).length
            )
              return Xa(n)
            const i = { x: n },
              o = { reps: a }
            return Os.runKernel(mr, i, o)
          },
      }),
      qo = js({
        ceil_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = { x: Us(e, 'x', 'ceil', 'float32') }
            return Os.runKernel(He, t)
          },
      })
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Ko(e, t, n) {
      const r = { shape: e, value: t, dtype: n }
      return Os.runKernel(Tt, {}, r)
    }
    const Xo = js({
        clipByValue_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n) {
            const r = Us(e, 'x', 'clipByValue')
            if (
              (O(
                t <= n,
                () =>
                  `Error in clip: min (${t}) must be less than or equal to max (${n}).`,
              ),
              t === n)
            )
              return Ko(r.shape, t, r.dtype)
            const s = { x: r },
              a = { clipValueMin: t, clipValueMax: n }
            return Os.runKernel(je, s, a)
          },
      }),
      Yo = js({
        concat1d_: function (e) {
          return _o(e, 0)
        },
      }),
      Zo = js({
        concat2d_: function (e, t) {
          return _o(e, t)
        },
      }),
      Jo = js({
        concat3d_: function (e, t) {
          return _o(e, t)
        },
      }),
      Qo = js({
        concat4d_: function (e, t) {
          return _o(e, t)
        },
      }),
      el = js({
        conv2d_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r, s = 'NHWC', a = [1, 1], i) {
            const o = Us(e, 'x', 'conv2d', 'float32'),
              l = Us(t, 'filter', 'conv2d', 'float32')
            let u = o,
              c = !1
            3 === o.rank &&
              ((c = !0), (u = Eo(o, [1, o.shape[0], o.shape[1], o.shape[2]]))),
              O(
                4 === u.rank,
                () =>
                  `Error in conv2d: input must be rank 4, but got rank ${u.rank}.`,
              ),
              O(
                4 === l.rank,
                () =>
                  `Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`,
              ),
              $o('conv2d', r, i)
            const h = 'NHWC' === s ? u.shape[3] : u.shape[1]
            O(
              h === l.shape[2],
              () =>
                `Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`,
            ),
              O(
                To(n, a),
                () =>
                  `Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`,
              )
            const p = { x: u, filter: l },
              d = {
                strides: n,
                pad: r,
                dataFormat: s,
                dilations: a,
                dimRoundingMode: i,
              },
              f = Os.runKernel(Ye, p, d)
            return c ? Eo(f, [f.shape[1], f.shape[2], f.shape[3]]) : f
          },
      }),
      tl = js({
        conv1d_: function (e, t, n, r, s = 'NWC', a = 1, i) {
          const o = Us(e, 'x', 'conv1d'),
            l = Us(t, 'filter', 'conv1d')
          let u = o,
            c = !1
          2 === o.rank && ((c = !0), (u = Eo(o, [1, o.shape[0], o.shape[1]]))),
            O(
              3 === u.rank,
              () =>
                `Error in conv1d: input must be rank 3, but got rank ${u.rank}.`,
            ),
            O(
              3 === l.rank,
              () =>
                `Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`,
            ),
            $o('conv1d', r, i),
            O(
              u.shape[2] === l.shape[1],
              () =>
                `Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`,
            ),
            O(
              To(n, a),
              () =>
                `Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`,
            ),
            O(
              'NWC' === s,
              () =>
                `Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`,
            )
          const h = Eo(l, [1, l.shape[0], l.shape[1], l.shape[2]]),
            p = Eo(u, [u.shape[0], 1, u.shape[1], u.shape[2]]),
            d = el(p, h, [1, n], r, 'NHWC', [1, a], i)
          return Eo(
            d,
            c ? [d.shape[2], d.shape[3]] : [d.shape[0], d.shape[2], d.shape[3]],
          )
        },
      }),
      nl = js({
        conv2DBackpropInput_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r, s, a = 'NHWC', i) {
            O(
              e.length === t.rank,
              () =>
                `Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`,
            )
            let o = e,
              l = t,
              u = !1
            3 === t.rank &&
              ((u = !0),
              (l = Eo(t, [1, t.shape[0], t.shape[1], t.shape[2]])),
              (o = [1, e[0], e[1], e[2]])),
              O(
                4 === o.length,
                () =>
                  `Error in conv2dDerInput: inShape must be length 4, but got length ${o.length}.`,
              ),
              O(
                4 === l.rank,
                () =>
                  `Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`,
              ),
              O(
                4 === n.rank,
                () =>
                  `Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`,
              )
            const c = 'NHWC' === a ? o[3] : o[1],
              h = 'NHWC' === a ? l.shape[3] : l.shape[1]
            O(
              c === n.shape[2],
              () =>
                `Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`,
            ),
              O(
                h === n.shape[3],
                () =>
                  `Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[3]}.`,
              ),
              $o('conv2dDerInput', s, i)
            const p = { dy: l, filter: n },
              d = {
                strides: r,
                pad: s,
                dataFormat: a,
                dimRoundingMode: i,
                inputShape: o,
              },
              f = Os.runKernel(Je, p, d)
            return u ? Eo(f, [f.shape[1], f.shape[2], f.shape[3]]) : f
          },
      }),
      rl = js({
        conv2dTranspose_: function (e, t, n, r, s, a) {
          const i = Us(e, 'x', 'conv2dTranspose'),
            o = Us(t, 'filter', 'conv2dTranspose')
          return nl(n, i, o, r, s, 'NHWC', a)
        },
      }),
      sl = js({
        conv3d_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r, s = 'NDHWC', a = [1, 1, 1]) {
            const i = Us(e, 'x', 'conv3d'),
              o = Us(t, 'filter', 'conv3d')
            let l = i,
              u = !1
            4 === i.rank &&
              ((u = !0),
              (l = Eo(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]]))),
              O(
                5 === l.rank,
                () =>
                  `Error in conv3d: input must be rank 5, but got rank ${l.rank}.`,
              ),
              O(
                5 === o.rank,
                () =>
                  `Error in conv3d: filter must be rank 5, but got rank ${o.rank}.`,
              ),
              O(
                l.shape[4] === o.shape[3],
                () =>
                  `Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${o.shape[3]}.`,
              ),
              O(
                To(n, a),
                () =>
                  `Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`,
              ),
              O(
                'NDHWC' === s,
                () =>
                  `Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`,
              )
            const c = { x: l, filter: o },
              h = { strides: n, pad: r, dataFormat: s, dilations: a },
              p = Os.runKernel(Qe, c, h)
            return u
              ? Eo(p, [p.shape[1], p.shape[2], p.shape[3], p.shape[4]])
              : p
          },
      }),
      al = js({
        conv3DBackpropInput_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r, s) {
            O(
              e.length === t.rank,
              () =>
                `Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`,
            )
            let a = e,
              i = t,
              o = !1
            4 === t.rank &&
              ((o = !0),
              (i = Eo(t, [1, t.shape[0], t.shape[1], t.shape[2], t.shape[3]])),
              (a = [1, e[0], e[1], e[2], e[3]]))
            const l = a[4],
              u = i.shape[4]
            O(
              5 === a.length,
              () =>
                `Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`,
            ),
              O(
                5 === i.rank,
                () =>
                  `Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`,
              ),
              O(
                5 === n.rank,
                () =>
                  `Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`,
              ),
              O(
                l === n.shape[3],
                () =>
                  `Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`,
              ),
              O(
                u === n.shape[4],
                () =>
                  `Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${n.shape[4]}.`,
              )
            const c = { dy: i, filter: n },
              h = { pad: s, strides: r, inputShape: a },
              p = Os.runKernel(tt, c, h)
            return o
              ? Eo(p, [p.shape[1], p.shape[2], p.shape[3], p.shape[4]])
              : p
          },
      }),
      il = js({
        conv3dTranspose_: function (e, t, n, r, s) {
          const a = Us(e, 'x', 'conv3dTranspose'),
            i = Us(t, 'filter', 'conv3dTranspose')
          return al(n, a, i, r, s)
        },
      }),
      ol = js({
        cos_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = { x: Us(e, 'x', 'cos', 'float32') }
            return Os.runKernel(nt, t)
          },
      }),
      ll = js({
        cosh_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = { x: Us(e, 'x', 'cosh', 'float32') }
            return Os.runKernel(rt, t)
          },
      }),
      ul = js({
        cumprod_:
          /**
           * @license
           * Copyright 2022 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the 'License');
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an 'AS IS' BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t = 0, n = !1, r = !1) {
            const s = { x: Us(e, 'x', 'cumprod') },
              a = { axis: t, exclusive: n, reverse: r }
            return Os.runKernel(st, s, a)
          },
      }),
      cl = js({
        cumsum_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t = 0, n = !1, r = !1) {
            const s = { x: Us(e, 'x', 'cumsum') },
              a = { axis: t, exclusive: n, reverse: r }
            return Os.runKernel(at, s, a)
          },
      }),
      hl = js({
        denseBincount_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r = !1) {
            const s = Us(e, 'x', 'denseBincount'),
              a = Us(t, 'weights', 'denseBincount')
            O(
              'int32' === s.dtype,
              () =>
                `Error in denseBincount: input dtype must be int32, but got ${s.dtype}`,
            ),
              O(
                s.rank <= 2,
                () =>
                  `Error in denseBincount: input must be at most rank 2, but got rank ${s.rank}.`,
              ),
              O(n >= 0, () => `size must be non-negative, but got ${n}.`),
              O(
                a.size === s.size || 0 === a.size,
                () =>
                  `Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${s.shape}, weights shape: ${a.shape}.`,
              )
            const i = { x: s, weights: a },
              o = { size: n, binaryOutput: r }
            return Os.runKernel(ot, i, o)
          },
      }),
      pl = js({
        depthToSpace_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n = 'NHWC') {
            const r = Us(e, 'x', 'depthToSpace', 'float32'),
              s = 'NHWC' === n ? r.shape[1] : r.shape[2],
              a = 'NHWC' === n ? r.shape[2] : r.shape[3],
              i = 'NHWC' === n ? r.shape[3] : r.shape[1]
            O(
              t > 1,
              () => `blockSize should be > 1 for depthToSpace, but was: ${t}`,
            ),
              O(
                s * t >= 0,
                () =>
                  `Negative dimension size caused by overflow when multiplying\n    ${s} and ${t}  for depthToSpace with input shape\n    ${r.shape}`,
              ),
              O(
                a * t >= 0,
                () =>
                  `Negative dimension size caused by overflow when multiplying\n    ${a} and ${t} for depthToSpace with input shape\n        ${r.shape}`,
              ),
              O(
                i % (t * t) == 0,
                () =>
                  `Dimension size must be evenly divisible by ${t * t} but is ${i} for depthToSpace with input shape ${r.shape}`,
              )
            const o = { x: r },
              l = { blockSize: t, dataFormat: n }
            return Os.runKernel(lt, o, l)
          },
      }),
      dl = js({
        depthwiseConv2d_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r, s = 'NHWC', a = [1, 1], i) {
            const o = Us(e, 'x', 'depthwiseConv2d', 'float32'),
              l = Us(t, 'filter', 'depthwiseConv2d', 'float32')
            let u = o,
              c = !1
            3 === o.rank &&
              ((c = !0), (u = Eo(o, [1, o.shape[0], o.shape[1], o.shape[2]]))),
              O(
                4 === u.rank,
                () =>
                  `Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`,
              ),
              O(
                4 === l.rank,
                () =>
                  `Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`,
              )
            const h = 'NHWC' === s ? u.shape[3] : u.shape[1]
            O(
              h === l.shape[2],
              () =>
                `Error in depthwiseConv2d: number of input channels (${h}) must match the inChannels dimension in filter ${l.shape[2]}.`,
            ),
              $o('depthwiseConv2d', r, i)
            const p = { x: u, filter: l },
              d = {
                strides: n,
                pad: r,
                dataFormat: s,
                dilations: a,
                dimRoundingMode: i,
              },
              f = Os.runKernel(ut, p, d)
            return c ? Eo(f, [f.shape[1], f.shape[2], f.shape[3]]) : f
          },
      }),
      fl = js({
        diag_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = { x: Us(e, 'x', 'diag') }
            return Os.runKernel(pt, t)
          },
      }),
      ml = js({
        dilation2d_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r, s = [1, 1], a = 'NHWC') {
            const i = Us(e, 'x', 'dilation2d'),
              o = Us(t, 'filter', 'dilation2d')
            O(
              3 === i.rank || 4 === i.rank,
              () =>
                `Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`,
            ),
              O(
                3 === o.rank,
                () =>
                  `Error in dilation2d: filter must be rank 3, but got rank ${o.rank}.`,
              ),
              O(
                'NHWC' === a,
                () =>
                  `Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`,
              )
            let l = i,
              u = !1
            3 === i.rank &&
              ((l = Eo(i, [1, i.shape[0], i.shape[1], i.shape[2]])), (u = !0))
            const c = { x: l, filter: o },
              h = { strides: n, pad: r, dilations: s },
              p = Os.runKernel(dt, c, h)
            return u ? Eo(p, [p.shape[1], p.shape[2], p.shape[3]]) : p
          },
      }),
      gl = js({
        floorDiv_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t) {
            let n = Us(e, 'a', 'floorDiv'),
              r = Us(t, 'b', 'floorDiv')
            ;[n, r] = Cs(n, r)
            const s = { a: n, b: r }
            return Os.runKernel(Et, s)
          },
      }),
      yl = js({
        div_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t) {
            let n = Us(e, 'a', 'div'),
              r = Us(t, 'b', 'div')
            if (
              (([n, r] = Cs(n, r)), 'int32' === n.dtype && 'int32' === r.dtype)
            )
              return gl(n, r)
            const s = { a: n, b: r }
            return Os.runKernel(gt, s, {})
          },
      }),
      bl = js({
        equal_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t) {
            let n = Us(e, 'a', 'equal', 'string_or_numeric'),
              r = Us(t, 'b', 'equal', 'string_or_numeric')
            ;([n, r] = Cs(n, r)), xi(n.shape, r.shape)
            const s = { a: n, b: r }
            return Os.runKernel(vt, s)
          },
      }),
      xl = js({
        where_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n) {
            const r = Us(t, 'a', 'where'),
              s = Us(n, 'b', 'where'),
              a = Us(e, 'condition', 'where', 'bool'),
              i = xi(xi(a.shape, r.shape), s.shape),
              o = { condition: jo(a, i), t: jo(r, i), e: jo(s, i) }
            return Os.runKernel(Vn, o)
          },
      }),
      wl = js({
        zerosLike_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = { x: Us(e, 'x', 'zerosLike') }
            return Os.runKernel(kr, t)
          },
      }),
      vl = js({
        divNoNan_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t) {
            let n = Us(e, 'a', 'div'),
              r = Us(t, 'b', 'div')
            ;[n, r] = Cs(n, r)
            const s = yl(n, r),
              a = wl(s),
              i = bl(r, a)
            return xl(i, a, s)
          },
      }),
      kl = js({
        dot_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t) {
            const n = Us(e, 't1', 'dot'),
              r = Us(t, 't2', 'dot')
            O(
              !(
                (1 !== n.rank && 2 !== n.rank) ||
                (1 !== r.rank && 2 !== r.rank)
              ),
              () =>
                `Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`,
            )
            const s = 1 === n.rank ? n.size : n.shape[1],
              a = 1 === r.rank ? r.size : r.shape[0]
            if (
              (O(
                s === a,
                () =>
                  `Error in dot: inner dimensions of inputs must match, but got ${s} and ${a}.`,
              ),
              1 === n.rank && 1 === r.rank)
            ) {
              const e = Eo(n, [1, -1]),
                t = Eo(r, [-1, 1]),
                s = Fo(e, t)
              return Eo(s, [])
            }
            if (1 === n.rank && 2 === r.rank) {
              const e = Eo(n, [1, -1]),
                t = Eo(r, [r.shape[0], r.shape[1]]),
                s = Fo(e, t)
              return Eo(s, [s.size])
            }
            if (2 === n.rank && 1 === r.rank) {
              const e = Eo(r, [-1, 1]),
                t = Fo(n, e)
              return Eo(t, [t.size])
            }
            {
              const e = Eo(r, [r.shape[0], r.shape[1]])
              return Fo(n, e)
            }
          },
      }),
      Il = js({
        einsum_:
          /**
           * @license
           * Copyright 2021 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, ...t) {
            const n = t.map((e, t) => Us(e, `tensors${t}`, 'einsum')),
              r = { equation: e }
            return Os.runKernel(yt, n, r)
          },
      }),
      Nl = js({
        elu_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = { x: Us(e, 'x', 'elu', 'float32') }
            return Os.runKernel(bt, t)
          },
      }),
      Sl = js({
        erf_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            let t = Us(e, 'x', 'erf')
            O(
              'int32' === t.dtype || 'float32' === t.dtype,
              () => 'Input dtype must be `int32` or `float32`.',
            ),
              'int32' === t.dtype && (t = Ka(t, 'float32'))
            const n = { x: t }
            return Os.runKernel(wt, n)
          },
      })
    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Tl(e, t) {
      for (let n = 0; n < e.length; ++n)
        if (e[e.length - n - 1] !== t - 1 - n) return !1
      return !0
    }
    function Cl(e, t, n) {
      const r = e.length + t.length,
        s = []
      let a = 0,
        i = 0
      for (let o = 0; o < r; o++)
        -1 === n.indexOf(o) ? s.push(e[a++]) : s.push(t[i++])
      return s
    }
    function $l(e, t) {
      const n = [],
        r = e.length
      for (let s = 0; s < r; s++) -1 === t.indexOf(s) && n.push(e[s])
      return [n, t.map((t) => e[t])]
    }
    function El(e, t) {
      return Cl(
        e,
        t.map((e) => 1),
        t,
      )
    }
    function Rl(e, t, n) {
      O(
        Tl(t, n),
        () =>
          `${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`,
      )
    }
    function Al(e, t) {
      if (Tl(e, t)) return null
      const n = []
      for (let r = 0; r < t; ++r) -1 === e.indexOf(r) && n.push(r)
      return e.forEach((e) => n.push(e)), n
    }
    function _l(e) {
      return e
        .map((e, t) => [t, e])
        .sort((e, t) => e[1] - t[1])
        .map((e) => e[0])
    }
    function Fl(e, t) {
      const n = []
      for (let r = t - e; r < t; ++r) n.push(r)
      return n
    }
    const Dl = js({
        max_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t = null, n = !1) {
            const r = { x: Us(e, 'x', 'max') },
              s = { reductionIndices: t, keepDims: n }
            return Os.runKernel(Jt, r, s)
          },
      }),
      Ol = js({
        min_:
          /**
           * @license
           * Copyright 2020 Google Inc. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t = null, n = !1) {
            const r = { x: Us(e, 'x', 'min') },
              s = { axis: t, keepDims: n }
            return Os.runKernel(on, r, s)
          },
      }),
      Ml = js({
        pow_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t) {
            let n = Us(e, 'base', 'pow'),
              r = Us(t, 'exp', 'pow')
            ;[n, r] = Cs(n, r)
            const s = { a: n, b: r }
            return Os.runKernel(kn, s)
          },
      }),
      Ll = js({
        sqrt_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = { x: Us(e, 'x', 'sqrt', 'float32') }
            return Os.runKernel(Yn, t)
          },
      }),
      zl = js({
        square_:
          /**
           * @license
           * Copyright 2019 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = Us(e, 'x', 'square')
            return Os.runKernel('Square', { x: t }, {})
          },
      }),
      Pl = js({
        sum_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t = null, n = !1) {
            let r = Us(e, 'x', 'sum')
            'bool' === r.dtype && (r = Ka(r, 'int32'))
            const s = { x: r },
              a = { axis: t, keepDims: n }
            return Os.runKernel(Zn, s, a)
          },
      })
    function Bl(e, t, n = null) {
      if (0 === e.rank) return eo(e)
      if (1 !== e.rank && null === n) return Bl(Eo(e, [-1]), t, n)
      if (
        1 === e.rank ||
        'number' == typeof n ||
        (Array.isArray(n) && 1 === n.length)
      ) {
        if (1 === t) return Pl(eo(e), n)
        if (t === 1 / 0) return Dl(eo(e), n)
        if (t === -1 / 0) return Ol(eo(e), n)
        if ('euclidean' === t || 2 === t)
          return Ll(Pl(Ml(eo(e), Ji(2, 'int32')), n))
        throw new Error(`Error in norm: invalid ord value: ${t}`)
      }
      if (Array.isArray(n) && 2 === n.length) {
        if (1 === t) return Dl(Pl(eo(e), n[0]), n[1] - 1)
        if (t === 1 / 0) return Dl(Pl(eo(e), n[1]), n[0])
        if (t === -1 / 0) return Ol(Pl(eo(e), n[1]), n[0])
        if ('fro' === t || 'euclidean' === t) return Ll(Pl(zl(e), n))
        throw new Error(`Error in norm: invalid ord value: ${t}`)
      }
      throw new Error(`Error in norm: invalid axis: ${n}`)
    }
    const Wl = js({
        norm_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t = 'euclidean', n = null, r = !1) {
            const s = Bl((e = Us(e, 'x', 'norm')), t, n)
            let a = s.shape
            if (r) {
              const t = j(n, e.shape)
              a = El(s.shape, t)
            }
            return Eo(s, a)
          },
      }),
      Vl = js({
        euclideanNorm_:
          /**
           * @license
           * Copyright 2022 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t = null, n = !1) {
            return Wl(e, 'euclidean', t, n)
          },
      }),
      Ul = js({
        exp_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = { x: Us(e, 'x', 'exp') }
            return Os.runKernel(kt, t)
          },
      }),
      Gl = js({
        expandDims_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t = 0) {
            const n = Us(e, 'x', 'expandDims', 'string_or_numeric')
            O(t <= n.rank, () => 'Axis must be <= rank of the tensor')
            const r = { input: n },
              s = { dim: t }
            return Os.runKernel(It, r, s)
          },
      }),
      Hl = js({
        expm1_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = { x: Us(e, 'x', 'expm1') }
            return Os.runKernel(Nt, t)
          },
      }),
      jl = js({
        tile_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t) {
            const n = Us(e, 'x', 'tile', 'string_or_numeric')
            O(
              n.rank === t.length,
              () =>
                `Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`,
            )
            const r = { x: n },
              s = { reps: t }
            return Os.runKernel(mr, r, s)
          },
      }),
      ql = js({
        eye_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r = 'float32') {
            null == t && (t = e)
            const s = qa([e, t], r),
              a = e <= t ? e : t
            for (let e = 0; e < a; ++e) s.set(1, e, e)
            const i = Eo(s.toTensor(), [e, t])
            if (null == n) return i
            if (1 === n.length) return jl(Gl(i, 0), [n[0], 1, 1])
            if (2 === n.length) return jl(Gl(Gl(i, 0), 0), [n[0], n[1], 1, 1])
            if (3 === n.length)
              return jl(Gl(Gl(Gl(i, 0), 0), 0), [n[0], n[1], n[2], 1, 1])
            throw new Error(
              `eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`,
            )
          },
      }),
      Kl = js({
        floor_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = { x: Us(e, 'x', 'floor', 'float32') }
            return Os.runKernel($t, t)
          },
      }),
      Xl = js({
        gather_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n = 0, r = 0) {
            const s = {
                x: Us(e, 'x', 'gather'),
                indices: Us(t, 'indices', 'gather', 'int32'),
              },
              a = { axis: n, batchDims: r }
            return Os.runKernel(At, s, a)
          },
      }),
      Yl = js({
        greater_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t) {
            let n = Us(e, 'a', 'greater', 'string_or_numeric'),
              r = Us(t, 'b', 'greater', 'string_or_numeric')
            ;([n, r] = Cs(n, r)), xi(n.shape, r.shape)
            const s = { a: n, b: r }
            return Os.runKernel(Ft, s)
          },
      }),
      Zl = js({
        greaterEqual_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t) {
            let n = Us(e, 'a', 'greaterEqual', 'string_or_numeric'),
              r = Us(t, 'b', 'greaterEqual', 'string_or_numeric')
            ;([n, r] = Cs(n, r)), xi(n.shape, r.shape)
            const s = { a: n, b: r }
            return Os.runKernel(Dt, s)
          },
      }),
      Jl = js({
        imag_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = { input: Us(e, 'input', 'imag') }
            return Os.runKernel(Lt, t)
          },
      }),
      Ql = js({
        isFinite_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = { x: Us(e, 'x', 'isFinite') }
            return Os.runKernel(zt, t)
          },
      }),
      eu = js({
        isInf_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = { x: Us(e, 'x', 'isInf') }
            return Os.runKernel(Pt, t)
          },
      }),
      tu = js({
        isNaN_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = { x: Us(e, 'x', 'isNaN') }
            return Os.runKernel(Bt, t)
          },
      }),
      nu = js({
        leakyRelu_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t = 0.2) {
            const n = { x: Us(e, 'x', 'leakyRelu') },
              r = { alpha: t }
            return Os.runKernel(Wt, n, r)
          },
      }),
      ru = js({
        less_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t) {
            let n = Us(e, 'a', 'less', 'string_or_numeric'),
              r = Us(t, 'b', 'less', 'string_or_numeric')
            ;([n, r] = Cs(n, r)), xi(n.shape, r.shape)
            const s = { a: n, b: r }
            return Os.runKernel(Vt, s)
          },
      }),
      su = js({
        lessEqual_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t) {
            let n = Us(e, 'a', 'lessEqual', 'string_or_numeric'),
              r = Us(t, 'b', 'lessEqual', 'string_or_numeric')
            ;([n, r] = Cs(n, r)), xi(n.shape, r.shape)
            const s = { a: n, b: r }
            return Os.runKernel(Ut, s)
          },
      })
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function au(e, t, n) {
      if (n <= 0) throw new Error('The number of values should be positive.')
      const r = { start: e, stop: t, num: n }
      return Os.runKernel(Gt, {}, r)
    }
    const iu = js({
        localResponseNormalization_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t = 5, n = 1, r = 1, s = 0.5) {
            const a = Us(e, 'x', 'localResponseNormalization')
            O(
              4 === a.rank || 3 === a.rank,
              () =>
                `Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`,
            ),
              O(
                W(t),
                () =>
                  `Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`,
              )
            let i = a,
              o = !1
            3 === a.rank &&
              ((o = !0), (i = Eo(a, [1, a.shape[0], a.shape[1], a.shape[2]])))
            const l = { x: i },
              u = { depthRadius: t, bias: n, alpha: r, beta: s },
              c = Os.runKernel(Yt, l, u)
            return o ? Eo(c, [c.shape[1], c.shape[2], c.shape[3]]) : c
          },
      }),
      ou = js({
        log_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = { x: Us(e, 'x', 'log', 'float32') }
            return Os.runKernel(Ht, t)
          },
      }),
      lu = js({
        log1p_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = { x: Us(e, 'x', 'log1p') }
            return Os.runKernel(jt, t)
          },
      }),
      uu = js({
        neg_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = { x: Us(e, 'x', 'neg') }
            return Os.runKernel(dn, t)
          },
      }),
      cu = js({
        softplus_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = { x: Us(e, 'x', 'softplus') }
            return Os.runKernel(Xn, t)
          },
      }),
      hu = js({
        logSigmoid_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = Us(e, 'x', 'logSigmoid'),
              n = Zi((e) => ({
                value: uu(cu(uu(e))),
                gradFunc: (t) => Do(t, Oo(uu(e))),
              }))
            return n(t)
          },
      }),
      pu = js({
        sub_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t) {
            let n = Us(e, 'a', 'sub'),
              r = Us(t, 'b', 'sub')
            ;[n, r] = Cs(n, r)
            const s = { a: n, b: r }
            return Os.runKernel(pr, s)
          },
      }),
      du = js({
        logSoftmax_:
          /**
           * @license
           * Copyright 2020 Google Inc. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t = -1) {
            const n = Us(e, 'logits', 'logSoftmax')
            if ((-1 === t && (t = n.rank - 1), t !== n.rank - 1))
              throw Error(
                `Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`,
              )
            const r = Zi((e, n) => {
              const r = Dl(e, t, !0),
                s = pu(e, r),
                a = pu(Ka(s, 'float32'), ou(Pl(Ul(s), t, !0)))
              return (
                n([a]),
                {
                  value: a,
                  gradFunc: (e, n) => {
                    const [r] = n,
                      s = Ul(r)
                    return pu(e, Do(Pl(e, t, !0), s))
                  },
                }
              )
            })
            return r(n)
          },
      }),
      fu = js({
        logSumExp_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t = null, n = !1) {
            const r = Us(e, 'x', 'logSumExp'),
              s = j(t, r.shape),
              a = Dl(r, s, !0),
              i = pu(r, a),
              o = Ul(i),
              l = Pl(o, s),
              u = ou(l),
              c = ro(Eo(a, u.shape), u)
            if (n) {
              const e = El(c.shape, s)
              return Eo(c, e)
            }
            return c
          },
      }),
      mu = js({
        logicalAnd_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t) {
            const n = Us(e, 'a', 'logicalAnd', 'bool'),
              r = Us(t, 'b', 'logicalAnd', 'bool')
            xi(n.shape, r.shape)
            const s = { a: n, b: r }
            return Os.runKernel(qt, s)
          },
      }),
      gu = js({
        logicalNot_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = { x: Us(e, 'x', 'logicalNot', 'bool') }
            return Os.runKernel(Kt, t)
          },
      }),
      yu = js({
        logicalOr_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t) {
            const n = Us(e, 'a', 'logicalOr', 'bool'),
              r = Us(t, 'b', 'logicalOr', 'bool')
            xi(n.shape, r.shape)
            const s = { a: n, b: r }
            return Os.runKernel(Xt, s)
          },
      }),
      bu = js({
        logicalXor_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t) {
            const n = Us(e, 'a', 'logicalXor', 'bool'),
              r = Us(t, 'b', 'logicalXor', 'bool')
            return xi(n.shape, r.shape), mu(yu(e, t), gu(mu(e, t)))
          },
      }),
      xu = 2147483648,
      wu = js({
        searchSorted_: function (e, t, n = 'left') {
          const r = Us(e, 'sortedSequence', 'searchSorted'),
            s = Us(t, 'values', 'searchSorted'),
            a = r.shape[r.shape.length - 1],
            i = s.shape[s.shape.length - 1],
            o = Eo(r, [-1, a]),
            l = Eo(s, [-1, i])
          if (o.rank < 2)
            throw new Error(
              'Sorted input argument must be at least 2-dimensional',
            )
          if (o.shape[0] !== l.shape[0])
            throw new Error(
              "Leading dimension of 'sortedSequence' and 'values' must match.",
            )
          if (P(l.shape) >= xu)
            throw new Error('values tensor size must less than 2147483648')
          if (o.shape[1] >= xu)
            throw new Error(
              `trailing dim_size must less than 2147483648 for int32 output type, was ${o.shape[1]}`,
            )
          const u = { sortedSequence: o, values: l },
            c = { side: n }
          return Os.runKernel(Wn, u, c)
        },
      })
    /**
     * @license
     * Copyright 2022 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function vu(e, t) {
      return wu(e, t, 'left')
    }
    const ku = js({
        maxPool_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r, s) {
            const a = Us(e, 'x', 'maxPool')
            let i = a,
              o = !1
            3 === a.rank &&
              ((o = !0), (i = Eo(a, [1, a.shape[0], a.shape[1], a.shape[2]]))),
              O(
                4 === i.rank,
                () =>
                  `Error in maxPool: input must be rank 4 but got rank ${i.rank}.`,
              ),
              O(
                To(n, 1),
                () =>
                  `Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`,
              ),
              $o('maxPool', r, s)
            const l = { x: i },
              u = { filterSize: t, strides: n, pad: r, dimRoundingMode: s },
              c = Os.runKernel(en, l, u)
            return o ? Eo(c, [c.shape[1], c.shape[2], c.shape[3]]) : c
          },
      }),
      Iu = js({
        maxPool3d_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t = [1, 1, 1], n, r, s, a = 'NDHWC') {
            const i = Us(e, 'x', 'maxPool3d')
            let o = i,
              l = !1
            4 === i.rank &&
              ((l = !0),
              (o = Eo(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]]))),
              O(
                5 === o.rank,
                () =>
                  `Error in maxPool3d: x must be rank 5 but got rank ${o.rank}.`,
              ),
              O(
                'NDHWC' === a,
                () =>
                  `Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`,
              ),
              $o('maxPool3d', r, s)
            const u = { x: o },
              c = {
                filterSize: t,
                strides: n,
                pad: r,
                dimRoundingMode: s,
                dataFormat: a,
              },
              h = Os.runKernel(nn, u, c)
            return l
              ? Eo(h, [h.shape[1], h.shape[2], h.shape[3], h.shape[4]])
              : h
          },
      }),
      Nu = js({
        maxPoolWithArgmax_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r, s = !1) {
            const a = { x: Us(e, 'x', 'maxPoolWithArgmax') },
              i = { filterSize: t, strides: n, pad: r, includeBatchInIndex: s },
              o = Os.runKernel(sn, a, i)
            return { result: o[0], indexes: o[1] }
          },
      }),
      Su = js({
        maximum_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t) {
            let n = Us(e, 'a', 'maximum'),
              r = Us(t, 'b', 'maximum')
            ;([n, r] = Cs(n, r)),
              'bool' === n.dtype &&
                ((n = Ka(n, 'int32')), (r = Ka(r, 'int32'))),
              xi(n.shape, r.shape)
            const s = { a: n, b: r }
            return Os.runKernel(Qt, s)
          },
      }),
      Tu = js({
        mean_:
          /**
           * @license
           * Copyright 2020 Google Inc. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t = null, n = !1) {
            const r = { x: Us(e, 'x', 'mean') },
              s = { axis: t, keepDims: n }
            return Os.runKernel(an, r, s)
          },
      })
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Cu(e, t = 'float32') {
      if ('complex64' === t) {
        const t = Cu(e, 'float32'),
          n = Cu(e, 'float32')
        return qs(t, n)
      }
      const n = le(P(e), t)
      return Os.makeTensor(n, e, t)
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function $u(e, t = 'float32') {
      if ('complex64' === t) {
        const t = $u(e, 'float32'),
          n = Cu(e, 'float32')
        return qs(t, n)
      }
      const n = oe(P(e), t)
      return Os.makeTensor(n, e, t)
    }
    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Eu(e, t, { indexing: n = 'xy' } = {}) {
      if ('xy' !== n && 'ij' !== n)
        throw new TypeError(`${n} is not a valid third argument to meshgrid`)
      if (void 0 === e) return []
      let r = Us(e, 'x', 'meshgrid', e instanceof gs ? e.dtype : 'float32')
      if (void 0 === t) return [r]
      let s = Us(t, 'y', 'meshgrid', t instanceof gs ? t.dtype : 'float32')
      const a = P(r.shape),
        i = P(s.shape)
      return 'xy' === n
        ? ((r = Eo(r, [1, -1])),
          (s = Eo(s, [-1, 1])),
          [Fo($u([i, 1], r.dtype), r), Fo(s, $u([1, a], s.dtype))])
        : ((r = Eo(r, [-1, 1])),
          (s = Eo(s, [1, -1])),
          [Fo(r, $u([1, i], r.dtype)), Fo($u([a, 1], s.dtype), s)])
    }
    const Ru = js({
        minimum_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t) {
            let n = Us(e, 'a', 'minimum'),
              r = Us(t, 'b', 'minimum')
            ;([n, r] = Cs(n, r)),
              'bool' === n.dtype &&
                ((n = Ka(n, 'int32')), (r = Ka(r, 'int32'))),
              xi(n.shape, r.shape)
            const s = { a: n, b: r }
            return Os.runKernel(ln, s)
          },
      }),
      Au = js({
        mirrorPad_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n) {
            O(
              'reflect' === n || 'symmetric' === n,
              () =>
                `Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`,
            )
            const r = Us(e, 'x', 'mirrorPad')
            if (0 === r.rank)
              throw new Error(
                'mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad',
              )
            O(
              t.length === r.rank,
              () =>
                `Padding doesn't match input. Must be ${r.rank}. Got ${t.length}.`,
            )
            const s = 'reflect' === n ? 1 : 0
            for (let e = 0; e < r.rank; e++)
              O(
                2 === t[e].length,
                () => 'Invalid number of paddings. Must be length of 2 each.',
              ),
                O(
                  t[e][0] >= 0 &&
                    t[e][0] <= r.shape[e] - s &&
                    t[e][1] >= 0 &&
                    t[e][1] <= r.shape[e] - s,
                  () =>
                    `Padding in dimension ${e} cannot be greater than or equal to ${r.shape[e] - s} or less than 0 for input of shape ${r.shape}`,
                )
            const a = { paddings: t, mode: n },
              i = { x: r }
            return Os.runKernel(un, i, a)
          },
      }),
      _u = js({
        mod_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t) {
            let n = Us(e, 'a', 'mod'),
              r = Us(t, 'b', 'mod')
            ;[n, r] = Cs(n, r)
            const s = { a: n, b: r }
            return Os.runKernel(cn, s)
          },
      }),
      Fu = js({
        moments_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t = null, n = !1) {
            const r = j(t, (e = Us(e, 'x', 'moments')).shape),
              s = Tu(e, r, n)
            let a = s.shape
            n || (a = El(s.shape, r))
            const i = zl(pu(Ka(e, 'float32'), Eo(s, a)))
            return { mean: s, variance: Tu(i, r, n) }
          },
      }),
      Du = js({
        multiRNNCell_: function (e, t, n, r) {
          const s = Us(t, 'data', 'multiRNNCell'),
            a = Gs(n, 'c', 'multiRNNCell'),
            i = Gs(r, 'h', 'multiRNNCell')
          let o = s
          const l = []
          for (let t = 0; t < e.length; t++) {
            const n = e[t](o, a[t], i[t])
            l.push(n[0]), l.push(n[1]), (o = n[1])
          }
          const u = [],
            c = []
          for (let e = 0; e < l.length; e += 2) u.push(l[e]), c.push(l[e + 1])
          return [u, c]
        },
      }),
      Ou = js({
        multinomial_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r = !1) {
            const s = Us(e, 'logits', 'multinomial'),
              a = s.size,
              i = s.rank
            if (a < 2)
              throw new Error(
                `Error in multinomial: you need at least 2 outcomes, but got ${a}.`,
              )
            if (i > 2)
              throw new Error(
                `Rank of probabilities must be 1 or 2, but is ${i}`,
              )
            n = n || Math.random()
            const o = { logits: 1 === i ? Eo(s, [1, -1]) : s },
              l = { numSamples: t, seed: n, normalized: r },
              u = Os.runKernel(hn, o, l)
            return 1 === i ? Eo(u, [u.size]) : u
          },
      }),
      Mu = js({
        notEqual_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t) {
            let n = Us(e, 'a', 'notEqual', 'string_or_numeric'),
              r = Us(t, 'b', 'notEqual', 'string_or_numeric')
            ;([n, r] = Cs(n, r)), xi(n.shape, r.shape)
            const s = { a: n, b: r }
            return Os.runKernel(fn, s)
          },
      }),
      Lu = js({
        oneHot_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n = 1, r = 0, s = 'int32') {
            if (t < 2)
              throw new Error(
                `Error in oneHot: depth must be >=2, but it is ${t}`,
              )
            const a = { indices: Us(e, 'indices', 'oneHot', 'int32') },
              i = { dtype: s, depth: t, onValue: n, offValue: r }
            return Os.runKernel(xn, a, i)
          },
      }),
      zu = js({
        onesLike_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = { x: Us(e, 'x', 'onesLike') }
            return Os.runKernel(bn, t)
          },
      }),
      Pu = js({
        outerProduct_: function (e, t) {
          const n = Us(e, 'v1', 'outerProduct'),
            r = Us(t, 'v2', 'outerProduct')
          O(
            1 === n.rank && 1 === r.rank,
            () =>
              `Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`,
          )
          const s = Eo(n, [-1, 1]),
            a = Eo(r, [1, -1])
          return Fo(s, a)
        },
      }),
      Bu = js({
        pad_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n = 0) {
            const r = Us(e, 'x', 'pad')
            if (0 === r.rank)
              throw new Error(
                'pad(scalar) is not defined. Pass non-scalar to pad',
              )
            const s = { paddings: t, constantValue: n },
              a = { x: r }
            return Os.runKernel(vn, a, s)
          },
      }),
      Wu = js({
        pad1d_: function (e, t, n = 0) {
          return (
            O(
              2 === t.length,
              () => 'Invalid number of paddings. Must be length of 2.',
            ),
            Bu(e, [t], n)
          )
        },
      }),
      Vu = js({
        pad2d_: function (e, t, n = 0) {
          return (
            O(
              2 === t.length && 2 === t[0].length && 2 === t[1].length,
              () => 'Invalid number of paddings. Must be length of 2 each.',
            ),
            Bu(e, t, n)
          )
        },
      }),
      Uu = js({
        pad3d_: function (e, t, n = 0) {
          return (
            O(
              3 === t.length &&
                2 === t[0].length &&
                2 === t[1].length &&
                2 === t[2].length,
              () => 'Invalid number of paddings. Must be length of 2 each.',
            ),
            Bu(e, t, n)
          )
        },
      }),
      Gu = js({
        pad4d_: function (e, t, n = 0) {
          return (
            O(
              4 === t.length &&
                2 === t[0].length &&
                2 === t[1].length &&
                2 === t[2].length &&
                2 === t[3].length,
              () => 'Invalid number of paddings. Must be length of 2 each.',
            ),
            Bu(e, t, n)
          )
        },
      }),
      Hu = js({
        spaceToBatchND_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n) {
            const r = Us(e, 'x', 'spaceToBatchND')
            O(
              r.rank >= 1 + t.length,
              () =>
                `input rank ${r.rank} should be > than [blockShape] ${t.length}`,
            ),
              O(
                n.length === t.length,
                () =>
                  `paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`,
              ),
              O(
                r.shape.reduce(
                  (e, r, s) =>
                    s > 0 && s <= t.length
                      ? e && (r + n[s - 1][0] + n[s - 1][1]) % t[s - 1] == 0
                      : e,
                  !0,
                ),
                () =>
                  `input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`,
              )
            const s = { x: r },
              a = { blockShape: t, paddings: n }
            return Os.runKernel(Jn, s, a)
          },
      }),
      ju = js({
        pool_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r, s, a, i) {
            null == s && (s = [1, 1]),
              null == a && (a = 1),
              0 === r && (r = 'valid')
            const o = Us(e, 'x', 'maxPool')
            let l = o,
              u = !1
            3 === o.rank &&
              ((u = !0), (l = Eo(o, [1, o.shape[0], o.shape[1], o.shape[2]]))),
              O(
                To(a, s),
                () =>
                  `Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`,
              )
            const c = go(l.shape, t, a, s, r),
              h = [c.dilationHeight, c.dilationWidth]
            let p
            p =
              'same' === r
                ? (function (e, t) {
                    const n = e
                        .map((e, n) => e + (e - 1) * (t[n] - 1))
                        .map((e) => e - 1),
                      r = n.map((e) => Math.floor(e / 2)),
                      s = n.map((e, t) => e - r[t])
                    return n.map((e, t) => [r[t], s[t]])
                  })([c.filterHeight, c.filterWidth], h)
                : [
                    [0, 0],
                    [0, 0],
                  ]
            const d = 1 === h[0] && 1 === h[1],
              [f, m] = (function (e, t, n) {
                const r = n.map((e) => e[0]),
                  s = n.map((e) => e[1]),
                  a = e.concat(r, s),
                  i = t.map((e, t) => (e - (a[t] % e)) % e),
                  o = s.map((e, t) => e + i[t])
                return [
                  t.map((e, t) => [r[t], o[t]]),
                  t.map((e, t) => [0, i[t]]),
                ]
              })([c.inHeight, c.inWidth], h, p),
              g = d ? r : 'valid',
              y = d ? l : Hu(l, h, f),
              b = (
                'avg' === n ? () => Ro(y, t, a, g, i) : () => ku(y, t, a, g, i)
              )(),
              x = d ? b : Po(b, h, m)
            return u ? Eo(x, [x.shape[1], x.shape[2], x.shape[3]]) : x
          },
      }),
      qu = js({
        prelu_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t) {
            const n = { x: Us(e, 'x', 'prelu'), alpha: Us(t, 'alpha', 'prelu') }
            return Os.runKernel(In, n)
          },
      }),
      Ku = js({
        prod_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t = null, n = !1) {
            let r = Us(e, 'x', 'prod')
            'bool' === r.dtype && (r = Ka(r, 'int32'))
            const s = { x: r },
              a = { axis: t, keepDims: n }
            return Os.runKernel(Nn, s, a)
          },
      }),
      Xu = js({
        raggedGather_:
          /**
           * @license
           * Copyright 2022 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r) {
            const s = {
                paramsNestedSplits: e.map((e, t) =>
                  Us(e, `tensors${t}`, 'raggedGather', 'int32'),
                ),
                paramsDenseValues: Us(t, 'paramsDenseValues', 'raggedGather'),
                indices: Us(n, 'indices', 'raggedGather', 'int32'),
              },
              a = { outputRaggedRank: r },
              i = Os.runKernel(Sn, s, a)
            return {
              outputNestedSplits: i.slice(0, i.length - 1),
              outputDenseValues: i[i.length - 1],
            }
          },
      }),
      Yu = js({
        raggedTensorToTensor_:
          /**
           * @license
           * Copyright 2022 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r, s) {
            const a = Us(e, 'shape', 'raggedTensorToTensor', 'int32'),
              i = Us(t, 'values', 'raggedTensorToTensor'),
              o = {
                shape: a,
                values: i,
                defaultValue: Us(
                  n,
                  'defaultValue',
                  'raggedTensorToTensor',
                  i.dtype,
                ),
                rowPartitionTensors: r.map((e, t) =>
                  Us(e, `tensors${t}`, 'raggedTensorToTensor', 'int32'),
                ),
              },
              l = { rowPartitionTypes: s }
            return Os.runKernel(Tn, o, l)
          },
      }),
      Zu = js({
        rand_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n) {
            const r = P(e)
            let s = null
            if (null == n || 'float32' === n) s = new Float32Array(r)
            else if ('int32' === n) s = new Int32Array(r)
            else {
              if ('bool' !== n) throw new Error(`Unknown data type ${n}`)
              s = new Uint8Array(r)
            }
            for (let e = 0; e < r; e++) s[e] = t()
            return Os.makeTensor(s, e, n)
          },
      })
    var Ju = n(391)
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Qu {
      constructor(e, t, n, r, s) {
        ;(this.mean = e),
          (this.stdDev = t),
          (this.dtype = n),
          (this.nextVal = NaN),
          (this.truncated = r),
          this.truncated &&
            ((this.upper = this.mean + 2 * this.stdDev),
            (this.lower = this.mean - 2 * this.stdDev))
        const a = s || Math.random()
        this.random = Ju.alea(a.toString())
      }
      nextValue() {
        if (!isNaN(this.nextVal)) {
          const e = this.nextVal
          return (this.nextVal = NaN), e
        }
        let e,
          t,
          n = !1
        for (; !n; ) {
          let r, s, a
          do {
            ;(r = 2 * this.random() - 1),
              (s = 2 * this.random() - 1),
              (a = r * r + s * s)
          } while (a >= 1 || 0 === a)
          const i = Math.sqrt((-2 * Math.log(a)) / a)
          ;(e = this.mean + this.stdDev * r * i),
            (t = this.mean + this.stdDev * s * i),
            (this.truncated && !this.isValidTruncated(e)) || (n = !0)
        }
        return (
          (this.truncated && !this.isValidTruncated(t)) ||
            (this.nextVal = this.convertValue(t)),
          this.convertValue(e)
        )
      }
      convertValue(e) {
        return null == this.dtype || 'float32' === this.dtype
          ? e
          : Math.round(e)
      }
      isValidTruncated(e) {
        return e <= this.upper && e >= this.lower
      }
    }
    class ec {
      constructor(e, t, n, r) {
        ;(this.alpha = e), (this.beta = 1 / t), (this.dtype = n)
        const s = r || Math.random()
        ;(this.randu = Ju.alea(s.toString())),
          (this.randn = new Qu(0, 1, n, !1, this.randu())),
          (this.d = e < 1 ? e + 2 / 3 : e - 1 / 3),
          (this.c = 1 / Math.sqrt(9 * this.d))
      }
      nextValue() {
        let e, t, n, r, s, a
        for (;;) {
          do {
            ;(r = this.randn.nextValue()), (a = 1 + this.c * r)
          } while (a <= 0)
          if (
            ((a *= a * a),
            (e = r * r),
            (t = 1 - 0.331 * e * e),
            (n = 0.5 * e + this.d * (1 - a + Math.log(a))),
            (s = this.randu()),
            s < t || Math.log(s) < n)
          )
            break
        }
        return (
          (a = (1 / this.beta) * this.d * a),
          this.alpha < 1 && (a *= Math.pow(this.randu(), 1 / this.alpha)),
          this.convertValue(a)
        )
      }
      convertValue(e) {
        return 'float32' === this.dtype ? e : Math.round(e)
      }
    }
    class tc {
      constructor(e = 0, t = 1, n, r) {
        if (
          ((this.canReturnFloat = () =>
            null == this.dtype || 'float32' === this.dtype),
          (this.min = e),
          (this.range = t - e),
          (this.dtype = n),
          null == r && (r = Math.random()),
          'number' == typeof r && (r = r.toString()),
          !this.canReturnFloat() && this.range <= 1)
        )
          throw new Error(
            `The difference between ${e} - ${t} <= 1 and dtype is not float`,
          )
        this.random = Ju.alea(r)
      }
      convertValue(e) {
        return this.canReturnFloat() ? e : Math.round(e)
      }
      nextValue() {
        return this.convertValue(this.min + this.range * this.random())
      }
    }
    const nc = js({
        randomGamma_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n = 1, r = 'float32', s) {
            if (
              (null == n && (n = 1),
              null == r && (r = 'float32'),
              'float32' !== r && 'int32' !== r)
            )
              throw new Error(`Unsupported data type ${r}`)
            const a = new ec(t, n, r, s),
              i = qa(e, r)
            for (let e = 0; e < i.values.length; e++)
              i.values[e] = a.nextValue()
            return i.toTensor()
          },
      }),
      rc = js({
        randomNormal_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t = 0, n = 1, r, s) {
            if (null != r && 'bool' === r)
              throw new Error(`Unsupported data type ${r}`)
            const a = new Qu(t, n, r, !1, s),
              i = qa(e, r)
            for (let e = 0; e < i.values.length; e++)
              i.values[e] = a.nextValue()
            return i.toTensor()
          },
      }),
      sc = js({
        randomStandardNormal_:
          /**
           * @license
           * Copyright 2022 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n) {
            if (null != t && 'bool' === t)
              throw new Error(`Unsupported data type ${t}`)
            return rc(e, 0, 1, t, n)
          },
      }),
      ac = js({
        randomUniform_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t = 0, n = 1, r = 'float32', s) {
            const a = qa(e, r),
              i = new tc(t, n, null, s)
            for (let e = 0; e < a.values.length; e++)
              a.values[e] = i.nextValue()
            return a.toTensor()
          },
      })
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function ic(e, t, n = 1, r = 'float32') {
      if (0 === n) throw new Error('Cannot have a step of zero')
      const s = { start: e, stop: t, step: n, dtype: r }
      return Os.runKernel(Cn, {}, s)
    }
    const oc = js({
        real_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = { input: Us(e, 'input', 'real') }
            return Os.runKernel($n, t)
          },
      }),
      lc = js({
        reciprocal_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = { x: Us(e, 'x', 'reciprocal') }
            return Os.runKernel(En, t)
          },
      }),
      uc = js({
        relu_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = { x: Us(e, 'x', 'relu') }
            return Os.runKernel(Rn, t)
          },
      }),
      cc = js({
        relu6_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = { x: Us(e, 'x', 'relu6') }
            return Os.runKernel(Mn, t)
          },
      }),
      hc = js({
        reverse_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t) {
            const n = { x: Us(e, 'x', 'reverse') },
              r = { dims: t }
            return Os.runKernel(Ln, n, r)
          },
      }),
      pc = js({
        reverse1d_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = Us(e, 'x', 'reverse')
            return (
              O(
                1 === t.rank,
                () =>
                  `Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`,
              ),
              hc(t, 0)
            )
          },
      }),
      dc = js({
        reverse2d_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t) {
            const n = Us(e, 'x', 'reverse')
            return (
              O(
                2 === n.rank,
                () =>
                  `Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`,
              ),
              hc(n, t)
            )
          },
      }),
      fc = js({
        reverse3d_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t) {
            const n = Us(e, 'x', 'reverse')
            return (
              O(
                3 === n.rank,
                () =>
                  `Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`,
              ),
              hc(n, t)
            )
          },
      }),
      mc = js({
        reverse4d_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t) {
            const n = Us(e, 'x', 'reverse')
            return (
              O(
                4 === n.rank,
                () =>
                  `Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`,
              ),
              hc(n, t)
            )
          },
      }),
      gc = js({
        round_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = { x: Us(e, 'x', 'round') }
            return Os.runKernel(zn, t)
          },
      }),
      yc = js({
        rsqrt_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = { x: Us(e, 'x', 'rsqrt', 'float32') }
            return Os.runKernel(Pn, t)
          },
      }),
      bc = js({
        selu_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = { x: Us(e, 'x', 'selu') }
            return Os.runKernel(Un, t)
          },
      }),
      xc = js({
        separableConv2d_: function (e, t, n, r, s, a = [1, 1], i = 'NHWC') {
          const o = Us(e, 'x', 'separableConv2d'),
            l = Us(t, 'depthwiseFilter', 'separableConv2d'),
            u = Us(n, 'pointwiseFilter', 'separableConv2d')
          let c = o,
            h = !1
          if (
            (3 === o.rank &&
              ((h = !0), (c = Eo(o, [1, o.shape[0], o.shape[1], o.shape[2]]))),
            'NCHW' === i)
          )
            throw new Error(
              'separableConv2d currently does not support dataFormat NCHW; only NHWC is supported',
            )
          O(
            4 === c.rank,
            () =>
              `Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`,
          ),
            O(
              4 === l.rank,
              () =>
                `Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`,
            ),
            O(
              4 === u.rank,
              () =>
                `Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`,
            ),
            O(
              1 === u.shape[0],
              () =>
                `Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`,
            ),
            O(
              1 === u.shape[1],
              () =>
                `Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`,
            )
          const p = l.shape[2],
            d = l.shape[3]
          O(
            u.shape[2] === p * d,
            () =>
              `Error in separableConv2d: the third dimension of pointwise filter must be ${p * d}, but got ${u.shape[2]}.`,
          )
          const f = dl(c, l, r, s, i, a),
            m = el(f, u, 1, 'valid', i)
          return h ? Eo(m, [m.shape[1], m.shape[2], m.shape[3]]) : m
        },
      }),
      wc =
        /**
         * @license
         * Copyright 2020 Google Inc. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        async function (e, t) {
          const n = Us(e, 'x', 'setdiff1d'),
            r = Us(t, 'y', 'setdiff1d')
          O(
            n.dtype === r.dtype,
            () =>
              `x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`,
          ),
            O(
              1 === n.rank,
              () => `x should be 1D tensor, but got x (${n.shape}).`,
            ),
            O(
              1 === r.rank,
              () => `y should be 1D tensor, but got y (${r.shape}).`,
            )
          const s = await n.data(),
            a = await r.data(),
            i = new Set(a)
          let o = 0
          for (let e = 0; e < s.length; e++) i.has(s[e]) || o++
          const l = new ps([o], n.dtype),
            u = new ps([o], 'int32')
          for (let e = 0, t = 0; e < s.length; e++)
            i.has(s[e]) || ((l.values[t] = s[e]), (u.values[t] = e), t++)
          return [l.toTensor(), u.toTensor()]
        },
      vc = js({
        sign_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = { x: Us(e, 'x', 'sign') }
            return Os.runKernel(qn, t)
          },
      }),
      kc = js({
        sin_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = { x: Us(e, 'x', 'sin', 'float32') }
            return Os.runKernel(Hn, t)
          },
      }),
      Ic = js({
        sinh_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = { x: Us(e, 'x', 'sinh') }
            return Os.runKernel(jn, t)
          },
      }),
      Nc = js({
        slice1d_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n) {
            const r = Us(e, 'x', 'slice1d')
            return (
              O(
                1 === r.rank,
                () =>
                  `slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`,
              ),
              Mo(r, [t], [n])
            )
          },
      }),
      Sc = js({
        slice2d_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n) {
            const r = Us(e, 'x', 'slice2d')
            return (
              O(
                2 === r.rank,
                () =>
                  `slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`,
              ),
              Mo(r, t, n)
            )
          },
      }),
      Tc = js({
        slice3d_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n) {
            const r = Us(e, 'x', 'slice3d')
            return (
              O(
                3 === r.rank,
                () =>
                  `slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`,
              ),
              Mo(r, t, n)
            )
          },
      }),
      Cc = js({
        slice4d_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n) {
            const r = Us(e, 'x', 'slice4d')
            return (
              O(
                4 === r.rank,
                () =>
                  `slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`,
              ),
              Mo(r, t, n)
            )
          },
      }),
      $c = js({
        softmax_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t = -1) {
            const n = Us(e, 'logits', 'softmax', 'float32')
            if ((-1 === t && (t = n.rank - 1), t !== n.rank - 1))
              throw Error(
                `Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`,
              )
            const r = { logits: n },
              s = { dim: t }
            return Os.runKernel(er, r, s)
          },
      }),
      Ec = js({
        fft_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            O(
              'complex64' === e.dtype,
              () =>
                `The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`,
            )
            const t = { input: e }
            return Os.runKernel(St, t)
          },
      }),
      Rc = js({
        ifft_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            O(
              'complex64' === e.dtype,
              () =>
                `The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`,
            )
            const t = { input: e }
            return Os.runKernel(Mt, t)
          },
      }),
      Ac = js({
        irfft_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = e.shape[e.shape.length - 1],
              n = e.size / t
            let r
            if (t <= 2) {
              const s = Eo(e, [n, t])
              r = Rc(s)
            } else {
              const s = [n, 2 * (t - 1)],
                a = Eo(oc(e), [n, t]),
                i = Eo(Jl(e), [n, t]),
                o = hc(Mo(a, [0, 1], [n, t - 2]), 1),
                l = Do(hc(Mo(i, [0, 1], [n, t - 2]), 1), Ji(-1)),
                u = _o([a, o], 1),
                c = _o([i, l], 1),
                h = Eo(qs(u, c), [s[0], s[1]])
              r = Rc(h)
            }
            if (((r = oc(r)), 3 === e.rank && 0 !== e.shape[0])) {
              const t = r,
                n = e.shape[0]
              ;(r = Eo(r, [n, r.shape[0] / n, r.shape[1]])), t.dispose()
            }
            return r
          },
      }),
      _c = js({
        split_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n = 0) {
            const r = { x: Us(e, 'x', 'split') },
              s = { numOrSizeSplits: t, axis: n }
            return Os.runKernel(Qn, r, s)
          },
      }),
      Fc = js({
        rfft_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t) {
            O(
              'float32' === e.dtype,
              () =>
                `The dtype for rfft() must be real value but got ${e.dtype}`,
            )
            let n = e.shape[e.shape.length - 1]
            const r = e.size / n
            let s
            if (null != t && t < n) {
              const r = e.shape.map((e) => 0),
                a = e.shape.map((e) => e)
              ;(a[e.shape.length - 1] = t), (s = Mo(e, r, a)), (n = t)
            } else if (null != t && t > n) {
              const r = e.shape.map((e) => e)
              ;(r[e.shape.length - 1] = t - n),
                (s = _o([e, Cu(r)], e.shape.length - 1)),
                (n = t)
            } else s = e
            const a = wl(s),
              i = Eo(qs(s, a), [r, n]),
              o = Ec(i),
              l = Math.floor(n / 2) + 1,
              u = oc(o),
              c = Jl(o),
              h = _c(u, [l, n - l], u.shape.length - 1),
              p = _c(c, [l, n - l], c.shape.length - 1),
              d = s.shape.slice()
            return (d[s.shape.length - 1] = l), Eo(qs(h[0], p[0]), d)
          },
      }),
      Dc = js({
        squaredDifference_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t) {
            let n = Us(e, 'a', 'squaredDifference'),
              r = Us(t, 'b', 'squaredDifference')
            ;([n, r] = Cs(n, r)), xi(n.shape, r.shape)
            const s = { a: n, b: r }
            return Os.runKernel(ir, s, {})
          },
      }),
      Oc = js({
        squeeze_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t) {
            const n = Us(e, 'x', 'squeeze', 'string_or_numeric')
            return Eo(n, q(n.shape, t).newShape)
          },
      }),
      Mc = js({
        stack_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t = 0) {
            const n = Gs(e, 'tensors', 'stack', 'string_or_numeric')
            O(n.length >= 1, () => 'Pass at least one tensor to tf.stack'),
              n.length > 0 &&
                O(t <= n[0].rank, () => 'Axis must be <= rank of the tensor')
            const r = n,
              s = { axis: t }
            return Os.runKernel(wn, r, s)
          },
      }),
      Lc = js({
        step_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t = 0) {
            const n = { x: Us(e, 'x', 'step') },
              r = { alpha: t }
            return Os.runKernel(Ir, n, r)
          },
      }),
      zc = js({
        stridedSlice_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r, s = 0, a = 0, i = 0, o = 0, l = 0) {
            const u = { x: Us(e, 'x', 'stridedSlice', 'string_or_numeric') },
              c = {
                begin: t,
                end: n,
                strides: r,
                beginMask: s,
                endMask: a,
                ellipsisMask: i,
                newAxisMask: o,
                shrinkAxisMask: l,
              }
            return Os.runKernel(lr, u, c)
          },
      }),
      Pc = js({
        tan_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = { x: Us(e, 'x', 'tan', 'float32') }
            return Os.runKernel(dr, t)
          },
      })
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Bc(e, t) {
      L(e)
      const n = Bs(e, t)
      if (1 !== n.length)
        throw new Error('tensor1d() requires values to be a flat/TypedArray')
      return Ks(e, null, n, t)
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Wc(e, t, n) {
      if ((L(e), null != t && 2 !== t.length))
        throw new Error('tensor2d() requires shape to have two numbers')
      const r = Bs(e, n)
      if (2 !== r.length && 1 !== r.length)
        throw new Error(
          'tensor2d() requires values to be number[][] or flat/TypedArray',
        )
      if (1 === r.length && null == t)
        throw new Error(
          'tensor2d() requires shape to be provided when `values` are a flat/TypedArray',
        )
      return Ks(e, t, r, n)
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Vc(e, t, n) {
      if ((L(e), null != t && 4 !== t.length))
        throw new Error('tensor4d() requires shape to have four numbers')
      const r = Bs(e, n)
      if (4 !== r.length && 1 !== r.length)
        throw new Error(
          'tensor4d() requires values to be number[][][][] or flat/TypedArray',
        )
      if (1 === r.length && null == t)
        throw new Error(
          'tensor4d() requires shape to be provided when `values` are a flat array',
        )
      return Ks(e, t, r, n)
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Uc(e, t, n) {
      if ((L(e), null != t && 5 !== t.length))
        throw new Error('tensor5d() requires shape to have five numbers')
      const r = Bs(e, n)
      if (5 !== r.length && 1 !== r.length)
        throw new Error(
          'tensor5d() requires values to be number[][][][][] or flat/TypedArray',
        )
      if (1 === r.length && null == t)
        throw new Error(
          'tensor5d() requires shape to be provided when `values` are a flat array',
        )
      return Ks(e, t, r, n)
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Gc(e, t, n) {
      if ((L(e), null != t && 6 !== t.length))
        throw new Error('tensor6d() requires shape to have six numbers')
      const r = Bs(e, n)
      if (6 !== r.length && 1 !== r.length)
        throw new Error(
          'tensor6d() requires values to be number[][][][][][] or flat/TypedArray',
        )
      if (1 === r.length && null == t)
        throw new Error(
          'tensor6d() requires shape to be provided when `values` are a flat array',
        )
      return Ks(e, (t = t || r), r, n)
    }
    const Hc = js({
        topk_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t = 1, n = !0) {
            const r = Us(e, 'x', 'topk')
            if (0 === r.rank)
              throw new Error(
                'topk() expects the input to be of rank 1 or higher',
              )
            const s = r.shape[r.shape.length - 1]
            if (t < 0)
              throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`)
            if (t > s)
              throw new Error(
                `'k' passed to topk() must be <= the last dimension (${s}) but got ${t}`,
              )
            const a = { x: r },
              i = { k: t, sorted: n },
              [o, l] = Os.runKernel(gr, a, i)
            return { values: o, indices: l }
          },
      }),
      jc = js({
        truncatedNormal_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t = 0, n = 1, r, s) {
            if (null != r && 'bool' === r)
              throw new Error('Unsupported data type $ { dtype }')
            const a = new Qu(t, n, r, !0, s),
              i = qa(e, r)
            for (let e = 0; e < i.values.length; e++)
              i.values[e] = a.nextValue()
            return i.toTensor()
          },
      }),
      qc = js({
        unique_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t = 0) {
            const n = Us(e, 'x', 'unique', 'string_or_numeric')
            O(n.rank > 0, () => 'The input tensor must be at least 1D')
            const r = { x: n },
              s = { axis: t },
              [a, i] = Os.runKernel(xr, r, s)
            return { values: a, indices: i }
          },
      }),
      Kc = js({
        unsortedSegmentSum_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n) {
            const r = Us(e, 'x', 'unsortedSegmentSum'),
              s = Us(t, 'segmentIds', 'unsortedSegmentSum', 'int32')
            O(W(n), () => 'numSegments must be of dtype int')
            const a = { x: r, segmentIds: s },
              i = { numSegments: n }
            return Os.runKernel(vr, a, i)
          },
      }),
      Xc = js({
        unstack_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t = 0) {
            const n = Us(e, 'x', 'unstack', 'string_or_numeric')
            O(
              t >= -n.shape.length && t < n.shape.length,
              () =>
                `Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`,
            )
            const r = { value: n },
              s = { axis: t }
            return Os.runKernel(wr, r, s)
          },
      })
    /**
     * @license
     * Copyright 2022 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Yc(e, t) {
      return wu(e, t, 'right')
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Zc(e, t = !0, n, r) {
      return Os.makeVariable(e, t, n, r)
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Jc(e, t) {
      const n = []
      for (let e = 0; e < t.length; e++) t[e] && n.push(e)
      const r = qa(e, 'int32'),
        s = qa([n.length, e.length], 'int32')
      for (let t = 0; t < n.length; t++) {
        const a = r.indexToLoc(n[t]),
          i = t * e.length
        s.values.set(a, i)
      }
      return s.toTensor()
    }
    const Qc =
        /**
         * @license
         * Copyright 2020 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        async function (e) {
          const t = Us(e, 'condition', 'whereAsync', 'bool'),
            n = await t.data(),
            r = Jc(t.shape, n)
          return e !== t && t.dispose(), r
        },
      eh =
        /**
         * @license
         * Copyright 2018 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        async function (e, t, n) {
          const r = Us(e, 'tensor', 'boolMask'),
            s = Us(t, 'mask', 'boolMask', 'bool'),
            a = null == n ? 0 : n,
            i = s.rank,
            o = r.shape
          O(i > 0, () => 'mask cannot be scalar'),
            M(
              o.slice(a, a + i),
              s.shape,
              "mask's shape must match the first K dimensions of tensor's shape,",
            )
          let l = 1
          for (let e = a; e < a + i; e++) l *= o[e]
          const u = o.slice(0, a).concat([l], o.slice(a + i)),
            c = Eo(r, u),
            h = Eo(s, [-1]),
            p = await Qc(h),
            d = Oc(p, [1]),
            f = Xl(c, d, a)
          return (
            e !== r && r.dispose(),
            t !== s && s.dispose(),
            d.dispose(),
            c.dispose(),
            h.dispose(),
            p.dispose(),
            f
          )
        },
      th = js({
        transpose_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n) {
            const r = Us(e, 'x', 'transpose')
            if (
              (null == t && (t = r.shape.map((e, t) => t).reverse()),
              O(
                r.rank === t.length,
                () =>
                  `Error in transpose: rank of input ${r.rank} must match length of perm ${t}.`,
              ),
              t.forEach((e) => {
                O(
                  e >= 0 && e < r.rank,
                  () =>
                    "All entries in 'perm' must be between 0 and " +
                    (r.rank - 1) +
                    ` but got ${t}`,
                )
              }),
              r.rank <= 1)
            )
              return r.clone()
            const s = { x: r },
              a = { perm: t }
            return 'complex64' === r.dtype
              ? qi(() => {
                  let e = oc(r),
                    t = Jl(r)
                  return (
                    (e = Os.runKernel(br, { x: e }, a)),
                    (t = Os.runKernel(br, { x: t }, a)),
                    n && (t = uu(t)),
                    qs(e, t)
                  )
                })
              : Os.runKernel(br, s, a)
          },
      }),
      nh = js({
        movingAverage_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r, s = !0) {
            const a = Us(e, 'v', 'movingAverage'),
              i = Us(t, 'x', 'movingAverage'),
              o = Us(n, 'decay', 'movingAverage')
            var l, u
            ;(u = i),
              O(
                (l = a).dtype === u.dtype,
                () =>
                  `The dtypes of the first(${l.dtype}) and second(${u.dtype}) input must match`,
              ),
              O(B(a.shape, i.shape), () => 'Shape mismatch in v and x')
            const c = Ji(1),
              h = pu(c, o)
            let p = Do(pu(i, a), h)
            if (s) {
              O(
                null != r,
                () => 'When using zeroDebias: true, step is required.',
              )
              const e = Us(r, 'step', 'movingAverage')
              p = yl(p, pu(c, Ml(o, e)))
            }
            return ro(a, p)
          },
      })
    function rh(e, t, n) {
      const r = t.rank > 1 ? t.shape[t.rank - 1] : 1,
        s = t.rank > 1 ? t.rank - 1 : 1,
        a = `Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${r}, and batchDim: ${s}.`
      if (n.rank < s) throw new Error(a + ` update.rank < ${s}. `)
      if (e.length < r + (n.rank - s))
        throw new Error(a + ` Output shape length < ${r + (n.rank - s)}`)
      if (n.rank !== s + e.length - r)
        throw new Error(a + ' update.rank != ' + (s + e.length - r))
      for (let e = 0; e < s; ++e)
        if (n.shape[e] !== t.shape[e])
          throw new Error(
            a +
              ` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`,
          )
      for (let t = 0; t < n.rank - s; ++t)
        if (n.shape[t + s] !== e[t + r])
          throw new Error(
            a +
              ` updates.shape[${t + s}] (${n.shape[t + s]}) != shape[${t + s}] (${e[t + s]})`,
          )
    }
    function sh(e, t, n) {
      if (t.rank < 1)
        throw new Error(
          `tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`,
        )
      if (e.rank < 1)
        throw new Error(
          `tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`,
        )
      if ('int32' !== t.dtype)
        throw new Error(
          `The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`,
        )
      if (n.length < 1)
        throw new Error(
          `Output rank must be greater or equal to 1, but got shape: ${n}`,
        )
      if (0 === n.length) {
        if (0 === t.size)
          throw new Error(
            `Indices specified for empty output. indices shape: ${t.shape}`,
          )
        if (0 === e.size)
          throw new Error(
            `Updates specified for empty output. updates shape: ${e.shape}`,
          )
      }
      rh(n, t, e)
    }
    function ah(e, t, n) {
      const r = t.shape.length,
        s = r > 1 ? t.shape[r - 1] : 1,
        a = n.length
      let i = 1
      for (let e = s; e < a; ++e) i *= n[e]
      const o = s < 1 ? 1 : s
      return {
        sliceRank: s,
        numUpdates: P(t.shape) / o,
        sliceSize: i,
        strides: [...se(n.slice(0, s)), 1],
        outputSize: P(n),
      }
    }
    const ih = js({
        scatterND_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n) {
            const r = Us(e, 'indices', 'scatterND', 'int32'),
              s = Us(t, 'updates', 'scatterND')
            sh(s, r, n)
            const a = { indices: r, updates: s },
              i = { shape: n }
            return Os.runKernel(Bn, a, i)
          },
      }),
      oh = js({
        sparseToDense_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r = 0) {
            const s = Us(e, 'sparseIndices', 'sparseToDense', 'int32'),
              a = Us(t, 'sparseValues', 'sparseToDense', 'string_or_numeric'),
              i = Us(r, 'defaultValue', 'sparseToDense', a.dtype)
            !(function (e, t, n, r) {
              if ('int32' !== e.dtype)
                throw new Error(
                  `tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`,
                )
              if (e.rank > 2)
                throw new Error(
                  `sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`,
                )
              const s = e.rank > 0 ? e.shape[0] : 1,
                a = e.rank > 1 ? e.shape[1] : 1
              if (n.length !== a)
                throw new Error(
                  `outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`,
                )
              const i = t.size
              if (0 !== t.rank && (1 !== t.rank || i !== s))
                throw new Error(
                  `sparseValues has incorrect shape ${t.shape}, should be [] or [${s}]`,
                )
              if (t.dtype !== r.dtype)
                throw new Error(
                  'sparseValues.dtype must match defaultValues.dtype',
                )
            })(s, a, n, i)
            const o = { sparseIndices: s, sparseValues: a, defaultValue: i },
              l = { outputShape: n }
            return Os.runKernel(ar, o, l)
          },
      }),
      lh = js({
        gatherND_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t) {
            const n = Us(t, 'indices', 'gatherND', 'int32'),
              r = {
                params: Us(e, 'x', 'gatherND', 'string_or_numeric'),
                indices: n,
              }
            return Os.runKernel(_t, r)
          },
      }),
      uh = js({
        dropout_:
          /**
           * @license
           * Copyright 2018 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r) {
            const s = Us(e, 'x', 'dropout')
            if (
              (O(
                'float32' === s.dtype,
                () =>
                  `x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`,
              ),
              O(
                t >= 0 && t < 1,
                () => `rate must be a float in the range [0, 1), but got ${t}.`,
              ),
              0 === t)
            )
              return e instanceof gs ? s.clone() : s
            const a =
                /**
                 * @license
                 * Copyright 2019 Google LLC. All Rights Reserved.
                 * Licensed under the Apache License, Version 2.0 (the "License");
                 * you may not use this file except in compliance with the License.
                 * You may obtain a copy of the License at
                 *
                 * http://www.apache.org/licenses/LICENSE-2.0
                 *
                 * Unless required by applicable law or agreed to in writing, software
                 * distributed under the License is distributed on an "AS IS" BASIS,
                 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                 * See the License for the specific language governing permissions and
                 * limitations under the License.
                 * =============================================================================
                 */
                (function (e, t) {
                  if (null == t) return e.shape.slice()
                  if (B(e.shape, t)) return t
                  if (e.shape.length === t.length) {
                    const n = []
                    for (let r = 0; r < e.shape.length; r++)
                      null == t[r] && null != e.shape[r]
                        ? n.push(e.shape[r])
                        : n.push(t[r])
                    return n
                  }
                  return t
                })(s, n),
              i = 1 - t,
              o = yl(Kl(ro(ac(a, 0, 1, 'float32', r), i)), i)
            return Do(s, o)
          },
      })
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function ch(e) {
      return Math.floor(Math.pow(2, Math.ceil(Math.log(e) / Math.log(2))))
    }
    function hh(e, t, n) {
      const r = 1 - (e % 2),
        s = new Float32Array(e)
      for (let a = 0; a < e; ++a) {
        const i = (2 * Math.PI * a) / (e + r - 1)
        s[a] = t - n * Math.cos(i)
      }
      return Bc(s, 'float32')
    }
    const ph =
        /**
         * @license
         * Copyright 2019 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        async function (e, t, n = 1) {
          const r = Us(e, 'predictions', 'inTopK'),
            s = Us(t, 'targets', 'inTopK')
          O(
            r.rank > 1,
            () =>
              `inTopK() expects the predictions to be of rank 2 or higher, but got ${r.rank}`,
          ),
            O(
              r.rank - 1 === s.rank,
              () =>
                `predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${s.rank}`,
            ),
            M(
              r.shape.slice(0, r.shape.length - 1),
              s.shape,
              "predictions's shape should be align with the targets' shape, except the last dimension.",
            )
          const a = r.shape[r.shape.length - 1]
          O(
            n > 0 && n <= a,
            () =>
              `'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`,
          )
          const i = await r.data(),
            o = await s.data(),
            [l, u] = [i.length / a, a],
            c = K('bool', l)
          for (let e = 0; e < l; e++) {
            const t = e * u,
              r = i.subarray(t, t + u),
              s = []
            for (let e = 0; e < r.length; e++) s.push({ value: r[e], index: e })
            s.sort((e, t) => t.value - e.value), (c[e] = 0)
            for (let t = 0; t < n; t++)
              if (s[t].index === o[e]) {
                c[e] = 1
                break
              }
          }
          return (
            e !== r && r.dispose(),
            t !== s && s.dispose(),
            Xs(c, s.shape, 'bool')
          )
        },
      dh = js({
        conv2DBackpropFilter_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r, s, a = 'NHWC', i) {
            let o = e
            3 === e.rank && (o = Eo(e, [1, e.shape[0], e.shape[1], e.shape[2]]))
            let l = t
            3 === l.rank &&
              (l = Eo(t, [1, t.shape[0], t.shape[1], t.shape[2]])),
              O(
                4 === o.rank,
                () =>
                  `Error in conv2dDerFilter: input must be rank 4, but got shape ${o.shape}.`,
              ),
              O(
                4 === l.rank,
                () =>
                  `Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`,
              ),
              O(
                4 === n.length,
                () =>
                  `Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`,
              )
            const u = 'NHWC' === a ? o.shape[3] : o.shape[1],
              c = 'NHWC' === a ? l.shape[3] : l.shape[1]
            O(
              u === n[2],
              () =>
                `Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${n[2]}.`,
            ),
              O(
                c === n[3],
                () =>
                  `Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`,
              ),
              $o('conv2dDerFilter', s, i)
            const h = { x: o, dy: l },
              p = {
                strides: r,
                pad: s,
                dataFormat: a,
                dimRoundingMode: i,
                filterShape: n,
              }
            return Os.runKernel(Ze, h, p)
          },
      })
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function fh(e, t, n) {
      if (null == n || 'linear' === n) return e
      if ('relu' === n) return Do(e, Lc(t))
      throw new Error(`Cannot compute gradient for fused activation ${n}.`)
    }
    function mh(e, t) {
      let n = t
      const r = bi(e.shape, t.shape)
      return r.length > 0 && (n = Pl(n, r)), Eo(n, e.shape)
    }
    function gh(e, t, n, r) {
      if ('linear' === t) return e
      if ('relu' === t) return uc(e)
      if ('elu' === t) return Nl(e)
      if ('relu6' === t) return cc(e)
      if ('prelu' === t) return qu(e, n)
      if ('leakyrelu' === t) return nu(e, r)
      if ('sigmoid' === t) return Oo(e)
      throw new Error(`Unknown fused activation ${t}.`)
    }
    const yh = (e, t) => !(e > 0) || 'linear' === t,
      bh = js({
        fusedConv2d_:
          /**
           * @license
           * Copyright 2019 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function ({
            x: e,
            filter: t,
            strides: n,
            pad: r,
            dataFormat: s = 'NHWC',
            dilations: a = [1, 1],
            dimRoundingMode: i,
            bias: o,
            activation: l = 'linear',
            preluActivationWeights: u,
            leakyreluAlpha: c,
          }) {
            if (((l = l || 'linear'), !1 === yh(Os.state.gradientDepth, l))) {
              O(
                'NHWC' === s,
                () =>
                  `Error in fused conv2d: got dataFormat of ${s} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`,
              )
              let h = el(e, t, n, r, s, a, i)
              return null != o && (h = ro(h, o)), gh(h, l, u, c)
            }
            const h = Us(e, 'x', 'conv2d', 'float32'),
              p = Us(t, 'filter', 'conv2d', 'float32')
            let d = h,
              f = !1
            3 === h.rank &&
              ((f = !0), (d = Eo(h, [1, h.shape[0], h.shape[1], h.shape[2]]))),
              O(
                4 === d.rank,
                () =>
                  `Error in fused conv2d: input must be rank 4, but got rank ${d.rank}.`,
              ),
              O(
                4 === p.rank,
                () =>
                  `Error in fused conv2d: filter must be rank 4, but got rank ${p.rank}.`,
              ),
              $o('fused conv2d', r, i)
            const m = 'NHWC' === s ? d.shape[3] : d.shape[1]
            O(
              p.shape[2] === m,
              () =>
                `Error in conv2d: depth of input (${m}) must match input depth for filter ${p.shape[2]}.`,
            ),
              O(
                To(n, a),
                () =>
                  `Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`,
              )
            const g = bo(d.shape, p.shape, n, a, r, i)
            let y, b
            if (
              (null != o &&
                ((y = Us(o, 'bias', 'fused conv2d')),
                ([y] = Cs(y, h)),
                'NHWC' === s
                  ? xi(g.outShape, y.shape)
                  : (O(
                      y.shape.length <= 1,
                      () =>
                        `Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${y.shape.length}.`,
                    ),
                    O(
                      0 === y.shape.length ||
                        y.shape[0] === g.outChannels ||
                        1 === y.shape[0],
                      () =>
                        `Error in fused conv2d: bias shape (${y.shape}) is not compatible with the number of output channels (${g.outChannels})`,
                    ))),
              null != u)
            ) {
              const e = u.shape
              if (
                (O(
                  e.length <= 1 || 3 === e.length,
                  () =>
                    `Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`,
                ),
                1 === e.length)
              )
                O(
                  1 === e[0] || e[0] === g.outChannels,
                  () =>
                    `Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${g.outChannels}).`,
                )
              else if (3 === e.length)
                try {
                  xi(e, g.outShape)
                } catch (t) {
                  const n = `Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${g.outShape}).`
                  throw Error(n)
                }
              b = Us(u, 'prelu weights', 'fused conv2d')
            }
            const x = (e, t) => {
                O(
                  'NHWC' === s,
                  () =>
                    `Error in gradient of fused conv2D: got dataFormat of ${s} but only NHWC is currently supported.`,
                )
                const [i, o, u, c] = t,
                  h = fh(e, u, l)
                O(
                  So(a),
                  () =>
                    `Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`,
                )
                const p = [nl(o.shape, h, i, n, r), dh(o, h, i.shape, n, r)]
                if (null != c) {
                  const e = mh(c, h)
                  p.push(e)
                }
                return p
              },
              w = { x: d, filter: p, bias: y, preluActivationWeights: b },
              v = {
                strides: n,
                pad: r,
                dataFormat: s,
                dilations: a,
                dimRoundingMode: i,
                activation: l,
                leakyreluAlpha: c,
              }
            if (null == o) {
              const e = Zi((e, t, n) => {
                let r = Os.runKernel(Cr, w, v)
                return (
                  n([t, e, r]),
                  f && (r = Eo(r, [r.shape[1], r.shape[2], r.shape[3]])),
                  { value: r, gradFunc: x }
                )
              })
              return e(d, p)
            }
            {
              const e = Zi((e, t, n, r) => {
                let s = Os.runKernel(Cr, w, v)
                return (
                  r([t, e, s, n]),
                  f && (s = Eo(s, [s.shape[1], s.shape[2], s.shape[3]])),
                  { value: s, gradFunc: x }
                )
              })
              return e(d, p, y)
            }
          },
      }),
      xh = js({
        depthwiseConv2dNativeBackpropFilter_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r, s, a = [1, 1], i) {
            let o = e
            3 === e.rank && (o = Eo(e, [1, e.shape[0], e.shape[1], e.shape[2]]))
            let l = t
            3 === l.rank && (l = Eo(t, [1, t.shape[0], t.shape[1], t.shape[2]]))
            const u = { x: o, dy: l },
              c = {
                strides: r,
                pad: s,
                dimRoundingMode: i,
                dilations: a,
                filterShape: n,
              }
            return Os.runKernel(ct, u, c)
          },
      }),
      wh = js({
        depthwiseConv2dNativeBackpropInput_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r, s, a = [1, 1], i) {
            let o = t,
              l = !1
            3 === t.rank &&
              ((l = !0), (o = Eo(t, [1, t.shape[0], t.shape[1], t.shape[2]])))
            const u = { dy: o, filter: n },
              c = {
                strides: r,
                pad: s,
                dimRoundingMode: i,
                dilations: a,
                inputShape: e,
              },
              h = Os.runKernel(ht, u, c)
            return l ? Eo(h, [h.shape[1], h.shape[2], h.shape[3]]) : h
          },
      }),
      vh = js({
        fusedDepthwiseConv2d_:
          /**
           * @license
           * Copyright 2019 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function ({
            x: e,
            filter: t,
            strides: n,
            pad: r,
            dataFormat: s = 'NHWC',
            dilations: a = [1, 1],
            dimRoundingMode: i,
            bias: o,
            activation: l = 'linear',
            preluActivationWeights: u,
            leakyreluAlpha: c,
          }) {
            if (!1 === yh(Os.state.gradientDepth, l)) {
              let h = dl(e, t, n, r, s, a, i)
              return null != o && (h = ro(h, o)), gh(h, l, u, c)
            }
            const h = Us(e, 'x', 'depthwiseConv2d', 'float32'),
              p = Us(t, 'filter', 'depthwiseConv2d', 'float32')
            let d = h,
              f = !1
            3 === h.rank &&
              ((f = !0), (d = Eo(h, [1, h.shape[0], h.shape[1], h.shape[2]]))),
              O(
                4 === d.rank,
                () =>
                  `Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`,
              ),
              O(
                4 === p.rank,
                () =>
                  `Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${p.rank}.`,
              ),
              O(
                d.shape[3] === p.shape[2],
                () =>
                  `Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${p.shape[2]}.`,
              ),
              null == a && (a = [1, 1]),
              O(
                To(n, a),
                () =>
                  `Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`,
              ),
              $o('fused depthwiseConv2d', r, i)
            const m = bo(d.shape, p.shape, n, a, r, i, !0)
            let g, y
            null != o &&
              ((g = Us(o, 'bias', 'fused conv2d')),
              ([g] = Cs(g, h)),
              xi(m.outShape, g.shape)),
              null != u && (y = Us(u, 'prelu weights', 'fused depthwiseConv2d'))
            const b = (e, t) => {
                O(
                  So(a),
                  () =>
                    `Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`,
                )
                const [s, o, u, c] = t,
                  h = fh(e, u, l),
                  p = wh(o.shape, h, s, n, r, a, i),
                  d = xh(o, h, s.shape, n, r, a, i)
                return null != c ? [p, d, mh(g, h)] : [p, d]
              },
              x = { x: d, filter: p, bias: g, preluActivationWeights: y },
              w = {
                strides: n,
                pad: r,
                dataFormat: s,
                dilations: a,
                dimRoundingMode: i,
                activation: l,
                leakyreluAlpha: c,
              }
            if (null == o) {
              const e = Zi((e, t, n) => {
                let r = Os.runKernel($r, x, w)
                return (
                  n([t, e, r]),
                  f && (r = Eo(r, [r.shape[1], r.shape[2], r.shape[3]])),
                  { value: r, gradFunc: b }
                )
              })
              return e(d, p)
            }
            {
              const e = Zi((e, t, n, r) => {
                let s = Os.runKernel($r, x, w)
                return (
                  r([t, e, s, n]),
                  f && (s = Eo(s, [s.shape[1], s.shape[2], s.shape[3]])),
                  { value: s, gradFunc: b }
                )
              })
              return e(d, p, g)
            }
          },
      }),
      kh = js({
        fusedMatMul_:
          /**
           * @license
           * Copyright 2019 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function ({
            a: e,
            b: t,
            transposeA: n = !1,
            transposeB: r = !1,
            bias: s,
            activation: a = 'linear',
            preluActivationWeights: i,
            leakyreluAlpha: o = 0.2,
          }) {
            if (!1 === yh(Os.state.gradientDepth, a)) {
              let l = Fo(e, t, n, r)
              return null != s && (l = ro(l, s)), gh(l, a, i, o)
            }
            let l = Us(e, 'a', 'fused matMul'),
              u = Us(t, 'b', 'fused matMul')
            ;[l, u] = Cs(l, u)
            const c = n ? l.shape[l.rank - 2] : l.shape[l.rank - 1],
              h = r ? u.shape[u.rank - 1] : u.shape[u.rank - 2],
              p = n ? l.shape[l.rank - 1] : l.shape[l.rank - 2],
              d = r ? u.shape[u.rank - 2] : u.shape[u.rank - 1],
              f = l.shape.slice(0, -2),
              m = u.shape.slice(0, -2),
              g = P(f),
              y = P(m)
            O(
              c === h,
              () =>
                `Error in fused matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${n} and transposeB=${r} must match.`,
            )
            const b = xi(l.shape.slice(0, -2), u.shape.slice(0, -2)).concat([
                p,
                d,
              ]),
              x = Eo(l, n ? [g, c, p] : [g, p, c]),
              w = Eo(u, r ? [y, d, h] : [y, h, d])
            let v, k
            null != s &&
              ((v = Us(s, 'bias', 'fused matMul')),
              ([v] = Cs(v, l)),
              xi(b, v.shape)),
              null != i && (k = Us(i, 'prelu weights', 'fused matMul'))
            const I = (e, t) => {
                const [i, o, l, u] = t,
                  c = fh(Eo(e, l.shape), l, a)
                let h, p
                return (
                  n || r
                    ? !n && r
                      ? ((h = Fo(c, o, !1, !1)), (p = Fo(c, i, !0, !1)))
                      : n && !r
                        ? ((h = Fo(o, c, !1, !0)), (p = Fo(i, c, !1, !1)))
                        : ((h = Fo(o, c, !0, !0)), (p = Fo(c, i, !0, !0)))
                    : ((h = Fo(c, o, !1, !0)), (p = Fo(i, c, !0, !1))),
                  null != s ? [h, p, mh(u, c)] : [h, p]
                )
              },
              N = { a: x, b: w, bias: v, preluActivationWeights: k },
              S = {
                transposeA: n,
                transposeB: r,
                activation: a,
                leakyreluAlpha: o,
              }
            if (null == s) {
              const e = Zi((e, t, n) => {
                const r = Os.runKernel(Tr, N, S)
                return n([e, t, r]), { value: Eo(r, b), gradFunc: I }
              })
              return e(x, w)
            }
            {
              const e = Zi((e, t, n, r) => {
                const s = Os.runKernel(Tr, N, S)
                return r([e, t, s, n]), { value: Eo(s, b), gradFunc: I }
              })
              return e(x, w, v)
            }
          },
      }),
      Ih = js({
        hammingWindow_:
          /**
           * @license
           * Copyright 2019 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            return hh(e, 0.54, 0.46)
          },
      }),
      Nh = js({
        hannWindow_:
          /**
           * @license
           * Copyright 2019 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            return hh(e, 0.5, 0.5)
          },
      }),
      Sh = js({
        frame_:
          /**
           * @license
           * Copyright 2019 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r = !1, s = 0) {
            let a = 0
            const i = []
            for (; a + t <= e.size; ) i.push(Mo(e, a, t)), (a += n)
            if (r)
              for (; a < e.size; ) {
                const r = a + t - e.size,
                  o = _o([Mo(e, a, t - r), Ko([r], s)])
                i.push(o), (a += n)
              }
            return 0 === i.length ? Wc([], [0, t]) : Eo(_o(i), [i.length, t])
          },
      }),
      Th = js({
        stft_:
          /**
           * @license
           * Copyright 2019 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r, s = Nh) {
            null == r && (r = ch(t))
            const a = Sh(e, t, n),
              i = Do(a, s(t))
            return Fc(i, r)
          },
      }),
      Ch = js({
        cropAndResize_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r, s = 'bilinear', a = 0) {
            const i = Us(e, 'image', 'cropAndResize'),
              o = Us(t, 'boxes', 'cropAndResize', 'float32'),
              l = Us(n, 'boxInd', 'cropAndResize', 'int32'),
              u = o.shape[0]
            O(
              4 === i.rank,
              () =>
                `Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`,
            ),
              O(
                2 === o.rank && 4 === o.shape[1],
                () =>
                  `Error in cropAndResize: boxes must be have size [${u},4] but had shape ${o.shape}.`,
              ),
              O(
                1 === l.rank && l.shape[0] === u,
                () =>
                  `Error in cropAndResize: boxInd must be have size [${u}] but had shape ${o.shape}.`,
              ),
              O(
                2 === r.length,
                () =>
                  `Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`,
              ),
              O(
                r[0] >= 1 && r[1] >= 1,
                () => `cropSize must be atleast [1,1], but was ${r}`,
              ),
              O(
                'bilinear' === s || 'nearest' === s,
                () => `method must be bilinear or nearest, but was ${s}`,
              )
            const c = { image: i, boxes: o, boxInd: l },
              h = { method: s, extrapolationValue: a, cropSize: r }
            return Os.runKernel(it, c, h)
          },
      }),
      $h = js({
        flipLeftRight_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = Us(e, 'image', 'flipLeftRight', 'float32')
            O(
              4 === t.rank,
              () =>
                `Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`,
            )
            const n = { image: t }
            return Os.runKernel(Ct, n, {})
          },
      }),
      Eh = js({
        grayscaleToRGB_:
          /**
           * @license
           * Copyright 2021 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const t = Us(e, 'image', 'grayscaleToRGB'),
              n = t.rank - 1,
              r = t.shape[n]
            O(
              t.rank >= 2,
              () =>
                `Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`,
            ),
              O(
                1 === r,
                () =>
                  `Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${r}.`,
              )
            const s = new Array(t.rank)
            return s.fill(1, 0, n), (s[n] = 3), jl(t, s)
          },
      }),
      Rh = js({
        rotateWithOffset_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n = 0, r = 0.5) {
            const s = Us(e, 'image', 'rotateWithOffset', 'float32')
            O(
              4 === s.rank,
              () =>
                `Error in rotateWithOffset: image must be rank 4,but got rank ${s.rank}.`,
            )
            const a = { image: s },
              i = { radians: t, fillValue: n, center: r }
            return Os.runKernel(Sr, a, i)
          },
      })
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Ah(e, t, n, r, s, a) {
      null == r && (r = 0.5),
        null == s && (s = Number.NEGATIVE_INFINITY),
        null == a && (a = 0)
      const i = e.shape[0]
      return (
        (n = Math.min(n, i)),
        O(
          0 <= r && r <= 1,
          () => `iouThreshold must be in [0, 1], but was '${r}'`,
        ),
        O(
          2 === e.rank,
          () => `boxes must be a 2D tensor, but was of rank '${e.rank}'`,
        ),
        O(
          4 === e.shape[1],
          () =>
            `boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`,
        ),
        O(1 === t.rank, () => 'scores must be a 1D tensor'),
        O(
          t.shape[0] === i,
          () =>
            `scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`,
        ),
        O(
          0 <= a && a <= 1,
          () => `softNmsSigma must be in [0, 1], but was '${a}'`,
        ),
        {
          maxOutputSize: n,
          iouThreshold: r,
          scoreThreshold: s,
          softNmsSigma: a,
        }
      )
    }
    const _h = js({
      nonMaxSuppression_:
        /**
         * @license
         * Copyright 2020 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (e, t, n, r = 0.5, s = Number.NEGATIVE_INFINITY) {
          const a = Us(e, 'boxes', 'nonMaxSuppression', 'float32'),
            i = Us(t, 'scores', 'nonMaxSuppression', 'float32'),
            o = Ah(a, i, n, r, s),
            l = {
              maxOutputSize: (n = o.maxOutputSize),
              iouThreshold: (r = o.iouThreshold),
              scoreThreshold: (s = o.scoreThreshold),
            }
          return Os.runKernel(mn, { boxes: a, scores: i }, l)
        },
    })
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Fh(e, t, n) {
      const r = (function (e, t, n) {
          return (function (e, t, n) {
            let r = 0,
              s = e.length,
              a = 0,
              i = !1
            for (; r < s; ) {
              a = r + ((s - r) >>> 1)
              const o = n(t, e[a])
              o > 0 ? (r = a + 1) : ((s = a), (i = !o))
            }
            return i ? r : -r - 1
          })(e, t, n || Dh)
        })(e, t, n),
        s = r < 0 ? -(r + 1) : r
      e.splice(s, 0, t)
    }
    function Dh(e, t) {
      return e > t ? 1 : e < t ? -1 : 0
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Oh(e, t, n, r, s) {
      return zh(e, t, n, r, s, 0)
    }
    function Mh(e, t, n, r, s, a) {
      return zh(e, t, n, r, s, 0, !1, a, !0)
    }
    function Lh(e, t, n, r, s, a) {
      return zh(e, t, n, r, s, a, !0)
    }
    function zh(e, t, n, r, s, a, i = !1, o = !1, l = !1) {
      const u = []
      for (let e = 0; e < t.length; e++)
        t[e] > s && u.push({ score: t[e], boxIndex: e, suppressBeginIndex: 0 })
      u.sort(Wh)
      const c = a > 0 ? -0.5 / a : 0,
        h = [],
        p = []
      for (; h.length < n && u.length > 0; ) {
        const t = u.pop(),
          { score: n, boxIndex: a, suppressBeginIndex: i } = t
        if (n < s) break
        let o = !1
        for (let n = h.length - 1; n >= i; --n) {
          const i = Ph(e, a, h[n])
          if (i >= r) {
            o = !0
            break
          }
          if (((t.score = t.score * Bh(r, c, i)), t.score <= s)) break
        }
        ;(t.suppressBeginIndex = h.length),
          o ||
            (t.score === n
              ? (h.push(a), p.push(t.score))
              : t.score > s && Fh(u, t, Wh))
      }
      const d = h.length,
        f = n - d
      o &&
        f > 0 &&
        (h.push(...new Array(f).fill(0)), p.push(...new Array(f).fill(0)))
      const m = { selectedIndices: h }
      return i && (m.selectedScores = p), l && (m.validOutputs = d), m
    }
    function Ph(e, t, n) {
      const r = e.subarray(4 * t, 4 * t + 4),
        s = e.subarray(4 * n, 4 * n + 4),
        a = Math.min(r[0], r[2]),
        i = Math.min(r[1], r[3]),
        o = Math.max(r[0], r[2]),
        l = Math.max(r[1], r[3]),
        u = Math.min(s[0], s[2]),
        c = Math.min(s[1], s[3]),
        h = Math.max(s[0], s[2]),
        p = Math.max(s[1], s[3]),
        d = (o - a) * (l - i),
        f = (h - u) * (p - c)
      if (d <= 0 || f <= 0) return 0
      const m = Math.max(a, u),
        g = Math.max(i, c),
        y = Math.min(o, h),
        b = Math.min(l, p),
        x = Math.max(y - m, 0) * Math.max(b - g, 0)
      return x / (d + f - x)
    }
    function Bh(e, t, n) {
      const r = Math.exp(t * n * n)
      return n <= e ? r : 0
    }
    function Wh(e, t) {
      return (
        e.score - t.score || (e.score === t.score && t.boxIndex - e.boxIndex)
      )
    }
    const Vh = js({
        nonMaxSuppressionWithScore_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r = 0.5, s = Number.NEGATIVE_INFINITY, a = 0) {
            const i = Us(e, 'boxes', 'nonMaxSuppression'),
              o = Us(t, 'scores', 'nonMaxSuppression'),
              l = Ah(i, o, n, r, s, a),
              u = { boxes: i, scores: o },
              c = {
                maxOutputSize: (n = l.maxOutputSize),
                iouThreshold: (r = l.iouThreshold),
                scoreThreshold: (s = l.scoreThreshold),
                softNmsSigma: (a = l.softNmsSigma),
              },
              h = Os.runKernel(yn, u, c)
            return { selectedIndices: h[0], selectedScores: h[1] }
          },
      }),
      Uh = js({
        nonMaxSuppressionPadded_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r = 0.5, s = Number.NEGATIVE_INFINITY, a = !1) {
            const i = Us(e, 'boxes', 'nonMaxSuppression'),
              o = Us(t, 'scores', 'nonMaxSuppression'),
              l = Ah(i, o, n, r, s, null),
              u = { boxes: i, scores: o },
              c = {
                maxOutputSize: l.maxOutputSize,
                iouThreshold: l.iouThreshold,
                scoreThreshold: l.scoreThreshold,
                padToMaxOutputSize: a,
              },
              h = Os.runKernel(gn, u, c)
            return { selectedIndices: h[0], validOutputs: h[1] }
          },
      }),
      Gh = js({
        resizeBilinear_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n = !1, r = !1) {
            const s = Us(e, 'images', 'resizeBilinear')
            O(
              3 === s.rank || 4 === s.rank,
              () =>
                `Error in resizeBilinear: x must be rank 3 or 4, but got rank ${s.rank}.`,
            ),
              O(
                2 === t.length,
                () =>
                  `Error in resizeBilinear: new shape must 2D, but got shape ${t}.`,
              ),
              O(
                !1 === r || !1 === n,
                () =>
                  'Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.',
              )
            let a = s,
              i = !1
            3 === s.rank &&
              ((i = !0), (a = Eo(s, [1, s.shape[0], s.shape[1], s.shape[2]])))
            const [] = t,
              o = { images: a },
              l = { alignCorners: n, halfPixelCenters: r, size: t },
              u = Os.runKernel(Dn, o, l)
            return i ? Eo(u, [u.shape[1], u.shape[2], u.shape[3]]) : u
          },
      }),
      Hh = js({
        resizeNearestNeighbor_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n = !1, r = !1) {
            const s = Us(e, 'images', 'resizeNearestNeighbor')
            O(
              3 === s.rank || 4 === s.rank,
              () =>
                `Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${s.rank}.`,
            ),
              O(
                2 === t.length,
                () =>
                  `Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`,
              ),
              O(
                'float32' === s.dtype || 'int32' === s.dtype,
                () => '`images` must have `int32` or `float32` as dtype',
              ),
              O(
                !1 === r || !1 === n,
                () =>
                  'Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.',
              )
            let a = s,
              i = !1
            3 === s.rank &&
              ((i = !0), (a = Eo(s, [1, s.shape[0], s.shape[1], s.shape[2]])))
            const [] = t,
              o = { images: a },
              l = { alignCorners: n, halfPixelCenters: r, size: t },
              u = Os.runKernel(_n, o, l)
            return i ? Eo(u, [u.shape[1], u.shape[2], u.shape[3]]) : u
          },
      }),
      jh = js({
        threshold_:
          /**
           * @license
           * Copyright 2021 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * https://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t = 'binary', n = !1, r = 0.5) {
            const s = Us(e, 'image', 'threshold'),
              a = s.shape[0] * s.shape[1]
            let i,
              o,
              l,
              u,
              c = Do(Bc([r]), 255)
            if (
              (O(
                3 === s.rank,
                () =>
                  `Error in threshold: image must be rank 3,but got rank ${s.rank}.`,
              ),
              O(
                3 === s.shape[2] || 1 === s.shape[2],
                () =>
                  `Error in threshold: image color channel must be equal to 3 or 1but got ${s.shape[2]}.`,
              ),
              O(
                'int32' === s.dtype || 'float32' === s.dtype,
                () =>
                  `Error in dtype: image dtype must be int32 or float32,but got dtype ${s.dtype}.`,
              ),
              O(
                'otsu' === t || 'binary' === t,
                () => `Method must be binary or otsu, but was ${t}`,
              ),
              3 === s.shape[2])
            ) {
              ;[i, o, l] = _c(s, [1, 1, 1], -1)
              const e = Do(i, 0.2989),
                t = Do(o, 0.587),
                n = Do(l, 0.114)
              u = ro(ro(e, t), n)
            } else u = e
            'otsu' === t &&
              (c = (function (e, t) {
                let n,
                  r,
                  s,
                  a,
                  i,
                  o,
                  l = Bc([-1]),
                  u = Bc([0]),
                  c = Bc([0])
                for (let h = 0; h < e.size - 1; h++) {
                  ;(n = Mo(e, 0, h + 1)),
                    (r = Mo(e, h + 1)),
                    (i = yl(Pl(n), t)),
                    (o = yl(Pl(r), t))
                  const p = Pl(Do(n, ic(0, n.size)))
                  s = yl(p, Pl(n))
                  const d = Ko(r.shape, n.size),
                    f = ro(ic(0, r.size), d),
                    m = Do(r, f)
                  a = yl(Pl(m), Pl(r))
                  const g = pu(s, a),
                    y = pu(s, a),
                    b = Do(i, o)
                  c = Do(Do(b, g), y)
                  const x = Yl(c, u)
                  ;(u = xl(x, c, u)), (l = xl(x, Bc([h]), l))
                }
                return l
              })(Go(Ka(gc(u), 'int32'), Xs([]), 256), a))
            const h = n ? su(u, c) : Yl(u, c)
            return Ka(Do(h, 255), 'int32')
          },
      }),
      qh = js({
        transform_:
          /**
           * @license
           * Copyright 2021 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n = 'nearest', r = 'constant', s = 0, a) {
            const i = Us(e, 'image', 'transform', 'float32'),
              o = Us(t, 'transforms', 'transform', 'float32')
            O(
              4 === i.rank,
              () =>
                `Error in transform: image must be rank 4,but got rank ${i.rank}.`,
            ),
              O(
                2 === o.rank &&
                  (o.shape[0] === i.shape[0] || 1 === o.shape[0]) &&
                  8 === o.shape[1],
                () =>
                  'Error in transform: Input transform should be batch x 8 or 1 x 8',
              ),
              O(
                null == a || 2 === a.length,
                () =>
                  `Error in transform: outputShape must be [height, width] or null, but got ${a}.`,
              )
            const l = { image: i, transforms: o },
              u = {
                interpolation: n,
                fillMode: r,
                fillValue: s,
                outputShape: a,
              }
            return Os.runKernel(yr, l, u)
          },
      }),
      Kh = js({
        bandPart_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n) {
            O(
              t % 1 == 0,
              () => `bandPart(): numLower must be an integer, got ${t}.`,
            ),
              O(
                n % 1 == 0,
                () => `bandPart(): numUpper must be an integer, got ${n}.`,
              )
            const r = Us(e, 'a', 'bandPart')
            O(
              r.rank >= 2,
              () => `bandPart(): Rank must be at least 2, got ${r.rank}.`,
            )
            const s = r.shape,
              [a, i] = r.shape.slice(-2)
            if (!(t <= a))
              throw new Error(
                `bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`,
              )
            if (!(n <= i))
              throw new Error(
                `bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`,
              )
            t < 0 && (t = a), n < 0 && (n = i)
            const o = Eo(ic(0, a, 1, 'int32'), [-1, 1]),
              l = ic(0, i, 1, 'int32'),
              u = pu(o, l),
              c = mu(su(u, Ji(+t, 'int32')), Zl(u, Ji(-n, 'int32'))),
              h = Cu([a, i], r.dtype)
            return Eo(Mc(Xc(Eo(r, [-1, a, i])).map((e) => xl(c, e, h))), s)
          },
      }),
      Xh = js({
        gramSchmidt_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            let t
            if (Array.isArray(e)) {
              ;(t = !1),
                O(
                  null != e && e.length > 0,
                  () =>
                    'Gram-Schmidt process: input must not be null, undefined, or empty',
                )
              const n = e[0].shape[0]
              for (let t = 1; t < e.length; ++t)
                O(
                  e[t].shape[0] === n,
                  () =>
                    `Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`,
                )
            } else (t = !0), (e = _c(e, e.shape[0], 0).map((e) => Oc(e, [0])))
            O(
              e.length <= e[0].shape[0],
              () =>
                `Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`,
            )
            const n = [],
              r = e
            for (let t = 0; t < e.length; ++t)
              n.push(
                Os.tidy(() => {
                  let e = r[t]
                  if (t > 0)
                    for (let r = 0; r < t; ++r) {
                      const t = Do(Pl(Do(n[r], e)), n[r])
                      e = pu(e, t)
                    }
                  return yl(e, Wl(e, 'euclidean'))
                }),
              )
            return t ? Mc(n, 0) : n
          },
      })
    function Yh(e, t = !1) {
      return Os.tidy(() => {
        O(
          2 === e.shape.length,
          () =>
            `qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`,
        )
        const n = e.shape[0],
          r = e.shape[1]
        let s = ql(n),
          a = Xa(e)
        const i = Wc([[1]], [1, 1])
        let o = Xa(i)
        const l = n >= r ? r : n
        for (let e = 0; e < l; ++e) {
          const t = a,
            l = o,
            u = s
          ;([o, a, s] = Os.tidy(() => {
            const t = Mo(a, [e, e], [n - e, 1]),
              l = Wl(t),
              u = Mo(a, [e, e], [1, 1]),
              c = xl(Yl(u, 0), Wc([[-1]]), Wc([[1]])),
              h = pu(u, Do(c, l)),
              p = yl(t, h)
            o =
              1 === p.shape[0]
                ? Xa(i)
                : _o([i, Mo(p, [1, 0], [p.shape[0] - 1, p.shape[1]])], 0)
            const d = uu(yl(Fo(c, h), l)),
              f = Mo(a, [e, 0], [n - e, r]),
              m = Do(d, o),
              g = th(o)
            if (0 === e) a = pu(f, Fo(m, Fo(g, f)))
            else {
              const t = pu(f, Fo(m, Fo(g, f)))
              a = _o([Mo(a, [0, 0], [e, r]), t], 0)
            }
            const y = th(m),
              b = Mo(s, [0, e], [n, s.shape[1] - e])
            if (0 === e) s = pu(b, Fo(Fo(b, o), y))
            else {
              const t = pu(b, Fo(Fo(b, o), y))
              s = _o([Mo(s, [0, 0], [n, e]), t], 1)
            }
            return [o, a, s]
          })),
            Ki([t, l, u])
        }
        return (
          !t &&
            n > r &&
            ((s = Mo(s, [0, 0], [n, r])), (a = Mo(a, [0, 0], [r, r]))),
          [s, a]
        )
      })
    }
    const Zh = js({
      qr_:
        /**
         * @license
         * Copyright 2020 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (e, t = !1) {
          if (
            (O(
              e.rank >= 2,
              () =>
                `qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`,
            ),
            2 === e.rank)
          )
            return Yh(e, t)
          {
            const n = e.shape
                .slice(0, e.shape.length - 2)
                .reduce((e, t) => e * t),
              r = Xc(
                Eo(e, [
                  n,
                  e.shape[e.shape.length - 2],
                  e.shape[e.shape.length - 1],
                ]),
                0,
              ),
              s = [],
              a = []
            return (
              r.forEach((e) => {
                const [n, r] = Yh(e, t)
                s.push(n), a.push(r)
              }),
              [Eo(Mc(s, 0), e.shape), Eo(Mc(a, 0), e.shape)]
            )
          }
        },
    })
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ var Jh
    !(function (e) {
      ;(e[(e.NONE = 0)] = 'NONE'),
        (e[(e.MEAN = 1)] = 'MEAN'),
        (e[(e.SUM = 2)] = 'SUM'),
        (e[(e.SUM_BY_NONZERO_WEIGHTS = 3)] = 'SUM_BY_NONZERO_WEIGHTS')
    })(Jh || (Jh = {}))
    const Qh = js({
        computeWeightedLoss_: function (e, t, n = Jh.SUM_BY_NONZERO_WEIGHTS) {
          const r = Us(e, 'losses', 'computeWeightedLoss')
          let s = null
          null != t && (s = Us(t, 'weights', 'computeWeightedLoss'))
          const a = null == s ? r : Do(r, s)
          if (n === Jh.NONE) return a
          if (n === Jh.SUM) return Pl(a)
          if (n === Jh.MEAN) {
            if (null == s) return Tu(a)
            {
              const e = r.size / s.size,
                t = yl(Pl(a), Pl(s))
              return e > 1 ? yl(t, Ji(e)) : t
            }
          }
          if (n === Jh.SUM_BY_NONZERO_WEIGHTS) {
            if (null == s) return yl(Pl(a), Ji(r.size))
            {
              const e = Do(s, $u(r.shape)),
                t = Ka(Pl(Mu(e, Ji(0))), 'float32')
              return yl(Pl(a), t)
            }
          }
          throw Error(`Unknown reduction: ${n}`)
        },
      }),
      ep = js({
        absoluteDifference_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r = Jh.SUM_BY_NONZERO_WEIGHTS) {
            const s = Us(e, 'labels', 'absoluteDifference'),
              a = Us(t, 'predictions', 'absoluteDifference')
            let i = null
            null != n && (i = Us(n, 'weights', 'absoluteDifference')),
              M(s.shape, a.shape, 'Error in absoluteDifference: ')
            const o = eo(pu(s, a))
            return Qh(o, i, r)
          },
      }),
      tp = js({
        cosineDistance_: function (e, t, n, r, s = Jh.SUM_BY_NONZERO_WEIGHTS) {
          const a = Us(e, 'labels', 'cosineDistance'),
            i = Us(t, 'predictions', 'cosineDistance')
          let o = null
          null != r && (o = Us(r, 'weights', 'cosineDistance')),
            M(a.shape, i.shape, 'Error in cosineDistance: ')
          const l = Ji(1),
            u = pu(l, Pl(Do(a, i), n, !0))
          return Qh(u, o, s)
        },
      }),
      np = js({
        hingeLoss_: function (e, t, n, r = Jh.SUM_BY_NONZERO_WEIGHTS) {
          let s = Us(e, 'labels', 'hingeLoss')
          const a = Us(t, 'predictions', 'hingeLoss')
          let i = null
          null != n && (i = Us(n, 'weights', 'hingeLoss')),
            M(s.shape, a.shape, 'Error in hingeLoss: ')
          const o = Ji(1)
          s = pu(Do(Ji(2), s), o)
          const l = uc(pu(o, Do(s, a)))
          return Qh(l, i, r)
        },
      }),
      rp = js({
        huberLoss_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r = 1, s = Jh.SUM_BY_NONZERO_WEIGHTS) {
            const a = Us(e, 'labels', 'huberLoss'),
              i = Us(t, 'predictions', 'huberLoss')
            let o = null
            null != n && (o = Us(n, 'weights', 'huberLoss')),
              M(a.shape, i.shape, 'Error in huberLoss: ')
            const l = Ji(r),
              u = eo(pu(i, a)),
              c = Ru(u, l),
              h = pu(u, c),
              p = ro(Do(Ji(0.5), zl(c)), Do(l, h))
            return Qh(p, o, s)
          },
      }),
      sp = js({
        logLoss_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r = 1e-7, s = Jh.SUM_BY_NONZERO_WEIGHTS) {
            const a = Us(e, 'labels', 'logLoss'),
              i = Us(t, 'predictions', 'logLoss')
            let o = null
            null != n && (o = Us(n, 'weights', 'logLoss')),
              M(a.shape, i.shape, 'Error in logLoss: ')
            const l = Ji(1),
              u = Ji(r),
              c = uu(Do(a, ou(ro(i, u)))),
              h = Do(pu(l, a), ou(ro(pu(l, i), u))),
              p = pu(c, h)
            return Qh(p, o, s)
          },
      }),
      ap = js({
        meanSquaredError_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r = Jh.SUM_BY_NONZERO_WEIGHTS) {
            const s = Us(e, 'labels', 'meanSquaredError'),
              a = Us(t, 'predictions', 'meanSquaredError')
            let i = null
            null != n && (i = Us(n, 'weights', 'meanSquaredError')),
              M(s.shape, a.shape, 'Error in meanSquaredError: ')
            const o = Dc(s, a)
            return Qh(o, i, r)
          },
      }),
      ip = js({
        sigmoidCrossEntropy_: function (
          e,
          t,
          n,
          r = 0,
          s = Jh.SUM_BY_NONZERO_WEIGHTS,
        ) {
          let a = Us(e, 'multiClassLabels', 'sigmoidCrossEntropy')
          const i = Us(t, 'logits', 'sigmoidCrossEntropy')
          let o = null
          if (
            (null != n && (o = Us(n, 'weights', 'sigmoidCrossEntropy')),
            M(a.shape, i.shape, 'Error in sigmoidCrossEntropy: '),
            r > 0)
          ) {
            const e = Ji(r),
              t = Ji(1),
              n = Ji(0.5)
            a = ro(Do(a, pu(t, e)), Do(n, e))
          }
          const l =
            /**
             * @license
             * Copyright 2020 Google LLC. All Rights Reserved.
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             * http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             * =============================================================================
             */
            (function (e, t) {
              const n = Us(e, 'labels', 'sigmoidCrossEntropyWithLogits'),
                r = Us(t, 'logits', 'sigmoidCrossEntropyWithLogits')
              M(n.shape, r.shape, 'Error in sigmoidCrossEntropyWithLogits: ')
              const s = uc(r),
                a = Do(r, n),
                i = lu(Ul(uu(eo(r))))
              return ro(pu(s, a), i)
            })(a, i)
          return Qh(l, o, s)
        },
      }),
      op = js({
        softmaxCrossEntropy_: function (
          e,
          t,
          n,
          r = 0,
          s = Jh.SUM_BY_NONZERO_WEIGHTS,
        ) {
          let a = Us(e, 'onehotLabels', 'softmaxCrossEntropy')
          const i = Us(t, 'logits', 'softmaxCrossEntropy')
          let o = null
          if (
            (null != n && (o = Us(n, 'weights', 'softmaxCrossEntropy')),
            M(a.shape, i.shape, 'Error in softmaxCrossEntropy: '),
            r > 0)
          ) {
            const e = Ji(r),
              t = Ji(1),
              n = Ji(a.shape[1])
            a = ro(Do(a, pu(t, e)), yl(e, n))
          }
          const l =
            /**
             * @license
             * Copyright 2020 Google LLC. All Rights Reserved.
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             * http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             * =============================================================================
             */
            (function (e, t, n = -1) {
              if ((-1 === n && (n = t.rank - 1), n !== t.rank - 1))
                throw Error(
                  `Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`,
                )
              const r = Zi((e, t, r) => {
                const s = fu(t, [n], !0),
                  a = pu(Ka(t, 'float32'), s)
                r([e, a])
                const i = uu(Do(a, e))
                return {
                  value: Pl(i, [n]),
                  gradFunc: (e, t) => {
                    const [r, s] = t,
                      a = El(e.shape, [n])
                    return [
                      Do(Eo(e, a), pu(Ka(r, 'float32'), Ul(s))),
                      Do(Eo(e, a), pu(Ul(s), Ka(r, 'float32'))),
                    ]
                  },
                }
              })
              return r(e, t)
            })(a, i)
          return Qh(l, o, s)
        },
      }),
      lp = js({
        sparseFillEmptyRows_:
          /**
           * @license
           * Copyright 2021 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r) {
            const s = Us(e, 'indices', 'sparseFillEmptyRows', 'int32'),
              a = Us(t, 'values', 'sparseFillEmptyRows'),
              i = Us(n, 'denseShape', 'sparseFillEmptyRows', 'int32'),
              o = Us(r, 'defaultValue', 'sparseFillEmptyRows', a.dtype)
            if (2 !== s.rank)
              throw new Error(
                `Indices should be Tensor2D but received shape\n        ${s.shape}`,
              )
            if (1 !== a.rank)
              throw new Error(
                `Values should be Tensor1D but received shape ${a.shape}`,
              )
            if (1 !== i.rank)
              throw new Error(
                `Dense shape should be Tensor1D but received shape ${i.shape}`,
              )
            if (0 !== o.rank)
              throw new Error(
                `Default value should be a scalar but received shape ${o.shape}`,
              )
            const l = { indices: s, values: a, denseShape: i, defaultValue: o },
              u = Os.runKernel(tr, l)
            return {
              outputIndices: u[0],
              outputValues: u[1],
              emptyRowIndicator: u[2],
              reverseIndexMap: u[3],
            }
          },
      }),
      up = js({
        sparseReshape_:
          /**
           * @license
           * Copyright 2021 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n) {
            const r = Us(e, 'inputIndices', 'sparseReshape', 'int32'),
              s = Us(t, 'inputShape', 'sparseReshape', 'int32'),
              a = Us(n, 'newShape', 'sparseReshape', 'int32')
            if (2 !== r.rank)
              throw new Error(
                `Input indices should be Tensor2D but received shape\n        ${r.shape}`,
              )
            if (1 !== s.rank)
              throw new Error(
                `Input shape should be Tensor1D but received shape ${s.shape}`,
              )
            if (1 !== a.rank)
              throw new Error(
                `New shape should be Tensor1D but received shape ${a.shape}`,
              )
            const i = { inputIndices: r, inputShape: s, newShape: a },
              o = Os.runKernel(nr, i)
            return { outputIndices: o[0], outputShape: o[1] }
          },
      }),
      cp = js({
        sparseSegmentMean_:
          /**
           * @license
           * Copyright 2021 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n) {
            const r = Us(e, 'data', 'sparseSegmentMean'),
              s = Us(t, 'indices', 'sparseSegmentMean', 'int32'),
              a = Us(n, 'segmentIds', 'sparseSegmentMean', 'int32')
            if (r.rank < 1)
              throw new Error(
                'Data should be at least 1 dimensional but received scalar',
              )
            if (1 !== s.rank)
              throw new Error(
                `Indices should be Tensor1D but received shape\n          ${s.shape}`,
              )
            if (1 !== a.rank)
              throw new Error(
                `Segment ids should be Tensor1D but received shape\n          ${a.shape}`,
              )
            const i = { data: r, indices: s, segmentIds: a }
            return Os.runKernel(rr, i)
          },
      }),
      hp = js({
        sparseSegmentSum_:
          /**
           * @license
           * Copyright 2021 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n) {
            const r = Us(e, 'data', 'sparseSegmentSum'),
              s = Us(t, 'indices', 'sparseSegmentSum', 'int32'),
              a = Us(n, 'segmentIds', 'sparseSegmentSum', 'int32')
            if (r.rank < 1)
              throw new Error(
                'Data should be at least 1 dimensional but received scalar',
              )
            if (1 !== s.rank)
              throw new Error(
                `Indices should be Tensor1D but received shape\n         ${s.shape}`,
              )
            if (1 !== a.rank)
              throw new Error(
                `Segment ids should be Tensor1D but received shape\n         ${a.shape}`,
              )
            const i = { data: r, indices: s, segmentIds: a }
            return Os.runKernel(sr, i)
          },
      }),
      pp = js({
        stringNGrams_:
          /**
           * @license
           * Copyright 2021 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r, s, a, i, o) {
            const l = Us(e, 'data', 'stringNGrams', 'string')
            if ('string' !== l.dtype)
              throw new Error('Data must be of datatype string')
            if (1 !== l.shape.length)
              throw new Error(`Data must be a vector, saw: ${l.shape}`)
            const u = Us(t, 'dataSplits', 'stringNGrams')
            if ('int32' !== u.dtype)
              throw new Error('Data splits must be of datatype int32')
            const c = {
                separator: n,
                nGramWidths: r,
                leftPad: s,
                rightPad: a,
                padWidth: i,
                preserveShortSequences: o,
              },
              h = { data: l, dataSplits: u },
              p = Os.runKernel(ur, h, c)
            return { nGrams: p[0], nGramsSplits: p[1] }
          },
      }),
      dp = js({
        stringSplit_:
          /**
           * @license
           * Copyright 2021 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n = !0) {
            const r = Us(e, 'input', 'stringSplit', 'string'),
              s = Us(t, 'delimiter', 'stringSplit', 'string')
            if (1 !== r.rank)
              throw new Error(
                `Input should be Tensor1D but received shape ${r.shape}`,
              )
            if (0 !== s.rank)
              throw new Error(
                `Delimiter should be a scalar but received shape ${s.shape}`,
              )
            const a = { skipEmpty: n },
              i = { input: r, delimiter: s },
              o = Os.runKernel(cr, i, a)
            return { indices: o[0], values: o[1], shape: o[2] }
          },
      }),
      fp = js({
        stringToHashBucketFast_:
          /**
           * @license
           * Copyright 2021 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t) {
            const n = Us(e, 'input', 'stringToHashBucketFast', 'string'),
              r = { numBuckets: t }
            if (t <= 0) throw new Error('Number of buckets must be at least 1')
            const s = { input: n }
            return Os.runKernel(hr, s, r)
          },
      }),
      mp = { fft: Ec, ifft: Rc, rfft: Fc, irfft: Ac },
      gp = { hammingWindow: Ih, hannWindow: Nh, frame: Sh, stft: Th },
      yp = {
        flipLeftRight: $h,
        grayscaleToRGB: Eh,
        resizeNearestNeighbor: Hh,
        resizeBilinear: Gh,
        rotateWithOffset: Rh,
        cropAndResize: Ch,
        nonMaxSuppression: _h,
        nonMaxSuppressionAsync:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          async function (e, t, n, r = 0.5, s = Number.NEGATIVE_INFINITY) {
            const a = Us(e, 'boxes', 'nonMaxSuppressionAsync'),
              i = Us(t, 'scores', 'nonMaxSuppressionAsync'),
              o = Ah(a, i, n, r, s)
            ;(n = o.maxOutputSize), (r = o.iouThreshold), (s = o.scoreThreshold)
            const l = await Promise.all([a.data(), i.data()]),
              u = l[0],
              c = l[1],
              { selectedIndices: h } = Oh(u, c, n, r, s)
            return (
              a !== e && a.dispose(), i !== t && i.dispose(), Bc(h, 'int32')
            )
          },
        nonMaxSuppressionWithScore: Vh,
        nonMaxSuppressionWithScoreAsync:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          async function (
            e,
            t,
            n,
            r = 0.5,
            s = Number.NEGATIVE_INFINITY,
            a = 0,
          ) {
            const i = Us(e, 'boxes', 'nonMaxSuppressionAsync'),
              o = Us(t, 'scores', 'nonMaxSuppressionAsync'),
              l = Ah(i, o, n, r, s, a)
            ;(n = l.maxOutputSize),
              (r = l.iouThreshold),
              (s = l.scoreThreshold),
              (a = l.softNmsSigma)
            const u = await Promise.all([i.data(), o.data()]),
              c = u[0],
              h = u[1],
              { selectedIndices: p, selectedScores: d } = Lh(c, h, n, r, s, a)
            return (
              i !== e && i.dispose(),
              o !== t && o.dispose(),
              { selectedIndices: Bc(p, 'int32'), selectedScores: Bc(d) }
            )
          },
        nonMaxSuppressionPadded: Uh,
        nonMaxSuppressionPaddedAsync:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          async function (
            e,
            t,
            n,
            r = 0.5,
            s = Number.NEGATIVE_INFINITY,
            a = !1,
          ) {
            const i = Us(e, 'boxes', 'nonMaxSuppressionAsync'),
              o = Us(t, 'scores', 'nonMaxSuppressionAsync'),
              l = Ah(i, o, n, r, s, null),
              u = l.maxOutputSize,
              c = l.iouThreshold,
              h = l.scoreThreshold,
              [p, d] = await Promise.all([i.data(), o.data()]),
              { selectedIndices: f, validOutputs: m } = Mh(p, d, u, c, h, a)
            return (
              i !== e && i.dispose(),
              o !== t && o.dispose(),
              { selectedIndices: Bc(f, 'int32'), validOutputs: Ji(m, 'int32') }
            )
          },
        threshold: jh,
        transform: qh,
      },
      bp = { bandPart: Kh, gramSchmidt: Xh, qr: Zh },
      xp = {
        absoluteDifference: ep,
        computeWeightedLoss: Qh,
        cosineDistance: tp,
        hingeLoss: np,
        huberLoss: rp,
        logLoss: sp,
        meanSquaredError: ap,
        sigmoidCrossEntropy: ip,
        softmaxCrossEntropy: op,
      },
      wp = {
        sparseFillEmptyRows: lp,
        sparseReshape: up,
        sparseSegmentMean: cp,
        sparseSegmentSum: hp,
      },
      vp = { stringNGrams: pp, stringSplit: dp, stringToHashBucketFast: fp }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class kp extends Qi {
      constructor(e, t, n = null) {
        super(),
          (this.learningRate = e),
          (this.rho = t),
          (this.epsilon = n),
          (this.accumulatedGrads = []),
          (this.accumulatedUpdates = []),
          null == n && (this.epsilon = Os.backend.epsilon())
      }
      applyGradients(e) {
        ;(Array.isArray(e) ? e.map((e) => e.name) : Object.keys(e)).forEach(
          (t, n) => {
            const r = Os.registeredVariables[t],
              s = !1
            null == this.accumulatedGrads[n] &&
              (this.accumulatedGrads[n] = {
                originalName: `${t}/accum_grad`,
                variable: qi(() => wl(r).variable(s)),
              }),
              null == this.accumulatedUpdates[n] &&
                (this.accumulatedUpdates[n] = {
                  originalName: `${t}/accum_var`,
                  variable: qi(() => wl(r).variable(s)),
                })
            const a = Array.isArray(e) ? e[n].tensor : e[t]
            if (null == a) return
            const i = this.accumulatedGrads[n].variable,
              o = this.accumulatedUpdates[n].variable
            qi(() => {
              const e = ro(Do(i, this.rho), Do(zl(a), 1 - this.rho)),
                t = Do(yl(Ll(ro(o, this.epsilon)), Ll(ro(i, this.epsilon))), a),
                n = ro(Do(o, this.rho), Do(zl(t), 1 - this.rho))
              i.assign(e), o.assign(n)
              const s = ro(Do(t, -this.learningRate), r)
              r.assign(s)
            })
          },
        ),
          this.incrementIterations()
      }
      dispose() {
        null != this.accumulatedUpdates &&
          (Ki(this.accumulatedGrads.map((e) => e.variable)),
          Ki(this.accumulatedUpdates.map((e) => e.variable)))
      }
      async getWeights() {
        const e = [...this.accumulatedGrads, ...this.accumulatedUpdates]
        return [await this.saveIterations()].concat(
          e.map((e) => ({ name: e.originalName, tensor: e.variable })),
        )
      }
      async setWeights(e) {
        const t = (e = await this.extractIterations(e)).length / 2,
          n = !1
        ;(this.accumulatedGrads = e
          .slice(0, t)
          .map((e) => ({
            originalName: e.name,
            variable: e.tensor.variable(n),
          }))),
          (this.accumulatedUpdates = e
            .slice(t, 2 * t)
            .map((e) => ({
              originalName: e.name,
              variable: e.tensor.variable(n),
            })))
      }
      getConfig() {
        return {
          learningRate: this.learningRate,
          rho: this.rho,
          epsilon: this.epsilon,
        }
      }
      static fromConfig(e, t) {
        return new e(t.learningRate, t.rho, t.epsilon)
      }
    }
    ;(kp.className = 'Adadelta'), Gi(kp)
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class Ip extends Qi {
      constructor(e, t = 0.1) {
        super(),
          (this.learningRate = e),
          (this.initialAccumulatorValue = t),
          (this.accumulatedGrads = [])
      }
      applyGradients(e) {
        ;(Array.isArray(e) ? e.map((e) => e.name) : Object.keys(e)).forEach(
          (t, n) => {
            const r = Os.registeredVariables[t]
            if (null == this.accumulatedGrads[n]) {
              const e = !1
              this.accumulatedGrads[n] = {
                originalName: `${t}/accumulator`,
                variable: qi(() =>
                  Ko(r.shape, this.initialAccumulatorValue).variable(e),
                ),
              }
            }
            const s = Array.isArray(e) ? e[n].tensor : e[t]
            if (null == s) return
            const a = this.accumulatedGrads[n].variable
            qi(() => {
              const e = ro(a, zl(s))
              a.assign(e)
              const t = ro(
                Do(yl(s, Ll(ro(e, Os.backend.epsilon()))), -this.learningRate),
                r,
              )
              r.assign(t)
            })
          },
        ),
          this.incrementIterations()
      }
      dispose() {
        null != this.accumulatedGrads &&
          Ki(this.accumulatedGrads.map((e) => e.variable))
      }
      async getWeights() {
        return [await this.saveIterations()].concat(
          this.accumulatedGrads.map((e) => ({
            name: e.originalName,
            tensor: e.variable,
          })),
        )
      }
      async setWeights(e) {
        ;(e = await this.extractIterations(e)),
          (this.accumulatedGrads = e.map((e) => ({
            originalName: e.name,
            variable: e.tensor.variable(!1),
          })))
      }
      getConfig() {
        return {
          learningRate: this.learningRate,
          initialAccumulatorValue: this.initialAccumulatorValue,
        }
      }
      static fromConfig(e, t) {
        return new e(t.learningRate, t.initialAccumulatorValue)
      }
    }
    ;(Ip.className = 'Adagrad'), Gi(Ip)
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class Np extends Qi {
      constructor(e, t, n, r = null) {
        super(),
          (this.learningRate = e),
          (this.beta1 = t),
          (this.beta2 = n),
          (this.epsilon = r),
          (this.accumulatedFirstMoment = []),
          (this.accumulatedSecondMoment = []),
          qi(() => {
            ;(this.accBeta1 = Ji(t).variable()),
              (this.accBeta2 = Ji(n).variable())
          }),
          null == r && (this.epsilon = Os.backend.epsilon())
      }
      applyGradients(e) {
        const t = Array.isArray(e) ? e.map((e) => e.name) : Object.keys(e)
        qi(() => {
          const n = pu(1, this.accBeta1),
            r = pu(1, this.accBeta2)
          t.forEach((t, s) => {
            const a = Os.registeredVariables[t],
              i = !1
            null == this.accumulatedFirstMoment[s] &&
              (this.accumulatedFirstMoment[s] = {
                originalName: `${t}/m`,
                variable: qi(() => wl(a).variable(i)),
              }),
              null == this.accumulatedSecondMoment[s] &&
                (this.accumulatedSecondMoment[s] = {
                  originalName: `${t}/v`,
                  variable: qi(() => wl(a).variable(i)),
                })
            const o = Array.isArray(e) ? e[s].tensor : e[t]
            if (null == o) return
            const l = this.accumulatedFirstMoment[s].variable,
              u = this.accumulatedSecondMoment[s].variable,
              c = ro(Do(l, this.beta1), Do(o, 1 - this.beta1)),
              h = ro(Do(u, this.beta2), Do(zl(o), 1 - this.beta2)),
              p = yl(c, n),
              d = yl(h, r)
            l.assign(c), u.assign(h)
            const f = ro(
              Do(yl(p, ro(Ll(d), this.epsilon)), -this.learningRate),
              a,
            )
            a.assign(f)
          }),
            this.accBeta1.assign(Do(this.accBeta1, this.beta1)),
            this.accBeta2.assign(Do(this.accBeta2, this.beta2))
        }),
          this.incrementIterations()
      }
      dispose() {
        this.accBeta1.dispose(),
          this.accBeta2.dispose(),
          null != this.accumulatedFirstMoment &&
            Ki(this.accumulatedFirstMoment.map((e) => e.variable)),
          null != this.accumulatedSecondMoment &&
            Ki(this.accumulatedSecondMoment.map((e) => e.variable))
      }
      async getWeights() {
        const e = [
          ...this.accumulatedFirstMoment,
          ...this.accumulatedSecondMoment,
        ]
        return [await this.saveIterations()].concat(
          e.map((e) => ({ name: e.originalName, tensor: e.variable })),
        )
      }
      async setWeights(e) {
        ;(e = await this.extractIterations(e)),
          qi(() => {
            this.accBeta1.assign(Ml(this.beta1, this.iterations_ + 1)),
              this.accBeta2.assign(Ml(this.beta2, this.iterations_ + 1))
          })
        const t = e.length / 2,
          n = !1
        ;(this.accumulatedFirstMoment = e
          .slice(0, t)
          .map((e) => ({
            originalName: e.name,
            variable: e.tensor.variable(n),
          }))),
          (this.accumulatedSecondMoment = e
            .slice(t, 2 * t)
            .map((e) => ({
              originalName: e.name,
              variable: e.tensor.variable(n),
            })))
      }
      getConfig() {
        return {
          learningRate: this.learningRate,
          beta1: this.beta1,
          beta2: this.beta2,
          epsilon: this.epsilon,
        }
      }
      static fromConfig(e, t) {
        return new e(t.learningRate, t.beta1, t.beta2, t.epsilon)
      }
    }
    ;(Np.className = 'Adam'), Gi(Np)
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class Sp extends Qi {
      constructor(e, t, n, r = null, s = 0) {
        super(),
          (this.learningRate = e),
          (this.beta1 = t),
          (this.beta2 = n),
          (this.epsilon = r),
          (this.decay = s),
          (this.accumulatedFirstMoment = []),
          (this.accumulatedWeightedInfNorm = []),
          qi(() => {
            ;(this.iteration = Ji(0).variable()),
              (this.accBeta1 = Ji(t).variable())
          }),
          null == r && (this.epsilon = Os.backend.epsilon())
      }
      applyGradients(e) {
        const t = Array.isArray(e) ? e.map((e) => e.name) : Object.keys(e)
        qi(() => {
          const n = pu(1, this.accBeta1),
            r = yl(-this.learningRate, ro(Do(this.iteration, this.decay), 1))
          t.forEach((t, s) => {
            const a = Os.registeredVariables[t],
              i = !1
            null == this.accumulatedFirstMoment[s] &&
              (this.accumulatedFirstMoment[s] = {
                originalName: `${t}/m`,
                variable: wl(a).variable(i),
              }),
              null == this.accumulatedWeightedInfNorm[s] &&
                (this.accumulatedWeightedInfNorm[s] = {
                  originalName: `${t}/v`,
                  variable: wl(a).variable(i),
                })
            const o = Array.isArray(e) ? e[s].tensor : e[t]
            if (null == o) return
            const l = this.accumulatedFirstMoment[s].variable,
              u = this.accumulatedWeightedInfNorm[s].variable,
              c = ro(Do(l, this.beta1), Do(o, 1 - this.beta1)),
              h = Do(u, this.beta2),
              p = eo(o),
              d = Su(h, p)
            l.assign(c), u.assign(d)
            const f = ro(Do(yl(r, n), yl(c, ro(d, this.epsilon))), a)
            a.assign(f)
          }),
            this.iteration.assign(ro(this.iteration, 1)),
            this.accBeta1.assign(Do(this.accBeta1, this.beta1))
        }),
          this.incrementIterations()
      }
      dispose() {
        this.accBeta1.dispose(),
          this.iteration.dispose(),
          null != this.accumulatedFirstMoment &&
            Ki(this.accumulatedFirstMoment.map((e) => e.variable)),
          null != this.accumulatedWeightedInfNorm &&
            Ki(this.accumulatedWeightedInfNorm.map((e) => e.variable))
      }
      async getWeights() {
        throw new Error('getWeights() is not implemented for Adamax yet.')
      }
      async setWeights(e) {
        throw new Error('setWeights() is not implemented for Adamax yet.')
      }
      getConfig() {
        return {
          learningRate: this.learningRate,
          beta1: this.beta1,
          beta2: this.beta2,
          epsilon: this.epsilon,
          decay: this.decay,
        }
      }
      static fromConfig(e, t) {
        return new e(t.learningRate, t.beta1, t.beta2, t.epsilon, t.decay)
      }
    }
    ;(Sp.className = 'Adamax'), Gi(Sp)
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class Tp extends Qi {
      constructor(e) {
        super(), (this.learningRate = e), this.setLearningRate(e)
      }
      applyGradients(e) {
        ;(Array.isArray(e) ? e.map((e) => e.name) : Object.keys(e)).forEach(
          (t, n) => {
            const r = Array.isArray(e) ? e[n].tensor : e[t]
            if (null == r) return
            const s = Os.registeredVariables[t]
            qi(() => {
              const e = ro(Do(this.c, r), s)
              s.assign(e)
            })
          },
        ),
          this.incrementIterations()
      }
      setLearningRate(e) {
        ;(this.learningRate = e),
          null != this.c && this.c.dispose(),
          (this.c = Xi(Ji(-e)))
      }
      dispose() {
        this.c.dispose()
      }
      async getWeights() {
        return [await this.saveIterations()]
      }
      async setWeights(e) {
        if (0 !== (e = await this.extractIterations(e)).length)
          throw new Error('SGD optimizer does not have settable weights.')
      }
      getConfig() {
        return { learningRate: this.learningRate }
      }
      static fromConfig(e, t) {
        return new e(t.learningRate)
      }
    }
    ;(Tp.className = 'SGD'), Gi(Tp)
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class Cp extends Tp {
      constructor(e, t, n = !1) {
        super(e),
          (this.learningRate = e),
          (this.momentum = t),
          (this.useNesterov = n),
          (this.accumulations = []),
          (this.m = Ji(this.momentum))
      }
      applyGradients(e) {
        ;(Array.isArray(e) ? e.map((e) => e.name) : Object.keys(e)).forEach(
          (t, n) => {
            const r = Os.registeredVariables[t]
            if (null == this.accumulations[n]) {
              const e = !1
              this.accumulations[n] = {
                originalName: `${t}/momentum`,
                variable: qi(() => wl(r).variable(e)),
              }
            }
            const s = this.accumulations[n].variable,
              a = Array.isArray(e) ? e[n].tensor : e[t]
            null != a &&
              qi(() => {
                let e
                const t = ro(Do(this.m, s), a)
                ;(e = this.useNesterov
                  ? ro(Do(this.c, ro(a, Do(t, this.m))), r)
                  : ro(Do(this.c, t), r)),
                  s.assign(t),
                  r.assign(e)
              })
          },
        ),
          this.incrementIterations()
      }
      dispose() {
        this.m.dispose(),
          null != this.accumulations &&
            Ki(this.accumulations.map((e) => e.variable))
      }
      setMomentum(e) {
        this.momentum = e
      }
      async getWeights() {
        return [await this.saveIterations()].concat(
          this.accumulations.map((e) => ({
            name: e.originalName,
            tensor: e.variable,
          })),
        )
      }
      async setWeights(e) {
        ;(e = await this.extractIterations(e)),
          (this.accumulations = e.map((e) => ({
            originalName: e.name,
            variable: e.tensor.variable(!1),
          })))
      }
      getConfig() {
        return {
          learningRate: this.learningRate,
          momentum: this.momentum,
          useNesterov: this.useNesterov,
        }
      }
      static fromConfig(e, t) {
        return new e(t.learningRate, t.momentum, t.useNesterov)
      }
    }
    ;(Cp.className = 'Momentum'), Gi(Cp)
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class $p extends Qi {
      constructor(e, t = 0.9, n = 0, r = null, s = !1) {
        if (
          (super(),
          (this.learningRate = e),
          (this.decay = t),
          (this.momentum = n),
          (this.epsilon = r),
          (this.accumulatedMeanSquares = []),
          (this.accumulatedMoments = []),
          (this.accumulatedMeanGrads = []),
          (this.centered = s),
          null == r && (this.epsilon = Os.backend.epsilon()),
          null == e)
        )
          throw new Error('learningRate for RMSPropOptimizer must be defined.')
      }
      applyGradients(e) {
        ;(Array.isArray(e) ? e.map((e) => e.name) : Object.keys(e)).forEach(
          (t, n) => {
            const r = Os.registeredVariables[t],
              s = !1
            null == this.accumulatedMeanSquares[n] &&
              (this.accumulatedMeanSquares[n] = {
                originalName: `${t}/rms`,
                variable: qi(() => wl(r).variable(s)),
              }),
              null == this.accumulatedMoments[n] &&
                (this.accumulatedMoments[n] = {
                  originalName: `${t}/momentum`,
                  variable: qi(() => wl(r).variable(s)),
                }),
              null == this.accumulatedMeanGrads[n] &&
                this.centered &&
                (this.accumulatedMeanGrads[n] = {
                  originalName: `${t}/mg`,
                  variable: qi(() => wl(r).variable(s)),
                })
            const a = Array.isArray(e) ? e[n].tensor : e[t]
            if (null == a) return
            const i = this.accumulatedMeanSquares[n].variable,
              o = this.accumulatedMoments[n].variable
            qi(() => {
              const e = ro(Do(i, this.decay), Do(zl(a), 1 - this.decay))
              if (this.centered) {
                const t = this.accumulatedMeanGrads[n].variable,
                  s = ro(Do(t, this.decay), Do(a, 1 - this.decay)),
                  l = yl(
                    Do(a, this.learningRate),
                    Ll(pu(e, ro(zl(s), this.epsilon))),
                  ),
                  u = ro(Do(o, this.momentum), l)
                i.assign(e), t.assign(s), o.assign(u)
                const c = pu(r, u)
                r.assign(c)
              } else {
                const e = ro(Do(i, this.decay), Do(zl(a), 1 - this.decay)),
                  t = ro(
                    Do(o, this.momentum),
                    yl(Do(a, this.learningRate), Ll(ro(e, this.epsilon))),
                  )
                i.assign(e), o.assign(t)
                const n = pu(r, t)
                r.assign(n)
              }
            })
          },
        ),
          this.incrementIterations()
      }
      dispose() {
        null != this.accumulatedMeanSquares &&
          Ki(this.accumulatedMeanSquares.map((e) => e.variable)),
          null != this.accumulatedMeanGrads &&
            this.centered &&
            Ki(this.accumulatedMeanGrads.map((e) => e.variable)),
          null != this.accumulatedMoments &&
            Ki(this.accumulatedMoments.map((e) => e.variable))
      }
      async getWeights() {
        const e = [...this.accumulatedMeanSquares, ...this.accumulatedMoments]
        return (
          this.centered && e.push(...this.accumulatedMeanGrads),
          [await this.saveIterations()].concat(
            e.map((e) => ({ name: e.originalName, tensor: e.variable })),
          )
        )
      }
      async setWeights(e) {
        e = await this.extractIterations(e)
        const t = this.centered ? e.length / 3 : e.length / 2,
          n = !1
        ;(this.accumulatedMeanSquares = e
          .slice(0, t)
          .map((e) => ({
            originalName: e.name,
            variable: e.tensor.variable(n),
          }))),
          (this.accumulatedMoments = e
            .slice(t, 2 * t)
            .map((e) => ({
              originalName: e.name,
              variable: e.tensor.variable(n),
            }))),
          this.centered &&
            (this.accumulatedMeanGrads = e
              .slice(2 * t, 3 * t)
              .map((e) => ({
                originalName: e.name,
                variable: e.tensor.variable(n),
              })))
      }
      getConfig() {
        return {
          learningRate: this.learningRate,
          decay: this.decay,
          momentum: this.momentum,
          epsilon: this.epsilon,
          centered: this.centered,
        }
      }
      static fromConfig(e, t) {
        return new e(t.learningRate, t.decay, t.momentum, t.epsilon, t.centered)
      }
    }
    ;($p.className = 'RMSProp'), Gi($p)
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class Ep {
      static sgd(e) {
        return new Tp(e)
      }
      static momentum(e, t, n = !1) {
        return new Cp(e, t, n)
      }
      static rmsprop(e, t = 0.9, n = 0, r = null, s = !1) {
        return new $p(e, t, n, r, s)
      }
      static adam(e = 0.001, t = 0.9, n = 0.999, r = null) {
        return new Np(e, t, n, r)
      }
      static adadelta(e = 0.001, t = 0.95, n = null) {
        return new kp(e, t, n)
      }
      static adamax(e = 0.002, t = 0.9, n = 0.999, r = null, s = 0) {
        return new Sp(e, t, n, r, s)
      }
      static adagrad(e, t = 0.1) {
        return new Ip(e, t)
      }
    }
    const Rp = {
        sgd: Ep.sgd,
        momentum: Ep.momentum,
        adadelta: Ep.adadelta,
        adagrad: Ep.adagrad,
        rmsprop: Ep.rmsprop,
        adamax: Ep.adamax,
        adam: Ep.adam,
      },
      Ap =
        'undefined' != typeof requestAnimationFrame
          ? requestAnimationFrame
          : 'undefined' != typeof setImmediate
            ? setImmediate
            : (e) => e()
    function _p() {
      return new Promise((e) => Ap(() => e()))
    }
    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Fp(e, t) {
      const n = e[0].length
      e.forEach((e, t) => {
        O(
          e.length === n,
          () =>
            `Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`,
        )
      }),
        O(
          t >= 0 && t < n,
          () => `Error in concat${n}D: axis must be between 0 and ${n - 1}.`,
        )
      const r = e[0]
      e.forEach((e, s) => {
        for (let a = 0; a < n; a++)
          O(
            a === t || e[a] === r[a],
            () =>
              `Error in concat${n}D: Shape of tensors[${s}] (${e}) does not match the shape of the rest (${r}) along the non-concatenated axis ${s}.`,
          )
      })
    }
    function Dp(e, t) {
      const n = e[0].slice()
      for (let r = 1; r < e.length; r++) n[t] += e[r][t]
      return n
    }
    /**
     * @license
     * Copyright 2022 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ var Op
    function Mp(e, t, n) {
      let r = new Array()
      if (null == n && null == t) return r
      if (null == t) for (; r.length < e + n.length; ) r.push(-1)
      else r = t.slice()
      if (null == n) return r
      if (e + n.length !== r.length)
        throw new Error(
          `rt input.shape and shape=${t} are incompatible: rt input.rank = ${e + n.length}, but shape.rank = ${r.length}`,
        )
      for (let s = 1; s < n.length; ++s) {
        const a = n[s],
          i = r[r.length - n.length + s],
          o = r[i]
        if (a >= 0)
          if (o >= 0) {
            if (o !== a)
              throw new Error(
                `rt input.shape and shape=${t} are incompatible: rt input.shape[${s + e}] = ${a} but shape[${s + e}] = ${o}`,
              )
          } else r[i] = a
      }
      return r
    }
    function Lp(e) {
      const t = {
          FIRST_DIM_SIZE: Op.FIRST_DIM_SIZE,
          VALUE_ROWIDS: Op.VALUE_ROWIDS,
          ROW_LENGTHS: Op.ROW_LENGTHS,
          ROW_SPLITS: Op.ROW_SPLITS,
          ROW_LIMITS: Op.ROW_LIMITS,
          ROW_STARTS: Op.ROW_STARTS,
        },
        n = []
      for (const r of e) {
        if (!(r in t)) break
        n.push(t[r])
      }
      return n
    }
    function zp(e) {
      return 0 === e.length
        ? 0
        : e[0] === Op.FIRST_DIM_SIZE
          ? e.length - 1
          : e.length
    }
    function Pp(e, t) {
      if (null == e || null == t) return
      const n = e.length,
        r = t.length
      if (n >= r)
        throw new Error(
          `defaultValue.shape=${e} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${n} must be less than ragged tensor input flatValues.rank = ${r})`,
        )
      for (let s = 0; s < Math.min(n, r - 1); ++s) {
        const n = e[s],
          r = t[s + 1]
        if (n >= 0 && r >= 0 && 1 !== n && n !== r)
          throw new Error(
            `defaultValue.shape=${e}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${s - e.length}] = ${n} but ragged tensor input.flatValues.shape[${s - e.length}] = ${r}`,
          )
      }
    }
    !(function (e) {
      ;(e[(e.FIRST_DIM_SIZE = 0)] = 'FIRST_DIM_SIZE'),
        (e[(e.VALUE_ROWIDS = 1)] = 'VALUE_ROWIDS'),
        (e[(e.ROW_LENGTHS = 2)] = 'ROW_LENGTHS'),
        (e[(e.ROW_SPLITS = 3)] = 'ROW_SPLITS'),
        (e[(e.ROW_LIMITS = 4)] = 'ROW_LIMITS'),
        (e[(e.ROW_STARTS = 5)] = 'ROW_STARTS')
    })(Op || (Op = {}))
    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const Bp = 30
    function Wp(e) {
      return e <= Bp ? e : re(e, Math.floor(Math.sqrt(e)))
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Vp(e, t, n) {
      return [
        n * ('number' == typeof e ? e : e[0]),
        t * ('number' == typeof e ? e : e[1]),
      ]
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Up(e, t, n, r = !0) {
      let s = []
      if (r)
        (s = s.concat(t.slice(0))), s.push(e[0] / n), (s = s.concat(e.slice(1)))
      else {
        s = s.concat(e[0])
        const n = t.length
        for (let r = 0; r < n; ++r) s = s.concat([e[r + 1] / t[r], t[r]])
        s = s.concat(e.slice(n + 1))
      }
      return s
    }
    function Gp(e, t, n = !0) {
      const r = []
      if (n) {
        r.push(t)
        for (let n = t + 1; n < e; ++n)
          n <= 2 * t ? (r.push(n), r.push(n - (t + 1))) : r.push(n)
      } else {
        const n = [],
          s = []
        for (let r = 1; r < e; ++r)
          r >= 2 * t + 1 || r % 2 == 1 ? s.push(r) : n.push(r)
        r.push(...n), r.push(0), r.push(...s)
      }
      return r
    }
    function Hp(e, t, n, r = !0) {
      const s = []
      r ? s.push(e[0] / n) : s.push(e[0] * n)
      for (let n = 1; n < e.length; ++n)
        n <= t.length
          ? r
            ? s.push(t[n - 1] * e[n])
            : s.push(e[n] / t[n - 1])
          : s.push(e[n])
      return s
    }
    function jp(e, t) {
      const n = [0]
      for (let r = 0; r < t; ++r) n.push(e[r][0])
      return n
    }
    function qp(e, t, n) {
      const r = e.slice(0, 1)
      for (let s = 0; s < n; ++s) r.push(e[s + 1] - t[s][0] - t[s][1])
      return r
    }
    function Kp(e, t) {
      const n = e.shape.length,
        r = t.shape.length
      if (n < 1)
        throw new Error(
          `tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`,
        )
      if (r < 1)
        throw new Error(
          `tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${r}.`,
        )
      if ('int32' !== t.dtype)
        throw new Error(
          `tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`,
        )
      if (t.shape[r - 1] > n)
        throw new Error(
          `index innermost dimension length must be <= tensor rank; saw: ${t.shape[r - 1]} vs. ${n}`,
        )
      if (0 === P(e.shape))
        throw new Error(
          `Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`,
        )
      const s = t.shape,
        a = s[s.length - 1]
      let i = 1
      for (let e = 0; e < s.length - 1; ++e) i *= s[e]
      const o = e.shape,
        l = s.slice()
      l.pop()
      let u = 1
      for (let e = a; e < n; ++e) (u *= o[e]), l.push(o[e])
      const c = [...se(e.shape).map((e) => e / u), 1].slice(0, a)
      return [l, i, u, c]
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Xp = 1.7580993408473768,
      Yp = 1.0507009873554805,
      Zp = 0.3275911,
      Jp = 0.254829592,
      Qp = -0.284496736,
      ed = 1.421413741,
      td = -1.453152027,
      nd = 1.061405429
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function rd(e, t) {
      if (e.length !== t.length)
        throw new Error(
          `Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`,
        )
      const n = new Float32Array(2 * e.length)
      for (let r = 0; r < n.length; r += 2)
        (n[r] = e[r / 2]), (n[r + 1] = t[r / 2])
      return n
    }
    function sd(e) {
      const t = new Float32Array(e.length / 2),
        n = new Float32Array(e.length / 2)
      for (let r = 0; r < e.length; r += 2)
        (t[r / 2] = e[r]), (n[r / 2] = e[r + 1])
      return { real: t, imag: n }
    }
    function ad(e) {
      const t = Math.ceil(e.length / 4),
        n = new Float32Array(t),
        r = new Float32Array(t)
      for (let t = 0; t < e.length; t += 4)
        (n[Math.floor(t / 4)] = e[t]), (r[Math.floor(t / 4)] = e[t + 1])
      return { real: n, imag: r }
    }
    function id(e) {
      const t = Math.floor(e.length / 4),
        n = new Float32Array(t),
        r = new Float32Array(t)
      for (let t = 2; t < e.length; t += 4)
        (n[Math.floor(t / 4)] = e[t]), (r[Math.floor(t / 4)] = e[t + 1])
      return { real: n, imag: r }
    }
    function od(e, t) {
      return { real: e[2 * t], imag: e[2 * t + 1] }
    }
    function ld(e, t, n, r) {
      ;(e[2 * r] = t), (e[2 * r + 1] = n)
    }
    function ud(e, t) {
      const n = new Float32Array(e / 2),
        r = new Float32Array(e / 2)
      for (let s = 0; s < Math.ceil(e / 2); s++) {
        const a = (t ? 2 : -2) * Math.PI * (s / e)
        ;(n[s] = Math.cos(a)), (r[s] = Math.sin(a))
      }
      return { real: n, imag: r }
    }
    function cd(e, t, n) {
      const r = (n ? 2 : -2) * Math.PI * (e / t)
      return { real: Math.cos(r), imag: Math.sin(r) }
    }
    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const hd = '->',
      pd = /->/g,
      dd = ',',
      fd = '...'
    function md(e, t) {
      const n =
        ((e = e.replace(/\s/g, '')).length - e.replace(pd, '').length) /
        hd.length
      if (n < 1)
        throw new Error('Equations without an arrow are not supported.')
      if (n > 1)
        throw new Error(`Equation must contain exactly one arrow ("${hd}").`)
      const [r, s] = e.split(hd)
      O(
        -1 === r.indexOf(fd),
        () => `The ellipsis notation ("${fd}") is not supported yet.`,
      )
      const a = r.split(dd),
        i = a.length
      if (t !== i) throw new Error(`Expected ${i} input tensors, received ${t}`)
      if (i > 2)
        throw new Error(
          'Support for more than 2 input tensors is not implemented yet.',
        )
      const o = []
      for (let e = 0; e < s.length; ++e) {
        const t = s[e]
        if (!a.some((e) => -1 !== e.indexOf(t)))
          throw new Error(
            `Output subscripts contain the label ${t} not present in the input subscripts.`,
          )
        ;-1 === o.indexOf(t) && o.push(t)
      }
      for (let e = 0; e < r.length; ++e) {
        const t = r[e]
        ;-1 === o.indexOf(t) && t !== dd && o.push(t)
      }
      const l = new Array(a.length)
      for (let e = 0; e < i; ++e) {
        if (new Set(a[e].split('')).size !== a[e].length)
          throw new Error(
            `Found duplicate axes in input component ${a[e]}. Support for duplicate axes in input is not implemented yet.`,
          )
        l[e] = []
        for (let t = 0; t < a[e].length; ++t) l[e].push(o.indexOf(a[e][t]))
      }
      const u = o.length,
        c = []
      for (let e = s.length; e < u; ++e) c.push(e)
      return { allDims: o, summedDims: c, idDims: l }
    }
    function gd(e, t) {
      let n = new Array(e)
      n.fill(-1)
      for (let e = 0; e < t.length; ++e) n[t[e]] = e
      const r = []
      for (let t = 0; t < e; ++t) -1 === n[t] && r.push(t)
      return (
        (n = n.filter((e) => -1 !== e)),
        { permutationIndices: n, expandDims: r }
      )
    }
    function yd(e, t, n) {
      const r = new Array(e)
      for (let e = 0; e < n.length; ++e) {
        const s = n[e].shape
        for (let n = 0; n < t[e].length; ++n)
          void 0 === r[t[e][n]]
            ? (r[t[e][n]] = s[n])
            : O(
                r[t[e][n]] === s[n],
                () =>
                  `Expected dimension ${r[t[e][n]]} at axis ${n} of input shaped ${JSON.stringify(s)}, but got dimension ${s[n]}`,
              )
      }
    }
    function bd(e, t) {
      const n = e,
        r = []
      let s = 0
      0 === e.length && n.push(-1), (s = e.length + 1)
      for (let e = 0; e < s; ++e) r.push([])
      const a = []
      for (let e = 0; e < n.length; ++e) {
        const s = wd(t, n[e])
        for (const t of s) -1 === a.indexOf(t) && (r[e].push(t), a.push(t))
      }
      return { path: n, steps: r }
    }
    function xd(e) {
      return e.every((e, t) => e === t)
    }
    function wd(e, t) {
      const n = []
      for (let r = 0; r < e.length; ++r)
        (0 !== e[r].length && -1 === e[r].indexOf(t) && -1 !== t) || n.push(r)
      return n
    }
    function vd(e, t, n = 0) {
      let r = []
      if ('number' == typeof t)
        O(
          e.shape[n] % t == 0,
          () => 'Number of splits must evenly divide the axis.',
        ),
          (r = new Array(t).fill(e.shape[n] / t))
      else {
        const s = t.reduce((e, t) => (-1 === t && (e += 1), e), 0)
        O(
          s <= 1,
          () => 'There should be only one negative value in split array.',
        )
        const a = t.indexOf(-1)
        if (-1 !== a) {
          const r = t.reduce((e, t) => (t > 0 ? e + t : e))
          t[a] = e.shape[n] - r
        }
        O(
          e.shape[n] === t.reduce((e, t) => e + t),
          () => 'The sum of sizes must match the size of the axis dimension.',
        ),
          (r = t)
      }
      return r
    }
    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function kd(e) {
      return `Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${e}`
    }
    function Id(e, t) {
      return `indices(${e}, 0) is invalid: ${t} < 0`
    }
    function Nd(e, t, n) {
      return `indices(${e}, 0) is invalid: ${t} >= ${n}`
      /**
       * @license
       * Copyright 2021 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
    }
    function Sd(e, t) {
      return `only one output dimension may be -1, not both ${e} and ${t}`
    }
    function Td(e, t) {
      return `size ${e} must be non-negative, not ${t}`
    }
    function Cd() {
      return 'reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero'
    }
    function $d(e, t) {
      return `Input to reshape is a SparseTensor with ${P(e)}\n  dense values, but the requested shape requires a multiple of ${P(t)}. inputShape=${e} outputShape= ${t}`
    }
    function Ed(e, t) {
      return `Input to reshape is a tensor with ${P(e)} dense values, but the requested shape has ${P(t)}. inputShape=${e} outputShape=${t}`
      /**
       * @license
       * Copyright 2021 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
    }
    function Rd() {
      return 'segment ids must be >= 0'
    }
    function Ad() {
      return 'segment ids are not increasing'
    }
    function _d(e, t) {
      return `Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`
    }
    function Fd(e, t, n) {
      return `Bad: indices[${e}] == ${t} out of range [0, ${n})`
      /**
       * @license
       * Copyright 2018 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
    }
    function Dd(e, t) {
      let n,
        r = !1
      for (
        e <= Bp ? ((n = e), (r = !0)) : (n = re(e, Math.floor(Math.sqrt(e))));
        !r;

      )
        n > t || n === e ? (r = !0) : (n = re(e, n + 1))
      return n
    }
    function Od(e, t, n) {
      const r = [],
        s = e.length
      for (let a = 0; a < s; a++) a !== t ? r.push(e[a]) : r.push(n)
      return r
    }
    function Md(e, t, n, r) {
      const s = t.shape.length,
        a = e.shape.length
      if (0 !== r && (r < -s || r > s))
        throw new Error(
          `Expect batchDims in the range of [-${s}, ${s}], but got ${r}`,
        )
      if ((r < 0 && (r += s), r > a))
        throw new Error(
          `batchDims (${r}) must be less than rank(x) (\n    ${a}).`,
        )
      if (n < r)
        throw new Error(
          `batchDims (${r}) must be less than or equal to axis (${n}).`,
        )
      for (let n = 0; n < r; ++n)
        if (e.shape[n] !== t.shape[n])
          throw new Error(
            `x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`,
          )
      const i = e.shape[n],
        o = []
      let l = 1,
        u = 1,
        c = 1
      for (let t = 0; t < r; ++t) o.push(e.shape[t]), (l *= e.shape[t])
      for (let t = r; t < n; t++) o.push(e.shape[t]), (u *= e.shape[t])
      for (let e = r; e < s; e++) o.push(t.shape[e])
      for (let t = n + 1; t < a; t++) o.push(e.shape[t]), (c *= e.shape[t])
      return {
        batchSize: l,
        sliceSize: c,
        outerSize: u,
        dimSize: i,
        outputShape: o,
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Ld(e) {
      try {
        return e.map((e) => rs(e))
      } catch (e) {
        throw new Error(
          `Failed to decode encoded string bytes into utf-8, error: ${e}`,
        )
      }
    }
    function zd(e) {
      return e.map((e) => ns(e))
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Pd = {
        kernelName: ke,
        inputsToSave: ['x'],
        gradFunc: (e, t) => {
          const [n] = t
          return { x: () => Do(e, Lc(Ka(n, 'float32'), -1)) }
        },
      },
      Bd = {
        kernelName: Ie,
        inputsToSave: ['x'],
        gradFunc: (e, t) => {
          const [n] = t
          return {
            x: () => {
              const t = zl(Ka(n, 'float32')),
                r = Ll(pu(Ji(1), t))
              return uu(yl(e, r))
            },
          }
        },
      },
      Wd = {
        kernelName: Ne,
        inputsToSave: ['x'],
        gradFunc: (e, t) => {
          const [n] = t
          return {
            x: () => {
              const t = Ll(pu(zl(Ka(n, 'float32')), 1))
              return yl(e, t)
            },
          }
        },
      },
      Vd = {
        kernelName: Se,
        inputsToSave: ['a', 'b'],
        gradFunc: (e, t) => {
          const [n, r] = t,
            s = xi(n.shape, r.shape)
          return {
            a: () => {
              let t = e
              const r = bi(n.shape, s)
              return r.length > 0 && (t = Pl(t, r)), Eo(t, n.shape)
            },
            b: () => {
              let t = e
              const n = bi(r.shape, s)
              return n.length > 0 && (t = Pl(t, n)), Eo(t, r.shape)
            },
          }
        },
      },
      Ud = {
        kernelName: Te,
        saveAllInputs: !0,
        gradFunc: (e, t) => {
          const n = {}
          return (
            t.forEach((t, r) => {
              n[r] = () => e.clone()
            }),
            n
          )
        },
      },
      Gd = {
        kernelName: Ee,
        inputsToSave: ['x'],
        gradFunc: (e, t) => {
          const [n] = t
          return { x: () => wl(n) }
        },
      },
      Hd = {
        kernelName: Re,
        inputsToSave: ['x'],
        gradFunc: (e, t) => {
          const [n] = t
          return { x: () => wl(n) }
        },
      },
      jd = {
        kernelName: Ae,
        inputsToSave: ['x'],
        gradFunc: (e, t) => {
          const [n] = t
          return { x: () => yl(e, Ll(pu(Ji(1), zl(Ka(n, 'float32'))))) }
        },
      },
      qd = {
        kernelName: _e,
        inputsToSave: ['x'],
        gradFunc: (e, t) => {
          const [n] = t
          return {
            x: () => {
              const t = Ll(ro(Ji(1), zl(Ka(n, 'float32'))))
              return yl(e, t)
            },
          }
        },
      },
      Kd = {
        kernelName: Oe,
        inputsToSave: ['a', 'b'],
        gradFunc: (e, t) => {
          const [n, r] = t,
            s = xi(n.shape, r.shape)
          return {
            a: () => {
              const t = ro(zl(n), zl(r))
              let a = Do(e, yl(r, t))
              const i = bi(n.shape, s)
              return i.length > 0 && (a = Pl(a, i)), Eo(a, n.shape)
            },
            b: () => {
              const t = ro(zl(n), zl(r))
              let a = uu(Do(e, yl(n, t)))
              const i = bi(r.shape, s)
              return i.length > 0 && (a = Pl(a, i)), Eo(a, r.shape)
            },
          }
        },
      },
      Xd = {
        kernelName: Fe,
        inputsToSave: ['x'],
        gradFunc: (e, t) => {
          const [n] = t
          return { x: () => yl(e, ro(zl(Ka(n, 'float32')), 1)) }
        },
      },
      Yd = {
        kernelName: De,
        inputsToSave: ['x'],
        gradFunc: (e, t) => {
          const [n] = t
          return { x: () => yl(e, pu(Ji(1), zl(Ka(n, 'float32')))) }
        },
      },
      Zd = js({
        avgPool3dGrad_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r, s, a) {
            const i = Us(e, 'dy', 'avgPool3dGrad'),
              o = Us(t, 'input', 'avgPool3dGrad')
            let l = i,
              u = o,
              c = !1
            4 === o.rank &&
              ((c = !0),
              (l = Eo(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]])),
              (u = Eo(o, [1, o.shape[0], o.shape[1], o.shape[2], o.shape[3]]))),
              O(
                5 === l.rank,
                () =>
                  `Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`,
              ),
              O(
                5 === u.rank,
                () =>
                  `Error in avgPool3dGrad: input must be rank 5 but got rank ${u.rank}.`,
              ),
              $o('avgPool3dGrad', s, a)
            const h = { dy: l, input: u },
              p = { filterSize: n, strides: r, pad: s, dimRoundingMode: a },
              d = Os.runKernel(Pe, h, p)
            return c
              ? Eo(d, [d.shape[1], d.shape[2], d.shape[3], d.shape[4]])
              : d
          },
      }),
      Jd = {
        kernelName: ze,
        inputsToSave: ['x'],
        gradFunc: (e, t, n) => {
          const [r] = t,
            { filterSize: s, strides: a, pad: i, dimRoundingMode: o } = n
          return { x: () => Zd(e, r, s, a, i, o) }
        },
      },
      Qd = js({
        avgPoolGrad_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r, s) {
            const a = Us(e, 'dy', 'avgPoolGrad'),
              i = Us(t, 'input', 'avgPoolGrad')
            O(
              i.rank === a.rank,
              () =>
                `Rank of input (${i.rank}) does not match rank of dy (${a.rank})`,
            )
            let o = i,
              l = a,
              u = !1
            3 === i.rank &&
              ((u = !0),
              (o = Eo(i, [1, i.shape[0], i.shape[1], i.shape[2]])),
              (l = Eo(a, [1, a.shape[0], a.shape[1], a.shape[2]]))),
              O(
                4 === l.rank,
                () =>
                  `Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`,
              ),
              O(
                4 === o.rank,
                () =>
                  `Error in avgPoolGrad: input must be rank 4 but got rank ${o.rank}.`,
              )
            const c = { dy: l, input: o },
              h = { filterSize: n, strides: r, pad: s },
              p = Os.runKernel(Le, c, h)
            return u ? Eo(p, [p.shape[1], p.shape[2], p.shape[3]]) : p
          },
      }),
      ef = {
        kernelName: Me,
        inputsToSave: ['x'],
        gradFunc: (e, t, n) => {
          const [r] = t,
            { filterSize: s, strides: a, pad: i } = n
          return { x: () => Qd(e, r, s, a, i) }
        },
      },
      tf = {
        kernelName: Be,
        inputsToSave: ['a', 'b'],
        gradFunc: (e, t, n) => {
          const [r, s] = t,
            { transposeA: a, transposeB: i } = n
          return a || i
            ? !a && i
              ? { a: () => Fo(e, s, !1, !1), b: () => Fo(e, r, !0, !1) }
              : a && !i
                ? { a: () => Fo(s, e, !1, !0), b: () => Fo(r, e, !1, !1) }
                : { a: () => Fo(s, e, !0, !0), b: () => Fo(e, r, !0, !0) }
            : { a: () => Fo(e, s, !1, !0), b: () => Fo(r, e, !0, !1) }
        },
      },
      nf = {
        kernelName: We,
        gradFunc: (e, t, n) => {
          const { blockShape: r, crops: s } = n
          return { x: () => Hu(e, r, s) }
        },
      },
      rf = {
        kernelName: 'BroadcastTo',
        gradFunc: (e, t, n) => {
          const r = n,
            s = r.inputShape,
            a = r.shape,
            i = Array.from(a)
          for (let e = s.length - 1; e >= 0; e--)
            if (s[e] === a[e]) i[e] = 1
            else if (1 !== s[e])
              throw new Error(
                `broadcastTo(): [${s}] cannot be broadcast to [${a}].`,
              )
          const o = []
          for (let e = 0; e < i.length; e++) i[e] > 1 && o.push(e)
          return { x: () => Pl(e, o, !0) }
        },
      },
      sf = { kernelName: Ge, gradFunc: (e) => ({ x: () => e.clone() }) },
      af = { kernelName: He, gradFunc: (e) => ({ x: () => wl(e) }) },
      of = {
        kernelName: je,
        inputsToSave: ['x'],
        gradFunc: (e, t, n) => {
          const [r] = t,
            { clipValueMin: s, clipValueMax: a } = n
          return { x: () => xl(mu(Zl(r, s), su(r, a)), e, wl(e)) }
        },
      },
      lf = { kernelName: Ke, inputsToSave: ['x'], gradFunc: Pd.gradFunc },
      uf = {
        kernelName: Xe,
        saveAllInputs: !0,
        gradFunc: (e, t, n) => {
          const r = t.map((e) => e.shape),
            { axis: s } = n,
            a = j(s, t[0].shape)[0],
            i = r.map((e) => e[a])
          return _c(e, i, a).map((e) => () => e)
        },
      },
      cf = {
        kernelName: Ye,
        inputsToSave: ['x', 'filter'],
        gradFunc: (e, t, n) => {
          const [r, s] = t,
            { dilations: a, strides: i, pad: o, dataFormat: l } = n
          return (
            O(
              So(a),
              () =>
                `Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`,
            ),
            {
              x: () => nl(r.shape, e, s, i, o, l),
              filter: () => dh(r, e, s.shape, i, o, l),
            }
          )
        },
      },
      hf = {
        kernelName: Je,
        inputsToSave: ['dy', 'filter'],
        gradFunc: (e, t, n) => {
          const [r, s] = t,
            { strides: a, pad: i, dataFormat: o, dimRoundingMode: l } = n
          return {
            dy: () => el(e, s, a, i, o, 1, l),
            filter: () => dh(e, r, s.shape, a, i, o, l),
          }
        },
      },
      pf = js({
        conv3DBackpropFilter_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r, s) {
            let a = e
            4 === e.rank &&
              (a = Eo(e, [1, e.shape[0], e.shape[1], e.shape[2], e.shape[3]]))
            let i = t
            4 === i.rank &&
              (i = Eo(t, [1, t.shape[0], t.shape[1], t.shape[2], t.shape[3]])),
              O(
                5 === a.rank,
                () =>
                  `Error in conv3dDerFilter: input must be rank 5, but got shape ${a.shape}.`,
              ),
              O(
                5 === i.rank,
                () =>
                  `Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`,
              ),
              O(
                5 === n.length,
                () =>
                  `Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`,
              ),
              O(
                a.shape[4] === n[3],
                () =>
                  `Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`,
              ),
              O(
                i.shape[4] === n[4],
                () =>
                  `Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`,
              )
            const o = { x: a, dy: i },
              l = { strides: r, pad: s, filterShape: n }
            return Os.runKernel(et, o, l)
          },
      }),
      df = {
        kernelName: Qe,
        inputsToSave: ['x', 'filter'],
        gradFunc: (e, t, n) => {
          const { dilations: r, strides: s, pad: a } = n
          O(
            So(r),
            () =>
              `Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`,
          )
          const [i, o] = t
          return {
            x: () => al(i.shape, e, o, s, a),
            filter: () => pf(i, e, o.shape, s, a),
          }
        },
      },
      ff = {
        kernelName: nt,
        inputsToSave: ['x'],
        gradFunc: (e, t) => {
          const [n] = t
          return { x: () => Do(uu(kc(Ka(n, 'float32'))), e) }
        },
      },
      mf = {
        kernelName: rt,
        inputsToSave: ['x'],
        gradFunc: (e, t) => {
          const [n] = t
          return { x: () => Do(Ic(Ka(n, 'float32')), e) }
        },
      },
      gf = {
        kernelName: at,
        inputsToSave: ['x'],
        gradFunc: (e, t, n) => {
          const [r] = t,
            { axis: s, exclusive: a, reverse: i } = n
          return {
            x: () => {
              const t = Al([s], r.rank)
              let n = cl(e, s, a, !i)
              return null != t && (n = th(n, t)), n
            },
          }
        },
      },
      yf = {
        kernelName: ut,
        inputsToSave: ['x', 'filter'],
        gradFunc: (e, t, n) => {
          const { dilations: r, strides: s, pad: a, dimRoundingMode: i } = n,
            o = null == r ? [1, 1] : r
          O(
            So(o),
            () =>
              `Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`,
          )
          const [l, u] = t
          return (
            O(
              4 === l.rank,
              () =>
                `Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`,
            ),
            O(
              4 === u.rank,
              () =>
                `Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`,
            ),
            O(
              l.shape[3] === u.shape[2],
              () =>
                `Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`,
            ),
            O(
              To(s, o),
              () =>
                `Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${s} and dilations '${o}'.`,
            ),
            $o('depthwiseConv2d', a, i),
            {
              x: () => wh(l.shape, e, u, s, a, o, i),
              filter: () => xh(l, e, u.shape, s, a, o, i),
            }
          )
        },
      },
      bf = {
        kernelName: dt,
        inputsToSave: ['x', 'filter'],
        gradFunc: (e, t, n) => {
          const [r, s] = t,
            a = { x: r, filter: s, dy: e },
            i = { x: r, filter: s, dy: e }
          return {
            x: () => Os.runKernel(ft, a, n),
            filter: () => Os.runKernel(mt, i, n),
          }
        },
      },
      xf = {
        kernelName: bt,
        outputsToSave: [!0],
        gradFunc: (e, t) => {
          const [n] = t,
            r = { dy: e, y: n }
          return { x: () => Os.runKernel(xt, r) }
        },
      },
      wf = {
        kernelName: wt,
        inputsToSave: ['x'],
        gradFunc: (e, t) => {
          const [n] = t,
            r = Do(Ul(uu(zl(n))), 2 / Math.sqrt(Math.PI))
          return { x: () => Do(e, r) }
        },
      },
      vf = {
        kernelName: kt,
        outputsToSave: [!0],
        gradFunc: (e, t) => {
          const [n] = t
          return { x: () => Do(e, n) }
        },
      },
      kf = {
        kernelName: It,
        inputsToSave: ['input'],
        gradFunc: (e, t) => {
          const [n] = t
          return { input: () => Eo(e, n.shape) }
        },
      },
      If = {
        kernelName: Nt,
        inputsToSave: ['x'],
        gradFunc: (e, t) => {
          const [n] = t
          return { x: () => Do(e, Ul(n)) }
        },
      },
      Nf = { kernelName: $t, gradFunc: (e) => ({ x: () => wl(e) }) },
      Sf = {
        kernelName: Et,
        inputsToSave: ['a', 'b'],
        gradFunc: (e, t) => {
          const [n, r] = t,
            s = xi(n.shape, r.shape)
          return {
            a: () => {
              const t = yl(e, Ka(r, 'float32')),
                a = bi(n.shape, s)
              return a.length > 0 ? Eo(Pl(t, a), n.shape) : t
            },
            b: () => {
              let t = Do(e, Ka(n, 'float32'))
              const a = bi(r.shape, s)
              a.length > 0 && (t = Eo(Pl(t, a), r.shape))
              const i = zl(r)
              return uu(yl(t, Ka(i, 'float32')))
            },
          }
        },
      },
      Tf = {
        kernelName: Rt,
        inputsToSave: ['x', 'mean', 'variance', 'scale'],
        gradFunc: (e, t, n) => {
          const { varianceEpsilon: r } = n,
            [s, a, i, o] = t,
            l = null == o ? Ji(1) : o,
            u = bi(a.shape, s.shape),
            c = []
          if (1 === a.rank) {
            for (let e = 0; e < s.shape.length - 1; ++e) c.push(s.shape[e])
            c.push(1)
          }
          const h = pu(s, a),
            p = Do(e, l),
            d = yc(ro(i, Ji(r))),
            f = Do(Do(Do(d, d), d), Ji(-0.5))
          return {
            x: () =>
              1 === a.rank
                ? Eo(Do(Do(e, jl(Eo(d, [1, 1, 1, a.shape[0]]), c)), l), s.shape)
                : Eo(Do(Do(e, d), l), s.shape),
            mean: () => {
              let e = Do(Do(d, Ji(-1)), p)
              return 1 === a.rank && (e = Pl(e, u)), Eo(e, a.shape)
            },
            variance: () => {
              let e = Do(Do(f, h), p)
              return 1 === a.rank && (e = Pl(e, u)), Eo(e, a.shape)
            },
            scale: () => {
              const t = Do(h, d)
              let n = Do(e, t)
              return 1 === a.rank && (n = Pl(n, u)), Eo(n, a.shape)
            },
            offset: () => {
              let t = e
              return 1 === a.rank && (t = Pl(t, u)), Eo(t, a.shape)
            },
          }
        },
      },
      Cf = {
        kernelName: At,
        inputsToSave: ['x', 'indices'],
        gradFunc: (e, t, n) => {
          const [r, s] = t,
            { axis: a } = n,
            i = j(a, r.shape)[0]
          return {
            x: () => {
              const t = r.shape,
                n = s.size,
                o = t.slice(0, i),
                l = o.length,
                u = t.slice(a, t.length).slice(1),
                c = u.length,
                h = $f(0, l),
                p = $f(l + 1, l + 1 + c),
                d = Ef([o, [n], u]),
                f = Eo(e, d),
                m = Eo(s, [n]),
                g = Ef([[l], h, p]),
                y = th(f, g)
              let b = Kc(y, m, r.shape[i])
              const x = _l(g)
              return (b = th(b, x)), b
            },
            indices: () => s,
          }
        },
      }
    function $f(e, t) {
      const n = []
      for (let r = e; r < t; ++r) n.push(r)
      return n
    }
    function Ef(e) {
      const t = []
      for (let n = 0; n < e.length; ++n)
        for (let r = 0; r < e[n].length; ++r) t.push(e[n][r])
      return t
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Rf = {
        kernelName: Dt,
        inputsToSave: ['a', 'b'],
        gradFunc: (e, t) => {
          const [n, r] = t
          return { a: () => wl(n), b: () => wl(r) }
        },
      },
      Af = { kernelName: Ot, gradFunc: (e) => ({ x: () => Ka(e, 'float32') }) },
      _f = { kernelName: zt, gradFunc: (e) => ({ x: () => wl(e) }) },
      Ff = { kernelName: Pt, gradFunc: (e) => ({ x: () => wl(e) }) },
      Df = { kernelName: Bt, gradFunc: (e) => ({ x: () => wl(e) }) },
      Of = {
        kernelName: Wt,
        inputsToSave: ['x'],
        gradFunc: (e, t, n) => {
          const [r] = t,
            { alpha: s } = n,
            a = Yl(r, 0)
          return { x: () => xl(a, e, Do(e, s)) }
        },
      },
      Mf = {
        kernelName: jt,
        inputsToSave: ['x'],
        gradFunc: (e, t) => {
          const [n] = t
          return { x: () => yl(e, ro(n, 1)) }
        },
      },
      Lf = {
        kernelName: Ht,
        inputsToSave: ['x'],
        gradFunc: (e, t) => {
          const [n] = t
          return { x: () => yl(e, Ka(n, 'float32')) }
        },
      },
      zf = {
        kernelName: 'LogSoftmax',
        inputsToSave: [],
        outputsToSave: [!0],
        gradFunc: (e, t, n) => {
          const [r] = t,
            { axis: s } = n
          return {
            logits: () => {
              const t = Ul(r)
              return pu(e, Do(Pl(e, s, !0), t))
            },
          }
        },
      },
      Pf = js({
        localResponseNormalizationBackprop_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r = 5, s = 1, a = 1, i = 0.5) {
            const o = { x: e, y: t, dy: n },
              l = { depthRadius: r, bias: s, alpha: a, beta: i }
            return Os.runKernel(Zt, o, l)
          },
      }),
      Bf = {
        kernelName: Yt,
        inputsToSave: ['x'],
        outputsToSave: [!0],
        gradFunc: (e, t, n) => {
          const [r, s] = t,
            { depthRadius: a, bias: i, alpha: o, beta: l } = n
          return { x: () => Pf(r, s, e, a, i, o, l) }
        },
      }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Wf(e, t, n, r) {
      return (
        t.rank < n.rank && (t = Eo(t, El(t.shape, r))),
        e.rank < n.rank && (e = Eo(e, El(e.shape, r))),
        { x: () => Do(e, Ka(bl(n, t), e.dtype)) }
      )
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Vf = {
        kernelName: Jt,
        inputsToSave: ['x'],
        outputsToSave: [!0],
        gradFunc: (e, t, n) => {
          const r = n,
            { reductionIndices: s } = r,
            a = t[0],
            i = Wf(e, t[1], a, j(s, a.shape))
          return { x: () => i.x() }
        },
      },
      Uf = {
        kernelName: Qt,
        inputsToSave: ['a', 'b'],
        gradFunc: (e, t) => {
          const [n, r] = t
          return {
            a: () => Do(e, Ka(Zl(n, r), 'float32')),
            b: () => Do(e, Ka(ru(n, r), 'float32')),
          }
        },
      },
      Gf = js({
        maxPool3dGrad_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r, s, a, i) {
            const o = Us(e, 'dy', 'maxPool3dGrad'),
              l = Us(t, 'input', 'maxPool3dGrad'),
              u = Us(n, 'output', 'maxPool3dGrad')
            let c = o,
              h = l,
              p = u,
              d = !1
            4 === l.rank &&
              ((d = !0),
              (c = Eo(o, [1, o.shape[0], o.shape[1], o.shape[2], o.shape[3]])),
              (h = Eo(l, [1, l.shape[0], l.shape[1], l.shape[2], l.shape[3]])),
              (p = Eo(u, [1, u.shape[0], u.shape[1], u.shape[2], u.shape[3]]))),
              O(
                5 === c.rank,
                () =>
                  `Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`,
              ),
              O(
                5 === h.rank,
                () =>
                  `Error in maxPool3dGrad: input must be rank 5 but got rank ${h.rank}.`,
              ),
              O(
                5 === p.rank,
                () =>
                  `Error in maxPool3dGrad: output must be rank 5 but got rank ${p.rank}.`,
              ),
              $o('maxPool3dGrad', a, i)
            const f = { dy: c, input: h, output: p },
              m = { filterSize: r, strides: s, pad: a, dimRoundingMode: i },
              g = Os.runKernel(rn, f, m)
            return d
              ? Eo(g, [g.shape[1], g.shape[2], g.shape[3], g.shape[4]])
              : g
          },
      }),
      Hf = {
        kernelName: nn,
        inputsToSave: ['x'],
        outputsToSave: [!0],
        gradFunc: (e, t, n) => {
          const [r, s] = t,
            { filterSize: a, strides: i, pad: o, dimRoundingMode: l } = n
          return { x: () => Gf(e, r, s, a, i, o, l) }
        },
      },
      jf = js({
        maxPoolGrad_:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e, t, n, r, s, a, i) {
            const o = Us(e, 'dy', 'maxPoolGrad'),
              l = Us(t, 'input', 'maxPoolGrad'),
              u = Us(n, 'output', 'maxPoolGrad')
            O(
              l.rank === o.rank,
              () =>
                `Rank of input (${l.rank}) does not match rank of dy (${o.rank})`,
            ),
              O(
                4 === o.rank,
                () =>
                  `Error in maxPoolGrad: dy must be rank 4 but got rank ${o.rank}.`,
              ),
              O(
                4 === l.rank,
                () =>
                  `Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`,
              ),
              $o('maxPoolGrad', a, i)
            const c = { dy: o, input: l, output: u },
              h = { filterSize: r, strides: s, pad: a, dimRoundingMode: i }
            return Os.runKernel(tn, c, h)
          },
      }),
      qf = {
        kernelName: en,
        inputsToSave: ['x'],
        outputsToSave: [!0],
        gradFunc: (e, t, n) => {
          const [r, s] = t,
            { filterSize: a, strides: i, pad: o } = n
          return { x: () => jf(e, r, s, a, i, o) }
        },
      },
      Kf = {
        kernelName: an,
        inputsToSave: ['x'],
        gradFunc: (e, t, n) => {
          const [r] = t,
            { axis: s } = n,
            a = j(s, r.shape),
            i = P($l(r.shape, a)[1])
          return {
            x: () => {
              const t = r.shape.slice()
              a.forEach((e) => {
                t[e] = 1
              })
              const n = Eo(e, t)
              return yl(Do(n, $u(r.shape, 'float32')), i)
            },
          }
        },
      },
      Xf = {
        kernelName: on,
        inputsToSave: ['x'],
        outputsToSave: [!0],
        gradFunc: (e, t, n) => {
          const r = n,
            { axis: s } = r,
            [a, i] = t,
            o = Wf(e, i, a, j(s, a.shape))
          return { x: () => o.x() }
        },
      },
      Yf = {
        kernelName: un,
        inputsToSave: ['x'],
        gradFunc: (e, t, n) => {
          const r = t[0],
            { paddings: s } = n,
            a = s.map((e) => e[0])
          return { x: () => Mo(e, a, r.shape) }
        },
      },
      Zf = {
        kernelName: wn,
        saveAllInputs: !0,
        gradFunc: (e, t, n) => {
          const { axis: r } = n
          return Xc(e, r).map((e) => () => e)
        },
      },
      Jf = {
        kernelName: vn,
        inputsToSave: ['x'],
        gradFunc: (e, t, n) => {
          const r = t[0],
            { paddings: s } = n,
            a = s.map((e) => e[0])
          return { x: () => Mo(e, a, r.shape) }
        },
      },
      Qf = {
        kernelName: kn,
        inputsToSave: ['a', 'b'],
        outputsToSave: [!0],
        gradFunc: (e, t) => {
          const [n, r, s] = t,
            a = n,
            i = r,
            o = xi(a.shape, i.shape)
          return {
            a: () => {
              const t = Ka(i, 'float32')
              let n = Do(e, Do(t, Ml(a, pu(t, Ji(1)))))
              const r = bi(a.shape, o)
              return r.length > 0 && (n = Pl(n, r)), Eo(n, a.shape)
            },
            b: () => {
              const t = Yl(a, 0),
                n = xl(t, ou(a), wl(a))
              let r = Do(e, Do(s, n))
              const l = bi(i.shape, o)
              return l.length > 0 && (r = Pl(r, l)), Eo(r, i.shape)
            },
          }
        },
      },
      em = {
        kernelName: In,
        inputsToSave: ['x', 'alpha'],
        gradFunc: (e, t) => {
          const [n, r] = t,
            s = Yl(n, 0)
          return {
            x: () => xl(s, e, Do(e, r)),
            alpha: () => {
              let t = xl(s, wl(e), Do(e, n))
              const a = bi(r.shape, e.shape)
              return a.length > 0 && (t = Pl(t, a)), Eo(t, r.shape)
            },
          }
        },
      }
    const tm = {
        kernelName: Nn,
        inputsToSave: ['x'],
        gradFunc: (e, t, n) => {
          const [r] = t,
            { axis: s } = n
          let a = []
          return (
            (a =
              null == s
                ? r.shape.map((e, t) => t)
                : 'number' == typeof s
                  ? [s]
                  : s),
            {
              x: () =>
                (function (e, t, n) {
                  const r = e.shape.length,
                    s = r - n.length,
                    a = Al(n, r)
                  let i = e
                  null != a && (i = th(e, a))
                  const o = i.shape.slice(),
                    l = o
                      .splice(r - n.length, n.length)
                      .reduce((e, t) => e * t, 1)
                  o.push(l)
                  let u =
                    /**
                     * @license
                     * Copyright 2022 Google Inc. All Rights Reserved.
                     * Licensed under the Apache License, Version 2.0 (the "License");
                     * you may not use this file except in compliance with the License.
                     * You may obtain a copy of the License at
                     *
                     * http://www.apache.org/licenses/LICENSE-2.0
                     *
                     * Unless required by applicable law or agreed to in writing, software
                     * distributed under the License is distributed on an "AS IS" BASIS,
                     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                     * See the License for the specific language governing permissions and
                     * limitations under the License.
                     * =============================================================================
                     */
                    (function (e, t, n) {
                      const r = e.shape.slice()
                      r[n] = 1
                      const s = Eo(t, r),
                        a = ul(e, n, !0, !1),
                        i = ul(e, n, !0, !0),
                        o = Do(a, i)
                      return Do(s, o)
                    })(i.reshape(o), t, s)
                  if (((u = u.reshape(i.shape)), null != a)) {
                    const e = _l(a)
                    u = th(u, e)
                  }
                  return u
                })(r, e, a),
            }
          )
        },
      },
      nm = {
        kernelName: En,
        inputsToSave: ['x'],
        gradFunc: (e, t) => {
          const [n] = t
          return { x: () => yl(e, uu(zl(n))) }
        },
      },
      rm = {
        kernelName: Mn,
        inputsToSave: ['x'],
        gradFunc: (e, t) => {
          const [n] = t,
            r = Do(su(n, 6), Lc(n))
          return { x: () => Do(e, Ka(r, 'float32')) }
        },
      },
      sm = {
        kernelName: Rn,
        inputsToSave: ['x'],
        gradFunc: (e, t) => {
          const [n] = t
          return { x: () => Do(e, Ka(Lc(n), 'float32')) }
        },
      },
      am = {
        kernelName: An,
        inputsToSave: ['x'],
        gradFunc: (e, t) => {
          const [n] = t
          return { x: () => Eo(e, n.shape) }
        },
      },
      im = {
        kernelName: Pn,
        inputsToSave: ['x'],
        gradFunc: (e, t) => {
          const [n] = t
          return { x: () => uu(yl(e, Do(Ml(n, 1.5), 2))) }
        },
      },
      om = {
        kernelName: Un,
        inputsToSave: ['x'],
        gradFunc: (e, t) => {
          const [n] = t
          return {
            x: () => {
              const t = Yl(n, Ji(0)),
                r = Ji(Xp),
                s = Ji(Yp),
                a = Do(e, s),
                i = Do(Do(e, r), Ul(Ka(n, 'float32')))
              return xl(t, a, i)
            },
          }
        },
      },
      lm = {
        kernelName: Hn,
        inputsToSave: ['x'],
        gradFunc: (e, t) => {
          const [n] = t
          return { x: () => Do(ol(Ka(n, 'float32')), e) }
        },
      },
      um = {
        kernelName: jn,
        inputsToSave: ['x'],
        gradFunc: (e, t) => {
          const [n] = t
          return { x: () => Do(ll(Ka(n, 'float32')), e) }
        },
      },
      cm = {
        kernelName: Gn,
        inputsToSave: ['x'],
        gradFunc: (e, t, n) => {
          const [r] = t,
            { begin: s, size: a } = n,
            i = r.shape,
            [o, l] = Pi(r, s, a),
            u = []
          for (let t = 0; t < e.rank; t++) u.push([o[t], i[t] - o[t] - l[t]])
          return { x: () => Bu(e, u) }
        },
      },
      hm = {
        kernelName: Xn,
        inputsToSave: ['x'],
        gradFunc: (e, t) => {
          const [n] = t
          return { x: () => Do(e, Oo(n)) }
        },
      },
      pm = {
        kernelName: Jn,
        gradFunc: (e, t, n) => {
          const { blockShape: r, paddings: s } = n
          return { x: () => Po(e, r, s) }
        },
      },
      dm = {
        kernelName: Qn,
        gradFunc: (e, t, n) => {
          const { axis: r } = n
          return { x: () => _o(e, r) }
        },
      },
      fm = {
        kernelName: Yn,
        inputsToSave: ['x'],
        gradFunc: (e, t) => {
          const [n] = t
          return { x: () => yl(e, Do(Ll(Ka(n, 'float32')), 2)) }
        },
      },
      mm = {
        kernelName: or,
        inputsToSave: ['x'],
        gradFunc: (e, t) => {
          const [n] = t
          return { x: () => Do(e, Do(Ka(n, 'float32'), 2)) }
        },
      },
      gm = {
        kernelName: Zn,
        inputsToSave: ['x'],
        gradFunc: (e, t, n) => {
          const [r] = t,
            s = r.shape.slice(),
            { axis: a } = n
          j(a, r.shape).forEach((e) => {
            s[e] = 1
          })
          const i = Eo(e, s),
            o = Do(i, $u(r.shape, 'float32'))
          return { x: () => o }
        },
      },
      ym = {
        kernelName: dr,
        inputsToSave: ['x'],
        gradFunc: (e, t) => {
          const [n] = t
          return { x: () => yl(e, zl(ol(n))) }
        },
      },
      bm = {
        kernelName: mr,
        inputsToSave: ['x'],
        gradFunc: (e, t, n) => {
          const [r] = t,
            { reps: s } = n
          return {
            x: () => {
              let t = wl(r)
              if (1 === r.rank)
                for (let n = 0; n < s[0]; ++n)
                  t = ro(t, Mo(e, [n * r.shape[0]], [r.shape[0]]))
              else if (2 === r.rank)
                for (let n = 0; n < s[0]; ++n)
                  for (let a = 0; a < s[1]; ++a)
                    t = ro(
                      t,
                      Mo(
                        e,
                        [n * r.shape[0], a * r.shape[1]],
                        [r.shape[0], r.shape[1]],
                      ),
                    )
              else if (3 === r.rank)
                for (let n = 0; n < s[0]; ++n)
                  for (let a = 0; a < s[1]; ++a)
                    for (let i = 0; i < s[2]; ++i)
                      t = ro(
                        t,
                        Mo(
                          e,
                          [n * r.shape[0], a * r.shape[1], i * r.shape[2]],
                          [r.shape[0], r.shape[1], r.shape[2]],
                        ),
                      )
              else {
                if (4 !== r.rank)
                  throw new Error(
                    `Gradient for tile operation is not implemented for rank-${r.rank} tensors yet.`,
                  )
                for (let n = 0; n < s[0]; ++n)
                  for (let a = 0; a < s[1]; ++a)
                    for (let i = 0; i < s[2]; ++i)
                      for (let o = 0; o < s[3]; ++o)
                        t = ro(
                          t,
                          Mo(
                            e,
                            [
                              n * r.shape[0],
                              a * r.shape[1],
                              i * r.shape[2],
                              o * r.shape[3],
                            ],
                            [r.shape[0], r.shape[1], r.shape[2], r.shape[3]],
                          ),
                        )
              }
              return t
            },
          }
        },
      },
      xm = {
        kernelName: vr,
        inputsToSave: ['segmentIds'],
        gradFunc: (e, t) => {
          const [n] = t
          return {
            x: () =>
              (function (e, t) {
                const n = Su(t, wl(t)),
                  r = Xl(e, n)
                let s = Zl(t, Ji(0, 'int32'))
                const a = r.rank - s.rank
                for (let e = 0; e < a; ++e) s = Gl(s, e + 1)
                s = mu(s, $u(r.shape, 'bool'))
                const i = wl(r)
                return xl(s, r, i)
              })(e, n),
          }
        },
      },
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */ wm = [
        Pd,
        Bd,
        Wd,
        Vd,
        Ud,
        Gd,
        Hd,
        jd,
        qd,
        Kd,
        Xd,
        Yd,
        Jd,
        ef,
        tf,
        nf,
        rf,
        sf,
        af,
        of,
        lf,
        uf,
        hf,
        cf,
        df,
        ff,
        mf,
        gf,
        yf,
        bf,
        {
          kernelName: gt,
          inputsToSave: ['a', 'b'],
          gradFunc: (e, t) => {
            const [n, r] = t,
              s = xi(n.shape, r.shape)
            return {
              a: () => {
                const t = yl(e, Ka(r, 'float32')),
                  a = bi(n.shape, s)
                return a.length > 0 ? Eo(Pl(t, a), n.shape) : t
              },
              b: () => {
                let t = Do(e, Ka(n, 'float32'))
                const a = bi(r.shape, s)
                a.length > 0 && (t = Eo(Pl(t, a), r.shape))
                const i = zl(r)
                return uu(yl(t, Ka(i, 'float32')))
              },
            }
          },
        },
        xf,
        wf,
        vf,
        kf,
        If,
        Sf,
        Nf,
        Tf,
        Cf,
        Rf,
        Af,
        _f,
        Ff,
        Df,
        Of,
        Mf,
        Lf,
        zf,
        Bf,
        Vf,
        Vf,
        Uf,
        Hf,
        qf,
        Kf,
        Xf,
        {
          kernelName: ln,
          inputsToSave: ['a', 'b'],
          gradFunc: (e, t) => {
            const [n, r] = t
            return {
              a: () => Do(e, Ka(su(n, r), 'float32')),
              b: () => Do(e, Ka(Yl(n, r), 'float32')),
            }
          },
        },
        Yf,
        {
          kernelName: cn,
          inputsToSave: ['a', 'b'],
          gradFunc: (e, t) => {
            const [n, r] = t,
              s = xi(n.shape, r.shape)
            return {
              a: () => {
                const t = bi(n.shape, s)
                return t.length > 0 ? Eo(Pl(e, t), n.shape) : e
              },
              b: () => {
                const t = Do(e, uu(Kl(yl(n, r)))),
                  a = bi(r.shape, s)
                return a.length > 0 ? Eo(Pl(t, a), r.shape) : t
              },
            }
          },
        },
        {
          kernelName: pn,
          inputsToSave: ['a', 'b'],
          gradFunc: (e, t) => {
            const [n, r] = t,
              s = xi(n.shape, r.shape)
            return {
              a: () => {
                const t = Do(e, Ka(r, 'float32')),
                  a = bi(n.shape, s)
                return a.length > 0 ? Eo(Pl(t, a), n.shape) : t
              },
              b: () => {
                const t = Do(e, Ka(n, 'float32')),
                  a = bi(r.shape, s)
                return a.length > 0 ? Eo(Pl(t, a), r.shape) : t
              },
            }
          },
        },
        { kernelName: dn, gradFunc: (e) => ({ x: () => uu(e) }) },
        {
          kernelName: xn,
          inputsToSave: ['indices'],
          gradFunc: (e, t) => {
            const n = t[0]
            return { indices: () => Cu(n.shape, 'float32') }
          },
        },
        { kernelName: bn, gradFunc: (e) => ({ x: () => wl(e) }) },
        Zf,
        Jf,
        Jf,
        Qf,
        em,
        tm,
        nm,
        rm,
        sm,
        am,
        {
          kernelName: Dn,
          inputsToSave: ['images'],
          gradFunc: (e, t, n) => {
            const [r] = t,
              s = { dy: e, images: r }
            return { images: () => Os.runKernel(On, s, n) }
          },
        },
        {
          kernelName: _n,
          inputsToSave: ['images'],
          gradFunc: (e, t, n) => {
            const [r] = t,
              s = { dy: e, images: r }
            return { images: () => Os.runKernel(Fn, s, n) }
          },
        },
        {
          kernelName: Ln,
          gradFunc: (e, t, n) => {
            const { dims: r } = n,
              s = j(r, e.shape)
            return { x: () => hc(e, s) }
          },
        },
        { kernelName: zn, gradFunc: (e) => ({ x: () => wl(e) }) },
        im,
        {
          kernelName: Vn,
          inputsToSave: ['condition'],
          gradFunc: (e, t) => {
            const [n] = t
            return {
              condition: () => Ka(wl(n), 'float32'),
              t: () => Do(e, Ka(n, e.dtype)),
              e: () => Do(e, Ka(gu(n), e.dtype)),
            }
          },
        },
        om,
        {
          kernelName: Kn,
          outputsToSave: [!0],
          gradFunc: (e, t) => {
            const [n] = t
            return { x: () => Do(e, Do(n, pu(Ji(1), n))) }
          },
        },
        { kernelName: qn, gradFunc: (e) => ({ x: () => wl(e) }) },
        lm,
        um,
        cm,
        {
          kernelName: er,
          outputsToSave: [!0],
          gradFunc: (e, t, n) => {
            const [r] = t,
              { dim: s } = n,
              a = Do(e, r)
            return { logits: () => pu(a, Do(Pl(a, [s], !0), r)) }
          },
        },
        hm,
        pm,
        pm,
        dm,
        dm,
        fm,
        {
          kernelName: ir,
          inputsToSave: ['a', 'b'],
          gradFunc: (e, t) => {
            const [n, r] = t,
              s = Ji(2)
            return {
              a: () => Do(e, Do(s, pu(n, r))),
              b: () => Do(e, Do(s, pu(r, n))),
            }
          },
        },
        mm,
        { kernelName: Ir, gradFunc: (e) => ({ x: () => wl(e) }) },
        {
          kernelName: pr,
          inputsToSave: ['a', 'b'],
          gradFunc: (e, t) => {
            const [n, r] = t,
              s = xi(n.shape, r.shape)
            return {
              a: () => {
                let t = e
                const r = bi(n.shape, s)
                return r.length > 0 && (t = Pl(t, r)), Eo(t, n.shape)
              },
              b: () => {
                let t = e
                const n = bi(r.shape, s)
                return n.length > 0 && (t = Pl(t, n)), Eo(uu(t), r.shape)
              },
            }
          },
        },
        gm,
        ym,
        {
          kernelName: fr,
          outputsToSave: [!0],
          gradFunc: (e, t) => {
            const [n] = t
            return { x: () => Do(pu(Ji(1), zl(n)), e) }
          },
        },
        bm,
        {
          kernelName: br,
          gradFunc: (e, t, n) => {
            const r = n,
              { perm: s } = r,
              a = _l(s)
            return { x: () => th(e, a) }
          },
        },
        {
          kernelName: wr,
          gradFunc: (e, t, n) => {
            const r = n,
              { axis: s } = r
            return { value: () => Mc(e, s) }
          },
        },
        xm,
        { kernelName: kr, gradFunc: (e) => ({ x: () => wl(e) }) },
      ]
    for (const e of wm)
      Lr(e)
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
    ;(ys().prototype.abs = function () {
      return this.throwIfDisposed(), eo(this)
    }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.acos = function () {
        return this.throwIfDisposed(), to(this)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.acosh = function () {
        return this.throwIfDisposed(), no(this)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.add = function (e) {
        return this.throwIfDisposed(), ro(this, e)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.all = function (e, t) {
        return this.throwIfDisposed(), ao(this, e, t)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.any = function (e, t) {
        return this.throwIfDisposed(), io(this, e, t)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.argMax = function (e) {
        return this.throwIfDisposed(), oo(this, e)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.argMin = function (e) {
        return this.throwIfDisposed(), lo(this, e)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.asScalar = function () {
        return (
          this.throwIfDisposed(),
          O(1 === this.size, () => 'The array must have only 1 element.'),
          Eo(this, [])
        )
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.asType = function (e) {
        return this.throwIfDisposed(), Ka(this, e)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.as1D = function () {
        return this.throwIfDisposed(), Eo(this, [this.size])
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.as2D = function (e, t) {
        return this.throwIfDisposed(), Eo(this, [e, t])
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.as3D = function (e, t, n) {
        return this.throwIfDisposed(), Eo(this, [e, t, n])
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.as4D = function (e, t, n, r) {
        return this.throwIfDisposed(), Eo(this, [e, t, n, r])
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.as5D = function (e, t, n, r, s) {
        return this.throwIfDisposed(), Eo(this, [e, t, n, r, s])
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.asin = function () {
        return this.throwIfDisposed(), uo(this)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.asinh = function () {
        return this.throwIfDisposed(), co(this)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.atan = function () {
        return this.throwIfDisposed(), ho(this)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.atan2 = function (e) {
        return this.throwIfDisposed(), po(this, e)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.atanh = function () {
        return this.throwIfDisposed(), fo(this)
      }),
      (ys().prototype.avgPool = function (e, t, n, r) {
        return this.throwIfDisposed(), Ro(this, e, t, n, r)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.batchToSpaceND = function (e, t) {
        return this.throwIfDisposed(), Po(this, e, t)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.batchNorm = function (e, t, n, r, s) {
        return this.throwIfDisposed(), Bo(this, e, t, n, r, s)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.broadcastTo = function (e) {
        return this.throwIfDisposed(), jo(this, e)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.cast = function (e) {
        return this.throwIfDisposed(), Ka(this, e)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.ceil = function () {
        return this.throwIfDisposed(), qo(this)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.clipByValue = function (e, t) {
        return this.throwIfDisposed(), Xo(this, e, t)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.concat = function (e, t) {
        return (
          this.throwIfDisposed(),
          e instanceof gs && (e = [e]),
          _o([this, ...e], t)
        )
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.conv1d = function (e, t, n, r, s, a) {
        return this.throwIfDisposed(), tl(this, e, t, n, r, s, a)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.conv2dTranspose = function (e, t, n, r, s) {
        return this.throwIfDisposed(), rl(this, e, t, n, r, s)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.conv2d = function (e, t, n, r, s, a) {
        return this.throwIfDisposed(), el(this, e, t, n, r, s, a)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.cos = function () {
        return this.throwIfDisposed(), ol(this)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.cosh = function () {
        return this.throwIfDisposed(), ll(this)
      }),
      /**
       * @license
       * Copyright 2022 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the 'License');
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an 'AS IS' BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.cumprod = function (e, t, n) {
        return this.throwIfDisposed(), ul(this, e, t, n)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.cumsum = function (e, t, n) {
        return this.throwIfDisposed(), cl(this, e, t, n)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.depthToSpace = function (e, t) {
        return this.throwIfDisposed(), pl(this, e, t)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.depthwiseConv2d = function (e, t, n, r, s, a) {
        return this.throwIfDisposed(), dl(this, e, t, n, r, s, a)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.dilation2d = function (e, t, n, r, s) {
        return this.throwIfDisposed(), ml(this, e, t, n, r, s)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.divNoNan = function (e) {
        return this.throwIfDisposed(), vl(this, e)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.div = function (e) {
        return this.throwIfDisposed(), yl(this, e)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.dot = function (e) {
        return this.throwIfDisposed(), kl(this, e)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.elu = function () {
        return this.throwIfDisposed(), Nl(this)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.equal = function (e) {
        return this.throwIfDisposed(), bl(this, e)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.erf = function () {
        return this.throwIfDisposed(), Sl(this)
      }),
      /**
       * @license
       * Copyright 2021 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.euclideanNorm = function (e, t) {
        return this.throwIfDisposed(), Vl(this, e, t)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.exp = function () {
        return this.throwIfDisposed(), Ul(this)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.expandDims = function (e) {
        return this.throwIfDisposed(), Gl(this, e)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.expm1 = function () {
        return this.throwIfDisposed(), Hl(this)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.fft = function () {
        return this.throwIfDisposed(), Ec(this)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.flatten = function () {
        return this.throwIfDisposed(), Eo(this, [this.size])
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.floor = function () {
        return this.throwIfDisposed(), Kl(this)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.floorDiv = function (e) {
        return this.throwIfDisposed(), gl(this, e)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.gather = function (e, t) {
        return this.throwIfDisposed(), Xl(this, e, t)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.greaterEqual = function (e) {
        return this.throwIfDisposed(), Zl(this, e)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.greater = function (e) {
        return this.throwIfDisposed(), Yl(this, e)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.ifft = function () {
        return this.throwIfDisposed(), Rc(this)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.irfft = function () {
        return this.throwIfDisposed(), Ac(this)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.isFinite = function () {
        return this.throwIfDisposed(), Ql(this)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.isInf = function () {
        return this.throwIfDisposed(), eu(this)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.isNaN = function () {
        return this.throwIfDisposed(), tu(this)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.leakyRelu = function (e) {
        return this.throwIfDisposed(), nu(this, e)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.lessEqual = function (e) {
        return this.throwIfDisposed(), su(this, e)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.less = function (e) {
        return this.throwIfDisposed(), ru(this, e)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.localResponseNormalization = function (e, t, n, r) {
        return this.throwIfDisposed(), iu(this, e, t, n, r)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.logSigmoid = function () {
        return this.throwIfDisposed(), hu(this)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.logSoftmax = function (e) {
        return this.throwIfDisposed(), du(this, e)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.logSumExp = function (e, t) {
        return this.throwIfDisposed(), fu(this, e, t)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.log = function () {
        return this.throwIfDisposed(), ou(this)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.log1p = function () {
        return this.throwIfDisposed(), lu(this)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.logicalAnd = function (e) {
        return this.throwIfDisposed(), mu(this, e)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.logicalNot = function () {
        return this.throwIfDisposed(), gu(this)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.logicalOr = function (e) {
        return this.throwIfDisposed(), yu(this, e)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.logicalXor = function (e) {
        return this.throwIfDisposed(), bu(this, e)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.matMul = function (e, t, n) {
        return this.throwIfDisposed(), Fo(this, e, t, n)
      }),
      (ys().prototype.maxPool = function (e, t, n, r) {
        return this.throwIfDisposed(), ku(this, e, t, n, r)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.max = function (e, t) {
        return this.throwIfDisposed(), Dl(this, e, t)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.maximum = function (e) {
        return this.throwIfDisposed(), Su(this, e)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.mean = function (e, t) {
        return this.throwIfDisposed(), Tu(this, e, t)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.min = function (e, t) {
        return this.throwIfDisposed(), Ol(this, e, t)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.minimum = function (e) {
        return this.throwIfDisposed(), Ru(this, e)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.mirrorPad = function (e, t) {
        return this.throwIfDisposed(), Au(this, e, t)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.mod = function (e) {
        return this.throwIfDisposed(), _u(this, e)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.mul = function (e) {
        return this.throwIfDisposed(), Do(this, e)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.neg = function () {
        return this.throwIfDisposed(), uu(this)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.norm = function (e, t, n) {
        return this.throwIfDisposed(), Wl(this, e, t, n)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.notEqual = function (e) {
        return this.throwIfDisposed(), Mu(this, e)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.oneHot = function (e, t = 1, n = 0) {
        return this.throwIfDisposed(), Lu(this, e, t, n)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.onesLike = function () {
        return this.throwIfDisposed(), zu(this)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.pad = function (e, t) {
        return this.throwIfDisposed(), Bu(this, e, t)
      }),
      (ys().prototype.pool = function (e, t, n, r, s, a) {
        return this.throwIfDisposed(), ju(this, e, t, n, r, s, a)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.pow = function (e) {
        return this.throwIfDisposed(), Ml(this, e)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.prelu = function (e) {
        return this.throwIfDisposed(), qu(this, e)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.prod = function (e, t) {
        return this.throwIfDisposed(), Ku(this, e, t)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.reciprocal = function () {
        return this.throwIfDisposed(), lc(this)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.relu = function () {
        return this.throwIfDisposed(), uc(this)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.relu6 = function () {
        return this.throwIfDisposed(), cc(this)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.reshapeAs = function (e) {
        return this.throwIfDisposed(), Eo(this, e.shape)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.reshape = function (e) {
        return this.throwIfDisposed(), Eo(this, e)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.resizeBilinear = function (e, t, n) {
        return this.throwIfDisposed(), Gh(this, e, t, n)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.resizeNearestNeighbor = function (e, t, n) {
        return this.throwIfDisposed(), Hh(this, e, t, n)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.reverse = function (e) {
        return this.throwIfDisposed(), hc(this, e)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.rfft = function () {
        return this.throwIfDisposed(), Fc(this)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.round = function () {
        return this.throwIfDisposed(), gc(this)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.rsqrt = function () {
        return this.throwIfDisposed(), yc(this)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.selu = function () {
        return this.throwIfDisposed(), bc(this)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.separableConv2d = function (e, t, n, r, s, a) {
        return this.throwIfDisposed(), xc(this, e, t, n, r, s, a)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.sigmoid = function () {
        return this.throwIfDisposed(), Oo(this)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.sign = function () {
        return this.throwIfDisposed(), vc(this)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.sin = function () {
        return this.throwIfDisposed(), kc(this)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.sinh = function () {
        return this.throwIfDisposed(), Ic(this)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.slice = function (e, t) {
        return this.throwIfDisposed(), Mo(this, e, t)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.softmax = function (e) {
        return this.throwIfDisposed(), $c(this, e)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.softplus = function () {
        return this.throwIfDisposed(), cu(this)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.spaceToBatchND = function (e, t) {
        return this.throwIfDisposed(), Hu(this, e, t)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.split = function (e, t) {
        return this.throwIfDisposed(), _c(this, e, t)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.sqrt = function () {
        return this.throwIfDisposed(), Ll(this)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.square = function () {
        return this.throwIfDisposed(), zl(this)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.squaredDifference = function (e) {
        return this.throwIfDisposed(), Dc(this, e)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.squeeze = function (e) {
        return this.throwIfDisposed(), Oc(this, e)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.stack = function (e, t) {
        this.throwIfDisposed()
        const n = e instanceof gs ? [this, e] : [this, ...e]
        return Mc(n, t)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.step = function (e) {
        return this.throwIfDisposed(), Lc(this, e)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.stridedSlice = function (e, t, n, r, s, a, i, o) {
        return this.throwIfDisposed(), zc(this, e, t, n, r, s, a, i, o)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.sub = function (e) {
        return this.throwIfDisposed(), pu(this, e)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.sum = function (e, t) {
        return this.throwIfDisposed(), Pl(this, e, t)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.tan = function () {
        return this.throwIfDisposed(), Pc(this)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.tanh = function () {
        return this.throwIfDisposed(), Lo(this)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.tile = function (e) {
        return this.throwIfDisposed(), jl(this, e)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.toBool = function () {
        return this.throwIfDisposed(), Ka(this, 'bool')
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.toFloat = function () {
        return this.throwIfDisposed(), Ka(this, 'float32')
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.toInt = function () {
        return this.throwIfDisposed(), Ka(this, 'int32')
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.topk = function (e, t) {
        return this.throwIfDisposed(), Hc(this, e, t)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.transpose = function (e) {
        return this.throwIfDisposed(), th(this, e)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.unique = function (e) {
        return this.throwIfDisposed(), qc(this, e)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.unsortedSegmentSum = function (e, t) {
        return this.throwIfDisposed(), Kc(this, e, t)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.unstack = function (e) {
        return this.throwIfDisposed(), Xc(this, e)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.where = function (e, t) {
        return this.throwIfDisposed(), xl(e, this, t)
      }),
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
      (ys().prototype.zerosLike = function () {
        return this.throwIfDisposed(), wl(this)
        /**
         * @license
         * Copyright 2018 Google LLC
         *
         * Use of this source code is governed by an MIT-style
         * license that can be found in the LICENSE file or at
         * https://opensource.org/licenses/MIT.
         * =============================================================================
         */
      })
    class vm extends Error {
      constructor(e) {
        super(e), Object.setPrototypeOf(this, vm.prototype)
      }
    }
    class km extends Error {
      constructor(e) {
        super(e), Object.setPrototypeOf(this, km.prototype)
      }
    }
    class Im extends Error {
      constructor(e) {
        super(e), Object.setPrototypeOf(this, Im.prototype)
      }
    }
    class Nm extends Error {
      constructor(e) {
        super(e), Object.setPrototypeOf(this, Nm.prototype)
      }
    }
    class Sm extends Error {
      constructor(e) {
        super(e), Object.setPrototypeOf(this, Sm.prototype)
      }
    }
    Error
    /**
     * @license
     * Copyright 2022 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */
    class Tm {
      constructor(e) {
        ;(this.maxEntries = e || 100), (this.cache = new Map())
      }
      get(e) {
        let t
        return (
          this.cache.has(e) &&
            ((t = this.cache.get(e)),
            this.cache.delete(e),
            this.cache.set(e, t)),
          t
        )
      }
      put(e, t) {
        if (this.cache.has(e)) this.cache.delete(e)
        else if (this.cache.size >= this.maxEntries) {
          const e = this.cache.keys().next().value
          this.cache.delete(e)
        }
        this.cache.set(e, t)
      }
      getMaxEntries() {
        return this.maxEntries
      }
      setMaxEntries(e) {
        if (e < 0)
          throw new Error(
            `The maxEntries of LRU caches must be at least 0, but got ${e}.`,
          )
        if (this.maxEntries > e)
          for (let t = 0; t < this.maxEntries - e; t++) {
            const e = this.cache.keys().next().value
            this.cache.delete(e)
          }
        this.maxEntries = e
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ function Cm(e, t) {
      if (Array.isArray(e)) {
        let n = []
        for (let r = 0; r < t; r++) n = n.concat(e)
        return n
      }
      {
        const n = new Array(t)
        return n.fill(e), n
      }
    }
    function $m(e, t) {
      if (!e) throw new Sm(t)
    }
    function Em(e, t) {
      let n = 0
      for (const r of e) r === t && n++
      return n
    }
    function Rm(e) {
      return 1 === e.length ? e[0] : e
    }
    function Am(e) {
      return Array.isArray(e) ? e : [e]
    }
    function _m(e) {
      const t = e
        .replace(/(.)([A-Z][a-z0-9]+)/g, '$1_$2')
        .replace(/([a-z])([A-Z])/g, '$1_$2')
        .toLowerCase()
      return '_' !== t[0] ? t : 'private' + t
    }
    function Fm(e) {
      return e.length <= 1 || -1 === e.indexOf('_')
        ? e
        : e.replace(/[_]+(\w|$)/g, (e, t) => t.toUpperCase())
    }
    let Dm = {}
    function Om(e) {
      if (null == e) return null
      const t = {}
      return (t.className = e.getClassName()), (t.config = e.getConfig()), t
    }
    function Mm(e) {
      if (null != e && 'object' == typeof e)
        if (Array.isArray(e)) e.forEach((e) => Mm(e))
        else {
          const t = Object.keys(e)
          for (const n of t) {
            const t = e[n]
            null != t &&
              'object' == typeof t &&
              (Array.isArray(t) ||
              'ndarray' !== t.type ||
              'number' != typeof t.value
                ? Mm(t)
                : (e[n] = t.value))
          }
        }
    }
    function Lm(e, t = {}, n = {}, r = 'object', s = !1) {
      if ('string' == typeof e) {
        const s = e
        let a
        if (s in n) a = n[s]
        else if (s in Dm) a = Dm[s]
        else if (((a = t[s]), null == a))
          throw new Im(
            `Unknown ${r}: ${e}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`,
          )
        return a
      }
      {
        const a = e
        if (null == a.className || null == a.config)
          throw new Im(
            `${r}: Improper config format: ${JSON.stringify(a)}.\n'className' and 'config' must set.`,
          )
        const i = a.className
        let o, l
        if (
          (i in n
            ? ([o, l] = n[i])
            : i in Dm
              ? ([o, l] = Dm.className)
              : i in t && ([o, l] = t[i]),
          null == o)
        )
          throw new Im(
            `Unknown ${r}: ${i}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`,
          )
        if (null != l) {
          const e = {}
          for (const t of Object.keys(Dm)) e[t] = Dm[t]
          for (const t of Object.keys(n)) e[t] = n[t]
          a.config.customObjects = e
          const t = Object.assign({}, Dm)
          for (const e of Object.keys(n)) Dm[e] = n[e]
          Mm(a.config)
          const r = l(o, a.config, n, s)
          return (Dm = Object.assign({}, t)), r
        }
        {
          const e = Object.assign({}, Dm)
          for (const e of Object.keys(n)) Dm[e] = n[e]
          const t = new o(a.config)
          return (Dm = Object.assign({}, e)), t
        }
      }
    }
    function zm(e, t) {
      return (
        -1 *
        (function (e, t) {
          return e < t ? -1 : e > t ? 1 : 0
        })(e, t)
      )
    }
    function Pm(e) {
      if (null == e) return e
      const t = []
      for (const n of e) -1 === t.indexOf(n) && t.push(n)
      return t
    }
    function Bm(e) {
      if (null == e) throw new Im(`Invalid value in obj: ${JSON.stringify(e)}`)
      for (const t in e) if (e.hasOwnProperty(t)) return !1
      return !0
    }
    function Wm(e, t, n) {
      if (null != n && e.indexOf(n) < 0)
        throw new Im(
          `${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`,
        )
    }
    function Vm(e, t, n = 0, r = 1 / 0) {
      return (
        $m(n >= 0),
        $m(r >= n),
        Array.isArray(e) &&
          e.length >= n &&
          e.length <= r &&
          e.every((e) => typeof e === t)
      )
    }
    function Um(e, t) {
      Array.isArray(e)
        ? (O(e.length > 0, () => `${t} is unexpectedly an empty array.`),
          e.forEach((e, n) => Um(e, `element ${n + 1} of ${t}`)))
        : O(
            Number.isInteger(e) && e > 0,
            () => `Expected ${t} to be a positive integer, but got ${Gm(e)}.`,
          )
    }
    function Gm(e) {
      return null === e
        ? 'null'
        : Array.isArray(e)
          ? '[' + e.map((e) => Gm(e)).join(',') + ']'
          : 'string' == typeof e
            ? `"${e}"`
            : `${e}`
    }
    function Hm(e) {
      return 'relu' === e
        ? 'relu'
        : 'linear' === e
          ? 'linear'
          : 'elu' === e
            ? 'elu'
            : null
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ let jm = 0
    function qm() {
      return jm++
    }
    const Km = {}
    function Xm(e = '') {
      return e in Km || (Km[e] = 0), (Km[e] += 1), e + Km[e].toString()
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ const Ym = ['channelsFirst', 'channelsLast'],
      Zm = ['nearest', 'bilinear'],
      Jm = ['valid', 'same', 'causal'],
      Qm = ['max', 'avg'],
      eg = ['sum', 'mul', 'concat', 'ave'],
      tg = new Map()
    function ng(e) {
      Wm(Ym, 'DataFormat', e)
    }
    function rg(e) {
      Wm(Jm, 'PaddingMode', e)
    }
    function sg(e) {
      Wm(Qm, 'PoolMode', e)
    }
    const ag = []
    function ig(e, t) {
      ag.push(e)
      try {
        const e = t()
        return ag.pop(), e
      } catch (e) {
        throw (ag.pop(), e)
      }
    }
    function og(e) {
      if (!cg(e)) throw new Error("Not a valid tensor name: '" + e + "'")
      return (0 === ag.length ? '' : ag.join('/') + '/') + e
    }
    function lg(e) {
      if (!cg(e)) throw new Error("Not a valid tensor name: '" + e + "'")
      tg.has(e) || tg.set(e, 0)
      const t = tg.get(e)
      if ((tg.set(e, tg.get(e) + 1), t > 0)) {
        const n = `${e}_${t}`
        return tg.set(n, 1), n
      }
      return e
    }
    const ug = new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/)
    function cg(e) {
      return !!e.match(ug)
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ function hg(e) {
      return e === parseInt(e.toString(), 10)
    }
    function pg(e, t, n) {
      null == t && (t = 0), null == n && (n = e.length)
      let r = 1
      for (let s = t; s < n; ++s) r *= e[s]
      return r
    }
    function dg(e) {
      if (0 === e.length) return Number.NaN
      let t = Number.POSITIVE_INFINITY
      for (let n = 0; n < e.length; n++) {
        const r = e[n]
        r < t && (t = r)
      }
      return t
    }
    function fg(e) {
      if (0 === e.length) return Number.NaN
      let t = Number.NEGATIVE_INFINITY
      for (let n = 0; n < e.length; n++) {
        const r = e[n]
        r > t && (t = r)
      }
      return t
    }
    function mg(e, t) {
      if (t < e) throw new Im(`end (${t}) < begin (${e}) is forbidden.`)
      const n = []
      for (let r = e; r < t; ++r) n.push(r)
      return n
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ let gg
    function yg() {
      return null == gg && (gg = Os.backend.epsilon()), gg
    }
    function bg(e, t) {
      return Ka(e, t)
    }
    function xg(e, t = -1) {
      const n = e.shape.slice()
      return t < 0 && (t = n.length + t + 1), n.splice(t, 0, 1), Eo(e, n)
    }
    function wg(e, t, n) {
      return qi(() => {
        switch (e.rank) {
          case 1:
            return Nc(e, t, n)
          case 2:
            return Sc(e, [t, 0], [n, e.shape[1]])
          case 3:
            return Tc(e, [t, 0, 0], [n, e.shape[1], e.shape[2]])
          case 4:
            return Cc(e, [t, 0, 0, 0], [n, e.shape[1], e.shape[2], e.shape[3]])
          case 5:
            return Mo(
              e,
              [t, 0, 0, 0, 0],
              [n, e.shape[1], e.shape[2], e.shape[3], e.shape[4]],
            )
          case 6:
            return Mo(
              e,
              [t, 0, 0, 0, 0, 0],
              [n, e.shape[1], e.shape[2], e.shape[3], e.shape[4], e.shape[5]],
            )
          default:
            throw new Im(
              `sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`,
            )
        }
      })
    }
    function vg(e, t, n) {
      return qi(() => {
        switch (e.rank) {
          case 1:
            return Nc(e, t, n)
          case 2:
            return Sc(e, [0, t], [e.shape[0], n])
          case 3:
            return Tc(e, [0, 0, t], [e.shape[0], e.shape[1], n])
          case 4:
            return Cc(e, [0, 0, 0, t], [e.shape[0], e.shape[1], e.shape[2], n])
          default:
            throw new Im(
              `sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`,
            )
        }
      })
    }
    function kg(e, t, n, r) {
      return qi(() => {
        switch (e.rank) {
          case 1:
            return Nc(e, t, n)
          case 2:
            switch (r) {
              case 1:
                return wg(e, t, n)
              case 2:
                return vg(e, t, n)
              default:
                throw new Im(
                  `The axis is not within the rank of the tensor ${r}`,
                )
            }
          case 3:
            switch (r) {
              case 1:
                return wg(e, t, n)
              case 2:
                return Tc(e, [0, t, 0], [e.shape[0], n, e.shape[2]])
              case 3:
                return vg(e, t, n)
              default:
                throw new Im(
                  `The axis is not within the rank of the tensor ${r}`,
                )
            }
          case 4:
            switch (r) {
              case 1:
                return wg(e, t, n)
              case 2:
                return Cc(
                  e,
                  [0, t, 0, 0],
                  [e.shape[0], n, e.shape[2], e.shape[3]],
                )
              case 3:
                return Cc(
                  e,
                  [0, 0, t, 0],
                  [e.shape[0], e.shape[1], n, e.shape[3]],
                )
              case 4:
                return vg(e, t, n)
              default:
                throw new Im(
                  `The axis is not within the rank of the tensor ${r}`,
                )
            }
          default:
            throw new Im(
              `sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`,
            )
        }
      })
    }
    function Ig(e, t = -1) {
      let n
      return (
        t < 0 && ((n = e[0].rank), (t = 0 !== n ? n : 0)),
        t === e[0].rank && (t = -1),
        _o(e, t)
      )
    }
    function Ng(e, t) {
      switch (e.rank) {
        case 1:
          return Yo([e, t])
        case 2:
          return Zo([e, t], 0)
        case 3:
          return Jo([e, t], 0)
        case 4:
          return Qo([e, t], 0)
        default:
          throw new Im(
            `concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`,
          )
      }
    }
    function Sg(e, t) {
      if ((Array.isArray(t) || (t = [t]), e.rank !== t.length))
        throw new Im(
          `The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`,
        )
      return jl(e, t)
    }
    function Tg(e, t = 0, n = 1, r, s) {
      return rc(e, t, n, r, s)
    }
    function Cg(e, t, n, r) {
      if (e.rank < 2 || t.rank < 2)
        throw new Nm(
          `dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`,
        )
      if (t.rank >= 3 && e.shape.slice(-1)[0] !== t.shape.slice(-2)[0])
        throw new Nm(
          `If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${t.shape}`,
        )
      if (2 === e.rank && 2 === t.rank)
        return kh({
          a: e,
          b: t,
          transposeA: !1,
          transposeB: !1,
          bias: r ? Rg(e.rank, r, 'channelsLast') : null,
          activation: n,
        })
      {
        const s = e.shape.slice(),
          a = s.pop()
        e = Eo(e, [-1, a])
        const i = t.shape.slice(),
          o = i.pop(),
          l = i.pop(),
          u = [...i, o],
          c = Array.from({ length: t.rank }, (e, n) =>
            0 === n ? t.rank - 2 : n <= t.rank - 2 ? n - 1 : n,
          )
        t = Eo(th(t, c), [l, -1])
        const h = [...s, ...u]
        return Eo(
          kh({
            a: e,
            b: t,
            transposeA: !1,
            transposeB: !1,
            bias: r ? Rg(e.rank, r, 'channelsLast') : null,
            activation: n,
          }),
          h,
        )
      }
    }
    function $g(e, t, n) {
      return qi(
        () => (
          (t = Array.isArray(t) ? Bc(t, 'int32') : Ka(t, 'int32')), Xl(e, t, n)
        ),
      )
    }
    function Eg(e) {
      return Do(e, e)
    }
    function Rg(e, t, n) {
      const r = t.shape
      if (1 !== t.rank && t.rank !== e)
        throw new Im(
          `Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`,
        )
      if (5 === e) {
        if ('channelsFirst' === n)
          return 1 === r.length
            ? Eo(t, [1, r[0], 1, 1, 1])
            : Eo(t, [1, r[3], r[0], r[1], r[2]])
        if ('channelsLast' === n)
          return 1 === r.length
            ? Eo(t, [1, 1, 1, 1, r[0]])
            : Eo(t, [1].concat(r))
      } else if (4 === e) {
        if ('channelsFirst' === n)
          return 1 === r.length
            ? Eo(t, [1, r[0], 1, 1])
            : Eo(t, [1, r[2], r[0], r[1]])
        if ('channelsLast' === n)
          return 1 === r.length ? Eo(t, [1, 1, 1, r[0]]) : Eo(t, [1].concat(r))
      } else if (3 === e) {
        if ('channelsFirst' === n)
          return 1 === r.length ? Eo(t, [1, r[0], 1]) : Eo(t, [1, r[1], r[0]])
        if ('channelsLast' === n)
          return 1 === r.length ? Eo(t, [1, 1, r[0]]) : Eo(t, [1].concat(r))
      } else if (e < 3) return t
      throw new Im(`Unsupported input rank by biasAdd: ${t.rank}`)
    }
    function Ag(e, t, n) {
      return qi(
        () => (
          null == n && (n = 'channelsLast'), ng(n), ro(e, Rg(e.rank, t, n))
        ),
      )
    }
    function _g(e, t, n, r) {
      return qi(() => uh(e, t, n, r))
    }
    function Fg(e, t, n = !1) {
      return n ? e() : t()
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ const Dg = ['fanIn', 'fanOut', 'fanAvg'],
      Og = ['normal', 'uniform', 'truncatedNormal']
    class Mg extends Vi {
      fromConfigUsesCustomObjects() {
        return !1
      }
      getConfig() {
        return {}
      }
    }
    class Lg extends Mg {
      apply(e, t) {
        return Cu(e, t)
      }
    }
    ;(Lg.className = 'Zeros'), Gi(Lg)
    class zg extends Mg {
      apply(e, t) {
        return $u(e, t)
      }
    }
    ;(zg.className = 'Ones'), Gi(zg)
    class Pg extends Mg {
      constructor(e) {
        if ((super(), 'object' != typeof e))
          throw new Im(`Expected argument of type ConstantConfig but got ${e}`)
        if (void 0 === e.value)
          throw new Im(`config must have value set but got ${e}`)
        this.value = e.value
      }
      apply(e, t) {
        return qi(() => Do(Ji(this.value), $u(e, t)))
      }
      getConfig() {
        return { value: this.value }
      }
    }
    ;(Pg.className = 'Constant'), Gi(Pg)
    class Bg extends Mg {
      constructor(e) {
        super(),
          (this.DEFAULT_MINVAL = -0.05),
          (this.DEFAULT_MAXVAL = 0.05),
          (this.minval = e.minval || this.DEFAULT_MINVAL),
          (this.maxval = e.maxval || this.DEFAULT_MAXVAL),
          (this.seed = e.seed)
      }
      apply(e, t) {
        return ac(e, this.minval, this.maxval, t)
      }
      getConfig() {
        return { minval: this.minval, maxval: this.maxval, seed: this.seed }
      }
    }
    ;(Bg.className = 'RandomUniform'), Gi(Bg)
    class Wg extends Mg {
      constructor(e) {
        super(),
          (this.DEFAULT_MEAN = 0),
          (this.DEFAULT_STDDEV = 0.05),
          (this.mean = e.mean || this.DEFAULT_MEAN),
          (this.stddev = e.stddev || this.DEFAULT_STDDEV),
          (this.seed = e.seed)
      }
      apply(e, t) {
        if ('float32' !== (t = t || 'float32') && 'int32' !== t)
          throw new Nm(`randomNormal does not support dType ${t}.`)
        return Tg(e, this.mean, this.stddev, t, this.seed)
      }
      getConfig() {
        return { mean: this.mean, stddev: this.stddev, seed: this.seed }
      }
    }
    ;(Wg.className = 'RandomNormal'), Gi(Wg)
    class Vg extends Mg {
      constructor(e) {
        super(),
          (this.DEFAULT_MEAN = 0),
          (this.DEFAULT_STDDEV = 0.05),
          (this.mean = e.mean || this.DEFAULT_MEAN),
          (this.stddev = e.stddev || this.DEFAULT_STDDEV),
          (this.seed = e.seed)
      }
      apply(e, t) {
        if ('float32' !== (t = t || 'float32') && 'int32' !== t)
          throw new Nm(`truncatedNormal does not support dType ${t}.`)
        return jc(e, this.mean, this.stddev, t, this.seed)
      }
      getConfig() {
        return { mean: this.mean, stddev: this.stddev, seed: this.seed }
      }
    }
    ;(Vg.className = 'TruncatedNormal'), Gi(Vg)
    class Ug extends Mg {
      constructor(e) {
        super(), (this.gain = null != e.gain ? e.gain : 1)
      }
      apply(e, t) {
        return qi(() => {
          if (2 !== e.length || e[0] !== e[1])
            throw new Im(
              'Identity matrix initializer can only be used for 2D square matrices.',
            )
          return Do(this.gain, ql(e[0]))
        })
      }
      getConfig() {
        return { gain: this.gain }
      }
    }
    ;(Ug.className = 'Identity'), Gi(Ug)
    class Gg extends Mg {
      constructor(e) {
        if ((super(), e.scale < 0))
          throw new Im(
            `scale must be a positive float. Got: ${e.scale}`,
            /**
             * @license
             * Copyright 2018 Google LLC
             *
             * Use of this source code is governed by an MIT-style
             * license that can be found in the LICENSE file or at
             * https://opensource.org/licenses/MIT.
             * =============================================================================
             */
          )
        var t
        ;(this.scale = null == e.scale ? 1 : e.scale),
          (this.mode = null == e.mode ? 'fanIn' : e.mode),
          (t = this.mode),
          Wm(Dg, 'FanMode', t),
          (this.distribution =
            null == e.distribution ? 'normal' : e.distribution),
          (function (e) {
            Wm(Og, 'Distribution', e)
          })(this.distribution),
          (this.seed = e.seed)
      }
      apply(e, t) {
        const n = (function (e, t = 'channelsLast') {
            let n, r
            if ((ng(t), 2 === e.length)) (n = e[0]), (r = e[1])
            else if (-1 !== [3, 4, 5].indexOf(e.length)) {
              if ('channelsFirst' === t) {
                const t = pg(e, 2)
                ;(n = e[1] * t), (r = e[0] * t)
              } else if ('channelsLast' === t) {
                const t = pg(e, 0, e.length - 2)
                ;(n = e[e.length - 2] * t), (r = e[e.length - 1] * t)
              }
            } else {
              const t = pg(e)
              ;(n = Math.sqrt(t)), (r = Math.sqrt(t))
            }
            return [n, r]
          })(e),
          r = n[0],
          s = n[1]
        let a = this.scale
        if (
          ('fanIn' === this.mode
            ? (a /= Math.max(1, r))
            : 'fanOut' === this.mode
              ? (a /= Math.max(1, s))
              : (a /= Math.max(1, (r + s) / 2)),
          'normal' === this.distribution)
        ) {
          const n = Math.sqrt(a)
          if ('float32' !== (t = t || 'float32') && 'int32' !== t)
            throw new Nm(`${this.getClassName()} does not support dType ${t}.`)
          return jc(e, 0, n, t, this.seed)
        }
        {
          const n = Math.sqrt(3 * a)
          return ac(e, -n, n, t)
        }
      }
      getConfig() {
        return {
          scale: this.scale,
          mode: this.mode,
          distribution: this.distribution,
          seed: this.seed,
        }
      }
    }
    ;(Gg.className = 'VarianceScaling'), Gi(Gg)
    class Hg extends Gg {
      constructor(e) {
        super({
          scale: 1,
          mode: 'fanAvg',
          distribution: 'uniform',
          seed: null == e ? null : e.seed,
        })
      }
      getClassName() {
        return Gg.className
      }
    }
    ;(Hg.className = 'GlorotUniform'), Gi(Hg)
    class jg extends Gg {
      constructor(e) {
        super({
          scale: 1,
          mode: 'fanAvg',
          distribution: 'normal',
          seed: null == e ? null : e.seed,
        })
      }
      getClassName() {
        return Gg.className
      }
    }
    ;(jg.className = 'GlorotNormal'), Gi(jg)
    class qg extends Gg {
      constructor(e) {
        super({
          scale: 2,
          mode: 'fanIn',
          distribution: 'normal',
          seed: null == e ? null : e.seed,
        })
      }
      getClassName() {
        return Gg.className
      }
    }
    ;(qg.className = 'HeNormal'), Gi(qg)
    class Kg extends Gg {
      constructor(e) {
        super({
          scale: 2,
          mode: 'fanIn',
          distribution: 'uniform',
          seed: null == e ? null : e.seed,
        })
      }
      getClassName() {
        return Gg.className
      }
    }
    ;(Kg.className = 'HeUniform'), Gi(Kg)
    class Xg extends Gg {
      constructor(e) {
        super({
          scale: 1,
          mode: 'fanIn',
          distribution: 'normal',
          seed: null == e ? null : e.seed,
        })
      }
      getClassName() {
        return Gg.className
      }
    }
    ;(Xg.className = 'LeCunNormal'), Gi(Xg)
    class Yg extends Gg {
      constructor(e) {
        super({
          scale: 1,
          mode: 'fanIn',
          distribution: 'uniform',
          seed: null == e ? null : e.seed,
        })
      }
      getClassName() {
        return Gg.className
      }
    }
    ;(Yg.className = 'LeCunNormal'), Gi(Yg)
    class Zg extends Mg {
      constructor(e) {
        if (
          (super(),
          (this.DEFAULT_GAIN = 1),
          (this.gain = null == e.gain ? this.DEFAULT_GAIN : e.gain),
          (this.seed = e.seed),
          null != this.seed)
        )
          throw new Nm(
            'Random seed is not implemented for Orthogonal Initializer yet.',
          )
      }
      apply(e, t) {
        return qi(() => {
          if (e.length < 2) throw new Nm('Shape must be at least 2D.')
          e[0] * e[1] > 2e3 &&
            console.warn(
              `Orthogonal initializer is being called on a matrix with more than 2000 (${e[0] * e[1]}) elements: Slowness may result.`,
            )
          const t = Tg(e[0] > e[1] ? [e[1], e[0]] : e, 0, 1, 'float32')
          let n = bp.gramSchmidt(t)
          return e[0] > e[1] && (n = th(n)), Do(this.gain, n)
        })
      }
      getConfig() {
        return { gain: this.gain, seed: this.seed }
      }
    }
    ;(Zg.className = 'Orthogonal'), Gi(Zg)
    const Jg = {
      constant: 'Constant',
      glorotNormal: 'GlorotNormal',
      glorotUniform: 'GlorotUniform',
      heNormal: 'HeNormal',
      heUniform: 'HeUniform',
      identity: 'Identity',
      leCunNormal: 'LeCunNormal',
      leCunUniform: 'LeCunUniform',
      ones: 'Ones',
      orthogonal: 'Orthogonal',
      randomNormal: 'RandomNormal',
      randomUniform: 'RandomUniform',
      truncatedNormal: 'TruncatedNormal',
      varianceScaling: 'VarianceScaling',
      zeros: 'Zeros',
    }
    function Qg(e, t = {}) {
      return Lm(e, Ui.getMap().classNameMap, t, 'initializer')
    }
    function ey(e) {
      return Om(e)
    }
    function ty(e) {
      if ('string' == typeof e) {
        const t = e in Jg ? Jg[e] : e
        if ('GlorotNormal' === t) return new jg()
        if ('GlorotUniform' === t) return new Hg()
        if ('HeNormal' === t) return new qg()
        if ('HeUniform' === t) return new Kg()
        if ('LeCunNormal' === t) return new Xg()
        if ('LeCunUniform' === t) return new Yg()
        {
          const e = {}
          return (e.className = t), (e.config = {}), Qg(e)
        }
      }
      return e instanceof Mg ? e : Qg(e)
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ function ny(e) {
      return Array.isArray(e) && Array.isArray(e[0])
    }
    function ry(e) {
      return 0 === e.length ? [] : Array.isArray(e[0]) ? e : [e]
    }
    function sy(e) {
      let t
      if (Array.isArray(e)) {
        if (1 !== e.length)
          throw new Im(`Expected Tensor length to be 1; got ${e.length}`)
        t = e[0]
      } else t = e
      return t
    }
    function ay(e) {
      if (Array.isArray(e) && Array.isArray(e[0])) {
        if (1 === e.length) return e[0]
        throw new Im(`Expected exactly 1 Shape; got ${e.length}`)
      }
      return e
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ function iy(e) {
      let t = 0
      for (const n of e)
        0 === n.shape.length ? (t += 1) : (t += n.shape.reduce((e, t) => e * t))
      return t
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ const oy = 'Variable'
    class ly {
      constructor(e, t = 'float32', n = oy, r = !0, s = null) {
        ;(this.dtype = null == t ? 'float32' : t),
          (this.shape = e.shape),
          (this.id = qm()),
          (n = null == n ? oy : n),
          (this.originalName = og(n)),
          (this.name = lg(this.originalName)),
          (this.trainable_ = r),
          (this.constraint = s),
          (this.val = Zc(e, this.trainable_, this.name, this.dtype))
      }
      read() {
        return this.assertNotDisposed(), this.val
      }
      write(e) {
        return (
          this.assertNotDisposed(),
          (function (e, t) {
            if (e.shape.toString() !== t.shape.toString())
              throw new Error(
                'Shape mismatch: ' +
                  JSON.stringify(e.shape) +
                  ' vs. ' +
                  JSON.stringify(t.shape),
              )
          })(this.val, e),
          this.val.id !== e.id &&
            (this.val.assign(e),
            null != this.constraint &&
              this.val.assign(this.constraint.apply(this.val))),
          this
        )
      }
      dispose() {
        this.assertNotDisposed(), this.val.dispose()
      }
      assertNotDisposed() {
        if (this.val.isDisposed)
          throw new Error(`LayersVariable ${this.name} is already disposed.`)
      }
      get trainable() {
        return this.trainable_
      }
      set trainable(e) {
        ;(this.trainable_ = e), (this.val.trainable = e)
      }
    }
    function uy(e) {
      return e.map((e) => e.read())
    }
    function cy(e) {
      e.forEach((e) => {
        e[0].write(e[1])
      })
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ class hy {
      constructor(e) {
        ;(this.dtype = e.dtype),
          (this.shape = e.shape),
          null != e.shape ? (this.ndim = e.shape.length) : (this.ndim = e.ndim),
          (this.maxNDim = e.maxNDim),
          (this.minNDim = e.minNDim),
          (this.axes = e.axes || {})
      }
    }
    class py {
      constructor(e, t, n, r, s, a, i) {
        ;(this.dtype = e),
          (this.shape = t),
          (this.sourceLayer = n),
          (this.inputs = r),
          (this.callArgs = s),
          (this.outputTensorIndex = i),
          (this.id = qm()),
          null != a &&
            ((this.originalName = og(a)), (this.name = lg(this.originalName))),
          (this.rank = t.length)
      }
    }
    let dy = 0
    class fy {
      constructor(e, t) {
        ;(this.callArgs = t),
          (this.id = dy++),
          (this.outboundLayer = e.outboundLayer),
          (this.inboundLayers = e.inboundLayers),
          (this.nodeIndices = e.nodeIndices),
          (this.tensorIndices = e.tensorIndices),
          (this.inputTensors = e.inputTensors),
          (this.outputTensors = e.outputTensors),
          (this.inputMasks = e.inputMasks),
          (this.outputMasks = e.outputMasks),
          (this.inputShapes = e.inputShapes),
          (this.outputShapes = e.outputShapes)
        for (const t of e.inboundLayers) null != t && t.outboundNodes.push(this)
        e.outboundLayer.inboundNodes.push(this)
      }
      getConfig() {
        const e = []
        for (const t of this.inboundLayers)
          null != t ? e.push(t.name) : e.push(null)
        return {
          outboundLayer: this.outboundLayer ? this.outboundLayer.name : null,
          inboundLayers: e,
          nodeIndices: this.nodeIndices,
          tensorIndices: this.tensorIndices,
        }
      }
    }
    let my = 0
    class gy extends Vi {
      constructor(e = {}) {
        super(),
          (this._callHook = null),
          (this._addedWeightNames = []),
          (this._stateful = !1),
          (this.id = my++),
          (this.activityRegularizer = null),
          (this.inputSpec = null),
          (this.supportsMasking = !1),
          (this._trainableWeights = []),
          (this._nonTrainableWeights = []),
          (this._losses = []),
          (this._updates = []),
          (this._built = !1),
          (this.inboundNodes = []),
          (this.outboundNodes = [])
        let t = e.name
        if (!t) {
          const e = this.getClassName()
          t = _m(e) + '_' + Xm(e)
        }
        if (
          ((this.name = t),
          (this.trainable_ = null == e.trainable || e.trainable),
          null != e.inputShape || null != e.batchInputShape)
        ) {
          let t
          if (null != e.batchInputShape) t = e.batchInputShape
          else if (null != e.inputShape) {
            let n = null
            null != e.batchSize && (n = e.batchSize),
              (t = [n].concat(e.inputShape))
          }
          this.batchInputShape = t
          let n = e.dtype
          null == n && (n = e.inputDType),
            null == n && (n = 'float32'),
            (this.dtype = n)
        }
        null != e.weights
          ? (this.initialWeights = e.weights)
          : (this.initialWeights = null),
          (this._refCount = null),
          (this.fastWeightInitDuringBuild = !1)
      }
      static nodeKey(e, t) {
        return e.name + '_ib-' + t.toString()
      }
      getNodeAtIndex(e, t) {
        if (0 === this.inboundNodes.length)
          throw new km(
            `The layer has never been called and thus has no defined ${t}.`,
          )
        if (this.inboundNodes.length <= e)
          throw new Im(
            `Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`,
          )
        return this.inboundNodes[e]
      }
      getInputAt(e) {
        return Rm(this.getNodeAtIndex(e, 'input').inputTensors)
      }
      getOutputAt(e) {
        return Rm(this.getNodeAtIndex(e, 'output').outputTensors)
      }
      get input() {
        if (this.inboundNodes.length > 1)
          throw new vm(
            `Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`,
          )
        if (0 === this.inboundNodes.length)
          throw new vm(
            `Layer ${this.name} is not connected, no input to return.`,
          )
        return Rm(this.getNodeAtIndex(0, 'input').inputTensors)
      }
      get output() {
        if (0 === this.inboundNodes.length)
          throw new vm(`Layer ${this.name} has no inbound nodes.`)
        if (this.inboundNodes.length > 1)
          throw new vm(
            `Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`,
          )
        return Rm(this.getNodeAtIndex(0, 'output').outputTensors)
      }
      get losses() {
        return this._losses
      }
      calculateLosses() {
        return this.losses.map((e) => e())
      }
      get updates() {
        return this._updates
      }
      get built() {
        return this._built
      }
      set built(e) {
        this._built = e
      }
      get trainable() {
        return this.trainable_
      }
      set trainable(e) {
        this._trainableWeights.forEach((t) => (t.trainable = e)),
          (this.trainable_ = e)
      }
      get trainableWeights() {
        return this.trainable_
          ? this._trainableWeights.filter((e) => e.trainable)
          : []
      }
      set trainableWeights(e) {
        this._trainableWeights = e
      }
      get nonTrainableWeights() {
        return this.trainable
          ? this._trainableWeights
              .filter((e) => !e.trainable)
              .concat(this._nonTrainableWeights)
          : this._trainableWeights.concat(this._nonTrainableWeights)
      }
      set nonTrainableWeights(e) {
        this._nonTrainableWeights = e
      }
      get weights() {
        return this.trainableWeights.concat(this.nonTrainableWeights)
      }
      get stateful() {
        return this._stateful
      }
      resetStates() {
        if (!this.stateful)
          throw new Error(
            'Cannot call the resetStates() method of a non-stateful Layer object.',
          )
      }
      assertInputCompatibility(e) {
        if (
          ((e = Am(e)), null == this.inputSpec || 0 === this.inputSpec.length)
        )
          return
        const t = Am(this.inputSpec)
        if (e.length !== t.length)
          throw new Im(
            `Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: ${e}`,
          )
        for (let n = 0; n < e.length; n++) {
          const r = e[n],
            s = t[n]
          if (null == s) continue
          const a = r.rank
          if (null != s.ndim && a !== s.ndim)
            throw new Im(
              `Input ${n} is incompatible with layer ${this.name}: expected ndim=${s.ndim}, found ndim=${a}`,
            )
          if (null != s.maxNDim && a > s.maxNDim)
            throw new Im(
              `Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${s.maxNDim}, found ndim=${a}`,
            )
          if (null != s.minNDim && a < s.minNDim)
            throw new Im(
              `Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${s.minNDim}, found ndim=${a}.`,
            )
          if (null != s.dtype && r.dtype !== s.dtype)
            throw new Im(
              `Input ${n} is incompatible with layer ${this.name} : expected dtype=${s.dtype}, found dtype=${r.dtype}.`,
            )
          if (s.axes) {
            const e = r.shape
            for (const t in s.axes) {
              const r = Number(t),
                a = s.axes[t],
                i = r >= 0 ? e[r] : e[e.length + r]
              if (null != a && -1 === [a, null].indexOf(i))
                throw new Im(
                  `Input ${n} is incompatible with layer ${this.name}: expected axis ${r} of input shape to have value ${a} but got shape ${e}.`,
                )
            }
          }
          if (null != s.shape)
            for (let e = 0; e < s.shape.length; ++e) {
              const t = s.shape[e],
                a = r.shape[e]
              if (null != t && null != a && t !== a)
                throw new Im(
                  `Input ${n} is incompatible with layer ${this.name}: expected shape=${s.shape}, found shape=${r.shape}.`,
                )
            }
        }
      }
      call(e, t) {
        return e
      }
      invokeCallHook(e, t) {
        null != this._callHook && this._callHook(e, t)
      }
      setCallHook(e) {
        this._callHook = e
      }
      clearCallHook() {
        this._callHook = null
      }
      apply(e, t) {
        ;(t = t || {}), this.assertNotDisposed()
        const n = Am(e)
        let r = !0
        for (const e of n)
          if (!(e instanceof py)) {
            r = !1
            break
          }
        let s = !0
        for (const e of n)
          if (e instanceof py) {
            s = !1
            break
          }
        if (r === s)
          throw new Im(
            'Arguments to apply() must be all SymbolicTensors or all Tensors',
          )
        return ig(this.name, () => {
          if (!this.built) {
            this.assertInputCompatibility(e)
            const t = []
            for (const n of Am(e)) t.push(n.shape)
            this.build(Rm(t)),
              (this.built = !0),
              this.initialWeights && this.setWeights(this.initialWeights),
              null === this._refCount && s && (this._refCount = 1)
          }
          if ((this.assertInputCompatibility(e), s)) {
            let r = this.call(e, t)
            const s = Am(r),
              a = []
            for (let e of s) -1 !== n.indexOf(e) && (e = e.clone()), a.push(e)
            if (((r = Rm(a)), null != this.activityRegularizer))
              throw new Nm(
                'Layer invocation in the presence of activity regularizer(s) is not supported yet.',
              )
            return r
          }
          {
            const n = (function (e) {
                e = Am(e)
                const t = []
                for (const n of e) t.push(n.shape)
                return Rm(t)
              })(e),
              r = this.computeOutputShape(n)
            let s
            const a = 'float32'
            if (
              (this.warnOnIncompatibleInputShape(Array.isArray(e) ? n[0] : n),
              (s =
                null != r && r.length > 0 && Array.isArray(r[0])
                  ? r.map((n, r) => new py(a, n, this, Am(e), t, this.name, r))
                  : new py(a, r, this, Am(e), t, this.name)),
              this.addInboundNode(e, s, null, null, n, r, t),
              this._refCount++,
              null != this.activityRegularizer)
            )
              throw new Nm(
                'Layer invocation in the presence of activity regularizer(s) is not supported yet.',
              )
            return s
          }
        })
      }
      warnOnIncompatibleInputShape(e) {
        if (null != this.batchInputShape)
          if (e.length !== this.batchInputShape.length)
            console.warn(
              `The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`,
            )
          else {
            let t = !1
            this.batchInputShape.forEach((n, r) => {
              null != n && null != e[r] && e[r] !== n && (t = !0)
            }),
              t &&
                console.warn(
                  `The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`,
                )
          }
      }
      get outputShape() {
        if (null == this.inboundNodes || 0 === this.inboundNodes.length)
          throw new vm(
            `The layer ${this.name} has never been called and thus has no defined output shape.`,
          )
        const e = []
        for (const t of this.inboundNodes) {
          const n = JSON.stringify(t.outputShapes)
          ;-1 === e.indexOf(n) && e.push(n)
        }
        if (1 === e.length) {
          const e = this.inboundNodes[0].outputShapes
          return Array.isArray(e) && Array.isArray(e[0]) && 1 === e.length
            ? e[0]
            : e
        }
        throw new vm(
          `The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`,
        )
      }
      countParams() {
        if (!this.built)
          throw new km(
            `You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`,
          )
        return iy(this.weights)
      }
      build(e) {
        this.built = !0
      }
      getWeights(e = !1) {
        return uy(e ? this.trainableWeights : this.weights)
      }
      setWeights(e) {
        qi(() => {
          const t = this.weights
          if (t.length !== e.length)
            throw new Im(
              `You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`,
            )
          if (0 === t.length) return
          const n = [],
            r = uy(t)
          for (let s = 0; s < r.length; ++s) {
            const a = r[s],
              i = t[s],
              o = e[s]
            if (!B(a.shape, o.shape))
              throw new Im(
                `Layer weight shape ${a.shape} not compatible with provided weight shape ${o.shape}`,
              )
            n.push([i, o])
          }
          cy(n)
        })
      }
      addWeight(e, t, n, r, s, a, i, o) {
        if (-1 !== this._addedWeightNames.indexOf(e))
          throw new Im(`Duplicate weight name ${e} for layer ${this.name}`)
        this._addedWeightNames.push(e),
          null == n && (n = 'float32'),
          this.fastWeightInitDuringBuild && (r = null != o ? o() : ty('zeros'))
        const l = r.apply(t, n),
          u = new ly(l, n, e, a, i)
        return (
          l.dispose(),
          null != s && this.addLoss(() => s.apply(u.read())),
          null == a && (a = !0),
          a
            ? this._trainableWeights.push(u)
            : this._nonTrainableWeights.push(u),
          u
        )
      }
      setFastWeightInitDuringBuild(e) {
        this.fastWeightInitDuringBuild = e
      }
      addLoss(e) {
        null == e ||
          (Array.isArray(e) && 0 === e.length) ||
          ((e = Am(e)),
          void 0 !== this._losses &&
            null !== this._losses &&
            this.losses.push(...e))
      }
      computeOutputShape(e) {
        return e
      }
      computeMask(e, t) {
        if (!this.supportsMasking) {
          if (null != t) {
            if (!Array.isArray(t))
              throw new TypeError(
                `Layer ${this.name} does not support masking, but was passed an inputMask.`,
              )
            t.forEach((e) => {
              if (null != e)
                throw new TypeError(
                  `Layer ${this.name} does not support masking, but was passed an inputMask.`,
                )
            })
          }
          return null
        }
        return t
      }
      addInboundNode(e, t, n, r, s, a, i = null) {
        const o = Am(e)
        ;(t = Am(t)), (n = Am(n)), (r = Am(r)), (s = ry(s)), (a = ry(a))
        const l = [],
          u = [],
          c = []
        for (const e of o)
          l.push(e.sourceLayer), u.push(e.nodeIndex), c.push(e.tensorIndex)
        new fy(
          {
            outboundLayer: this,
            inboundLayers: l,
            nodeIndices: u,
            tensorIndices: c,
            inputTensors: o,
            outputTensors: t,
            inputMasks: n,
            outputMasks: r,
            inputShapes: s,
            outputShapes: a,
          },
          i,
        )
        for (let e = 0; e < t.length; e++)
          (t[e].sourceLayer = this),
            (t[e].nodeIndex = this.inboundNodes.length - 1),
            (t[e].tensorIndex = e)
      }
      getConfig() {
        const e = { name: this.name, trainable: this.trainable }
        return (
          null != this.batchInputShape &&
            (e.batchInputShape = this.batchInputShape),
          null != this.dtype && (e.dtype = this.dtype),
          e
        )
      }
      disposeWeights() {
        return this.weights.forEach((e) => e.dispose()), this.weights.length
      }
      assertNotDisposed() {
        if (0 === this._refCount)
          throw new Error(`Layer '${this.name}' is already disposed.`)
      }
      dispose() {
        if (!this.built)
          throw new Error(
            `Cannot dispose Layer ${this.name} because it has not been built yet.`,
          )
        if (null === this._refCount)
          throw new Error(
            `Cannot dispose Layer ${this.name} because it has not been used yet.`,
          )
        this.assertNotDisposed()
        let e = 0
        return (
          0 == --this._refCount && (e = this.disposeWeights()),
          { refCountAfterDispose: this._refCount, numDisposedVariables: e }
        )
      }
    }
    function yy(e, t, n) {
      if (
        ((null == t || (null != n && n > 0)) &&
          ((t = e.sourceLayer), (n = e.nodeIndex)),
        0 === t.inboundNodes.length)
      )
        return [e]
      {
        const e = t.inboundNodes[n]
        if (0 === e.inboundLayers.length) return e.inputTensors
        {
          const t = []
          for (let n = 0; n < e.inboundLayers.length; n++) {
            const r = yy(
              e.inputTensors[n],
              e.inboundLayers[n],
              e.nodeIndices[n],
            )
            for (const e of r) -1 === t.indexOf(e) && t.push(e)
          }
          return t
        }
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ class by extends gy {
      constructor(e) {
        if (
          (super({
            dtype: e.dtype,
            name: null != e.name ? e.name : Xm('input').toString(),
          }),
          null == e.batchSize && (e.batchSize = null),
          null == e.sparse && (e.sparse = !1),
          (this.trainable = !1),
          (this.built = !0),
          (this.sparse = e.sparse),
          null != e.inputShape && null != e.batchInputShape)
        )
          throw new Im(
            'Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.',
          )
        let t = e.batchInputShape
        if (null == t) {
          if (null == e.inputShape)
            throw new Im(
              'An InputLayer should be passed either a `batchInputShape` or an `inputShape`.',
            )
          t = [e.batchSize].concat(e.inputShape)
        } else if (null != e.batchSize)
          throw new Im(
            'Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.',
          )
        const n = e.dtype || 'float32'
        ;(this.batchInputShape = t),
          (this.dtype = n),
          (this.inputSpec = [{ shape: t }])
        const r = new py(
          this.dtype,
          this.batchInputShape,
          this,
          [],
          {},
          this.name,
        )
        ;(r.nodeIndex = 0),
          (r.tensorIndex = 0),
          new fy({
            outboundLayer: this,
            inboundLayers: [],
            nodeIndices: [],
            tensorIndices: [],
            inputTensors: [r],
            outputTensors: [r],
            inputMasks: [null],
            outputMasks: [null],
            inputShapes: [t],
            outputShapes: [t],
          })
      }
      apply(e, t) {
        throw new Im(
          `Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`,
        )
      }
      dispose() {
        return { refCountAfterDispose: this._refCount, numDisposedVariables: 0 }
      }
      getConfig() {
        return {
          batchInputShape: this.batchInputShape,
          dtype: this.dtype,
          sparse: this.sparse,
          name: this.name,
        }
      }
    }
    ;(by.className = 'InputLayer'), Gi(by)
    class xy {
      constructor(e) {
        if (
          ((this.id2Value = {}),
          (this.id2Mask = {}),
          (this.name2Id = {}),
          e instanceof xy)
        )
          for (const t in e.id2Value)
            (this.id2Value[t] = e.id2Value[t]),
              t in e.id2Mask && (this.id2Mask[t] = e.id2Mask[t])
        else {
          if (null == e) return
          for (const t of e) this.add(t.key, t.value)
        }
      }
      add(e, t, n) {
        if (null != this.id2Value[e.id])
          throw new Im(`Duplicate key: name=${e.name}, id=${e.id}`)
        return (
          (this.id2Value[e.id] =
            /**
             * @license
             * Copyright 2018 Google LLC
             *
             * Use of this source code is governed by an MIT-style
             * license that can be found in the LICENSE file or at
             * https://opensource.org/licenses/MIT.
             * =============================================================================
             */
            (function (e, t) {
              if (null == e.dtype || e.dtype === t.dtype) return t
              try {
                return Ka(t, e.dtype)
              } catch (n) {
                throw new Im(
                  `The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`,
                )
              }
            })(e, t)),
          (this.name2Id[e.name] = e.id),
          null != n && (this.id2Mask[e.id] = n),
          this
        )
      }
      addFeed(e) {
        this.add(e.key, e.value)
      }
      hasKey(e) {
        return null != this.id2Value[e.id]
      }
      names() {
        return Object.keys(this.name2Id)
      }
      getValue(e) {
        if (e instanceof py) {
          if (null == this.id2Value[e.id])
            throw new Im(`Nonexistent key: ${e.name}`)
          return this.id2Value[e.id]
        }
        {
          const t = this.name2Id[e]
          if (null == t)
            throw new Im(`Feed dict has no SymbolicTensor name: ${e}`)
          return this.id2Value[t]
        }
      }
      getMask(e) {
        if (e instanceof py) {
          if (null == this.id2Value[e.id])
            throw new Im(`Nonexistent key: ${e.name}`)
          return this.id2Mask[e.id]
        }
        {
          const t = this.name2Id[e]
          if (null == t)
            throw new Im(`Feed dict has no SymbolicTensor name: ${e}`)
          return this.id2Mask[t]
        }
      }
      disposeMasks() {
        null != this.id2Mask && Ki(this.id2Mask)
      }
    }
    const wy = new Tm(),
      vy = new Tm()
    function ky(e, t, n, r) {
      const s = null != n && n.training,
        a = Array.isArray(e),
        i = a ? e : [e],
        o = i.map((e) => e.name),
        l = [],
        u = t.names()
      for (const e of o)
        -1 !== u.indexOf(e) ? l.push(t.getValue(e)) : l.push(null)
      null != r && ((r.maxNumTensors = -1 / 0), (r.minNumTensors = 1 / 0))
      const c = o.join(',') + '|' + t.names().sort().join(',')
      let h,
        p = wy.get(c)
      if (null == p) {
        const e = (function (e, t) {
          O(
            null != e && e.length > 0,
            () => 'Expected at least one fetch, got none',
          )
          let n = [],
            r = {}
          if (1 === e.length) {
            const s = Ny(e[0], t)
            ;(n = s.sorted), (r = s.recipientMap)
          } else {
            const s = new Set()
            for (const a of e) {
              const { sorted: e, recipientMap: i } = Ny(a, t)
              for (const t of e) s.has(t.name) || (n.push(t), s.add(t.name))
              for (const e in i)
                null == r[e] && (r[e] = new Set()),
                  i[e].forEach((t) => r[e].add(t))
            }
          }
          return { sorted: n, recipientCounts: Iy(r) }
        })(i, t)
        ;(p = e.sorted), (h = e.recipientCounts), wy.put(c, p), vy.put(c, h)
      }
      ;(h = {}), s || Object.assign(h, vy.get(c))
      const d = new xy(t)
      for (let e = 0; e < p.length; ++e) {
        if (null != r) {
          const e = ji().numTensors
          e > r.maxNumTensors && (r.maxNumTensors = e),
            e < r.minNumTensors && (r.minNumTensors = e)
        }
        const a = p[e],
          i = a.sourceLayer
        if (i instanceof by) continue
        const u = [],
          c = [],
          f = []
        let m = !1
        for (const e of a.inputs) {
          const n = d.getValue(e),
            r = d.getMask(e)
          u.push(n),
            c.push(r),
            null != r && (m = !0),
            s ||
              (h[e.name]--,
              0 !== h[e.name] ||
                t.hasKey(e) ||
                -1 !== o.indexOf(e.name) ||
                n.isDisposed ||
                !0 === e.sourceLayer.stateful ||
                f.push(n))
        }
        m && ((n = n || {}).mask = c[0])
        const g = Am(i.apply(u, n))
        let y = null
        i.supportsMasking && (y = i.computeMask(u, c))
        const b = Sy(a),
          x = Array.isArray(b) ? b : [b]
        for (let e = 0; e < x.length; ++e) {
          d.hasKey(x[e]) || d.add(x[e], g[e], Array.isArray(y) ? y[0] : y)
          const t = o.indexOf(x[e].name)
          ;-1 !== t && (l[t] = g[e])
        }
        s || Ki(f)
      }
      return d.disposeMasks(), a ? l : l[0]
    }
    function Iy(e) {
      const t = {}
      for (const n in e) t[n] = e[n].size
      return t
    }
    function Ny(e, t) {
      const n = new Set(),
        r = [],
        s = {}
      for (const e of t.names()) n.add(e)
      const a = [],
        i = []
      for (a.push(e); a.length > 0; ) {
        const e = a[a.length - 1]
        if (n.has(e.name)) {
          a.pop()
          continue
        }
        const t = i[i.length - 1] === a.length - 1
        if (0 === e.inputs.length || t)
          a.pop(), r.push(e), n.add(e.name), t && i.pop()
        else {
          i.push(a.length - 1)
          for (const t of e.inputs)
            null == s[t.name] && (s[t.name] = new Set()),
              s[t.name].add(e.name),
              n.has(t.name) || a.push(t)
        }
      }
      return { sorted: r, recipientMap: s }
    }
    function Sy(e) {
      let t
      if (1 === e.sourceLayer.inboundNodes.length) t = e.sourceLayer.output
      else {
        let n = null
        for (let t = 0; t < e.sourceLayer.inboundNodes.length; ++t)
          for (const r of e.sourceLayer.inboundNodes[t].outputTensors)
            if (r.id === e.id) {
              n = t
              break
            }
        t = e.sourceLayer.getOutputAt(n)
      }
      return t
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ function Ty(e, t) {
      return qi(() => Ll(Pl(Do(e, e), t, !0)))
    }
    ye().registerFlag(
      'TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES',
      () => 100,
      function (e) {
        null != wy && wy.setMaxEntries(e), null != vy && vy.setMaxEntries(e)
      },
    )
    class Cy extends Vi {
      getConfig() {
        return {}
      }
    }
    class $y extends Cy {
      constructor(e) {
        super(),
          (this.defaultMaxValue = 2),
          (this.defaultAxis = 0),
          (this.maxValue =
            null != e.maxValue ? e.maxValue : this.defaultMaxValue),
          (this.axis = null != e.axis ? e.axis : this.defaultAxis)
      }
      apply(e) {
        return qi(() => {
          const t = Ty(e, this.axis),
            n = Xo(t, 0, this.maxValue)
          return Do(e, yl(n, ro(yg(), t)))
        })
      }
      getConfig() {
        return { maxValue: this.maxValue, axis: this.axis }
      }
    }
    ;($y.className = 'MaxNorm'), Gi($y)
    class Ey extends Cy {
      constructor(e) {
        super(),
          (this.defaultAxis = 0),
          (this.axis = null != e.axis ? e.axis : this.defaultAxis)
      }
      apply(e) {
        return qi(() => yl(e, ro(yg(), Ty(e, this.axis))))
      }
      getConfig() {
        return { axis: this.axis }
      }
    }
    ;(Ey.className = 'UnitNorm'), Gi(Ey)
    class Ry extends Cy {
      apply(e) {
        return uc(e)
      }
    }
    ;(Ry.className = 'NonNeg'), Gi(Ry)
    class Ay extends Cy {
      constructor(e) {
        super(),
          (this.defaultMinValue = 0),
          (this.defaultMaxValue = 1),
          (this.defaultRate = 1),
          (this.defaultAxis = 0),
          (this.minValue =
            null != e.minValue ? e.minValue : this.defaultMinValue),
          (this.maxValue =
            null != e.maxValue ? e.maxValue : this.defaultMaxValue),
          (this.rate = null != e.rate ? e.rate : this.defaultRate),
          (this.axis = null != e.axis ? e.axis : this.defaultAxis)
      }
      apply(e) {
        return qi(() => {
          const t = Ty(e, this.axis),
            n = ro(
              Do(this.rate, Xo(t, this.minValue, this.maxValue)),
              Do(1 - this.rate, t),
            )
          return Do(e, yl(n, ro(yg(), t)))
        })
      }
      getConfig() {
        return {
          minValue: this.minValue,
          maxValue: this.maxValue,
          rate: this.rate,
          axis: this.axis,
        }
      }
    }
    ;(Ay.className = 'MinMaxNorm'), Gi(Ay)
    const _y = {
      maxNorm: 'MaxNorm',
      minMaxNorm: 'MinMaxNorm',
      nonNeg: 'NonNeg',
      unitNorm: 'UnitNorm',
    }
    function Fy(e) {
      return Om(e)
    }
    function Dy(e, t = {}) {
      return Lm(e, Ui.getMap().classNameMap, t, 'constraint')
    }
    function Oy(e) {
      return null == e
        ? null
        : 'string' == typeof e
          ? Dy({ className: e in _y ? _y[e] : e, config: {} })
          : e instanceof Cy
            ? e
            : Dy(e)
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ async function My(e) {
      if (null == e) return
      const t = [],
        n = [],
        r = []
      for (const s in e) {
        const a = e[s]
        if ('number' != typeof a) {
          const e = a
          t.push(e.data()), n.push(s), r.push(e)
        }
      }
      if (t.length > 0) {
        const s = await Promise.all(t)
        for (let t = 0; t < s.length; ++t) e[n[t]] = s[t][0]
        Ki(r)
      }
    }
    function Ly(e) {
      if (null != e)
        for (const t in e) {
          const n = e[t]
          'number' != typeof n && n.dispose()
        }
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ var zy
    !(function (e) {
      ;(e[(e.SILENT = 0)] = 'SILENT'), (e[(e.VERBOSE = 1)] = 'VERBOSE')
    })(zy || (zy = {}))
    class Py {
      constructor() {
        this.validationData = null
      }
      setParams(e) {
        this.params = e
      }
      async onEpochBegin(e, t) {}
      async onEpochEnd(e, t) {}
      async onBatchBegin(e, t) {}
      async onBatchEnd(e, t) {}
      async onTrainBegin(e) {}
      async onTrainEnd(e) {}
      setModel(e) {}
    }
    class By {
      constructor(e, t = 10) {
        null == e && (e = []), (this.callbacks = e), (this.queueLength = t)
      }
      append(e) {
        this.callbacks.push(e)
      }
      setParams(e) {
        for (const t of this.callbacks) t.setParams(e)
      }
      setModel(e) {
        for (const t of this.callbacks) t.setModel(e)
      }
      async onEpochBegin(e, t) {
        null == t && (t = {})
        for (const n of this.callbacks) await n.onEpochBegin(e, t)
      }
      async onEpochEnd(e, t) {
        null == t && (t = {})
        for (const n of this.callbacks) await n.onEpochEnd(e, t)
      }
      async onBatchBegin(e, t) {
        null == t && (t = {})
        for (const n of this.callbacks) await n.onBatchBegin(e, t)
      }
      async onBatchEnd(e, t) {
        null == t && (t = {})
        for (const n of this.callbacks) await n.onBatchEnd(e, t)
      }
      async onTrainBegin(e) {
        null == e && (e = {})
        for (const t of this.callbacks) await t.onTrainBegin(e)
      }
      async onTrainEnd(e) {
        null == e && (e = {})
        for (const t of this.callbacks) await t.onTrainEnd(e)
      }
    }
    class Wy extends Py {
      constructor() {
        super()
      }
      async onEpochBegin(e) {
        ;(this.seen = 0), (this.totals = {})
      }
      async onBatchEnd(e, t) {
        null == t && (t = {})
        const n = null == t.size ? 0 : t.size
        this.seen += n
        for (const e in t) {
          const r = t[e]
          if ('number' == typeof r)
            this.totals.hasOwnProperty(e) || (this.totals[e] = 0),
              (this.totals[e] = this.totals[e] + r * n)
          else {
            let t
            e in this.totals ? (t = this.totals[e]) : (this.totals[e] = 0)
            const s = qi(() => ro(this.totals[e], Do(r, n)))
            ;(this.totals[e] = s), null != t && t.dispose()
          }
        }
      }
      async onEpochEnd(e, t) {
        if (null != t)
          for (const e of this.params.metrics)
            null != this.totals[e] &&
              ('number' == typeof this.totals[e]
                ? (t[e] = this.totals[e] / this.seen)
                : qi(() => {
                    const n = Do(yl(1, this.seen), this.totals[e])
                    ;(t[e] = n), this.totals[e].dispose(), Xi(t[e])
                  }))
      }
    }
    class Vy extends Py {
      async onTrainBegin(e) {
        ;(this.epoch = []), (this.history = {})
      }
      async onEpochEnd(e, t) {
        null == t && (t = {}), this.epoch.push(e)
        for (const e in t)
          null == this.history[e] && (this.history[e] = []),
            this.history[e].push(t[e])
      }
      async syncData() {
        const e = [],
          t = [],
          n = []
        for (const r in this.history) {
          const s = this.history[r]
          for (let a = 0; a < s.length; ++a)
            if ('number' != typeof s[a]) {
              const i = s[a]
              e.push(i.data()), t.push(r), n.push(a)
            }
        }
        const r = await Promise.all(e)
        for (let e = 0; e < r.length; ++e)
          this.history[t[e]][n[e]].dispose(),
            (this.history[t[e]][n[e]] = r[e][0])
      }
    }
    class Uy extends Py {
      constructor(e, t) {
        if (
          (super(),
          (this.currentEpoch = 0),
          (this.nowFunc = e.nowFunc),
          (this.nextFrameFunc = e.nextFrameFunc || _p),
          (this.yieldEvery = t || 'auto'),
          'auto' === this.yieldEvery && (this.yieldEvery = 125),
          'never' === this.yieldEvery && null != e.onYield)
        )
          throw new Error(
            'yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback',
          )
        ee(this.yieldEvery) &&
          (this.maybeWait = (function (e, t, n) {
            let r,
              s = null != n ? n() : ts()
            return (...a) => {
              const i = null != n ? n() : ts()
              return i - s < t || ((s = i), (r = e(...a))), r
            }
          })(this.maybeWait.bind(this), this.yieldEvery, this.nowFunc)),
          (this.trainBegin = e.onTrainBegin),
          (this.trainEnd = e.onTrainEnd),
          (this.epochBegin = e.onEpochBegin),
          (this.epochEnd = e.onEpochEnd),
          (this.batchBegin = e.onBatchBegin),
          (this.batchEnd = e.onBatchEnd),
          (this.yield = e.onYield)
      }
      async maybeWait(e, t, n) {
        const r = []
        null != this.yield && (await My(n), r.push(this.yield(e, t, n))),
          r.push(this.nextFrameFunc()),
          await Promise.all(r)
      }
      async onEpochBegin(e, t) {
        ;(this.currentEpoch = e),
          null != this.epochBegin && (await My(t), await this.epochBegin(e, t))
      }
      async onEpochEnd(e, t) {
        const n = []
        null != this.epochEnd && (await My(t), n.push(this.epochEnd(e, t))),
          'epoch' === this.yieldEvery && n.push(this.nextFrameFunc()),
          await Promise.all(n)
      }
      async onBatchBegin(e, t) {
        null != this.batchBegin && (await My(t), await this.batchBegin(e, t))
      }
      async onBatchEnd(e, t) {
        const n = []
        null != this.batchEnd && (await My(t), n.push(this.batchEnd(e, t))),
          'batch' === this.yieldEvery
            ? n.push(this.nextFrameFunc())
            : ee(this.yieldEvery) &&
              n.push(this.maybeWait(this.currentEpoch, e, t)),
          await Promise.all(n)
      }
      async onTrainBegin(e) {
        null != this.trainBegin && (await My(e), await this.trainBegin(e))
      }
      async onTrainEnd(e) {
        null != this.trainEnd && (await My(e), await this.trainEnd(e))
      }
    }
    function Gy(e, t) {
      return (
        null == e && (e = {}),
        e instanceof Py
          ? [e]
          : Array.isArray(e) && e[0] instanceof Py
            ? e
            : Am(e).map((e) => new Uy(e, t))
      )
    }
    class Hy {
      constructor() {}
      static registerCallbackConstructor(e, t) {
        O(
          e >= 0 && Number.isInteger(e),
          () =>
            `Verbosity level is expected to be an integer >= 0, but got ${e}`,
        ),
          Hy.checkForDuplicate(t),
          null == Hy.constructors[e] && (Hy.constructors[e] = []),
          Hy.constructors[e].push(t)
      }
      static checkForDuplicate(e) {
        for (const t in Hy.constructors)
          Hy.constructors[+t].forEach((t) => {
            if (t === e) throw new Im('Duplicate callback constructor.')
          })
      }
      static clear() {
        Hy.constructors = {}
      }
      static createCallbacks(e) {
        const t = []
        for (const n in Hy.constructors) {
          const r = +n
          e >= r && t.push(...Hy.constructors[r])
        }
        return t.map((e) => new e())
      }
    }
    function jy(e, t, n, r, s, a, i, o, l) {
      const u = new Vy(),
        c = [new Wy(), ...Hy.createCallbacks(t)]
      null != e && c.push(...e), c.push(u)
      const h = new By(c)
      return (
        h.setParams({
          epochs: n,
          initialEpoch: r,
          samples: s,
          steps: a,
          batchSize: i,
          verbose: t,
          doValidation: o,
          metrics: l,
        }),
        { callbackList: h, history: u }
      )
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ function qy(e, t = {}, n = !1) {
      return Lm(e, Ui.getMap().classNameMap, t, 'layer', n)
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ function Ky(e, t) {
      return qi(() => {
        'float32' !== e.dtype && (e = Ka(e, 'float32'))
        const n = Pl(Eg(e), t, !0),
          r = Ko(n.shape, yg()),
          s = Ll(Su(n, r))
        return yl(e, s)
      })
    }
    function Xy(e, t) {
      return qi(() => Tu(Eg(pu(t, e)), -1))
    }
    function Yy(e, t) {
      return qi(() => Tu(eo(pu(t, e)), -1))
    }
    function Zy(e, t) {
      return qi(() => {
        const n = pu(e, t),
          r = Xo(eo(e), yg(), Number.MAX_VALUE),
          s = eo(yl(n, r))
        return Do(100, Tu(s, -1))
      })
    }
    function Jy(e, t, n = !1) {
      return qi(() => {
        if (n) t = $c(t)
        else {
          const e = Pl(t, t.shape.length - 1, !0)
          t = yl(t, e)
        }
        return (
          (t = Xo(t, yg(), 1 - yg())),
          uu(Pl(Do(Ka(e, 'float32'), ou(t)), t.shape.length - 1))
        )
      })
    }
    function Qy(e, t, n = !1) {
      return qi(() => {
        const r = Ka(
            Kl(
              (function (e) {
                const t = [pg(e.shape)]
                return Eo(e, t)
              })(e),
            ),
            'int32',
          ),
          s = (t = Xo(t, yg(), 1 - yg())).shape
        return Jy(Eo(Lu(r, s[s.length - 1]), s), t, n)
      })
    }
    function eb(e, t) {
      return qi(() => {
        let n
        return (
          (n = Xo(t, yg(), 1 - yg())),
          (n = ou(yl(n, pu(1, n)))),
          Tu(
            (function (e, t) {
              if (!B(e.shape, t.shape))
                throw new Im(
                  `logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`,
                )
              return qi(() => {
                const n = uc(t),
                  r = uu(eo(t))
                return ro(pu(n, Do(t, e)), lu(Ul(r)))
              })
            })(e, n),
            -1,
          )
        )
      })
    }
    function tb(e, t) {
      return qi(() => {
        const n = Ky(e, -1),
          r = Ky(t, -1),
          s = Do(n, r)
        return uu(Pl(s, -1))
      })
    }
    Hy.constructors = {}
    const nb = {
      meanSquaredError: Xy,
      meanAbsoluteError: Yy,
      meanAbsolutePercentageError: Zy,
      meanSquaredLogarithmicError: function (e, t) {
        return qi(() => {
          const n = Xo(t, yg(), Number.MAX_VALUE),
            r = ou(ro(1, n)),
            s = Xo(e, yg(), Number.MAX_VALUE),
            a = ou(ro(1, s))
          return Tu(Eg(pu(r, a)), -1)
        })
      },
      squaredHinge: function (e, t) {
        return qi(() => {
          const n = Su(0, pu(1, Do(e, t)))
          return Tu(Eg(n), -1)
        })
      },
      hinge: function (e, t) {
        return qi(() => {
          const n = Su(0, pu(1, Do(e, t)))
          return Tu(n, -1)
        })
      },
      categoricalHinge: function (e, t) {
        return qi(() => {
          const n = Pl(Do(e, t), -1),
            r = Dl(Do(pu(1, e), t), -1)
          return Su(0, ro(1, pu(r, n)))
        })
      },
      logcosh: function (e, t) {
        return qi(() => {
          const n = Math.log(2),
            r = pu(t, e),
            s = pu(ro(r, cu(Do(-2, r))), n)
          return Tu(s, -1)
        })
      },
      categoricalCrossentropy: Jy,
      sparseCategoricalCrossentropy: Qy,
      binaryCrossentropy: eb,
      kullbackLeiblerDivergence: function (e, t) {
        return qi(() => {
          const n = Xo(e, yg(), 1),
            r = Xo(t, yg(), 1)
          return Pl(Do(e, ou(yl(n, r))), -1)
        })
      },
      poisson: function (e, t) {
        return qi(() => {
          const n = ou(ro(yg(), t))
          return Tu(pu(t, Do(e, n)), -1)
        })
      },
      cosineProximity: tb,
    }
    function rb(e) {
      if ('string' == typeof e) {
        if (e in nb) return nb[e]
        let t = `Unknown loss ${e}`
        throw (
          (e.toLowerCase().includes('softmaxcrossentropy') &&
            (t = `Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),
          new Im(t))
        )
      }
      return e
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ function sb(e, t) {
      return qi(() => {
        const n = Do(0.5, zu(t)),
          r = bg(Yl(t, n), e.dtype)
        return Tu(bl(e, r), -1)
      })
    }
    function ab(e, t) {
      return qi(() => bg(bl(oo(e, -1), oo(t, -1)), 'float32'))
    }
    function ib(e, t) {
      return eb(e, t)
    }
    function ob(e, t) {
      return (
        e.rank === t.rank && (e = Oc(e, [e.rank - 1])),
        (t = oo(t, -1)).dtype !== e.dtype && (t = Ka(t, e.dtype)),
        Ka(bl(e, t), 'float32')
      )
    }
    const lb = Jy,
      ub = Qy,
      cb = {
        binaryAccuracy: sb,
        categoricalAccuracy: ab,
        precision: function (e, t) {
          return qi(() => {
            const n = (function (e, t) {
                return qi(() => Ka(Pl(mu(bl(e, 1), bl(t, 1))), 'float32'))
              })(e, t),
              r = (function (e, t) {
                return qi(() => Ka(Pl(mu(bl(e, 0), bl(t, 1))), 'float32'))
              })(e, t),
              s = ro(n, r)
            return Ka(xl(Yl(s, 0), yl(n, s), 0), 'float32')
          })
        },
        categoricalCrossentropy: lb,
        sparseCategoricalCrossentropy: ub,
        mse: Xy,
        MSE: Xy,
        mae: Yy,
        MAE: Yy,
        mape: Zy,
        MAPE: Zy,
        cosine: tb,
      }
    function hb(e) {
      if ('string' == typeof e && e in cb) return cb[e]
      if ('string' != typeof e && null != e) return e
      throw new Im(`Unknown metric ${e}`)
    }
    function pb(e) {
      if (($m(null !== e, `Unknown LossOrMetricFn ${e}`), 'string' == typeof e))
        return e
      {
        let t
        for (const n of Object.keys(nb))
          if (nb[n] === e) {
            t = n
            break
          }
        if (void 0 !== t) return t
        for (const n of Object.keys(cb))
          if (cb[n] === e) {
            t = n
            break
          }
        return void 0 !== t ? t : e.name
      }
    }
    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ function db(e, t, n = !1) {
      if (
        null == e ||
        'object' != typeof e ||
        Object.getPrototypeOf(e) !== Object.prototype ||
        !fb(e)
      )
        throw new Error(
          'User-defined metadata is expected to be a JSON object, but is not.',
        )
      if (n) {
        const n = JSON.stringify(e)
        n.length > 1048576 &&
          console.warn(
            `User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`,
          )
      }
    }
    function fb(e) {
      if (null === e) return !0
      if ('object' == typeof e) {
        if (Object.getPrototypeOf(e) === Object.prototype) {
          const t = Object.keys(e)
          for (const n of t) {
            if ('string' != typeof n) return !1
            if (!fb(e[n])) return !1
          }
          return !0
        }
        if (Array.isArray(e)) {
          for (const t of e) if (!fb(t)) return !1
          return !0
        }
        return !1
      }
      {
        const t = typeof e
        return 'string' === t || 'number' === t || 'boolean' === t
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ function mb(e, t, n = console.log) {
      let r = ''
      for (let n = 0; n < e.length; ++n)
        n > 0 && (r = r.slice(0, r.length - 1) + ' '),
          (r += e[n]),
          (r = r.slice(0, t[n])),
          (r += ' '.repeat(t[n] - r.length))
      n(r)
    }
    function gb(e, t, n) {
      let r, s
      try {
        s = e.inboundNodes.map((e) => JSON.stringify(e.inputShapes)).join(',')
      } catch (e) {
        s = 'multiple'
      }
      try {
        r = JSON.stringify(e.outputShape)
      } catch (e) {
        r = 'multiple'
      }
      mb(
        [`${e.name} (${e.getClassName()})`, s, r, e.countParams().toString()],
        t,
        n,
      )
    }
    function yb(e, t, n, r) {
      let s, a
      try {
        a = e.inboundNodes.map((e) => JSON.stringify(e.inputShapes)).join(',')
      } catch (e) {
        a = 'multiple'
      }
      try {
        s = JSON.stringify(e.outputShape)
      } catch (e) {
        s = 'multiple'
      }
      const i = []
      for (const t of e.inboundNodes)
        if (!(null != n && n.length > 0 && -1 === n.indexOf(t)))
          for (let e = 0; e < t.inboundLayers.length; ++e) {
            const n = t.inboundLayers[e].name,
              r = t.nodeIndices[e],
              s = t.tensorIndices[e]
            i.push(`${n}[${r}][${s}]`)
          }
      const o = e.name,
        l = e.getClassName(),
        u = 0 === i.length ? '' : i[0]
      mb([`${o} (${l})`, a, s, e.countParams().toString(), u], t, r)
      for (let e = 1; e < i.length; ++e) mb(['', '', '', '', i[e]], t, r)
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ function bb(e, t, n) {
      return (
        ('inboundNodes' === e || 'outputLayers' === e || 'inputLayers' === e) &&
        0 === t &&
        'string' == typeof n
      )
    }
    function xb(e, t) {
      if (null === e) return null
      if ('string' == typeof e) return Fm(e)
      if ('number' == typeof e || 'boolean' == typeof e) return e
      if (e instanceof Array) {
        const n = [],
          r = e.length
        for (let s = 0; s < r; ++s) {
          const r = e[s]
          bb(t, s, r) ? n.push(r) : n.push(xb(r, t))
        }
        return n
      }
      {
        const t = {}
        for (const n of Object.keys(e)) {
          const r = e[n]
          if ('name' === n && 'string' == typeof r) t[n] = r
          else {
            const e = Fm(n)
            t[e] = xb(r, e)
          }
        }
        return t
      }
    }
    function wb(e, t) {
      if (null == e) return null
      if ('string' == typeof e) return _m(e)
      if ('number' == typeof e || 'boolean' == typeof e) return e
      if (e instanceof Array) {
        const n = [],
          r = e.length
        for (let s = 0; s < r; ++s) {
          const r = e[s]
          bb(t, s, r) ? n.push(r) : n.push(wb(r, t))
        }
        return n
      }
      {
        const t = {}
        for (const n of Object.keys(e)) {
          const r = e[n]
          t[_m(n)] =
            ('name' !== n && 'className' !== n) || 'string' != typeof r
              ? wb(r, n)
              : r
        }
        return t
      }
    }
    /** @license See the LICENSE file. */ const vb = '3.21.0'
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ class kb extends gy {
      constructor(e) {
        if (
          (super({}),
          (this.containerNodes = new Set()),
          (this.name = e.name),
          null == this.name)
        ) {
          const e = this.getClassName().toLowerCase()
          this.name = Xm(e)
        }
        if (
          ((this.supportsMasking = !1),
          (this.trainable_ = !0),
          Array.isArray(e.inputs)
            ? (this.inputs = e.inputs.slice())
            : (this.inputs = [e.inputs]),
          Array.isArray(e.outputs)
            ? (this.outputs = e.outputs.slice())
            : (this.outputs = [e.outputs]),
          Pm(this.inputs).length !== this.inputs.length)
        )
          throw new Im(
            `The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((e) => e.name)}`,
          )
        Pm(this.outputs).length !== this.outputs.length &&
          console.warn(
            `The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((e) => e.name)}`,
          ),
          (this.inputLayers = []),
          (this.inputLayersNodeIndices = []),
          (this.inputLayersTensorIndices = []),
          (this.outputLayers = []),
          (this.outputLayersNodeIndices = []),
          (this.outputLayersTensorIndices = []),
          (this.layers = []),
          (this.internalContainerRefs = [])
        for (const e of this.outputs) {
          const t = e.sourceLayer,
            n = e.nodeIndex,
            r = e.tensorIndex
          this.outputLayers.push(t),
            this.outputLayersNodeIndices.push(n),
            this.outputLayersTensorIndices.push(r)
        }
        for (const e of this.inputs) {
          const t = e.sourceLayer,
            n = e.nodeIndex,
            r = e.tensorIndex
          $m(0 === n, 'input layer has >1 nodes'),
            $m(0 === r, 'input layer has >1 tensors'),
            this.inputLayers.push(t),
            this.inputLayersNodeIndices.push(n),
            this.inputLayersTensorIndices.push(r)
        }
        ;(this.inputNames = []),
          (this.outputNames = []),
          (this.feedInputShapes = []),
          (this.feedInputNames = []),
          (this.feedOutputNames = [])
        for (let t = 0; t < this.inputLayers.length; t++) {
          const n = this.inputLayers[t]
          if (!(n instanceof by))
            throw new TypeError(
              `Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${t} (0-based) originates from layer type ${n.getClassName()}.`,
            )
          this.inputNames.push(n.name),
            this.feedInputShapes.push(n.batchInputShape),
            this.feedInputNames.push(n.name)
        }
        for (const e of this.outputLayers) this.outputNames.push(e.name)
        ;(this.internalInputShapes = this.inputs.map((e) => e.shape)),
          (this.internalOutputShapes = this.outputs.map((e) => e.shape))
        const t = {},
          n = {},
          r = {},
          s = {},
          a = {},
          i = [],
          o = (e, t, n, r, s, l) => {
            ;(null != r && null != s && null != l) ||
              ((r = e.sourceLayer), (s = e.nodeIndex), (l = e.tensorIndex))
            const u = r.inboundNodes[s]
            if (-1 !== n.indexOf(u))
              throw new km(
                `The tensor ${e.name} at layer "${r.name}" is part of a cycle.`,
              )
            if (-1 !== t.indexOf(u)) return
            this.containerNodes.add(kb.nodeKey(r, s)),
              r.id in a || (a[r.id] = Object.keys(a).length),
              -1 === n.indexOf(u) && n.push(u)
            const c = u.inboundLayers.length
            for (let e = 0; e < c; e++) {
              const r = u.inputTensors[e],
                s = u.inboundLayers[e],
                a = u.nodeIndices[e],
                i = u.tensorIndices[e]
              o(r, t, n, s, a, i)
            }
            for (t.push(u); n.indexOf(u) >= 0; ) n.splice(n.indexOf(u), 1)
            i.push(u)
          },
          l = [],
          u = []
        for (const e of this.outputs) o(e, l, u)
        const c = i.slice().reverse()
        for (const e of c) {
          ;(n[e.id] = e), e.id in t || (t[e.id] = 0)
          let a = t[e.id]
          const i = null == r[e.outboundLayer.id] ? 0 : r[e.outboundLayer.id]
          ;(a = Math.max(a, i)),
            (r[e.outboundLayer.id] = a),
            (s[e.outboundLayer.id] = e.outboundLayer),
            (t[e.id] = a)
          for (let r = 0; r < e.inboundLayers.length; r++) {
            const s = e.inboundLayers[r],
              i = e.nodeIndices[r],
              o = s.inboundNodes[i],
              l = null == t[o.id] ? 0 : t[o.id]
            ;(t[o.id] = Math.max(a + 1, l)), (n[o.id] = o)
          }
        }
        const h = {}
        for (const e in t) {
          const r = t[e]
          r in h || (h[r] = []), h[r].push(n[e])
        }
        const p = {}
        for (const e in r) {
          const t = r[e]
          t in p || (p[t] = []), p[t].push(s[e])
        }
        let d = Object.keys(p)
          .map((e) => parseInt(e, 10))
          .sort(zm)
        this.layers = []
        for (const e of d) {
          const t = p[e]
          t.sort((e, t) => {
            const n = a[e.id],
              r = a[t.id]
            return n < r ? -1 : n > r ? 1 : 0
          })
          for (const e of t)
            e instanceof kb && this.internalContainerRefs.push(e),
              this.layers.push(e)
        }
        ;(this.layersByDepth = p),
          (d = Object.keys(h)
            .map((e) => parseInt(e, 10))
            .sort(zm))
        const f = this.inputs.slice(),
          m = []
        for (const e of d)
          for (const t of h[e]) {
            const e = t.outboundLayer
            if (null != e) {
              for (const n of t.inputTensors)
                if (-1 === f.indexOf(n))
                  throw new km(
                    `Graph disconnected: cannot obtain value for tensor ${n} at layer "${e.name}". The following previous layers were accessed without issue: ${m}`,
                  )
              for (const e of t.outputTensors) f.push(e)
              m.push(e.name)
            }
          }
        this.nodesByDepth = h
        const g = this.layers.map((e) => e.name)
        for (const e of g) {
          const t = g.filter((t) => t === e).length
          if (1 !== t)
            throw new km(
              `The name "${e}" is used ${t} times in the model. All layer names should be unique. Layer names: ` +
                JSON.stringify(g),
            )
        }
        ;(this.outboundNodes = []),
          (this.inboundNodes = []),
          new fy({
            outboundLayer: this,
            inboundLayers: [],
            nodeIndices: [],
            tensorIndices: [],
            inputTensors: this.inputs,
            outputTensors: this.outputs,
            inputMasks: this.inputs.map((e) => null),
            outputMasks: this.outputs.map((e) => null),
            inputShapes: this.inputs.map((e) => e.shape),
            outputShapes: this.outputs.map((e) => e.shape),
          }),
          (this.built = !0),
          (this._refCount = 1)
      }
      assertNotDisposed() {
        if (0 === this._refCount)
          throw new Error(`Container '${this.name}' is already disposed.`)
      }
      dispose() {
        this.assertNotDisposed()
        const e = { refCountAfterDispose: null, numDisposedVariables: 0 }
        if (0 == --this._refCount) {
          for (const t of this.layers)
            e.numDisposedVariables += t.dispose().numDisposedVariables
          for (const t of this.internalContainerRefs)
            e.numDisposedVariables += t.dispose().numDisposedVariables
        }
        return (e.refCountAfterDispose = this._refCount), e
      }
      get trainable() {
        return this.trainable_
      }
      set trainable(e) {
        this.layers.forEach((t) => {
          t._trainableWeights.forEach((t) => (t.trainable = e))
        }),
          (this.trainable_ = e)
      }
      get trainableWeights() {
        if (this._trainableWeights.length > 0)
          throw new Im(
            'Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.',
          )
        if (!this.trainable) return []
        let e = []
        for (const t of this.layers) e = e.concat(t.trainableWeights)
        return e
      }
      get nonTrainableWeights() {
        const e = []
        for (const t of this.layers) e.push(...t.nonTrainableWeights)
        if (!this.trainable) {
          const t = []
          for (const e of this.layers) t.push(...e.trainableWeights)
          return t.concat(e)
        }
        return e
      }
      get weights() {
        return this.trainableWeights.concat(this.nonTrainableWeights)
      }
      loadWeights(e, t = !0) {
        const n = {}
        let r = 0
        for (const e of this.layers)
          for (const t of e.weights) {
            if (null != n[t.originalName])
              throw new Im(`Duplicate weight name: ${t.originalName}`)
            ;(n[t.originalName] = t), r++
          }
        const s = []
        for (const r in e) {
          let a = r
          if (null == n[r]) {
            const e = r.split('/')
            a = e
              .slice(0, -2)
              .concat([e[e.length - 1]])
              .join('/')
          }
          if (null != n[a]) s.push([n[a], e[r]])
          else if (t)
            throw new Im(`Provided weight data has no target variable: ${r}`)
          delete n[a]
        }
        if (t) {
          const e = []
          for (const t in n) e.push(t)
          if (e.length > 0)
            throw new Im(`${e.length} of ${r} weights are not set: ${e}`)
        }
        cy(s)
      }
      updatedConfig() {
        const e = this.getConfig(),
          t = {}
        return (
          (t.className = this.getClassName()),
          (t.config = e),
          (t.kerasVersion = `tfjs-layers ${vb}`),
          (t.backend = 'TensorFlow.js'),
          t
        )
      }
      toJSON(e, t = !0) {
        const n = wb(this.updatedConfig())
        return t ? JSON.stringify(n) : n
      }
      call(e, t) {
        return qi(() => {
          e = Am(e)
          const n = new xy()
          for (let t = 0; t < this.inputs.length; ++t)
            n.add(this.inputs[t], e[t])
          return ky(this.outputs, n, t)
        })
      }
      computeMask(e, t) {
        return qi(() => {
          let n
          return (
            (e = Am(e)),
            (n = null == t ? Cm(null, e.length) : Am(t)),
            this.runInternalGraph(e, n)[1]
          )
        })
      }
      computeOutputShape(e) {
        const t = ry(e)
        if (t.length !== this.inputLayers.length)
          throw new Im(
            `Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`,
          )
        const n = {}
        for (let e = 0; e < t.length; e++) {
          const r = this.inputLayers[e],
            s = t[e]
          n[r.name + '_0_0'] = s
        }
        const r = Object.keys(this.nodesByDepth)
          .map((e) => parseInt(e, 10))
          .sort(zm)
        if (r.length > 1)
          for (const e of r) {
            const t = this.nodesByDepth[e]
            for (const e of t) {
              const t = e.outboundLayer
              if (-1 !== this.inputLayers.map((e) => e.id).indexOf(t.id))
                continue
              const r = []
              for (let t = 0; t < e.inboundLayers.length; t++) {
                const s = e.inboundLayers[t],
                  a = e.nodeIndices[t],
                  i = e.tensorIndices[t],
                  o = n[`${s.name}_${a}_${i}`]
                r.push(o)
              }
              const s = ry(t.computeOutputShape(Rm(r))),
                a = t.inboundNodes.indexOf(e)
              for (let e = 0; e < s.length; e++) n[`${t.name}_${a}_${e}`] = s[e]
            }
          }
        const s = [],
          a = []
        for (let e = 0; e < this.outputLayers.length; e++) {
          const t = this.outputLayers[e],
            n = this.outputLayersNodeIndices[e],
            r = this.outputLayersTensorIndices[e],
            s = `${t.name}_${n}_${r}`
          a.push(s)
        }
        for (let e = 0; e < a.length; e++) {
          const t = a[e]
          $m(t in n), s.push(n[t])
        }
        return Rm(s)
      }
      runInternalGraph(e, t) {
        null == t && (t = Cm(null, e.length))
        const n = {}
        for (let r = 0; r < this.inputs.length; ++r) {
          const s = this.inputs[r],
            a = e[r],
            i = t[r]
          n[s.id] = [a, i]
        }
        const r = Object.keys(this.nodesByDepth)
          .map((e) => parseInt(e, 10))
          .sort(zm)
        for (const e of r) {
          const t = this.nodesByDepth[e]
          for (const e of t) {
            const t = e.outboundLayer,
              r = e.inputTensors,
              s = e.outputTensors,
              a = new Array()
            for (const e of r) e.id in n && a.push(n[e.id])
            if (a.length === r.length) {
              let r,
                i,
                o,
                l,
                u = {}
              if ((null != e.callArgs && (u = e.callArgs), 1 === a.length)) {
                const [e, n] = a[0]
                null == u.mask && (u.mask = n),
                  (o = Am(t.call(e, u))),
                  (l = Am(t.computeMask(e, n))),
                  (r = [e]),
                  (i = [n])
              } else
                (r = a.map((e) => e[0])),
                  (i = a.map((e) => e[1])),
                  null == u.mask && (u.mask = i),
                  (o = Am(t.call(r, u))),
                  (l = Am(t.computeMask(r, i)))
              if (t.activityRegularizer)
                throw new Nm(
                  'LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.',
                )
              for (let e = 0; e < s.length; ++e) {
                const t = s[e],
                  r = o[e],
                  a = l[e]
                n[t.id] = [r, a]
              }
            }
          }
        }
        const s = [],
          a = [],
          i = []
        for (const e of this.outputs) {
          $m(e.id in n, `Could not compute output ${e.name} : ${e.id}`)
          const [t, r] = n[e.id]
          i.push(t.shape), s.push(t), a.push(r)
        }
        return [s, a, i]
      }
      buildNodeConversionMap(e) {
        const t = {}
        let n
        for (const e of this.layers) {
          n = e instanceof kb ? 1 : 0
          for (let r = 0; r < e.inboundNodes.length; r++) {
            const s = kb.nodeKey(e, r)
            this.containerNodes.has(s) && ((t[s] = n), (n += 1))
          }
        }
        return t
      }
      getLayer(e, t) {
        if (null != t) {
          if (this.layers.length <= t)
            throw new Im(
              `Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`,
            )
          return this.layers[t]
        }
        if (null == e)
          throw new Im('Provide either a layer name or layer index')
        for (const t of this.layers) if (t.name === e) return t
        throw new Im(`No such layer: ${e}`)
      }
      calculateLosses() {
        return qi(() => {
          const e = []
          for (const t of this.layers)
            for (let n = 0; n < t.inboundNodes.length; ++n) {
              const r = kb.nodeKey(t, n)
              this.containerNodes.has(r) && e.push(...t.calculateLosses())
            }
          return e
        })
      }
      getConfig() {
        const e = { name: this.name },
          t = this.buildNodeConversionMap(this.layers),
          n = []
        for (const e of this.layers) {
          const r = e.getClassName(),
            s = e.getConfig(),
            a = []
          for (let n = 0; n < e.inboundNodes.length; n++) {
            const r = e.inboundNodes[n],
              s = kb.nodeKey(e, n)
            let i = {}
            if (this.containerNodes.has(s)) {
              if (r.callArgs)
                try {
                  JSON.stringify(r.callArgs), (i = r.callArgs)
                } catch (t) {
                  console.warn(
                    `Layer ${e.name} was passed non-serializable keyword arguments: ${r.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`,
                  ),
                    (i = {})
                }
              if (r.inboundLayers.length > 0) {
                const e = []
                for (let n = 0; n < r.inboundLayers.length; n++) {
                  const s = r.inboundLayers[n],
                    a = r.nodeIndices[n],
                    o = r.tensorIndices[n]
                  let l = t[kb.nodeKey(s, a)]
                  null == l && (l = 0), e.push([s.name, l, o, i])
                }
                a.push(e)
              }
            }
          }
          const i = {}
          ;(i.name = e.name),
            (i.className = r),
            (i.config = s),
            (i.inboundNodes = a),
            n.push(i)
        }
        e.layers = n
        const r = []
        for (let e = 0; e < this.inputLayers.length; e++) {
          const n = this.inputLayers[e],
            s = this.inputLayersNodeIndices[e],
            a = kb.nodeKey(n, s)
          if (!this.containerNodes.has(a)) continue
          let i = t[a]
          null == i && (i = 0)
          const o = this.inputLayersTensorIndices[e]
          r.push([n.name, i, o])
        }
        e.inputLayers = r
        const s = []
        for (let e = 0; e < this.outputLayers.length; e++) {
          const n = this.outputLayers[e],
            r = this.outputLayersNodeIndices[e],
            a = kb.nodeKey(n, r)
          if (!this.containerNodes.has(a)) continue
          let i = t[a]
          null == i && (i = 0)
          const o = this.outputLayersTensorIndices[e]
          s.push([n.name, i, o])
        }
        return (e.outputLayers = s), e
      }
      static fromConfig(e, t, n = {}, r = !1) {
        const s = {},
          a = {}
        function i(e, t) {
          e.name in a ? a[e.name].push(t) : (a[e.name] = [t])
        }
        function o(e, t) {
          const n = []
          let r
          for (const a of t) {
            const o = a[0],
              l = a[1],
              u = a[2]
            if (((r = null == a[3] ? {} : a[3]), !(o in s))) return void i(e, t)
            const c = s[o]
            if (c.inboundNodes.length <= l) return void i(e, t)
            const h = c.inboundNodes[l]
            n.push(h.outputTensors[u])
          }
          n.length > 0 && e.apply(Rm(n), r)
        }
        function l(e) {
          const n = e.name,
            a = qy(e, null != t.customObjects ? t.customObjects : {})
          a.setFastWeightInitDuringBuild(r),
            (s[n] = a),
            e.inboundNodes.forEach((e) => {
              if (!(e instanceof Array))
                throw new Im(
                  `Corrupted configuration, expected array for nodeData: ${e}`,
                )
              i(a, e)
            })
        }
        const u = t.name,
          c = t.layers
        for (const e of c) l(e)
        for (; !Bm(a); )
          for (const e of c) {
            const t = s[e.name]
            if (t.name in a) {
              const e = a[t.name]
              delete a[t.name]
              for (const n of e) o(t, n)
            }
          }
        const h = [],
          p = [],
          d = t.inputLayers
        for (const e of d) {
          const t = e[0],
            n = e[1],
            r = e[2]
          $m(t in s)
          const a = s[t].inboundNodes[n].outputTensors
          h.push(a[r])
        }
        const f = t.outputLayers
        for (const e of f) {
          const t = e[0],
            n = e[1],
            r = e[2]
          $m(t in s)
          const a = s[t].inboundNodes[n].outputTensors
          p.push(a[r])
        }
        return new e({ inputs: h, outputs: p, name: u })
      }
      get stateful() {
        if (this._stateful)
          throw new Im(
            'Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.',
          )
        for (const e of this.layers) if (e.stateful) return !0
        return !1
      }
      resetStates() {
        qi(() => {
          this.layers.forEach((e) => {
            e.stateful && e.resetStates()
          })
        })
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ function Ib(e, t) {
      return (function (e, t, n) {
        const r = t.length
        if (null == e || (Array.isArray(e) && 0 === e.length))
          return t.map((e) => null)
        if (1 === r)
          return Array.isArray(e) && 1 === e.length
            ? e
            : 'object' == typeof e && t[0] in e
              ? [e[t[0]]]
              : [e]
        if (Array.isArray(e)) {
          if (e.length !== r)
            throw new Error(
              `Provided ${n} is an array of ${e.length} element(s), but the model has ${r} outputs. Make sure a set of weights is provided for each model output.`,
            )
          return e
        }
        if (
          'object' == typeof e &&
          Object.keys(e).length > 0 &&
          'object' == typeof e[Object.keys(e)[0]]
        ) {
          const n = []
          return (
            t.forEach((t) => {
              t in e ? n.push(e[t]) : n.push(null)
            }),
            n
          )
        }
        throw new Error(
          `The model has multiple (${r}) outputs, so ${n} must be either an array with ${r} elements or an object with ${t} keys. Provided ${n} not understood: ${JSON.stringify(e)}`,
        )
      })(e, t, 'classWeight')
    }
    async function Nb(e, t, n, r) {
      if (null != t || null != r)
        throw new Error('Support sampleWeight is not implemented yet')
      if (null != n) {
        const t = qi(() => {
            if (1 === e.shape.length) return Xa(e)
            if (2 === e.shape.length) {
              if (e.shape[1] > 1) return oo(e, 1)
              if (1 === e.shape[1]) return Eo(e, [e.shape[0]])
              throw new Error(
                `Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`,
              )
            }
            throw new Error(
              `Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`,
            )
          }),
          r = Array.from(await t.data())
        Ki(t)
        const s = []
        return (
          r.forEach((e) => {
            if (null == n[e])
              throw new Error(
                `classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`,
              )
            s.push(n[e])
          }),
          Bc(s, 'float32')
        )
      }
      return null
    }
    function Sb(e, t) {
      return Do(e, t)
    }
    function Tb(e, t) {
      let n, r
      const s = t
      ;(n = s.xs),
        (r = s.ys),
        O(
          null != n && null != r,
          () =>
            `A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`,
        )
      const a = Cb('input', e.inputNames, n),
        i = Cb('output', e.outputNames, r),
        o = a[0].shape[0]
      O(
        a.length === e.inputs.length,
        () =>
          `LayersModel has ${e.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`,
      ),
        O(
          i.length === e.outputs.length,
          () =>
            `LayersModel has ${e.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`,
        )
      for (let t = 0; t < a.length; t++)
        O(
          a[t].shape[0] === o,
          () =>
            `Batch size mismatch: input ${e.inputNames[t]} has ${a[t].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`,
        )
      for (let t = 0; t < i.length; t++)
        O(
          i[t].shape[0] === o,
          () =>
            `Batch size mismatch: output ${e.outputNames[t]} has ${i[t].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`,
        )
      return { xs: a, ys: i }
    }
    function Cb(e, t, n) {
      if (n instanceof gs) return [n]
      if (Array.isArray(n))
        return (
          O(
            n.length === t.length,
            () =>
              `Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`,
          ),
          n
        )
      {
        const r = []
        for (const s of t) {
          if (null == n[s])
            throw new Im(
              `The feature data generated by the dataset lacks the required ${e} key '${s}'.`,
            )
          r.push(n[s])
        }
        return r
      }
    }
    function $b(e) {
      return 'function' == typeof e.iterator
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ function Eb(e) {
      O(
        e > 0 && Number.isInteger(e),
        () => `batchSize is required to be a positive integer, but got ${e}`,
      )
    }
    function Rb(e, t, n) {
      return null == e
        ? [null]
        : Array.isArray(e)
          ? e.map((e) => wg(e, t, n - t))
          : wg(e, t, n - t)
    }
    function Ab(e, t) {
      return qi(() =>
        null == e
          ? null
          : Array.isArray(e)
            ? e.map((e) => Ab(e, t))
            : $g(e, 'int32' === t.dtype ? t : Ka(t, 'int32')),
      )
    }
    function _b(e, t) {
      const n = []
      let r = 0,
        s = null
      for (; r < e; ) (s = r + t), s >= e && (s = e), n.push([r, s]), (r = s)
      return n
    }
    function Fb(e) {
      const t = []
      e instanceof gs && (e = [e])
      for (let n = 0; n < e.length; ++n) {
        const r = e[n]
        if (1 === r.rank) t.push(xg(r, 1))
        else {
          if (0 === r.rank)
            throw new Error(
              'Expected tensor to be at least 1D, but received a 0D tensor (scalar).',
            )
          t.push(r)
        }
      }
      return t
    }
    function Db(e, t) {
      if (null == e) return
      const n = []
      if (t instanceof gs) n.push(t.id)
      else if (Array.isArray(t)) t.forEach((e) => n.push(e.id))
      else if (null != t)
        for (const e in t) {
          const r = t[e]
          n.push(r.id)
        }
      const r = []
      if (e instanceof gs) -1 === n.indexOf(e.id) && r.push(e)
      else if (Array.isArray(e))
        e.forEach((e) => {
          ;-1 === n.indexOf(e.id) && r.push(e)
        })
      else if (null != e)
        for (const t in e) {
          const s = e[t]
          ;-1 === n.indexOf(s.id) && r.push(s)
        }
      r.forEach((e) => {
        e.isDisposed || e.dispose()
      })
    }
    function Ob(e) {
      return Array.isArray(e)
    }
    function Mb(e) {
      return (
        !(
          /**
           * @license
           * Copyright 2018 Google LLC
           *
           * Use of this source code is governed by an MIT-style
           * license that can be found in the LICENSE file or at
           * https://opensource.org/licenses/MIT.
           * =============================================================================
           */ (function (e) {
            return e instanceof gs
          })(e)
        ) && !Ob(e)
      )
    }
    function Lb(e, t, n, r = !0, s = '') {
      if (null == t || 0 === t.length) {
        if (null != e) {
          let t = !1
          if (Ob(e) && e.length > 0) t = !0
          else if (Mb(e)) {
            for (const n in e)
              if (e.hasOwnProperty(n)) {
                t = !0
                break
              }
          } else t = !0
          if (t)
            throw new Im(
              `Error when checking model ${s} expected no data, but got ${e}`,
            )
        }
        return []
      }
      if (null == e) return t.map((e) => null)
      let a
      if (Mb(e)) {
        a = []
        for (const n of t) {
          if (null == e[n])
            throw new Im(
              `No data provided for "${n}". Need data for each key in: ${t}`,
            )
          a.push(e[n])
        }
      } else if (Ob(e)) {
        if (e.length !== t.length)
          throw new Im(
            `Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`,
          )
        a = e
      } else {
        if (t.length > 1)
          throw new Im(
            `The model ${s} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`,
          )
        a = [e]
      }
      if (((a = Fb(a)), null != n))
        for (let e = 0; e < t.length; ++e) {
          if (null == n[e]) continue
          const i = a[e]
          if (i.shape.length !== n[e].length)
            throw new Im(
              `Error when checking ${s}: expected ${t[e]} to have ${n[e].length} dimension(s). but got array with shape ${i.shape}`,
            )
          for (let t = 0; t < n[e].length; ++t) {
            if (0 === t && !r) continue
            const a = i.shape[t],
              o = n[e][t]
            if (null != o && o >= 0 && a !== o)
              throw new Im(
                `${s} expected a batch of elements where each example has shape [${n[e].slice(1, n[e].length)}] (i.e.,tensor shape [*,${n[e].slice(1, n[e].length)}]) but the ${s} received an input with ${i.shape[0]} examples, each with shape [${i.shape.slice(1, i.shape.length)}] (tensor shape [${i.shape}])`,
              )
          }
        }
      return a
    }
    function zb(e, t, n, r = !0, s = '') {
      let a
      if (Array.isArray(e)) {
        if (e.length !== t.length)
          throw new Im(
            `Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`,
          )
        a = e
      } else {
        if (t.length > 1)
          throw new Im(
            `The model expects ${t.length} ${s} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`,
          )
        a = [e]
      }
      if (null != n)
        for (let e = 0; e < t.length; ++e) {
          if (null == n[e]) continue
          const i = a[e]
          if (i.shape.length !== n[e].length)
            throw new Im(
              `Error when checking ${s}: expected ${t[e]} to have ${n[e].length} dimension(s), but got array with shape ${JSON.stringify(i.shape)}`,
            )
          for (let a = 0; a < n[e].length; ++a) {
            if (0 === a && !r) continue
            const o = i.shape[a],
              l = n[e][a]
            if (null != l && l !== o)
              throw new Im(
                `Error when checking ${s}: expected ${t[e]} to have shape ${JSON.stringify(n[e])} but got array with shape ${JSON.stringify(i.shape)}.`,
              )
          }
        }
    }
    class Pb extends kb {
      constructor(e) {
        super(e), (this.isTraining = !1)
      }
      summary(e, t, n = console.log) {
        if (!this.built)
          throw new Im(
            'This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).',
          )
        !(function (e, t, n, r = console.log) {
          const s = (function (e) {
              let t = !0
              const n = [],
                r = []
              for (const t in e.nodesByDepth) n.push(e.nodesByDepth[t])
              for (const e of n) {
                if (
                  e.length > 1 ||
                  (1 === e.length && e[0].inboundLayers.length > 1)
                ) {
                  t = !1
                  break
                }
                r.push(...e)
              }
              if (t)
                for (const n of e.layers) {
                  let e = !1
                  for (const s of n.inboundNodes)
                    if (-1 !== r.indexOf(s)) {
                      if (e) {
                        t = !1
                        break
                      }
                      e = !0
                    }
                  if (!t) break
                }
              return t
            })(e),
            a = ['Layer (type)', 'Input Shape', 'Output shape', 'Param #']
          let i
          if (
            (s
              ? ((t = t || 90), (n = n || [0.32, 0.61, 0.89, 1]))
              : ((t = t || 115), (n = n || [0.24, 0.48, 0.7, 0.8, 1])),
            n[n.length - 1] <= 1 && (n = n.map((e) => Math.floor(t * e))),
            !s)
          ) {
            a.push('Receives inputs'), (i = [])
            for (const t in e.nodesByDepth) i.push(...e.nodesByDepth[t])
          }
          r('_'.repeat(t)), mb(a, n, r), r('='.repeat(t))
          const o = e.layers
          for (let e = 0; e < o.length; ++e)
            s ? gb(o[e], n, r) : yb(o[e], n, i, r),
              r((e === o.length - 1 ? '=' : '_').repeat(t))
          e.checkTrainableWeightsConsistency()
          const l = (function (e) {
              let t
              return (
                (t =
                  null != e.collectedTrainableWeights
                    ? iy(e.collectedTrainableWeights)
                    : iy(e.trainableWeights)),
                t
              )
            })(e),
            u = iy(e.nonTrainableWeights)
          r(`Total params: ${l + u}`),
            r(`Trainable params: ${l}`),
            r(`Non-trainable params: ${u}`),
            r('_'.repeat(t))
        })(this, e, t, n)
      }
      compile(e) {
        if (
          (null == e.loss && (e.loss = []),
          (this.loss = e.loss),
          'string' == typeof e.optimizer)
        )
          (this.optimizer_ =
            /**
             * @license
             * Copyright 2018 Google LLC
             *
             * Use of this source code is governed by an MIT-style
             * license that can be found in the LICENSE file or at
             * https://opensource.org/licenses/MIT.
             * =============================================================================
             */
            (function (e) {
              const t = {
                Adagrad: () => Rp.adagrad(0.01),
                Adadelta: () => Rp.adadelta(1, 0.95, yg()),
                Adam: () => Rp.adam(0.001, 0.9, 0.999, yg()),
                Adamax: () => Rp.adamax(0.002, 0.9, 0.999, yg(), 0),
                RMSProp: () => Rp.rmsprop(0.001, 0.9, 0, yg()),
                SGD: () => Rp.sgd(0.01),
              }
              if (
                ((t.adagrad = t.Adagrad),
                (t.adadelta = t.Adadelta),
                (t.adam = t.Adam),
                (t.adamax = t.Adamax),
                (t.rmsprop = t.RMSProp),
                (t.sgd = t.SGD),
                e in t)
              )
                return t[e]()
              throw new Im(`Unknown Optimizer ${e}`)
            })(e.optimizer)),
            (this.isOptimizerOwned = !0)
        else {
          if (!(e.optimizer instanceof Qi))
            throw new Im(
              'User-defined optimizer must be an instance of tf.Optimizer.',
            )
          ;(this.optimizer_ = e.optimizer), (this.isOptimizerOwned = !1)
        }
        let t = []
        if (
          Array.isArray(e.loss) ||
          'string' == typeof e.loss ||
          'function' == typeof e.loss
        )
          if (Array.isArray(e.loss)) {
            if (e.loss.length !== this.outputs.length)
              throw new Im(
                `When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`,
              )
            const n = e.loss
            t = n.map((e) => rb(e))
          } else {
            const n = rb(e.loss)
            this.outputs.forEach((e) => {
              t.push(n)
            })
          }
        else {
          e.loss = e.loss
          for (const t in e.loss)
            if (-1 === this.outputNames.indexOf(t))
              throw new Im(
                `Unknown entry in loss dictionary: "${t}". Only expected the following keys: ${this.outputNames}`,
              )
          for (const n of this.outputNames)
            null == e.loss[n] &&
              console.warn(
                `Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`,
              ),
              t.push(rb(e.loss[n]))
        }
        ;(this.lossFunctions = t),
          (this.feedOutputNames = []),
          (this.feedOutputShapes = []),
          (this.feedLossFns = [])
        for (let e = 0; e < this.outputs.length; ++e) {
          const t = this.internalOutputShapes[e],
            n = this.outputNames[e]
          this.feedOutputNames.push(n),
            this.feedOutputShapes.push(t),
            this.feedLossFns.push(this.lossFunctions[e])
        }
        const n = []
        ;(this.metrics = e.metrics),
          (this.metricsNames = ['loss']),
          (this.metricsTensors = []),
          ig('loss', () => {
            for (let e = 0; e < this.outputs.length; ++e) {
              if (-1 !== n.indexOf(e)) continue
              const t = this.lossFunctions[e]
              this.outputs.length > 1 &&
                (this.metricsTensors.push([t, e]),
                this.metricsNames.push(this.outputNames[e] + '_loss'))
            }
          })
        const r = (function (e, t) {
            if (null == e || (Array.isArray(e) && 0 === e.length))
              return t.map((e) => [])
            let n
            if ('string' == typeof e || 'function' == typeof e) n = [e]
            else {
              if (!Array.isArray(e) && 'object' != typeof e)
                throw new TypeError(
                  `Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`,
                )
              n = e
            }
            if (Array.isArray(n)) return t.map((e) => n)
            {
              const e = []
              for (const r of t) {
                let t = n.hasOwnProperty(r) ? n[r] : []
                Array.isArray(t) || (t = [t]), e.push(t)
              }
              return e
            }
          })(e.metrics, this.outputNames),
          s = (e, t, n) => {
            this.outputNames.length > 1 && (t = this.outputNames[e] + '_' + t),
              this.metricsNames.push(t),
              this.metricsTensors.push([n, e])
          }
        ig('metric', () => {
          for (let e = 0; e < this.outputs.length; ++e)
            -1 === n.indexOf(e) &&
              ((t) => {
                let n, r, a
                for (const i of t) {
                  if (
                    'string' == typeof i &&
                    -1 !== ['accuracy', 'acc', 'crossentropy', 'ce'].indexOf(i)
                  ) {
                    const t = this.internalOutputShapes[e]
                    let s
                    1 === t[t.length - 1] || this.lossFunctions[e] === eb
                      ? -1 !== ['accuracy', 'acc'].indexOf(i)
                        ? (r = sb)
                        : -1 !== ['crossentropy', 'ce'].indexOf(i) && (r = ib)
                      : this.lossFunctions[e] === Qy
                        ? -1 !== ['accuracy', 'acc'].indexOf(i)
                          ? (r = ob)
                          : -1 !== ['crossentropy', 'ce'].indexOf(i) && (r = ub)
                        : -1 !== ['accuracy', 'acc'].indexOf(i)
                          ? (r = ab)
                          : -1 !== ['crossentropy', 'ce'].indexOf(i) &&
                            (r = lb),
                      -1 !== ['accuracy', 'acc'].indexOf(i)
                        ? (s = 'acc')
                        : -1 !== ['crossentropy', 'ce'].indexOf(i) &&
                          (s = 'ce'),
                      (a = r),
                      (n = '' + s)
                  } else {
                    const e = hb(i)
                    ;(a = e), (n = '' + pb(i))
                  }
                  let t
                  ig(n, () => {
                    t = a
                  }),
                    s(e, n, t)
                }
              })(r[e])
        }),
          (this.collectedTrainableWeights = this.trainableWeights)
      }
      checkTrainableWeightsConsistency() {
        null != this.collectedTrainableWeights &&
          this.trainableWeights.length !==
            this.collectedTrainableWeights.length &&
          console.warn(
            'Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?',
          )
      }
      evaluate(e, t, n = {}) {
        const r = null == n.batchSize ? 32 : n.batchSize
        Eb(r)
        const s = this.standardizeUserDataXY(e, t, !0, r)
        try {
          const e = s[0].concat(s[1])
          this.makeTestFunction()
          const t = this.testFunction
          return Rm(this.testLoop(t, e, r, n.verbose, n.steps))
        } finally {
          Db(s[0], e), Db(s[1], t)
        }
      }
      async evaluateDataset(e, t) {
        return (
          this.makeTestFunction(),
          (async function (e, t, n) {
            const r = null != (n = n || {}).batches,
              s = e.testFunction
            let a = []
            if (n.verbose > 0)
              throw new Nm('Verbose mode is not implemented yet.')
            O(
              !r || (n.batches > 0 && Number.isInteger(n.batches)),
              () =>
                `Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`,
            )
            const i = 'function' == typeof t.next ? t : await t.iterator()
            let o = 0,
              l = 0
            for (; !r || l < n.batches; ) {
              const t = await i.next()
              if (
                ((a = qi(() => {
                  if (t.value) {
                    const { xs: n, ys: r } = Tb(e, t.value),
                      i = n.concat(r),
                      u = qi(() => s(i))
                    if ((Ki(i), 0 === l))
                      for (let e = 0; e < u.length; ++e) a.push(Ji(0))
                    const c = i[0].shape[0]
                    for (let e = 0; e < u.length; ++e) {
                      const t = u[e],
                        n = a[e]
                      ;(a[e] = qi(() => ro(a[e], Do(c, t)))), l > 0 && Ki(n)
                    }
                    Ki(u), (o += c), ++l
                  }
                  return a
                })),
                t.done)
              ) {
                r &&
                  console.warn(
                    `Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`,
                  )
                break
              }
            }
            for (let e = 0; e < a.length; ++e) {
              const t = a[e]
              ;(a[e] = yl(a[e], o)), Ki(t)
            }
            return Rm(a)
          })(this, e, t)
        )
      }
      checkNumSamples(e, t, n, r = 'steps') {
        let s
        if (null != n) {
          if (((s = null), null != t))
            throw new Im(
              `If ${r} is set, batchSize must be null or undefined.Got batchSize = ${t}`,
            )
        } else {
          if (null == e)
            throw new Im(
              `Either the input data should have a defined shape, or ${r} shoud be specified.`,
            )
          s = Array.isArray(e) ? e[0].shape[0] : e.shape[0]
        }
        return s
      }
      execute(e, t) {
        if (Array.isArray(t) && 0 === t.length)
          throw new Im('`outputs` is an empty Array, which is not allowed.')
        const n = Array.isArray(t),
          r = n ? t : [t],
          s = this.retrieveSymbolicTensors(r),
          a = new xy()
        if ((e instanceof gs && (e = [e]), Array.isArray(e))) {
          if (e.length !== this.inputs.length)
            throw new Im(
              `The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`,
            )
          for (let t = 0; t < this.inputs.length; ++t)
            a.add(this.inputs[t], e[t])
        } else
          for (const t of this.inputs) {
            const n = e[t.name]
            if (null == n)
              throw new Im(
                `No value is provided for the model's input ${t.name}`,
              )
            a.add(t, n)
          }
        const i = ky(s, a)
        return n ? i : i[0]
      }
      retrieveSymbolicTensors(e) {
        const t = Cm(null, e.length)
        let n = e.length
        for (const r of this.layers) {
          const s = Array.isArray(r.output) ? r.output : [r.output],
            a = s.map((e) => e.name)
          for (let r = 0; r < e.length; ++r) {
            const i = a.indexOf(e[r])
            if ((-1 !== i && ((t[r] = s[i]), n--), 0 === n)) break
          }
          if (0 === n) break
        }
        if (n > 0) {
          const n = []
          throw (
            (t.forEach((t, r) => {
              null == t && n.push(e[r])
            }),
            new Im(
              `Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`,
            ))
          )
        }
        return t
      }
      predictLoop(e, t = 32, n = !1) {
        return qi(() => {
          const r = this.checkNumSamples(e)
          if (n) throw new Nm('Verbose predictLoop() is not implemented yet.')
          const s = _b(r, t),
            a = this.outputs.map((e) => [])
          for (let t = 0; t < s.length; ++t)
            qi(() => {
              const n = s[t][0],
                r = s[t][1],
                a = Rb(e, n, r),
                i = []
              if (Array.isArray(a))
                for (let e = 0; e < a.length; ++e)
                  i.push({ key: this.inputs[e], value: a[e] })
              else i.push({ key: this.inputs[0], value: a })
              const o = new xy(i)
              return ky(this.outputs, o)
            }).forEach((e, t) => a[t].push(e))
          return Rm(a.map((e) => _o(e, 0)))
        })
      }
      predict(e, t = {}) {
        const n = Fb(e)
        zb(n, this.inputNames, this.feedInputShapes, !1)
        try {
          const e = null == t.batchSize ? 32 : t.batchSize
          return Eb(e), this.predictLoop(n, e)
        } finally {
          Db(n, e)
        }
      }
      predictOnBatch(e) {
        zb(e, this.inputNames, this.feedInputShapes, !0)
        const t = (Array.isArray(e) ? e[0] : e).shape[0]
        return this.predictLoop(e, t)
      }
      standardizeUserDataXY(e, t, n = !0, r) {
        if (null == this.optimizer_)
          throw new km(
            'You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).',
          )
        const s = []
        for (let e = 0; e < this.feedOutputShapes.length; ++e) {
          const t = this.feedOutputShapes[e]
          this.feedLossFns[e] === Qy
            ? s.push(t.slice(0, t.length - 1).concat([1]))
            : s.push(t)
        }
        if (
          ((function (e, t) {
            const n = Pm(e.map((e) => e.shape[0]))
            n.sort()
            const r = Pm(t.map((e) => e.shape[0]))
            if ((r.sort(), n.length > 1))
              throw new Im(
                `All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((e) => e.shape))}`,
              )
            if (r.length > 1)
              throw new Im(
                `All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((e) => e.shape))}`,
              )
            if (n.length > 0 && r.length > 0 && !B(n, r))
              throw new Im(
                `Input Tensors should have the same number of samples as target Tensors. Found ${n[0]} input sample(s) and ${r[0]} target sample(s).`,
              )
          })(
            (e = Lb(e, this.feedInputNames, this.feedInputShapes, !1, 'input')),
            (t = Lb(t, this.feedOutputNames, s, !1, 'target')),
          ),
          (function (e, t, n) {
            const r = [Xy, eb, Jy]
            for (let s = 0; s < e.length; ++s) {
              const a = e[s],
                i = t[s],
                o = n[s]
              if (null != i) {
                if (i === Jy && 1 === a.shape[a.shape.length - 1])
                  throw new Im(
                    `You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`,
                  )
                if (-1 !== r.indexOf(i)) {
                  const e = a.shape.slice(1),
                    t = o.slice(1)
                  for (let n = 0; n < e.length; ++n) {
                    const r = e[n],
                      s = t[n]
                    if (null != s && r !== s)
                      throw new Im(
                        `A target Tensor with shape ${a.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`,
                      )
                  }
                }
              }
            }
          })(t, this.feedLossFns, this.feedOutputShapes),
          this.stateful && null != r && r > 0 && e[0].shape[0] % r != 0)
        )
          throw new Im(
            `In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${r}. Found: ${e[0].shape[0]} sample(s).`,
          )
        return [e, t]
      }
      async standardizeUserData(e, t, n, r, s = !0, a) {
        const [i, o] = this.standardizeUserDataXY(e, t, s, a)
        if (null != n) throw new Error('sample weight is not supported yet.')
        let l = null
        if (null != r) {
          const e = Ib(r, this.outputNames)
          l = []
          for (let t = 0; t < e.length; ++t) l.push(await Nb(o[t], null, e[t]))
        }
        return [i, o, l]
      }
      testLoop(e, t, n, r = 0, s) {
        return qi(() => {
          const a = this.checkNumSamples(t, n, s, 'steps'),
            i = []
          if (r > 0) throw new Nm('Verbose mode is not implemented yet.')
          if (null != s)
            throw new Nm('steps mode in testLoop() is not implemented yet')
          {
            const r = _b(a, n),
              s = Bc(mg(0, a))
            for (let n = 0; n < r.length; ++n) {
              const a = r[n][0],
                o = r[n][1],
                l = wg(s, a, o - a),
                u = Ab(t, l),
                c = e(u)
              if (0 === n) for (let e = 0; e < c.length; ++e) i.push(Ji(0))
              for (let e = 0; e < c.length; ++e) {
                const t = c[e]
                i[e] = ro(i[e], Do(o - a, t))
              }
            }
            for (let e = 0; e < i.length; ++e) i[e] = yl(i[e], a)
          }
          return i
        })
      }
      getDedupedMetricsNames() {
        const e = this.metricsNames,
          t = []
        for (let n = 0; n < e.length; ++n) {
          const r = e[n]
          let s = r
          Em(e, r) > 1 && (s += `_${Em(e.slice(0, n), r)}`), t.push(s)
        }
        return t
      }
      makeTrainFunction() {
        return (e) => {
          const t = [],
            n = e.slice(0, this.inputs.length),
            r = e.slice(
              this.inputs.length,
              this.inputs.length + this.outputs.length,
            ),
            s = e.slice(
              this.inputs.length + this.outputs.length,
              this.inputs.length + 2 * this.outputs.length,
            ),
            a = [],
            i = this.collectedTrainableWeights.map((e) => e.read())
          return [
            this.optimizer_.minimize(
              () => {
                const e = []
                for (let t = 0; t < this.inputs.length; ++t)
                  e.push({ key: this.inputs[t], value: n[t] })
                const i = new xy(e),
                  o = ky(this.outputs, i, { training: !0 })
                let l
                for (let e = 0; e < this.lossFunctions.length; ++e) {
                  let n = (0, this.lossFunctions[e])(r[e], o[e])
                  null != s[e] && (n = Sb(n, s[e]))
                  const a = Tu(n)
                  t.push(a), (l = 0 === e ? n : ro(l, n))
                }
                for (let e = 0; e < this.metricsTensors.length; ++e) {
                  let n
                  if (this.outputs.length > 1 && e < this.outputs.length)
                    n = t[e]
                  else {
                    const t = this.metricsTensors[e][0],
                      s = this.metricsTensors[e][1]
                    n = Tu(t(r[s], o[s]))
                  }
                  Xi(n), a.push(n)
                }
                return (
                  (l = Tu(l)),
                  this.calculateLosses().forEach((e) => {
                    l = ro(l, e)
                  }),
                  l
                )
              },
              !0,
              i,
            ),
          ].concat(a)
        }
      }
      makeTestFunction() {
        this.testFunction = (e) =>
          qi(() => {
            const t = []
            let n
            const r = e.slice(0, this.inputs.length),
              s = e.slice(
                this.inputs.length,
                this.inputs.length + this.outputs.length,
              ),
              a = []
            for (let e = 0; e < this.inputs.length; ++e)
              a.push({ key: this.inputs[e], value: r[e] })
            const i = new xy(a),
              o = ky(this.outputs, i)
            for (let e = 0; e < this.lossFunctions.length; ++e) {
              const r = this.lossFunctions[e],
                a = Tu(r(s[e], o[e]))
              ;(n = 0 === e ? a : ro(n, a)), t.push(n)
            }
            for (let e = 0; e < this.metricsTensors.length; ++e) {
              const n = this.metricsTensors[e][0],
                r = this.metricsTensors[e][1],
                a = Tu(n(s[r], o[r]))
              t.push(a)
            }
            return t
          })
      }
      async fit(e, t, n = {}) {
        return (async function (e, t, n, r = {}) {
          if (e.isTraining)
            throw new Error(
              'Cannot start training because another fit() call is ongoing.',
            )
          let s, a, i, o, l, u, c, h, p
          e.isTraining = !0
          try {
            const d = null == r.batchSize ? 32 : r.batchSize
            Eb(d)
            const f = !1,
              m = await e.standardizeUserData(
                t,
                n,
                r.sampleWeight,
                r.classWeight,
                f,
                d,
              )
            ;(s = m[0]), (a = m[1]), (p = m[2])
            let g,
              y = !1
            if (null != r.validationData && r.validationData.length > 0) {
              if (((y = !0), 2 !== r.validationData.length))
                throw 3 === r.validationData.length
                  ? new Nm(
                      'validationData including sample weights is not supported yet.',
                    )
                  : new Im(
                      `When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${r.validationData} is invalid.`,
                    )
              ;(l = r.validationData[0]), (u = r.validationData[1])
              const t = !0,
                n = await e.standardizeUserData(l, u, null, null, t, d)
              ;(c = n[0]), (h = n[1]), (g = c.concat(h))
            } else if (
              null != r.validationSplit &&
              r.validationSplit > 0 &&
              r.validationSplit < 1
            ) {
              y = !0
              const e = Math.floor(s[0].shape[0] * (1 - r.validationSplit)),
                t = s[0].shape[0]
              ;(c = Rb(s, e, t)),
                (i = s),
                (s = Rb(s, 0, e)),
                (h = Rb(a, e, t)),
                (o = a),
                (a = Rb(a, 0, e)),
                (g = c.concat(h))
            } else null != r.validationSteps && (y = !0)
            const b = s.concat(a).concat(p)
            e.checkTrainableWeightsConsistency()
            const x = e.makeTrainFunction(),
              w = e.getDedupedMetricsNames()
            let v, k
            y
              ? (e.makeTestFunction(),
                (v = e.testFunction),
                (k = w.slice().concat(w.map((e) => 'val_' + e))))
              : ((v = null), (g = []), (k = w.slice()))
            const I = Gy(r.callbacks, r.yieldEvery),
              N = await (async function (
                e,
                t,
                n,
                r,
                s,
                a,
                i,
                o,
                l,
                u,
                c,
                h,
                p,
                d,
              ) {
                null == s && (s = 32),
                  null == a && (a = 1),
                  null == c && (c = !0),
                  null == p && (p = 0)
                let f = !1
                null != l && null != u && (f = !0)
                const m = e.checkNumSamples(n, s, d, 'steps_per_epoch')
                let g
                null != m && (g = mg(0, m)), null == i && (i = 1)
                const { callbackList: y, history: b } = jy(
                  o,
                  i,
                  a,
                  p,
                  m,
                  d,
                  s,
                  f,
                  h,
                )
                y.setModel(e),
                  (e.history = b),
                  await y.onTrainBegin(),
                  (e.stopTraining_ = !1)
                for (let i = p; i < a; ++i) {
                  await y.onEpochBegin(i)
                  const a = {}
                  {
                    if ('batch' === c)
                      throw new Nm('batch shuffling is not implemneted yet')
                    c && A(g)
                    const i = Bc(g),
                      o = _b(m, s)
                    for (let c = 0; c < o.length; ++c) {
                      const h = {}
                      if (
                        (await y.onBatchBegin(c, h),
                        qi(() => {
                          const p = o[c][0],
                            d = o[c][1],
                            m = wg(i, p, d - p)
                          ;(h.batch = c), (h.size = d - p)
                          const g = Ab(n, m),
                            y = t(g)
                          for (let e = 0; e < r.length; ++e) {
                            const t = r[e],
                              n = y[e]
                            ;(h[t] = n), Xi(n)
                          }
                          if (c === o.length - 1 && f) {
                            const t = e.testLoop(l, u, s)
                            for (let e = 0; e < r.length; ++e) {
                              const n = r[e],
                                s = t[e]
                              Xi(s), (a['val_' + n] = s)
                            }
                          }
                        }),
                        await y.onBatchEnd(c, h),
                        Ly(h),
                        e.stopTraining_)
                      )
                        break
                    }
                    i.dispose()
                  }
                  if ((await y.onEpochEnd(i, a), e.stopTraining_)) break
                }
                return (
                  await y.onTrainEnd(), await e.history.syncData(), e.history
                )
              })(
                e,
                x,
                b,
                w,
                d,
                r.epochs,
                r.verbose,
                I,
                v,
                g,
                r.shuffle,
                k,
                r.initialEpoch,
                null,
              )
            return N
          } finally {
            ;(e.isTraining = !1),
              Db(s, t),
              Db(a, n),
              Db(i, t),
              Db(o, n),
              Db(c, l),
              Db(h, u),
              null != p && Ki(p)
          }
        })(this, e, t, n)
      }
      async fitDataset(e, t) {
        return (async function (e, t, n) {
          const r = null != n.batchesPerEpoch
          if (
            (O(
              null != e.optimizer,
              () =>
                'You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).',
            ),
            O(
              null != n,
              () =>
                'For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.',
            ),
            O(
              null != n.epochs && n.epochs > 0 && Number.isInteger(n.epochs),
              () =>
                `For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`,
            ),
            O(
              !r ||
                (n.batchesPerEpoch > 0 && Number.isInteger(n.batchesPerEpoch)),
              () =>
                `For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`,
            ),
            O(
              null == n.validationSplit,
              () =>
                '`validationSplit` is not supported by `fitDataset()`. Use validationData instead.',
            ),
            e.isTraining)
          )
            throw new Error(
              'Cannot start training because another fit() call is ongoing.',
            )
          e.isTraining = !0
          try {
            const s = null != n.validationData
            let a, i
            if (s)
              if ($b(n.validationData))
                O(
                  null == n.validationBatches ||
                    (n.validationBatches > 0 &&
                      Number.isInteger(n.validationBatches)),
                  () =>
                    `For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`,
                )
              else {
                const e = (function (e) {
                  if (3 === e.length)
                    throw new Nm(
                      'Validation with sample weights is not implemented yet.',
                    )
                  return { xs: e[0], ys: e[1] }
                })(n.validationData)
                ;(a = e.xs), (i = e.ys)
              }
            const o = e.makeTrainFunction(),
              l = e.getDedupedMetricsNames()
            let u
            u = s ? l.slice().concat(l.map((e) => 'val_' + e)) : l.slice()
            const c = Gy(n.callbacks, n.yieldEvery),
              h = null == n.verbose ? 1 : n.verbose,
              { callbackList: p, history: d } = jy(
                c,
                h,
                n.epochs,
                null,
                null,
                (function (e, t) {
                  let n = null
                  return (
                    null != t.batchesPerEpoch
                      ? (n = t.batchesPerEpoch)
                      : Number.isFinite(e.size) && (n = e.size),
                    n
                  )
                })(t, n),
                null,
                s,
                u,
              )
            p.setModel(e),
              (e.history = d),
              await p.onTrainBegin(),
              (e.stopTraining_ = !1)
            let f = null == n.initialEpoch ? 0 : n.initialEpoch,
              m = await t.iterator()
            for (; f < n.epochs; ) {
              const u = {}
              await p.onEpochBegin(f)
              let c = 0,
                h = 0
              for (
                r || (m = await t.iterator());
                !r || c < n.batchesPerEpoch;

              ) {
                const t = await m.next()
                if (r && t.done) {
                  console.warn(
                    `You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${c} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, ` +
                      n.batchesPerEpoch * n.epochs +
                      ' batches). You may need to use the repeat() function when building your dataset.',
                  )
                  break
                }
                if (null != t.value) {
                  const { xs: r, ys: s } = Tb(e, t.value),
                    a = {}
                  ;(a.batch = h),
                    (a.size = r[0].shape[0]),
                    await p.onBatchBegin(h, a)
                  const i = []
                  if (null != n.classWeight) {
                    const t = Ib(n.classWeight, e.outputNames)
                    for (let e = 0; e < t.length; ++e)
                      i.push(await Nb(s[e], null, t[e]))
                  }
                  const u = r.concat(s).concat(i),
                    d = o(u)
                  Ki(u)
                  for (let e = 0; e < l.length; ++e) {
                    const t = l[e],
                      n = d[e]
                    ;(a[t] = n), Xi(n)
                  }
                  await p.onBatchEnd(h, a), Ly(a), h++, c++
                }
                if (r ? c >= n.batchesPerEpoch : t.done) {
                  if (s) {
                    let t
                    t = $b(n.validationData)
                      ? Am(
                          await e.evaluateDataset(n.validationData, {
                            batches: n.validationBatches,
                          }),
                        )
                      : Am(
                          e.evaluate(a, i, {
                            batchSize:
                              null == n.validationBatchSize
                                ? 32
                                : n.validationBatchSize,
                            verbose: 0,
                          }),
                        )
                    for (let n = 0; n < e.metricsNames.length; ++n)
                      u[`val_${e.metricsNames[n]}`] = t[n]
                  }
                  break
                }
                if (e.stopTraining_) break
              }
              if ((await p.onEpochEnd(f, u), f++, e.stopTraining_)) break
            }
            return await p.onTrainEnd(), await e.history.syncData(), e.history
          } finally {
            e.isTraining = !1
          }
        })(this, e, t)
      }
      async trainOnBatch(e, t) {
        const n = await this.standardizeUserData(e, t),
          r = n[0],
          s = n[1],
          a = this.makeTrainFunction()(r.concat(s)),
          i = []
        for (const e of a) {
          const t = await e.data()
          i.push(t[0])
        }
        return Ki(a), Db(n[0], e), Db(n[1], t), Rm(i)
      }
      getNamedWeights(e) {
        const t = [],
          n = null != e && e.trainableOnly,
          r = n ? this.trainableWeights : this.weights,
          s = this.getWeights(n)
        for (let e = 0; e < r.length; ++e)
          (n && !r[e].trainable) ||
            t.push({ name: r[e].originalName, tensor: s[e] })
        return t
      }
      set stopTraining(e) {
        this.stopTraining_ = e
      }
      get stopTraining() {
        return this.stopTraining_
      }
      get optimizer() {
        return this.optimizer_
      }
      set optimizer(e) {
        this.optimizer_ !== e &&
          ((this.optimizer_ = e), (this.isOptimizerOwned = !1))
      }
      dispose() {
        const e = super.dispose()
        if (
          0 === e.refCountAfterDispose &&
          null != this.optimizer &&
          this.isOptimizerOwned
        ) {
          const t = ji().numTensors
          this.optimizer_.dispose(),
            (e.numDisposedVariables += t - ji().numTensors)
        }
        return e
      }
      getLossIdentifiers() {
        let e
        if ('string' == typeof this.loss) e = _m(this.loss)
        else if (Array.isArray(this.loss)) {
          for (const e of this.loss)
            if ('string' != typeof e)
              throw new Error(
                'Serialization of non-string loss is not supported.',
              )
          e = this.loss.map((e) => _m(e))
        } else {
          const t = Object.keys(this.loss)
          e = {}
          const n = this.loss
          for (const r of t) {
            if ('string' != typeof n[r])
              throw new Error(
                'Serialization of non-string loss is not supported.',
              )
            e[r] = _m(n[r])
          }
        }
        return e
      }
      getMetricIdentifiers() {
        if (
          'string' == typeof this.metrics ||
          'function' == typeof this.metrics
        )
          return [_m(pb(this.metrics))]
        if (Array.isArray(this.metrics))
          return this.metrics.map((e) => _m(pb(e)))
        {
          const e = {}
          for (const t in this.metrics) e[t] = _m(pb(this.metrics[t]))
          return e
        }
      }
      getTrainingConfig() {
        return {
          loss: this.getLossIdentifiers(),
          metrics: this.getMetricIdentifiers(),
          optimizer_config: {
            class_name: this.optimizer.getClassName(),
            config: this.optimizer.getConfig(),
          },
        }
      }
      loadTrainingConfig(e) {
        if (null != e.weighted_metrics)
          throw new Error('Loading weight_metrics is not supported yet.')
        if (null != e.loss_weights)
          throw new Error('Loading loss_weights is not supported yet.')
        if (null != e.sample_weight_mode)
          throw new Error('Loading sample_weight_mode is not supported yet.')
        const t = qy(xb(e.optimizer_config))
        let n, r
        if ('string' == typeof e.loss) n = Fm(e.loss)
        else if (Array.isArray(e.loss)) n = e.loss.map((e) => Fm(e))
        else if (null != e.loss) {
          n = {}
          for (const t in e.loss) n[t] = Fm(e.loss[t])
        }
        if (Array.isArray(e.metrics)) r = e.metrics.map((e) => Fm(e))
        else if (null != e.metrics) {
          r = {}
          for (const t in e.metrics) r[t] = Fm(e.metrics[t])
        }
        this.compile({ loss: n, metrics: r, optimizer: t })
      }
      async save(e, t) {
        if ('string' == typeof e) {
          const t = fa(e)
          if (0 === t.length)
            throw new Im(`Cannot find any save handlers for URL '${e}'`)
          if (t.length > 1)
            throw new Im(
              `Found more than one (${t.length}) save handlers for URL '${e}'`,
            )
          e = t[0]
        }
        if (null == e.save)
          throw new Im(
            'LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.',
          )
        const n = await Js(this.getNamedWeights(t)),
          r = {
            modelTopology: this.toJSON(null, !1),
            format: 'layers-model',
            generatedBy: `TensorFlow.js tfjs-layers v${vb}`,
            convertedBy: null,
          }
        if (null != t && t.includeOptimizer && null != this.optimizer) {
          r.trainingConfig = this.getTrainingConfig()
          const e = 'optimizer',
            { data: t, specs: s } = await Js(
              await this.optimizer.getWeights(),
              e,
            )
          n.specs.push(...s), (n.data = ra([n.data, t]))
        }
        if (null != this.userDefinedMetadata) {
          const e = !0
          db(this.userDefinedMetadata, this.name, e),
            (r.userDefinedMetadata = this.userDefinedMetadata)
        }
        return (r.weightData = n.data), (r.weightSpecs = n.specs), e.save(r)
      }
      setUserDefinedMetadata(e) {
        db(e, this.name), (this.userDefinedMetadata = e)
      }
      getUserDefinedMetadata() {
        return this.userDefinedMetadata
      }
    }
    ;(Pb.className = 'Model'), Gi(Pb)
    class Bb extends Pb {}
    ;(Bb.className = 'Functional'), Gi(Bb)
    class Wb extends Pb {
      constructor(e) {
        if (
          (super({ inputs: [], outputs: [] }),
          (e = e || {}),
          (this.trainable = !0),
          (this.built = !1),
          (this.name = null != e.name ? e.name : Xm('sequential_')),
          null != e.layers)
        )
          for (const t of e.layers) this.add(t)
      }
      checkShape(e) {
        if (e.inboundNodes[0].outputTensors[0].shape.some((e) => e < 0))
          throw new Im(
            `Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`,
          )
      }
      add(e) {
        const t = e instanceof Wb || e instanceof Pb
        let n
        if (t) {
          if (((n = e), 1 !== n.outputs.length))
            throw new Im(
              'All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.',
            )
          if (1 !== n.inputs.length)
            throw new Im(
              'All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.',
            )
        }
        if (0 === this.outputs.length) {
          if (0 === e.inboundNodes.length) {
            if (null == e.batchInputShape)
              throw new Im(
                'The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.',
              )
            const t = (function (e) {
              if (null == e.batchShape && null == e.shape)
                throw new Error(
                  'Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.',
                )
              if (null != e.batchShape && null != e.shape)
                throw new Im(
                  'Please provide either a `shape` or `batchShape` argument to Input, but not both.',
                )
              let t = e.batchShape
              null != e.shape && null == t && (t = [null].concat(e.shape))
              let n = e.dtype
              return (
                null == n && (n = 'float32'),
                new by({
                  batchInputShape: t,
                  name: e.name,
                  dtype: n,
                  sparse: e.sparse,
                }).inboundNodes[0].outputTensors[0]
              )
            })({
              batchShape: e.batchInputShape,
              dtype: e.dtype,
              name: e.name + '_input',
            })
            e.apply(t)
          }
          if (t) (this.outputs = n.outputs), (this.inputs = n.inputs)
          else {
            if (1 !== e.inboundNodes.length)
              throw new Im(
                `A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`,
              )
            if (1 !== e.inboundNodes[0].outputTensors.length)
              throw new Im(
                'All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.',
              )
            this.checkShape(e),
              (this.outputs = [e.inboundNodes[0].outputTensors[0]]),
              (this.inputs = yy(this.outputs[0]))
          }
          ;(this.inboundNodes = []),
            new fy({
              outboundLayer: this,
              inboundLayers: [],
              nodeIndices: [],
              tensorIndices: [],
              inputTensors: this.inputs,
              outputTensors: this.outputs,
              inputMasks: Cm(null, this.inputs.length),
              outputMasks: [null],
              inputShapes: this.inputs.map((e) => e.shape),
              outputShapes: this.outputs[0].shape,
            })
        } else {
          const t = e.apply(this.outputs[0])
          if (Array.isArray(t))
            throw new TypeError(
              'All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.',
            )
          this.checkShape(e),
            (this.outputs = [t]),
            (this.inboundNodes[0].outputTensors = this.outputs),
            (this.inboundNodes[0].outputShapes = [this.outputs[0].shape])
        }
        this.layers.push(e), (this.built = !1)
      }
      pop() {
        if (0 === this.layers.length)
          throw new TypeError('There are no layers in the model.')
        if ((this.layers.pop(), 0 === this.layers.length))
          (this.outputs = []),
            (this.inboundNodes = []),
            (this.outboundNodes = [])
        else {
          const e = this.layers.length - 1
          ;(this.layers[e].outboundNodes = []),
            (this.outputs = [this.layers[e].output]),
            (this.inboundNodes[0].outputTensors = this.outputs),
            (this.inboundNodes[0].outputShapes = [this.outputs[0].shape])
        }
      }
      call(e, t) {
        return null == this.model && this.build(), this.model.call(e, t)
      }
      build(e) {
        if ((ay(e), 0 === this.inputs.length || 0 === this.outputs.length))
          throw new TypeError(
            'Sequential model cannot be built: model is empty. Add some layers first.',
          )
        ;(this.model = new Pb({
          inputs: this.inputs,
          outputs: this.outputs[0],
          name: this.name + '_model',
        })),
          (this.model.trainable = this.trainable),
          (this.supportsMasking = this.model.supportsMasking),
          (this.inputLayers = this.model.inputLayers),
          (this.inputLayersNodeIndices = this.model.inputLayersNodeIndices),
          (this.inputLayersTensorIndices = this.model.inputLayersTensorIndices),
          (this.outputLayers = this.model.outputLayers),
          (this.outputLayersNodeIndices = this.model.outputLayersNodeIndices),
          (this.outputLayersTensorIndices =
            this.model.outputLayersTensorIndices),
          (this.nodesByDepth = this.model.nodesByDepth),
          (this.containerNodes = this.model.containerNodes),
          (this.outputNames = this.model.outputNames),
          (this.inputNames = this.model.inputNames),
          (this.built = !0)
      }
      countParams() {
        return this.built || this.build(), super.countParams()
      }
      summary(e, t, n = console.log) {
        this.built || this.build(), super.summary(e, t, n)
      }
      setWeights(e) {
        null == this.model && this.build(), this.model.setWeights(e)
      }
      evaluate(e, t, n = {}) {
        if (!this.built)
          throw new km('The model needs to be compiled before being used.')
        return this.model.evaluate(e, t, n)
      }
      async evaluateDataset(e, t) {
        if (!this.built)
          throw new km('The model needs to be compiled before being used.')
        return this.model.evaluateDataset(e, t)
      }
      predict(e, t = {}) {
        return null == this.model && this.build(), this.model.predict(e, t)
      }
      predictOnBatch(e) {
        return null == this.model && this.build(), this.model.predictOnBatch(e)
      }
      compile(e) {
        this.build(),
          this.model.compile(e),
          (this.optimizer_ = this.model.optimizer),
          (this.isOptimizerOwned = this.model.isOptimizerOwned),
          (this.loss = this.model.loss),
          (this.metrics = this.model.metrics),
          (this.metricsTensors = this.model.metricsTensors),
          (this.metricsNames = this.model.metricsNames)
      }
      get optimizer() {
        return null == this.model ? void 0 : this.model.optimizer
      }
      set optimizer(e) {
        this.model.optimizer = e
      }
      async fit(e, t, n = {}) {
        if (!this.built)
          throw new km('The model needs to be compiled before being used.')
        return this.model.fit(e, t, n)
      }
      async fitDataset(e, t) {
        if (!this.built)
          throw new km('The model needs to be compiled before being used.')
        return this.model.fitDataset(e, t)
      }
      async trainOnBatch(e, t) {
        return this.model.trainOnBatch(e, t)
      }
      static fromConfig(e, t, n = {}, r = !1) {
        let s,
          a = {}
        if (t instanceof Array) {
          if (null == t[0].className || 'Merge' === t[0].className)
            throw new Im('Legacy serialization format not supported yet.')
          s = t
        } else
          O(
            null != t.layers,
            () =>
              "When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.",
          ),
            (s = t.layers),
            delete t.layers,
            (a = t)
        const i = new e(a)
        if (!(i instanceof Wb))
          throw new Nm(
            `Sequential.fromConfig called on non-Sequential input: ${i}`,
          )
        for (const e of s) {
          const t = qy(e, void 0, r)
          r && t.setFastWeightInitDuringBuild(!0), i.add(t)
        }
        return i
      }
      set stopTraining(e) {
        if (null == this.model)
          throw new Im(
            'Cannot set the stopTraining property of a sequential model before it is compiled.',
          )
        this.model.stopTraining = e
      }
      get stopTraining() {
        if (null == this.model)
          throw new Im(
            'Cannot get the stopTraining property of a sequential model before it is compiled.',
          )
        return this.model.stopTraining
      }
      getConfig() {
        const e = []
        for (const t of this.layers) {
          const n = {}
          ;(n.className = t.getClassName()),
            (n.config = t.getConfig()),
            e.push(n)
        }
        return { name: this.name, layers: e }
      }
    }
    ;(Wb.className = 'Sequential'), Gi(Wb)
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */
    class Vb extends Vi {
      getConfig() {
        return {}
      }
    }
    class Ub extends Vb {
      apply(e, t = 1) {
        return (function (e, t = 1) {
          if (1 !== t)
            throw new Nm(
              `Support for alpha values other than 1 (${t}) is not implemented yet.`,
            )
          return Nl(e)
        })(e, t)
      }
    }
    ;(Ub.className = 'elu'), Gi(Ub)
    class Gb extends Vb {
      apply(e) {
        return bc(e)
      }
    }
    ;(Gb.className = 'selu'), Gi(Gb)
    class Hb extends Vb {
      apply(e) {
        return uc(e)
      }
    }
    ;(Hb.className = 'relu'), Gi(Hb)
    class jb extends Vb {
      apply(e) {
        return qi(() => Ru(6, uc(e)))
      }
    }
    ;(jb.className = 'relu6'), Gi(jb)
    class qb extends Vb {
      apply(e) {
        return e
      }
    }
    ;(qb.className = 'linear'), Gi(qb)
    class Kb extends Vb {
      apply(e) {
        return Oo(e)
      }
    }
    ;(Kb.className = 'sigmoid'), Gi(Kb)
    class Xb extends Vb {
      apply(e) {
        return (function (e) {
          return qi(() => {
            const t = ro(0.5, Do(0.2, e))
            return Xo(t, 0, 1)
          })
        })(e)
      }
    }
    ;(Xb.className = 'hardSigmoid'), Gi(Xb)
    class Yb extends Vb {
      apply(e) {
        return cu(e)
      }
    }
    ;(Yb.className = 'softplus'), Gi(Yb)
    class Zb extends Vb {
      apply(e) {
        return (function (e) {
          return qi(() => yl(e, ro(eo(e), 1)))
        })(e)
      }
    }
    ;(Zb.className = 'softsign'), Gi(Zb)
    class Jb extends Vb {
      apply(e) {
        return Lo(e)
      }
    }
    ;(Jb.className = 'tanh'), Gi(Jb)
    class Qb extends Vb {
      apply(e, t = -1) {
        return $c(e, t)
      }
    }
    ;(Qb.className = 'softmax'), Gi(Qb)
    class ex extends Vb {
      apply(e, t = -1) {
        return du(e, t)
      }
    }
    ;(ex.className = 'logSoftmax'), Gi(ex)
    class tx extends Vb {
      apply(e, t = 1) {
        return qi(() => Do(Oo(Do(e, t)), e))
      }
    }
    ;(tx.className = 'swish'), Gi(tx)
    class nx extends Vb {
      apply(e) {
        return qi(() => Do(e, Lo(cu(e))))
      }
    }
    function rx(e) {
      return e.getClassName()
    }
    function sx(e, t = {}) {
      return Lm(e, Ui.getMap().classNameMap, t, 'activation')
    }
    function ax(e) {
      if (null == e) {
        return sx({ className: 'linear', config: {} })
      }
      if ('string' == typeof e) {
        const t = {}
        return (t.className = e), (t.config = {}), sx(t)
      }
      return e instanceof Vb ? e : sx(e)
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ ;(nx.className = 'mish'), Gi(nx)
    class ix extends Vi {}
    class ox extends ix {
      constructor(e) {
        super(),
          (function (e) {
            if (null != e && 'object' != typeof e)
              throw new Error(
                `Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`,
              )
          })(e),
          (this.l1 = null == e || null == e.l1 ? 0.01 : e.l1),
          (this.l2 = null == e || null == e.l2 ? 0.01 : e.l2),
          (this.hasL1 = 0 !== this.l1),
          (this.hasL2 = 0 !== this.l2)
      }
      apply(e) {
        return qi(() => {
          let t = Cu([1])
          return (
            this.hasL1 && (t = ro(t, Pl(Do(this.l1, eo(e))))),
            this.hasL2 && (t = ro(t, Pl(Do(this.l2, Eg(e))))),
            Eo(t, [])
          )
        })
      }
      getConfig() {
        return { l1: this.l1, l2: this.l2 }
      }
      static fromConfig(e, t) {
        return new e({ l1: t.l1, l2: t.l2 })
      }
    }
    ;(ox.className = 'L1L2'), Gi(ox)
    const lx = { l1l2: 'L1L2' }
    function ux(e) {
      return Om(e)
    }
    function cx(e, t = {}) {
      return Lm(e, Ui.getMap().classNameMap, t, 'regularizer')
    }
    function hx(e) {
      return null == e
        ? null
        : 'string' == typeof e
          ? cx({ className: e in lx ? lx[e] : e, config: {} })
          : e instanceof ix
            ? e
            : cx(e)
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ class px extends gy {
      constructor(e) {
        super(null == e ? {} : e),
          (this.supportsMasking = !0),
          null != e && (this.maxValue = e.maxValue)
      }
      call(e, t) {
        e = sy(e)
        let n = uc(e)
        return null != this.maxValue && (n = Xo(n, 0, this.maxValue)), n
      }
      computeOutputShape(e) {
        return e
      }
      getConfig() {
        const e = { maxValue: this.maxValue },
          t = super.getConfig()
        return Object.assign(e, t), e
      }
    }
    ;(px.className = 'ReLU'), Gi(px)
    class dx extends gy {
      constructor(e) {
        super(null == e ? {} : e),
          (this.DEFAULT_ALPHA = 0.3),
          null == e && (e = {}),
          (this.alpha = null == e.alpha ? this.DEFAULT_ALPHA : e.alpha)
      }
      call(e, t) {
        const n = sy(e)
        return nu(n, this.alpha)
      }
      computeOutputShape(e) {
        return e
      }
      getConfig() {
        const e = { alpha: this.alpha },
          t = super.getConfig()
        return Object.assign(e, t), e
      }
    }
    ;(dx.className = 'LeakyReLU'), Gi(dx)
    class fx extends gy {
      constructor(e) {
        if (
          (super(null == e ? {} : e),
          (this.DEFAULT_ALPHA_INITIALIZER = 'zeros'),
          null == e && (e = {}),
          (this.supportsMasking = !0),
          (this.alphaInitializer = ty(
            e.alphaInitializer || this.DEFAULT_ALPHA_INITIALIZER,
          )),
          (this.alphaRegularizer = hx(e.alphaRegularizer)),
          (this.alphaConstraint = Oy(e.alphaConstraint)),
          null == e.sharedAxes)
        )
          this.sharedAxes = null
        else if (Array.isArray(e.sharedAxes)) this.sharedAxes = e.sharedAxes
        else {
          if ('number' != typeof e.sharedAxes)
            throw new Im(
              `Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`,
            )
          this.sharedAxes = [e.sharedAxes]
        }
      }
      build(e) {
        const t = (e = ay(e)).slice(1)
        if (null != this.sharedAxes)
          for (const e of this.sharedAxes) t[e - 1] = 1
        this.alpha = this.addWeight(
          'alpha',
          t,
          'float32',
          this.alphaInitializer,
          this.alphaRegularizer,
          !0,
          this.alphaConstraint,
        )
        const n = {}
        if (null != this.sharedAxes)
          for (let t = 1; t < e.length; ++t) n[t] = e[t]
        ;(this.inputSpec = [new hy({ ndim: e.length, axes: n })]),
          (this.built = !0)
      }
      call(e, t) {
        return (e = sy(e)), qu(e, this.alpha.read())
      }
      getConfig() {
        const e = {
            alphaInitializer: ey(this.alphaInitializer),
            alphaRegularizer: ux(this.alphaRegularizer),
            alphaConstraint: Fy(this.alphaConstraint),
            sharedAxes: this.sharedAxes,
          },
          t = super.getConfig()
        return Object.assign(e, t), e
      }
    }
    ;(fx.className = 'PReLU'), Gi(fx)
    class mx extends gy {
      constructor(e) {
        if (
          (super(null == e ? {} : e),
          (this.DEFAULT_ALPHA = 1),
          null == e && (e = {}),
          null != e.alpha && e.alpha !== this.DEFAULT_ALPHA)
        )
          throw new Nm(
            `Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`,
          )
        this.alpha = null == e.alpha ? this.DEFAULT_ALPHA : e.alpha
      }
      call(e, t) {
        const n = sy(e)
        return Nl(n)
      }
      computeOutputShape(e) {
        return e
      }
      getConfig() {
        const e = { alpha: this.alpha },
          t = super.getConfig()
        return Object.assign(e, t), e
      }
    }
    ;(mx.className = 'ELU'), Gi(mx)
    class gx extends gy {
      constructor(e) {
        super(null == e ? {} : e),
          (this.DEFAULT_THETA = 1),
          null == e && (e = {}),
          (this.theta = null == e.theta ? this.DEFAULT_THETA : e.theta)
      }
      call(e, t) {
        const n = sy(e)
        return Do(n, Ka(Yl(n, this.theta), 'float32'))
      }
      computeOutputShape(e) {
        return e
      }
      getConfig() {
        const e = { theta: this.theta },
          t = super.getConfig()
        return Object.assign(e, t), e
      }
    }
    ;(gx.className = 'ThresholdedReLU'), Gi(gx)
    class yx extends gy {
      constructor(e) {
        super(null == e ? {} : e),
          (this.DEFAULT_AXIS = 1),
          null == e && (e = {}),
          (this.softmax = new Qb().apply),
          (this.axis = null == e.axis ? this.DEFAULT_AXIS : e.axis)
      }
      call(e, t) {
        const n = sy(e)
        return this.softmax(n, this.axis)
      }
      computeOutputShape(e) {
        return e
      }
      getConfig() {
        const e = { axis: this.axis },
          t = super.getConfig()
        return Object.assign(e, t), e
        /**
         * @license
         * Copyright 2018 Google LLC
         *
         * Use of this source code is governed by an MIT-style
         * license that can be found in the LICENSE file or at
         * https://opensource.org/licenses/MIT.
         * =============================================================================
         */
      }
    }
    function bx(e, t, n) {
      if ('number' == typeof e) return Cm(e, t)
      if (e.length !== t)
        throw new Im(
          `The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`,
        )
      for (let r = 0; r < t; ++r) {
        const s = e[r]
        if (!hg(s))
          throw new Im(
            `The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${s}`,
          )
      }
      return e
    }
    function xx(e, t, n, r, s = 1) {
      if (null == e) return e
      let a
      return (
        (a = 'same' === n ? e : e - (t + (t - 1) * (s - 1)) + 1),
        Math.floor((a + r - 1) / r)
      )
    }
    function wx(e, t, n, r) {
      if (null == e) return null
      if ('valid' === r) e = e * t + fg([n - t, 0])
      else {
        if ('same' !== r) throw new Im(`Unsupport padding mode: ${r}.`)
        e *= t
      }
      return e
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ function vx(e, t) {
      return qi(() => (ng(t), 'channelsFirst' === t ? th(e, [0, 2, 3, 1]) : e))
    }
    function kx(e, t) {
      return qi(
        () => (ng(t), 'channelsFirst' === t ? th(e, [0, 2, 3, 4, 1]) : e),
      )
    }
    function Ix(e, t, n, r = [1, 1], s = 'valid', a, i, o = null) {
      return qi(() => {
        if (
          (null == a && (a = 'channelsLast'),
          ng(a),
          3 !== e.rank && 4 !== e.rank)
        )
          throw new Im(
            `conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`,
          )
        if (3 !== t.rank && 4 !== t.rank)
          throw new Im(
            `conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`,
          )
        let l = vx(e, a)
        if ('causal' === s)
          throw new Nm(
            'The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.',
          )
        return (
          (l = bh({
            x: l,
            filter: t,
            strides: r,
            pad: 'same' === s ? 'same' : 'valid',
            dilations: i,
            dataFormat: 'NHWC',
            bias: n,
            activation: o,
          })),
          'channelsFirst' === a && (l = th(l, [0, 3, 1, 2])),
          l
        )
      })
    }
    ;(yx.className = 'Softmax'), Gi(yx)
    class Nx extends gy {
      constructor(e, t) {
        if (
          (super(t),
          (this.bias = null),
          (this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal'),
          (this.DEFAULT_BIAS_INITIALIZER = 'zeros'),
          Nx.verifyArgs(t),
          (this.rank = e),
          Um(this.rank, 'rank'),
          1 !== this.rank && 2 !== this.rank && 3 !== this.rank)
        )
          throw new Nm(
            `Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`,
          )
        if (
          ((this.kernelSize = bx(t.kernelSize, e, 'kernelSize')),
          (this.strides = bx(null == t.strides ? 1 : t.strides, e, 'strides')),
          (this.padding = null == t.padding ? 'valid' : t.padding),
          rg(this.padding),
          (this.dataFormat =
            null == t.dataFormat ? 'channelsLast' : t.dataFormat),
          ng(this.dataFormat),
          (this.activation = ax(t.activation)),
          (this.useBias = null == t.useBias || t.useBias),
          (this.biasInitializer = ty(
            t.biasInitializer || this.DEFAULT_BIAS_INITIALIZER,
          )),
          (this.biasConstraint = Oy(t.biasConstraint)),
          (this.biasRegularizer = hx(t.biasRegularizer)),
          (this.activityRegularizer = hx(t.activityRegularizer)),
          (this.dilationRate = bx(
            null == t.dilationRate ? 1 : t.dilationRate,
            e,
            'dilationRate',
          )),
          1 === this.rank &&
            Array.isArray(this.dilationRate) &&
            1 !== this.dilationRate.length)
        )
          throw new Im(
            `dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`,
          )
        if (2 === this.rank) {
          if ('number' == typeof this.dilationRate)
            this.dilationRate = [this.dilationRate, this.dilationRate]
          else if (2 !== this.dilationRate.length)
            throw new Im(
              `dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`,
            )
        } else if (3 === this.rank)
          if ('number' == typeof this.dilationRate)
            this.dilationRate = [
              this.dilationRate,
              this.dilationRate,
              this.dilationRate,
            ]
          else if (3 !== this.dilationRate.length)
            throw new Im(
              `dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`,
            )
      }
      static verifyArgs(e) {
        if (
          ($m('kernelSize' in e, "required key 'kernelSize' not in config"),
          'number' != typeof e.kernelSize && !Vm(e.kernelSize, 'number', 1, 3))
        )
          throw new Im(
            `BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`,
          )
      }
      getConfig() {
        const e = {
            kernelSize: this.kernelSize,
            strides: this.strides,
            padding: this.padding,
            dataFormat: this.dataFormat,
            dilationRate: this.dilationRate,
            activation: rx(this.activation),
            useBias: this.useBias,
            biasInitializer: ey(this.biasInitializer),
            biasRegularizer: ux(this.biasRegularizer),
            activityRegularizer: ux(this.activityRegularizer),
            biasConstraint: Fy(this.biasConstraint),
          },
          t = super.getConfig()
        return Object.assign(e, t), e
      }
    }
    class Sx extends Nx {
      constructor(e, t) {
        super(e, t),
          (this.kernel = null),
          Sx.verifyArgs(t),
          (this.filters = t.filters),
          Um(this.filters, 'filters'),
          (this.kernelInitializer = ty(
            t.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER,
          )),
          (this.kernelConstraint = Oy(t.kernelConstraint)),
          (this.kernelRegularizer = hx(t.kernelRegularizer))
      }
      build(e) {
        e = ay(e)
        const t = 'channelsFirst' === this.dataFormat ? 1 : e.length - 1
        if (null == e[t])
          throw new Im(
            `The channel dimension of the input should be defined. Found ${e[t]}`,
          )
        const n = e[t],
          r = this.kernelSize.concat([n, this.filters])
        ;(this.kernel = this.addWeight(
          'kernel',
          r,
          null,
          this.kernelInitializer,
          this.kernelRegularizer,
          !0,
          this.kernelConstraint,
        )),
          this.useBias &&
            (this.bias = this.addWeight(
              'bias',
              [this.filters],
              null,
              this.biasInitializer,
              this.biasRegularizer,
              !0,
              this.biasConstraint,
            )),
          (this.inputSpec = [{ ndim: this.rank + 2, axes: { [t]: n } }]),
          (this.built = !0)
      }
      call(e, t) {
        return qi(() => {
          let t
          e = sy(e)
          const n = null == this.bias ? null : this.bias.read(),
            r = Hm(this.activation.getClassName())
          if (null != r && 2 === this.rank)
            t = Ix(
              e,
              this.kernel.read(),
              n,
              this.strides,
              this.padding,
              this.dataFormat,
              this.dilationRate,
              r,
            )
          else {
            if (1 === this.rank)
              t = (function (e, t, n, r = 1, s = 'valid', a, i = 1) {
                return qi(() => {
                  if (
                    (null == a && (a = 'channelsLast'),
                    ng(a),
                    3 !== e.shape.length)
                  )
                    throw new Im(
                      `The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`,
                    )
                  if (3 !== t.shape.length)
                    throw new Im(
                      `The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`,
                    )
                  if (null != n && 1 !== n.shape.length)
                    throw new Im(
                      `The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`,
                    )
                  if (
                    ('channelsFirst' === a && (e = th(e, [0, 2, 1])),
                    'causal' === s)
                  )
                    throw new Nm(
                      'The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.',
                    )
                  let o = tl(e, t, r, 'same' === s ? 'same' : 'valid', 'NWC', i)
                  return null != n && (o = Ag(o, n)), o
                })
              })(
                e,
                this.kernel.read(),
                n,
                this.strides[0],
                this.padding,
                this.dataFormat,
                this.dilationRate[0],
              )
            else if (2 === this.rank)
              t = Ix(
                e,
                this.kernel.read(),
                n,
                this.strides,
                this.padding,
                this.dataFormat,
                this.dilationRate,
              )
            else {
              if (3 !== this.rank)
                throw new Nm(
                  'convolutions greater than 3D are not implemented yet.',
                )
              t = (function (e, t, n, r = [1, 1, 1], s = 'valid', a, i) {
                return qi(() => {
                  if (
                    (null == a && (a = 'channelsLast'),
                    ng(a),
                    4 !== e.rank && 5 !== e.rank)
                  )
                    throw new Im(
                      `conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`,
                    )
                  if (4 !== t.rank && 5 !== t.rank)
                    throw new Im(
                      `conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`,
                    )
                  let o = kx(e, a)
                  if ('causal' === s)
                    throw new Nm(
                      'The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.',
                    )
                  return (
                    (o = sl(
                      o,
                      t,
                      r,
                      'same' === s ? 'same' : 'valid',
                      'NDHWC',
                      i,
                    )),
                    null != n && (o = Ag(o, n)),
                    'channelsFirst' === a && (o = th(o, [0, 4, 1, 2, 3])),
                    o
                  )
                })
              })(
                e,
                this.kernel.read(),
                n,
                this.strides,
                this.padding,
                this.dataFormat,
                this.dilationRate,
              )
            }
            null != this.activation && (t = this.activation.apply(t))
          }
          return t
        })
      }
      computeOutputShape(e) {
        e = ay(e)
        const t = [],
          n =
            'channelsLast' === this.dataFormat
              ? e.slice(1, e.length - 1)
              : e.slice(2)
        for (let e = 0; e < n.length; ++e) {
          const r = xx(
            n[e],
            this.kernelSize[e],
            this.padding,
            this.strides[e],
            'number' == typeof this.dilationRate
              ? this.dilationRate
              : this.dilationRate[e],
          )
          t.push(r)
        }
        let r = [e[0]]
        return (
          'channelsLast' === this.dataFormat
            ? ((r = r.concat(t)), r.push(this.filters))
            : (r.push(this.filters), (r = r.concat(t))),
          r
        )
      }
      getConfig() {
        const e = {
            filters: this.filters,
            kernelInitializer: ey(this.kernelInitializer),
            kernelRegularizer: ux(this.kernelRegularizer),
            kernelConstraint: Fy(this.kernelConstraint),
          },
          t = super.getConfig()
        return Object.assign(e, t), e
      }
      static verifyArgs(e) {
        if (!('filters' in e) || 'number' != typeof e.filters || e.filters < 1)
          throw new Im(
            `Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`,
          )
      }
    }
    class Tx extends Sx {
      constructor(e) {
        super(2, e), Tx.verifyArgs(e)
      }
      getConfig() {
        const e = super.getConfig()
        return delete e.rank, e
      }
      static verifyArgs(e) {
        if (
          'number' != typeof e.kernelSize &&
          !Vm(e.kernelSize, 'number', 1, 2)
        )
          throw new Im(
            `Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`,
          )
      }
    }
    ;(Tx.className = 'Conv2D'), Gi(Tx)
    class Cx extends Sx {
      constructor(e) {
        super(3, e), Cx.verifyArgs(e)
      }
      getConfig() {
        const e = super.getConfig()
        return delete e.rank, e
      }
      static verifyArgs(e) {
        if (
          'number' != typeof e.kernelSize &&
          (!Array.isArray(e.kernelSize) ||
            (1 !== e.kernelSize.length && 3 !== e.kernelSize.length))
        )
          throw new Im(
            `Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`,
          )
      }
    }
    ;(Cx.className = 'Conv3D'), Gi(Cx)
    class $x extends Tx {
      constructor(e) {
        if (
          (super(e),
          (this.inputSpec = [new hy({ ndim: 4 })]),
          'same' !== this.padding && 'valid' !== this.padding)
        )
          throw new Im(
            `Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`,
          )
      }
      build(e) {
        if (4 !== (e = ay(e)).length)
          throw new Im(
            'Input should have rank 4; Received input shape: ' +
              JSON.stringify(e),
          )
        const t = 'channelsFirst' === this.dataFormat ? 1 : e.length - 1
        if (null == e[t])
          throw new Im(
            'The channel dimension of the inputs should be defined. Found `None`.',
          )
        const n = e[t],
          r = this.kernelSize.concat([this.filters, n])
        ;(this.kernel = this.addWeight(
          'kernel',
          r,
          'float32',
          this.kernelInitializer,
          this.kernelRegularizer,
          !0,
          this.kernelConstraint,
        )),
          this.useBias &&
            (this.bias = this.addWeight(
              'bias',
              [this.filters],
              'float32',
              this.biasInitializer,
              this.biasRegularizer,
              !0,
              this.biasConstraint,
            )),
          (this.inputSpec = [new hy({ ndim: 4, axes: { [t]: n } })]),
          (this.built = !0)
      }
      call(e, t) {
        return qi(() => {
          let t = sy(e)
          if (4 !== t.shape.length)
            throw new Im(
              `Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`,
            )
          const n = t.shape,
            r = n[0]
          let s, a
          'channelsFirst' === this.dataFormat
            ? ((s = 2), (a = 3))
            : ((s = 1), (a = 2))
          const i = n[s],
            o = n[a],
            l = this.kernelSize[0],
            u = this.kernelSize[1],
            c = this.strides[0],
            h = this.strides[1],
            p = [
              r,
              wx(i, c, l, this.padding),
              wx(o, h, u, this.padding),
              this.filters,
            ]
          'channelsLast' !== this.dataFormat && (t = th(t, [0, 2, 3, 1]))
          let d = rl(t, this.kernel.read(), p, this.strides, this.padding)
          return (
            'channelsLast' !== this.dataFormat && (d = th(d, [0, 3, 1, 2])),
            null != this.bias && (d = Ag(d, this.bias.read(), this.dataFormat)),
            null != this.activation && (d = this.activation.apply(d)),
            d
          )
        })
      }
      computeOutputShape(e) {
        const t = (e = ay(e)).slice()
        let n, r, s
        'channelsFirst' === this.dataFormat
          ? ((n = 1), (r = 2), (s = 3))
          : ((n = 3), (r = 1), (s = 2))
        const a = this.kernelSize[0],
          i = this.kernelSize[1],
          o = this.strides[0],
          l = this.strides[1]
        return (
          (t[n] = this.filters),
          (t[r] = wx(t[r], o, a, this.padding)),
          (t[s] = wx(t[s], l, i, this.padding)),
          t
        )
      }
      getConfig() {
        const e = super.getConfig()
        return delete e.dilationRate, e
      }
    }
    ;($x.className = 'Conv2DTranspose'), Gi($x)
    class Ex extends Cx {
      constructor(e) {
        if (
          (super(e),
          (this.inputSpec = [new hy({ ndim: 5 })]),
          'same' !== this.padding && 'valid' !== this.padding)
        )
          throw new Im(
            `Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`,
          )
      }
      build(e) {
        if (5 !== (e = ay(e)).length)
          throw new Im(
            'Input should have rank 5; Received input shape: ' +
              JSON.stringify(e),
          )
        const t = 'channelsFirst' === this.dataFormat ? 1 : e.length - 1
        if (null == e[t])
          throw new Im(
            'The channel dimension of the inputs should be defined. Found `None`.',
          )
        const n = e[t],
          r = this.kernelSize.concat([this.filters, n])
        ;(this.kernel = this.addWeight(
          'kernel',
          r,
          'float32',
          this.kernelInitializer,
          this.kernelRegularizer,
          !0,
          this.kernelConstraint,
        )),
          this.useBias &&
            (this.bias = this.addWeight(
              'bias',
              [this.filters],
              'float32',
              this.biasInitializer,
              this.biasRegularizer,
              !0,
              this.biasConstraint,
            )),
          (this.inputSpec = [new hy({ ndim: 5, axes: { [t]: n } })]),
          (this.built = !0)
      }
      call(e, t) {
        return qi(() => {
          let t = sy(e)
          if (5 !== t.shape.length)
            throw new Im(
              `Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`,
            )
          const n = t.shape,
            r = n[0]
          let s, a, i
          'channelsFirst' === this.dataFormat
            ? ((i = 2), (s = 3), (a = 4))
            : ((i = 1), (s = 2), (a = 3))
          const o = n[i],
            l = n[s],
            u = n[a],
            c = this.kernelSize[0],
            h = this.kernelSize[1],
            p = this.kernelSize[2],
            d = this.strides[0],
            f = this.strides[1],
            m = this.strides[2],
            g = [
              r,
              wx(o, d, c, this.padding),
              wx(l, f, h, this.padding),
              wx(u, m, p, this.padding),
              this.filters,
            ]
          'channelsLast' !== this.dataFormat && (t = th(t, [0, 2, 3, 4, 1]))
          let y = il(t, this.kernel.read(), g, this.strides, this.padding)
          return (
            'channelsLast' !== this.dataFormat && (y = th(y, [0, 4, 1, 2, 3])),
            null !== this.bias &&
              (y = Ag(y, this.bias.read(), this.dataFormat)),
            null !== this.activation && (y = this.activation.apply(y)),
            y
          )
        })
      }
      computeOutputShape(e) {
        const t = (e = ay(e)).slice()
        let n, r, s, a
        'channelsFirst' === this.dataFormat
          ? ((n = 1), (r = 2), (s = 3), (a = 4))
          : ((n = 4), (r = 1), (s = 2), (a = 3))
        const i = this.kernelSize[0],
          o = this.kernelSize[1],
          l = this.kernelSize[2],
          u = this.strides[0],
          c = this.strides[1],
          h = this.strides[2]
        return (
          (t[n] = this.filters),
          (t[r] = wx(t[r], u, i, this.padding)),
          (t[s] = wx(t[s], c, o, this.padding)),
          (t[a] = wx(t[a], h, l, this.padding)),
          t
        )
      }
      getConfig() {
        const e = super.getConfig()
        return delete e.dilationRate, e
      }
    }
    ;(Ex.className = 'Conv3DTranspose'), Gi(Ex)
    class Rx extends Sx {
      constructor(e, t) {
        if (
          (super(e, t),
          (this.DEFAULT_DEPTHWISE_INITIALIZER = 'glorotUniform'),
          (this.DEFAULT_POINTWISE_INITIALIZER = 'glorotUniform'),
          (this.depthwiseKernel = null),
          (this.pointwiseKernel = null),
          null == t.filters)
        )
          throw new Im(
            'The `filters` configuration field is required by SeparableConv, but is unspecified.',
          )
        if (
          null != t.kernelInitializer ||
          null != t.kernelRegularizer ||
          null != t.kernelConstraint
        )
          throw new Im(
            'Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.',
          )
        if (null != t.padding && 'same' !== t.padding && 'valid' !== t.padding)
          throw new Im(
            `SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`,
          )
        ;(this.depthMultiplier =
          null == t.depthMultiplier ? 1 : t.depthMultiplier),
          (this.depthwiseInitializer = ty(
            t.depthwiseInitializer || this.DEFAULT_DEPTHWISE_INITIALIZER,
          )),
          (this.depthwiseRegularizer = hx(t.depthwiseRegularizer)),
          (this.depthwiseConstraint = Oy(t.depthwiseConstraint)),
          (this.pointwiseInitializer = ty(
            t.depthwiseInitializer || this.DEFAULT_POINTWISE_INITIALIZER,
          )),
          (this.pointwiseRegularizer = hx(t.pointwiseRegularizer)),
          (this.pointwiseConstraint = Oy(t.pointwiseConstraint))
      }
      build(e) {
        if ((e = ay(e)).length < this.rank + 2)
          throw new Im(
            `Inputs to SeparableConv${this.rank}D should have rank ${this.rank + 2}, but received input shape: ${JSON.stringify(e)}`,
          )
        const t = 'channelsFirst' === this.dataFormat ? 1 : e.length - 1
        if (null == e[t] || e[t] < 0)
          throw new Im(
            `The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`,
          )
        const n = e[t],
          r = this.kernelSize.concat([n, this.depthMultiplier]),
          s = []
        for (let e = 0; e < this.rank; ++e) s.push(1)
        s.push(n * this.depthMultiplier, this.filters)
        const a = !0
        ;(this.depthwiseKernel = this.addWeight(
          'depthwise_kernel',
          r,
          'float32',
          this.depthwiseInitializer,
          this.depthwiseRegularizer,
          a,
          this.depthwiseConstraint,
        )),
          (this.pointwiseKernel = this.addWeight(
            'pointwise_kernel',
            s,
            'float32',
            this.pointwiseInitializer,
            this.pointwiseRegularizer,
            a,
            this.pointwiseConstraint,
          )),
          this.useBias
            ? (this.bias = this.addWeight(
                'bias',
                [this.filters],
                'float32',
                this.biasInitializer,
                this.biasRegularizer,
                a,
                this.biasConstraint,
              ))
            : (this.bias = null),
          (this.inputSpec = [
            new hy({ ndim: this.rank + 2, axes: { [t]: n } }),
          ]),
          (this.built = !0)
      }
      call(e, t) {
        return qi(() => {
          let t
          if (((e = sy(e)), 1 === this.rank))
            throw new Nm('1D separable convolution is not implemented yet.')
          return (
            2 === this.rank &&
              ('channelsFirst' === this.dataFormat && (e = th(e, [0, 2, 3, 1])),
              (t = xc(
                e,
                this.depthwiseKernel.read(),
                this.pointwiseKernel.read(),
                this.strides,
                this.padding,
                this.dilationRate,
                'NHWC',
              ))),
            this.useBias && (t = Ag(t, this.bias.read(), this.dataFormat)),
            null != this.activation && (t = this.activation.apply(t)),
            'channelsFirst' === this.dataFormat && (t = th(t, [0, 3, 1, 2])),
            t
          )
        })
      }
      getConfig() {
        const e = super.getConfig()
        return (
          delete e.rank,
          delete e.kernelInitializer,
          delete e.kernelRegularizer,
          delete e.kernelConstraint,
          (e.depthwiseInitializer = ey(this.depthwiseInitializer)),
          (e.pointwiseInitializer = ey(this.pointwiseInitializer)),
          (e.depthwiseRegularizer = ux(this.depthwiseRegularizer)),
          (e.pointwiseRegularizer = ux(this.pointwiseRegularizer)),
          (e.depthwiseConstraint = Fy(this.depthwiseConstraint)),
          (e.pointwiseConstraint = Fy(this.pointwiseConstraint)),
          e
        )
      }
    }
    Rx.className = 'SeparableConv'
    class Ax extends Rx {
      constructor(e) {
        super(2, e)
      }
    }
    ;(Ax.className = 'SeparableConv2D'), Gi(Ax)
    class _x extends Sx {
      constructor(e) {
        super(1, e), _x.verifyArgs(e), (this.inputSpec = [{ ndim: 3 }])
      }
      getConfig() {
        const e = super.getConfig()
        return delete e.rank, delete e.dataFormat, e
      }
      static verifyArgs(e) {
        if (
          'number' != typeof e.kernelSize &&
          !Vm(e.kernelSize, 'number', 1, 1)
        )
          throw new Im(
            `Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`,
          )
      }
    }
    ;(_x.className = 'Conv1D'), Gi(_x)
    class Fx extends gy {
      constructor(e) {
        super(e),
          'number' == typeof e.cropping
            ? (this.cropping = [
                [e.cropping, e.cropping],
                [e.cropping, e.cropping],
              ])
            : 'number' == typeof e.cropping[0]
              ? (this.cropping = [
                  [e.cropping[0], e.cropping[0]],
                  [e.cropping[1], e.cropping[1]],
                ])
              : (this.cropping = e.cropping),
          (this.dataFormat =
            void 0 === e.dataFormat ? 'channelsLast' : e.dataFormat),
          (this.inputSpec = [{ ndim: 4 }])
      }
      computeOutputShape(e) {
        return 'channelsFirst' === this.dataFormat
          ? [
              e[0],
              e[1],
              e[2] - this.cropping[0][0] - this.cropping[0][1],
              e[3] - this.cropping[1][0] - this.cropping[1][1],
            ]
          : [
              e[0],
              e[1] - this.cropping[0][0] - this.cropping[0][1],
              e[2] - this.cropping[1][0] - this.cropping[1][1],
              e[3],
            ]
      }
      call(e, t) {
        return qi(() => {
          if (((e = sy(e)), 'channelsLast' === this.dataFormat)) {
            const t = kg(
              e,
              this.cropping[0][0],
              e.shape[1] - this.cropping[0][0] - this.cropping[0][1],
              2,
            )
            return kg(
              t,
              this.cropping[1][0],
              e.shape[2] - this.cropping[1][1] - this.cropping[1][0],
              3,
            )
          }
          {
            const t = kg(
              e,
              this.cropping[0][0],
              e.shape[2] - this.cropping[0][0] - this.cropping[0][1],
              3,
            )
            return kg(
              t,
              this.cropping[1][0],
              e.shape[3] - this.cropping[1][1] - this.cropping[1][0],
              4,
            )
          }
        })
      }
      getConfig() {
        const e = { cropping: this.cropping, dataFormat: this.dataFormat },
          t = super.getConfig()
        return Object.assign(e, t), e
      }
    }
    ;(Fx.className = 'Cropping2D'), Gi(Fx)
    class Dx extends gy {
      constructor(e) {
        var t
        super(e),
          (this.DEFAULT_SIZE = [2, 2]),
          (this.inputSpec = [{ ndim: 4 }]),
          (this.size = null == e.size ? this.DEFAULT_SIZE : e.size),
          (this.dataFormat =
            null == e.dataFormat ? 'channelsLast' : e.dataFormat),
          ng(this.dataFormat),
          (this.interpolation =
            null == e.interpolation ? 'nearest' : e.interpolation),
          (t = this.interpolation),
          Wm(Zm, 'InterpolationFormat', t)
      }
      computeOutputShape(e) {
        if ('channelsFirst' === this.dataFormat) {
          const t = null == e[2] ? null : this.size[0] * e[2],
            n = null == e[3] ? null : this.size[1] * e[3]
          return [e[0], e[1], t, n]
        }
        {
          const t = null == e[1] ? null : this.size[0] * e[1],
            n = null == e[2] ? null : this.size[1] * e[2]
          return [e[0], t, n, e[3]]
        }
      }
      call(e, t) {
        return qi(() => {
          let t = sy(e)
          const n = t.shape
          if ('channelsFirst' === this.dataFormat) {
            t = th(t, [0, 2, 3, 1])
            const e = this.size[0] * n[2],
              r = this.size[1] * n[3],
              s =
                'nearest' === this.interpolation
                  ? yp.resizeNearestNeighbor(t, [e, r])
                  : yp.resizeBilinear(t, [e, r])
            return th(s, [0, 3, 1, 2])
          }
          {
            const e = this.size[0] * n[1],
              r = this.size[1] * n[2]
            return 'nearest' === this.interpolation
              ? yp.resizeNearestNeighbor(t, [e, r])
              : yp.resizeBilinear(t, [e, r])
          }
        })
      }
      getConfig() {
        const e = {
            size: this.size,
            dataFormat: this.dataFormat,
            interpolation: this.interpolation,
          },
          t = super.getConfig()
        return Object.assign(e, t), e
      }
    }
    ;(Dx.className = 'UpSampling2D'), Gi(Dx)
    class Ox extends Nx {
      constructor(e) {
        super(2, e),
          (this.depthwiseKernel = null),
          (this.depthMultiplier =
            null == e.depthMultiplier ? 1 : e.depthMultiplier),
          (this.depthwiseInitializer = ty(
            e.depthwiseInitializer || this.DEFAULT_KERNEL_INITIALIZER,
          )),
          (this.depthwiseConstraint = Oy(e.depthwiseConstraint)),
          (this.depthwiseRegularizer = hx(e.depthwiseRegularizer))
      }
      build(e) {
        if ((e = ay(e)).length < 4)
          throw new Im(
            `Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`,
          )
        const t = 'channelsFirst' === this.dataFormat ? 1 : 3
        if (null == e[t] || e[t] < 0)
          throw new Im(
            `The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`,
          )
        const n = e[t],
          r = [this.kernelSize[0], this.kernelSize[1], n, this.depthMultiplier]
        ;(this.depthwiseKernel = this.addWeight(
          'depthwise_kernel',
          r,
          null,
          this.depthwiseInitializer,
          this.depthwiseRegularizer,
          !0,
          this.depthwiseConstraint,
        )),
          this.useBias
            ? (this.bias = this.addWeight(
                'bias',
                [n * this.depthMultiplier],
                null,
                this.biasInitializer,
                this.biasRegularizer,
                !0,
                this.biasConstraint,
              ))
            : (this.bias = null),
          (this.built = !0)
      }
      call(e, t) {
        return qi(() => {
          let t =
            /**
             * @license
             * Copyright 2018 Google LLC
             *
             * Use of this source code is governed by an MIT-style
             * license that can be found in the LICENSE file or at
             * https://opensource.org/licenses/MIT.
             * =============================================================================
             */
            (function (e, t, n = [1, 1], r = 'valid', s, a) {
              return qi(() => {
                null == s && (s = 'channelsLast'), ng(s)
                let i = vx(e, s)
                if (4 !== e.rank)
                  throw new Im(
                    `Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`,
                  )
                if (4 !== t.rank)
                  throw new Im(
                    `depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`,
                  )
                return (
                  (i = dl(i, t, n, 'same' === r ? 'same' : 'valid', 'NHWC', a)),
                  'channelsFirst' === s && (i = th(i, [0, 3, 1, 2])),
                  i
                )
              })
            })(
              (e = sy(e)),
              this.depthwiseKernel.read(),
              this.strides,
              this.padding,
              this.dataFormat,
              null,
            )
          return (
            this.useBias && (t = Ag(t, this.bias.read(), this.dataFormat)),
            null != this.activation && (t = this.activation.apply(t)),
            t
          )
        })
      }
      computeOutputShape(e) {
        e = ay(e)
        const t = 'channelsFirst' === this.dataFormat ? e[2] : e[1],
          n = 'channelsFirst' === this.dataFormat ? e[3] : e[2],
          r =
            'channelsFirst' === this.dataFormat
              ? e[1] * this.depthMultiplier
              : e[3] * this.depthMultiplier,
          s = xx(t, this.kernelSize[0], this.padding, this.strides[0]),
          a = xx(n, this.kernelSize[1], this.padding, this.strides[1])
        return 'channelsFirst' === this.dataFormat
          ? [e[0], r, s, a]
          : [e[0], s, a, r]
      }
      getConfig() {
        const e = super.getConfig()
        return (
          (e.depthMultiplier = this.depthMultiplier),
          (e.depthwiseInitializer = ey(this.depthwiseInitializer)),
          (e.depthwiseRegularizer = ux(this.depthwiseRegularizer)),
          (e.depthwiseConstraint = Fy(this.depthwiseRegularizer)),
          e
        )
        /**
         * @license
         * Copyright 2018 Google LLC
         *
         * Use of this source code is governed by an MIT-style
         * license that can be found in the LICENSE file or at
         * https://opensource.org/licenses/MIT.
         * =============================================================================
         */
      }
    }
    function Mx(e, t, n, r) {
      if (Array.isArray(e)) {
        if (null != t || null != n)
          throw new Im(
            'When inputs is an array, neither initialState or constants should be provided',
          )
        null != r &&
          ((n = e.slice(e.length - r, e.length)),
          (e = e.slice(0, e.length - r))),
          e.length > 1 && (t = e.slice(1, e.length)),
          (e = e[0])
      }
      function s(e) {
        return null == e || Array.isArray(e) ? e : [e]
      }
      return { inputs: e, initialState: (t = s(t)), constants: (n = s(n)) }
    }
    function Lx(e, t, n, r = !1, s, a, i = !1, o = !1) {
      return qi(() => {
        const l = t.shape.length
        if (l < 3) throw new Im(`Input should be at least 3D, but is ${l}D.`)
        const u = [1, 0].concat(mg(2, l))
        if (((t = th(t, u)), null != a))
          throw new Nm(
            'The rnn() functoin of the deeplearn.js backend does not support constants yet.',
          )
        i &&
          console.warn(
            'Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend.',
          ),
          null != s &&
            ((s = Ka(Ka(s, 'bool'), 'float32')).rank === l - 1 &&
              (s = Gl(s, -1)),
            (s = th(s, u))),
          r && ((t = hc(t, 0)), null != s && (s = hc(s, 0)))
        const c = []
        let h,
          p = n
        const d = t.shape[0],
          f = Xc(t)
        let m, g
        null != s && (m = Xc(s))
        for (let t = 0; t < d; ++t) {
          const n = f[t],
            r = qi(() => e(n, p))
          if (null == s) (h = r[0]), (p = r[1])
          else {
            const e = qi(() => {
              const e = m[t],
                n = pu(zu(e), e)
              return {
                output: ro(Do(r[0], e), Do(p[0], n)),
                newStates: p.map((t, s) => ro(Do(r[1][s], e), Do(t, n))),
              }
            })
            ;(h = e.output), (p = e.newStates)
          }
          o && c.push(h)
        }
        return o && (g = Mc(c, 1)), [h, g, p]
      })
    }
    ;(Ox.className = 'DepthwiseConv2D'), Gi(Ox)
    class zx extends gy {
      constructor(e) {
        let t
        if ((super(e), null == e.cell))
          throw new Im('cell property is missing for the constructor of RNN.')
        if (
          ((t = Array.isArray(e.cell) ? new jx({ cells: e.cell }) : e.cell),
          null == t.stateSize)
        )
          throw new Im(
            'The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).',
          )
        ;(this.cell = t),
          (this.returnSequences =
            null != e.returnSequences && e.returnSequences),
          (this.returnState = null != e.returnState && e.returnState),
          (this.goBackwards = null != e.goBackwards && e.goBackwards),
          (this._stateful = null != e.stateful && e.stateful),
          (this.unroll = null != e.unroll && e.unroll),
          (this.supportsMasking = !0),
          (this.inputSpec = [new hy({ ndim: 3 })]),
          (this.stateSpec = null),
          (this.states_ = null),
          (this.numConstants = null),
          (this.keptStates = [])
      }
      getStates() {
        return null == this.states_
          ? mg(
              0,
              Array.isArray(this.cell.stateSize)
                ? this.cell.stateSize.length
                : 1,
            ).map((e) => null)
          : this.states_
      }
      setStates(e) {
        this.states_ = e
      }
      computeOutputShape(e) {
        ny(e) && (e = e[0])
        let t = this.cell.stateSize
        Array.isArray(t) || (t = [t])
        const n = t[0]
        let r
        if (
          ((r = this.returnSequences ? [e[0], e[1], n] : [e[0], n]),
          this.returnState)
        ) {
          const n = []
          for (const r of t) n.push([e[0], r])
          return [r].concat(n)
        }
        return r
      }
      computeMask(e, t) {
        return qi(() => {
          Array.isArray(t) && (t = t[0])
          const e = this.returnSequences ? t : null
          if (this.returnState) {
            const t = this.states.map((e) => null)
            return [e].concat(t)
          }
          return e
        })
      }
      get states() {
        if (null == this.states_) {
          const e = Array.isArray(this.cell.stateSize)
              ? this.cell.stateSize.length
              : 1,
            t = []
          for (let n = 0; n < e; ++n) t.push(null)
          return t
        }
        return this.states_
      }
      set states(e) {
        this.states_ = e
      }
      build(e) {
        if (null != this.numConstants)
          throw new Nm('Constants support is not implemented in RNN yet.')
        ny(e) && (e = e[0])
        const t = this.stateful ? e[0] : null,
          n = e.slice(2)
        this.inputSpec[0] = new hy({ shape: [t, null, ...n] })
        const r = [e[0]].concat(e.slice(2))
        let s
        if (
          (this.cell.build(r),
          (s = Array.isArray(this.cell.stateSize)
            ? this.cell.stateSize
            : [this.cell.stateSize]),
          null != this.stateSpec)
        ) {
          if (
            !B(
              this.stateSpec.map((e) => e.shape[e.shape.length - 1]),
              s,
            )
          )
            throw new Im(
              `An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`,
            )
        } else this.stateSpec = s.map((e) => new hy({ shape: [null, e] }))
        this.stateful && this.resetStates()
      }
      resetStates(e, t = !1) {
        qi(() => {
          if (!this.stateful)
            throw new vm(
              'Cannot call resetStates() on an RNN Layer that is not stateful.',
            )
          const n = this.inputSpec[0].shape[0]
          if (null == n)
            throw new Im(
              'If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.',
            )
          if (null == this.states_)
            Array.isArray(this.cell.stateSize)
              ? (this.states_ = this.cell.stateSize.map((e) => Cu([n, e])))
              : (this.states_ = [Cu([n, this.cell.stateSize])])
          else if (null == e)
            Ki(this.states_),
              null != this.keptStates &&
                (Ki(this.keptStates), (this.keptStates = [])),
              Array.isArray(this.cell.stateSize)
                ? (this.states_ = this.cell.stateSize.map((e) => Cu([n, e])))
                : (this.states_[0] = Cu([n, this.cell.stateSize]))
          else {
            if (
              (Array.isArray(e) || (e = [e]), e.length !== this.states_.length)
            )
              throw new Im(
                `Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`,
              )
            !0 === t
              ? this.keptStates.push(this.states_.slice())
              : Ki(this.states_)
            for (let t = 0; t < this.states_.length; ++t) {
              const r = e[t],
                s = Array.isArray(this.cell.stateSize)
                  ? this.cell.stateSize[t]
                  : this.cell.stateSize,
                a = [n, s]
              if (!B(r.shape, a))
                throw new Im(
                  `State ${t} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${r.shape}`,
                )
              this.states_[t] = r
            }
          }
          this.states_ = this.states_.map((e) => Xi(e.clone()))
        })
      }
      apply(e, t) {
        let n = null == t ? null : t.initialState,
          r = null == t ? null : t.constants
        null == t && (t = {})
        const s = Mx(e, n, r, this.numConstants)
        ;(e = s.inputs), (n = s.initialState), (r = s.constants)
        let a = [],
          i = []
        if (null != n) {
          ;(t.initialState = n), (a = a.concat(n)), (this.stateSpec = [])
          for (const e of n) this.stateSpec.push(new hy({ shape: e.shape }))
          i = i.concat(this.stateSpec)
        }
        if (
          (null != r &&
            ((t.constants = r),
            (a = a.concat(r)),
            (this.numConstants = r.length)),
          a[0] instanceof py)
        ) {
          const n = [e].concat(a),
            r = this.inputSpec.concat(i),
            s = this.inputSpec
          this.inputSpec = r
          const o = super.apply(n, t)
          return (this.inputSpec = s), o
        }
        return super.apply(e, t)
      }
      call(e, t) {
        return qi(() => {
          const n = null == t ? null : t.mask,
            r = null == t ? null : t.training
          let s = null == t ? null : t.initialState
          ;(e = sy(e)),
            null == s &&
              (s = this.stateful ? this.states_ : this.getInitialState(e))
          const a = Array.isArray(this.cell.stateSize)
            ? this.cell.stateSize.length
            : 1
          if (s.length !== a)
            throw new Im(
              `RNN Layer has ${a} state(s) but was passed ${s.length} initial state(s).`,
            )
          this.unroll &&
            console.warn(
              'Ignoring unroll = true for RNN layer, due to imperative backend.',
            )
          const i = { training: r },
            o = Lx(
              (e, t) => {
                const n = this.cell.call([e].concat(t), i)
                return [n[0], n.slice(1)]
              },
              e,
              s,
              this.goBackwards,
              n,
              null,
              this.unroll,
              this.returnSequences,
            ),
            l = o[0],
            u = o[1],
            c = o[2]
          this.stateful && this.resetStates(c, r)
          const h = this.returnSequences ? u : l
          return this.returnState ? [h].concat(c) : h
        })
      }
      getInitialState(e) {
        return qi(() => {
          let t = Cu(e.shape)
          return (
            (t = Pl(t, [1, 2])),
            (t = xg(t)),
            Array.isArray(this.cell.stateSize)
              ? this.cell.stateSize.map((e) => (e > 1 ? Sg(t, [1, e]) : t))
              : this.cell.stateSize > 1
                ? [Sg(t, [1, this.cell.stateSize])]
                : [t]
          )
        })
      }
      get trainableWeights() {
        return this.trainable ? this.cell.trainableWeights : []
      }
      get nonTrainableWeights() {
        return this.trainable
          ? this.cell.nonTrainableWeights
          : this.cell.weights
      }
      setFastWeightInitDuringBuild(e) {
        super.setFastWeightInitDuringBuild(e),
          null != this.cell && this.cell.setFastWeightInitDuringBuild(e)
      }
      getConfig() {
        const e = super.getConfig(),
          t = {
            returnSequences: this.returnSequences,
            returnState: this.returnState,
            goBackwards: this.goBackwards,
            stateful: this.stateful,
            unroll: this.unroll,
          }
        null != this.numConstants && (t.numConstants = this.numConstants)
        const n = this.cell.getConfig()
        return (
          this.getClassName() === zx.className &&
            (t.cell = { className: this.cell.getClassName(), config: n }),
          Object.assign({}, n, e, t)
        )
      }
      static fromConfig(e, t, n = {}) {
        const r = qy(t.cell, n)
        return new e(Object.assign(t, { cell: r }))
      }
    }
    ;(zx.className = 'RNN'), Gi(zx)
    class Px extends gy {}
    class Bx extends Px {
      constructor(e) {
        super(e),
          (this.DEFAULT_ACTIVATION = 'tanh'),
          (this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal'),
          (this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal'),
          (this.DEFAULT_BIAS_INITIALIZER = 'zeros'),
          (this.units = e.units),
          Um(this.units, 'units'),
          (this.activation = ax(
            null == e.activation ? this.DEFAULT_ACTIVATION : e.activation,
          )),
          (this.useBias = null == e.useBias || e.useBias),
          (this.kernelInitializer = ty(
            e.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER,
          )),
          (this.recurrentInitializer = ty(
            e.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER,
          )),
          (this.biasInitializer = ty(
            e.biasInitializer || this.DEFAULT_BIAS_INITIALIZER,
          )),
          (this.kernelRegularizer = hx(e.kernelRegularizer)),
          (this.recurrentRegularizer = hx(e.recurrentRegularizer)),
          (this.biasRegularizer = hx(e.biasRegularizer)),
          (this.kernelConstraint = Oy(e.kernelConstraint)),
          (this.recurrentConstraint = Oy(e.recurrentConstraint)),
          (this.biasConstraint = Oy(e.biasConstraint)),
          (this.dropout = dg([1, fg([0, null == e.dropout ? 0 : e.dropout])])),
          (this.recurrentDropout = dg([
            1,
            fg([0, null == e.recurrentDropout ? 0 : e.recurrentDropout]),
          ])),
          (this.dropoutFunc = e.dropoutFunc),
          (this.stateSize = this.units),
          (this.dropoutMask = null),
          (this.recurrentDropoutMask = null)
      }
      build(e) {
        ;(e = ay(e)),
          (this.kernel = this.addWeight(
            'kernel',
            [e[e.length - 1], this.units],
            null,
            this.kernelInitializer,
            this.kernelRegularizer,
            !0,
            this.kernelConstraint,
          )),
          (this.recurrentKernel = this.addWeight(
            'recurrent_kernel',
            [this.units, this.units],
            null,
            this.recurrentInitializer,
            this.recurrentRegularizer,
            !0,
            this.recurrentConstraint,
          )),
          this.useBias
            ? (this.bias = this.addWeight(
                'bias',
                [this.units],
                null,
                this.biasInitializer,
                this.biasRegularizer,
                !0,
                this.biasConstraint,
              ))
            : (this.bias = null),
          (this.built = !0)
      }
      call(e, t) {
        return qi(() => {
          if (2 !== e.length)
            throw new Im(
              `SimpleRNNCell expects 2 input Tensors, got ${e.length}.`,
            )
          let n = e[1]
          e = e[0]
          const r = null != t.training && t.training
          let s
          0 < this.dropout &&
            this.dropout < 1 &&
            null == this.dropoutMask &&
            (this.dropoutMask = qx({
              ones: () => zu(e),
              rate: this.dropout,
              training: r,
              dropoutFunc: this.dropoutFunc,
            })),
            0 < this.recurrentDropout &&
              this.recurrentDropout < 1 &&
              null == this.recurrentDropoutMask &&
              (this.recurrentDropoutMask = qx({
                ones: () => zu(n),
                rate: this.recurrentDropout,
                training: r,
                dropoutFunc: this.dropoutFunc,
              }))
          const a = this.dropoutMask,
            i = this.recurrentDropoutMask
          ;(s = Cg(null != a ? Do(e, a) : e, this.kernel.read())),
            null != this.bias && (s = Ag(s, this.bias.read())),
            null != i && (n = Do(n, i))
          let o = ro(s, Cg(n, this.recurrentKernel.read()))
          return (
            null != this.activation && (o = this.activation.apply(o)), [o, o]
          )
        })
      }
      getConfig() {
        const e = super.getConfig(),
          t = {
            units: this.units,
            activation: rx(this.activation),
            useBias: this.useBias,
            kernelInitializer: ey(this.kernelInitializer),
            recurrentInitializer: ey(this.recurrentInitializer),
            biasInitializer: ey(this.biasInitializer),
            kernelRegularizer: ux(this.kernelRegularizer),
            recurrentRegularizer: ux(this.recurrentRegularizer),
            biasRegularizer: ux(this.biasRegularizer),
            activityRegularizer: ux(this.activityRegularizer),
            kernelConstraint: Fy(this.kernelConstraint),
            recurrentConstraint: Fy(this.recurrentConstraint),
            biasConstraint: Fy(this.biasConstraint),
            dropout: this.dropout,
            recurrentDropout: this.recurrentDropout,
          }
        return Object.assign({}, e, t)
      }
    }
    ;(Bx.className = 'SimpleRNNCell'), Gi(Bx)
    class Wx extends zx {
      constructor(e) {
        ;(e.cell = new Bx(e)), super(e)
      }
      call(e, t) {
        return qi(() => {
          null != this.cell.dropoutMask &&
            (Ki(this.cell.dropoutMask), (this.cell.dropoutMask = null)),
            null != this.cell.recurrentDropoutMask &&
              (Ki(this.cell.recurrentDropoutMask),
              (this.cell.recurrentDropoutMask = null))
          const n = null == t ? null : t.mask,
            r = null == t ? null : t.training,
            s = null == t ? null : t.initialState
          return super.call(e, { mask: n, training: r, initialState: s })
        })
      }
      static fromConfig(e, t) {
        return new e(t)
      }
    }
    ;(Wx.className = 'SimpleRNN'), Gi(Wx)
    class Vx extends Px {
      constructor(e) {
        if (
          (super(e),
          (this.DEFAULT_ACTIVATION = 'tanh'),
          (this.DEFAULT_RECURRENT_ACTIVATION = 'hardSigmoid'),
          (this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal'),
          (this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal'),
          (this.DEFAULT_BIAS_INITIALIZER = 'zeros'),
          e.resetAfter)
        )
          throw new Im(
            'GRUCell does not support reset_after parameter set to true.',
          )
        ;(this.units = e.units),
          Um(this.units, 'units'),
          (this.activation = ax(
            void 0 === e.activation ? this.DEFAULT_ACTIVATION : e.activation,
          )),
          (this.recurrentActivation = ax(
            void 0 === e.recurrentActivation
              ? this.DEFAULT_RECURRENT_ACTIVATION
              : e.recurrentActivation,
          )),
          (this.useBias = null == e.useBias || e.useBias),
          (this.kernelInitializer = ty(
            e.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER,
          )),
          (this.recurrentInitializer = ty(
            e.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER,
          )),
          (this.biasInitializer = ty(
            e.biasInitializer || this.DEFAULT_BIAS_INITIALIZER,
          )),
          (this.kernelRegularizer = hx(e.kernelRegularizer)),
          (this.recurrentRegularizer = hx(e.recurrentRegularizer)),
          (this.biasRegularizer = hx(e.biasRegularizer)),
          (this.kernelConstraint = Oy(e.kernelConstraint)),
          (this.recurrentConstraint = Oy(e.recurrentConstraint)),
          (this.biasConstraint = Oy(e.biasConstraint)),
          (this.dropout = dg([1, fg([0, null == e.dropout ? 0 : e.dropout])])),
          (this.recurrentDropout = dg([
            1,
            fg([0, null == e.recurrentDropout ? 0 : e.recurrentDropout]),
          ])),
          (this.dropoutFunc = e.dropoutFunc),
          (this.implementation = e.implementation),
          (this.stateSize = this.units),
          (this.dropoutMask = null),
          (this.recurrentDropoutMask = null)
      }
      build(e) {
        const t = (e = ay(e))[e.length - 1]
        ;(this.kernel = this.addWeight(
          'kernel',
          [t, 3 * this.units],
          null,
          this.kernelInitializer,
          this.kernelRegularizer,
          !0,
          this.kernelConstraint,
        )),
          (this.recurrentKernel = this.addWeight(
            'recurrent_kernel',
            [this.units, 3 * this.units],
            null,
            this.recurrentInitializer,
            this.recurrentRegularizer,
            !0,
            this.recurrentConstraint,
          )),
          this.useBias
            ? (this.bias = this.addWeight(
                'bias',
                [3 * this.units],
                null,
                this.biasInitializer,
                this.biasRegularizer,
                !0,
                this.biasConstraint,
              ))
            : (this.bias = null),
          (this.built = !0)
      }
      call(e, t) {
        return qi(() => {
          if (2 !== e.length)
            throw new Im(
              `GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`,
            )
          const n = null != t.training && t.training
          let r = e[1]
          ;(e = e[0]),
            0 < this.dropout &&
              this.dropout < 1 &&
              null == this.dropoutMask &&
              (this.dropoutMask = qx({
                ones: () => zu(e),
                rate: this.dropout,
                training: n,
                count: 3,
                dropoutFunc: this.dropoutFunc,
              })),
            0 < this.recurrentDropout &&
              this.recurrentDropout < 1 &&
              null == this.recurrentDropoutMask &&
              (this.recurrentDropoutMask = qx({
                ones: () => zu(r),
                rate: this.recurrentDropout,
                training: n,
                count: 3,
                dropoutFunc: this.dropoutFunc,
              }))
          const s = this.dropoutMask,
            a = this.recurrentDropoutMask
          let i, o, l
          0 < this.dropout && this.dropout < 1 && (e = Do(e, s[0]))
          let u = Cg(e, this.kernel.read())
          this.useBias && (u = Ag(u, this.bias.read())),
            0 < this.recurrentDropout &&
              this.recurrentDropout < 1 &&
              (r = Do(r, a[0]))
          const c = this.recurrentKernel.read(),
            [h, p] = _c(c, [2 * this.units, this.units], c.rank - 1),
            d = Cg(r, h),
            [f, m, g] = _c(u, 3, u.rank - 1),
            [y, b] = _c(d, 2, d.rank - 1)
          ;(i = this.recurrentActivation.apply(ro(f, y))),
            (o = this.recurrentActivation.apply(ro(m, b)))
          const x = Cg(Do(o, r), p)
          l = this.activation.apply(ro(g, x))
          const w = ro(Do(i, r), Do(ro(1, uu(i)), l))
          return [w, w]
        })
      }
      getConfig() {
        const e = super.getConfig(),
          t = {
            units: this.units,
            activation: rx(this.activation),
            recurrentActivation: rx(this.recurrentActivation),
            useBias: this.useBias,
            kernelInitializer: ey(this.kernelInitializer),
            recurrentInitializer: ey(this.recurrentInitializer),
            biasInitializer: ey(this.biasInitializer),
            kernelRegularizer: ux(this.kernelRegularizer),
            recurrentRegularizer: ux(this.recurrentRegularizer),
            biasRegularizer: ux(this.biasRegularizer),
            activityRegularizer: ux(this.activityRegularizer),
            kernelConstraint: Fy(this.kernelConstraint),
            recurrentConstraint: Fy(this.recurrentConstraint),
            biasConstraint: Fy(this.biasConstraint),
            dropout: this.dropout,
            recurrentDropout: this.recurrentDropout,
            implementation: this.implementation,
            resetAfter: !1,
          }
        return Object.assign({}, e, t)
      }
    }
    ;(Vx.className = 'GRUCell'), Gi(Vx)
    class Ux extends zx {
      constructor(e) {
        0 === e.implementation &&
          console.warn(
            '`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call.',
          ),
          (e.cell = new Vx(e)),
          super(e)
      }
      call(e, t) {
        return qi(() => {
          null != this.cell.dropoutMask &&
            (Ki(this.cell.dropoutMask), (this.cell.dropoutMask = null)),
            null != this.cell.recurrentDropoutMask &&
              (Ki(this.cell.recurrentDropoutMask),
              (this.cell.recurrentDropoutMask = null))
          const n = null == t ? null : t.mask,
            r = null == t ? null : t.training,
            s = null == t ? null : t.initialState
          return super.call(e, { mask: n, training: r, initialState: s })
        })
      }
      static fromConfig(e, t) {
        return 0 === t.implmentation && (t.implementation = 1), new e(t)
      }
    }
    ;(Ux.className = 'GRU'), Gi(Ux)
    class Gx extends Px {
      constructor(e) {
        super(e),
          (this.DEFAULT_ACTIVATION = 'tanh'),
          (this.DEFAULT_RECURRENT_ACTIVATION = 'hardSigmoid'),
          (this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal'),
          (this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal'),
          (this.DEFAULT_BIAS_INITIALIZER = 'zeros'),
          (this.units = e.units),
          Um(this.units, 'units'),
          (this.activation = ax(
            void 0 === e.activation ? this.DEFAULT_ACTIVATION : e.activation,
          )),
          (this.recurrentActivation = ax(
            void 0 === e.recurrentActivation
              ? this.DEFAULT_RECURRENT_ACTIVATION
              : e.recurrentActivation,
          )),
          (this.useBias = null == e.useBias || e.useBias),
          (this.kernelInitializer = ty(
            e.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER,
          )),
          (this.recurrentInitializer = ty(
            e.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER,
          )),
          (this.biasInitializer = ty(
            e.biasInitializer || this.DEFAULT_BIAS_INITIALIZER,
          )),
          (this.unitForgetBias = e.unitForgetBias),
          (this.kernelRegularizer = hx(e.kernelRegularizer)),
          (this.recurrentRegularizer = hx(e.recurrentRegularizer)),
          (this.biasRegularizer = hx(e.biasRegularizer)),
          (this.kernelConstraint = Oy(e.kernelConstraint)),
          (this.recurrentConstraint = Oy(e.recurrentConstraint)),
          (this.biasConstraint = Oy(e.biasConstraint)),
          (this.dropout = dg([1, fg([0, null == e.dropout ? 0 : e.dropout])])),
          (this.recurrentDropout = dg([
            1,
            fg([0, null == e.recurrentDropout ? 0 : e.recurrentDropout]),
          ])),
          (this.dropoutFunc = e.dropoutFunc),
          (this.implementation = e.implementation),
          (this.stateSize = [this.units, this.units]),
          (this.dropoutMask = null),
          (this.recurrentDropoutMask = null)
      }
      build(e) {
        var t
        const n = (e = ay(e))[e.length - 1]
        let r
        if (
          ((this.kernel = this.addWeight(
            'kernel',
            [n, 4 * this.units],
            null,
            this.kernelInitializer,
            this.kernelRegularizer,
            !0,
            this.kernelConstraint,
          )),
          (this.recurrentKernel = this.addWeight(
            'recurrent_kernel',
            [this.units, 4 * this.units],
            null,
            this.recurrentInitializer,
            this.recurrentRegularizer,
            !0,
            this.recurrentConstraint,
          )),
          this.useBias)
        ) {
          if (this.unitForgetBias) {
            const e = this.biasInitializer,
              n = this.units
            r = new (((t = class extends Mg {
              apply(t, r) {
                const s = e.apply([n]),
                  a = new zg().apply([n]),
                  i = e.apply([2 * n])
                return Ng(Ng(s, a), i)
              }
            }).className = 'CustomInit'),
            t)()
          } else r = this.biasInitializer
          this.bias = this.addWeight(
            'bias',
            [4 * this.units],
            null,
            r,
            this.biasRegularizer,
            !0,
            this.biasConstraint,
          )
        } else this.bias = null
        this.built = !0
      }
      call(e, t) {
        return qi(() => {
          const n = null != t.training && t.training
          if (3 !== e.length)
            throw new Im(
              `LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`,
            )
          let r = e[1]
          const s = e[2]
          ;(e = e[0]),
            0 < this.dropout &&
              this.dropout < 1 &&
              null == this.dropoutMask &&
              (this.dropoutMask = qx({
                ones: () => zu(e),
                rate: this.dropout,
                training: n,
                count: 4,
                dropoutFunc: this.dropoutFunc,
              })),
            0 < this.recurrentDropout &&
              this.recurrentDropout < 1 &&
              null == this.recurrentDropoutMask &&
              (this.recurrentDropoutMask = qx({
                ones: () => zu(r),
                rate: this.recurrentDropout,
                training: n,
                count: 4,
                dropoutFunc: this.dropoutFunc,
              }))
          const a = this.dropoutMask,
            i = this.recurrentDropoutMask
          let o, l, u, c
          0 < this.dropout && this.dropout < 1 && (e = Do(e, a[0]))
          let h = Cg(e, this.kernel.read())
          0 < this.recurrentDropout &&
            this.recurrentDropout < 1 &&
            (r = Do(r, i[0])),
            (h = ro(h, Cg(r, this.recurrentKernel.read()))),
            this.useBias && (h = Ag(h, this.bias.read()))
          const [p, d, f, m] = _c(h, 4, h.rank - 1)
          ;(o = this.recurrentActivation.apply(p)),
            (l = this.recurrentActivation.apply(d)),
            (u = ro(Do(l, s), Do(o, this.activation.apply(f)))),
            (c = this.recurrentActivation.apply(m))
          const g = Do(c, this.activation.apply(u))
          return [g, g, u]
        })
      }
      getConfig() {
        const e = super.getConfig(),
          t = {
            units: this.units,
            activation: rx(this.activation),
            recurrentActivation: rx(this.recurrentActivation),
            useBias: this.useBias,
            kernelInitializer: ey(this.kernelInitializer),
            recurrentInitializer: ey(this.recurrentInitializer),
            biasInitializer: ey(this.biasInitializer),
            unitForgetBias: this.unitForgetBias,
            kernelRegularizer: ux(this.kernelRegularizer),
            recurrentRegularizer: ux(this.recurrentRegularizer),
            biasRegularizer: ux(this.biasRegularizer),
            activityRegularizer: ux(this.activityRegularizer),
            kernelConstraint: Fy(this.kernelConstraint),
            recurrentConstraint: Fy(this.recurrentConstraint),
            biasConstraint: Fy(this.biasConstraint),
            dropout: this.dropout,
            recurrentDropout: this.recurrentDropout,
            implementation: this.implementation,
          }
        return Object.assign({}, e, t)
      }
    }
    ;(Gx.className = 'LSTMCell'), Gi(Gx)
    class Hx extends zx {
      constructor(e) {
        0 === e.implementation &&
          console.warn(
            '`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call.',
          ),
          (e.cell = new Gx(e)),
          super(e)
      }
      call(e, t) {
        return qi(() => {
          null != this.cell.dropoutMask &&
            (Ki(this.cell.dropoutMask), (this.cell.dropoutMask = null)),
            null != this.cell.recurrentDropoutMask &&
              (Ki(this.cell.recurrentDropoutMask),
              (this.cell.recurrentDropoutMask = null))
          const n = null == t ? null : t.mask,
            r = null == t ? null : t.training,
            s = null == t ? null : t.initialState
          return super.call(e, { mask: n, training: r, initialState: s })
        })
      }
      static fromConfig(e, t) {
        return 0 === t.implmentation && (t.implementation = 1), new e(t)
      }
    }
    ;(Hx.className = 'LSTM'), Gi(Hx)
    class jx extends Px {
      constructor(e) {
        super(e), (this.cells = e.cells)
      }
      get stateSize() {
        const e = []
        for (const t of this.cells.slice().reverse())
          Array.isArray(t.stateSize)
            ? e.push(...t.stateSize)
            : e.push(t.stateSize)
        return e
      }
      call(e, t) {
        return qi(() => {
          let n = e.slice(1)
          const r = []
          for (const e of this.cells.slice().reverse())
            Array.isArray(e.stateSize)
              ? r.push(n.splice(0, e.stateSize.length))
              : r.push(n.splice(0, 1))
          r.reverse()
          const s = []
          let a
          for (let i = 0; i < this.cells.length; ++i) {
            const o = this.cells[i]
            ;(n = r[i]),
              (a = 0 === i ? [e[0]].concat(n) : [a[0]].concat(n)),
              (a = o.call(a, t)),
              s.push(a.slice(1))
          }
          n = []
          for (const e of s.slice().reverse()) n.push(...e)
          return [a[0]].concat(n)
        })
      }
      build(e) {
        let t
        ny(e) && (e = e[0]),
          this.cells.forEach((n, r) => {
            ig(`RNNCell_${r}`, () => {
              n.build(e),
                (t = Array.isArray(n.stateSize) ? n.stateSize[0] : n.stateSize),
                (e = [e[0], t])
            })
          }),
          (this.built = !0)
      }
      getConfig() {
        const e = super.getConfig(),
          t = {
            cells: this.cells.map((e) => ({
              className: e.getClassName(),
              config: e.getConfig(),
            })),
          }
        return Object.assign({}, e, t)
      }
      static fromConfig(e, t, n = {}) {
        const r = []
        for (const e of t.cells) r.push(qy(e, n))
        return new e({ cells: r })
      }
      get trainableWeights() {
        if (!this.trainable) return []
        const e = []
        for (const t of this.cells) e.push(...t.trainableWeights)
        return e
      }
      get nonTrainableWeights() {
        const e = []
        for (const t of this.cells) e.push(...t.nonTrainableWeights)
        if (!this.trainable) {
          const t = []
          for (const e of this.cells) t.push(...e.trainableWeights)
          return t.concat(e)
        }
        return e
      }
      getWeights() {
        const e = []
        for (const t of this.cells) e.push(...t.weights)
        return uy(e)
      }
      setWeights(e) {
        const t = []
        for (const n of this.cells) {
          const r = n.weights.length,
            s = e.splice(r)
          for (let e = 0; e < n.weights.length; ++e)
            t.push([n.weights[e], s[e]])
        }
        cy(t)
      }
    }
    function qx(e) {
      const {
          ones: t,
          rate: n,
          training: r = !1,
          count: s = 1,
          dropoutFunc: a,
        } = e,
        i = () => (null != a ? a(t(), n) : _g(t(), n)),
        o = () => Fg(i, t, r)
      return !s || s <= 1
        ? Xi(o().clone())
        : Array(s)
            .fill(void 0)
            .map(o)
            .map((e) => Xi(e.clone()))
    }
    ;(jx.className = 'StackedRNNCells'), Gi(jx)
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */
    var Kx, Xx
    class Yx extends zx {
      constructor(e) {
        if (e.unroll)
          throw new Nm('Unrolling is not possible with convolutional RNNs.')
        if (Array.isArray(e.cell))
          throw new Nm(
            'It is not possible at the moment to stack convolutional cells.',
          )
        super(e), (this.inputSpec = [new hy({ ndim: 5 })])
      }
      call(e, t) {
        return qi(() => {
          if (
            (null != this.cell.dropoutMask &&
              (Ki(this.cell.dropoutMask), (this.cell.dropoutMask = null)),
            null != this.cell.recurrentDropoutMask &&
              (Ki(this.cell.recurrentDropoutMask),
              (this.cell.recurrentDropoutMask = null)),
            t && t.constants)
          )
            throw new Im('ConvRNN2D cell does not support constants')
          const n = null == t ? null : t.mask,
            r = null == t ? null : t.training,
            s = null == t ? null : t.initialState
          return super.call(e, { mask: n, training: r, initialState: s })
        })
      }
      computeOutputShape(e) {
        let t = this.computeSingleOutputShape(e)
        return (
          this.returnSequences || (t = [t[0], ...t.slice(2)]),
          this.returnState &&
            (t = [t, ...Array(2).fill([e[0], ...t.slice(-3)])]),
          t
        )
      }
      getInitialState(e) {
        return qi(() => {
          const { stateSize: t } = this.cell,
            n = e.shape,
            r = this.computeSingleOutputShape(n),
            s = Cu([r[0], ...r.slice(2)])
          return Array.isArray(t) ? Array(t.length).fill(s) : [s]
        })
      }
      resetStates(e, t = !1) {
        qi(() => {
          if (!this.stateful)
            throw new vm(
              'Cannot call resetStates() on an RNN Layer that is not stateful.',
            )
          const n = this.inputSpec[0].shape,
            r = this.computeSingleOutputShape(n),
            s = [r[0], ...r.slice(2)]
          if (null == n[0])
            throw new Im(
              'If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.',
            )
          if (null == this.getStates())
            Array.isArray(this.cell.stateSize)
              ? (this.states_ = this.cell.stateSize.map(() => Cu(s)))
              : (this.states_ = [Cu(s)])
          else if (null == e)
            Ki(this.states_),
              null != this.keptStates &&
                (Ki(this.keptStates), (this.keptStates = [])),
              Array.isArray(this.cell.stateSize)
                ? (this.states_ = this.cell.stateSize.map(() => Cu(s)))
                : (this.states_[0] = Cu(s))
          else {
            if (
              (Array.isArray(e) || (e = [e]), e.length !== this.states_.length)
            )
              throw new Im(
                `Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`,
              )
            t ? this.keptStates.push(this.states_.slice()) : Ki(this.states_)
            for (let t = 0; t < this.states_.length; ++t) {
              const n = e[t],
                r = s
              if (!B(n.shape, r))
                throw new Im(
                  `State ${t} is incompatible with layer ${this.name}: expected shape=${r}, received shape=${n.shape}`,
                )
              this.states_[t] = n
            }
          }
          this.states_ = this.states_.map((e) => Xi(e.clone()))
        })
      }
      computeSingleOutputShape(e) {
        const {
            dataFormat: t,
            filters: n,
            kernelSize: r,
            padding: s,
            strides: a,
            dilationRate: i,
          } = this.cell,
          o = 'channelsFirst' === t,
          l = e[o ? 3 : 2],
          u = e[o ? 4 : 3],
          c = xx(l, r[0], s, a[0], i[0]),
          h = xx(u, r[1], s, a[1], i[1])
        return [...e.slice(0, 2), ...(o ? [n, c, h] : [c, h, n])]
      }
    }
    Yx.className = 'ConvRNN2D'
    class Zx extends Gx {
      constructor(e) {
        const {
          filters: t,
          kernelSize: n,
          strides: r,
          padding: s,
          dataFormat: a,
          dilationRate: i,
        } = e
        super(Object.assign({}, e, { units: t })),
          (this.filters = t),
          Um(this.filters, 'filters'),
          (this.kernelSize = bx(n, 2, 'kernelSize')),
          this.kernelSize.forEach((e) => Um(e, 'kernelSize')),
          (this.strides = bx(r || 1, 2, 'strides')),
          this.strides.forEach((e) => Um(e, 'strides')),
          (this.padding = s || 'valid'),
          rg(this.padding),
          (this.dataFormat = a || 'channelsLast'),
          ng(this.dataFormat),
          (this.dilationRate = bx(i || 1, 2, 'dilationRate')),
          this.dilationRate.forEach((e) => Um(e, 'dilationRate'))
      }
      build(e) {
        var t
        e = ay(e)
        const n = 'channelsFirst' === this.dataFormat ? 1 : e.length - 1
        if (null == e[n])
          throw new Im(
            `The channel dimension of the input should be defined. Found ${e[n]}`,
          )
        const r = e[n],
          s = this.kernelSize.concat([r, 4 * this.filters])
        this.kernel = this.addWeight(
          'kernel',
          s,
          null,
          this.kernelInitializer,
          this.kernelRegularizer,
          !0,
          this.kernelConstraint,
        )
        const a = this.kernelSize.concat([this.filters, 4 * this.filters])
        if (
          ((this.recurrentKernel = this.addWeight(
            'recurrent_kernel',
            a,
            null,
            this.recurrentInitializer,
            this.recurrentRegularizer,
            !0,
            this.recurrentConstraint,
          )),
          this.useBias)
        ) {
          let e
          if (this.unitForgetBias) {
            const n = this.biasInitializer,
              r = this.filters
            e = new (((t = class extends Mg {
              apply(e, t) {
                return Ig([n.apply([r]), $u([r]), n.apply([2 * r])])
              }
            }).className = 'CustomInit'),
            t)()
          } else e = this.biasInitializer
          this.bias = this.addWeight(
            'bias',
            [4 * this.filters],
            null,
            e,
            this.biasRegularizer,
            !0,
            this.biasConstraint,
          )
        }
        this.built = !0
      }
      call(e, t) {
        return qi(() => {
          if (3 !== e.length)
            throw new Im(
              `ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`,
            )
          const n = t.training || !1,
            r = e[0],
            s = e[1],
            a = e[2]
          0 < this.dropout &&
            this.dropout < 1 &&
            null == this.dropoutMask &&
            (this.dropoutMask = qx({
              ones: () => zu(r),
              rate: this.dropout,
              training: n,
              count: 4,
              dropoutFunc: this.dropoutFunc,
            }))
          const i = this.dropoutMask,
            o = (e, t, n) => (t && t[n] ? Do(t[n], e) : e)
          let l = o(r, i, 0),
            u = o(r, i, 1),
            c = o(r, i, 2),
            h = o(r, i, 3)
          0 < this.recurrentDropout &&
            this.recurrentDropout < 1 &&
            null == this.recurrentDropoutMask &&
            (this.recurrentDropoutMask = qx({
              ones: () => zu(s),
              rate: this.recurrentDropout,
              training: n,
              count: 4,
              dropoutFunc: this.dropoutFunc,
            }))
          const p = this.recurrentDropoutMask
          let d = o(s, p, 0),
            f = o(s, p, 1),
            m = o(s, p, 2),
            g = o(s, p, 3)
          const [y, b, x, w] = _c(this.kernel.read(), 4, 3),
            [v, k, I, N] = this.useBias
              ? _c(this.bias.read(), 4)
              : [null, null, null, null]
          ;(l = this.inputConv(l, y, v, this.padding)),
            (u = this.inputConv(u, b, k, this.padding)),
            (c = this.inputConv(c, x, I, this.padding)),
            (h = this.inputConv(h, w, N, this.padding))
          const [S, T, C, $] = _c(this.recurrentKernel.read(), 4, 3)
          ;(d = this.recurrentConv(d, S)),
            (f = this.recurrentConv(f, T)),
            (m = this.recurrentConv(m, C)),
            (g = this.recurrentConv(g, $))
          const E = this.recurrentActivation.apply(ro(l, d)),
            R = this.recurrentActivation.apply(ro(u, f)),
            A = ro(Do(R, a), Do(E, this.activation.apply(ro(c, m)))),
            _ = Do(
              this.recurrentActivation.apply(ro(h, g)),
              this.activation.apply(A),
            )
          return [_, _, A]
        })
      }
      getConfig() {
        const e = super.getConfig(),
          { units: t } = e,
          n = (function (e, t) {
            var n = {}
            for (var r in e)
              Object.prototype.hasOwnProperty.call(e, r) &&
                t.indexOf(r) < 0 &&
                (n[r] = e[r])
            if (
              null != e &&
              'function' == typeof Object.getOwnPropertySymbols
            ) {
              var s = 0
              for (r = Object.getOwnPropertySymbols(e); s < r.length; s++)
                t.indexOf(r[s]) < 0 &&
                  Object.prototype.propertyIsEnumerable.call(e, r[s]) &&
                  (n[r[s]] = e[r[s]])
            }
            return n
          })(e, ['units']),
          r = {
            filters: this.filters,
            kernelSize: this.kernelSize,
            padding: this.padding,
            dataFormat: this.dataFormat,
            dilationRate: this.dilationRate,
            strides: this.strides,
          }
        return Object.assign({}, n, r)
      }
      inputConv(e, t, n, r) {
        const s = el(
          e,
          t,
          this.strides,
          r || 'valid',
          'channelsFirst' === this.dataFormat ? 'NCHW' : 'NHWC',
          this.dilationRate,
        )
        return n ? Ag(s, n, this.dataFormat) : s
      }
      recurrentConv(e, t) {
        return el(
          e,
          t,
          1,
          'same',
          'channelsFirst' === this.dataFormat ? 'NCHW' : 'NHWC',
        )
      }
    }
    ;(Zx.className = 'ConvLSTM2DCell'), Gi(Zx)
    class Jx extends Yx {
      constructor(e) {
        const t = new Zx(e)
        super(Object.assign({}, e, { cell: t }))
      }
      static fromConfig(e, t) {
        return new e(t)
      }
    }
    ;(Jx.className = 'ConvLSTM2D'), Gi(Jx)
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */
    class Qx extends gy {
      constructor(e) {
        super(e),
          (this.rate = Math.max(Math.min(e.rate, 1), 0)),
          (this.noiseShape = e.noiseShape),
          (this.seed = e.seed),
          (this.supportsMasking = !0)
      }
      getNoiseShape(e) {
        if (null == this.noiseShape) return this.noiseShape
        const t = e.shape,
          n = []
        for (let e = 0; e < this.noiseShape.length; ++e)
          n.push(null == this.noiseShape[e] ? t[e] : this.noiseShape[e])
        return n
      }
      call(e, t) {
        return qi(() => {
          this.invokeCallHook(e, t)
          const n = sy(e)
          if (0 < this.rate && this.rate < 1) {
            const e = null != t.training && t.training,
              r = this.getNoiseShape(n)
            return Fg(
              () => _g(n, this.rate, r, this.seed),
              () => n,
              e,
            )
          }
          return e
        })
      }
      getConfig() {
        const e = {
            rate: this.rate,
            noiseShape: this.noiseShape,
            seed: this.seed,
          },
          t = super.getConfig()
        return Object.assign(e, t), e
      }
      dispose() {
        return super.dispose()
      }
    }
    ;(Qx.className = 'Dropout'), Gi(Qx)
    class ew extends Qx {
      constructor(e) {
        super(e), (this.inputSpec = [{ ndim: 3 }])
      }
      getNoiseShape(e) {
        const t = e.shape
        return [t[0], 1, t[2]]
      }
    }
    ;(ew.className = 'SpatialDropout1D'), Gi(ew)
    class tw extends gy {
      constructor(e) {
        if (
          (super(e),
          (this.activation = null),
          (this.useBias = !0),
          (this.kernel = null),
          (this.bias = null),
          (this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal'),
          (this.DEFAULT_BIAS_INITIALIZER = 'zeros'),
          null == e.batchInputShape &&
            null == e.inputShape &&
            null != e.inputDim)
        ) {
          let t = null
          null != e.batchSize && (t = e.batchSize),
            (this.batchInputShape = [t, e.inputDim])
        }
        ;(this.units = e.units),
          Um(this.units, 'units'),
          (this.activation = ax(e.activation)),
          null != e.useBias && (this.useBias = e.useBias),
          (this.kernelInitializer = ty(
            e.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER,
          )),
          (this.biasInitializer = ty(
            e.biasInitializer || this.DEFAULT_BIAS_INITIALIZER,
          )),
          (this.kernelConstraint = Oy(e.kernelConstraint)),
          (this.biasConstraint = Oy(e.biasConstraint)),
          (this.kernelRegularizer = hx(e.kernelRegularizer)),
          (this.biasRegularizer = hx(e.biasRegularizer)),
          (this.activityRegularizer = hx(e.activityRegularizer)),
          (this.supportsMasking = !0),
          (this.inputSpec = [{ minNDim: 2 }])
      }
      build(e) {
        const t = (e = ay(e))[e.length - 1]
        null == this.kernel &&
          ((this.kernel = this.addWeight(
            'kernel',
            [t, this.units],
            null,
            this.kernelInitializer,
            this.kernelRegularizer,
            !0,
            this.kernelConstraint,
          )),
          this.useBias &&
            (this.bias = this.addWeight(
              'bias',
              [this.units],
              null,
              this.biasInitializer,
              this.biasRegularizer,
              !0,
              this.biasConstraint,
            ))),
          (this.inputSpec = [{ minNDim: 2, axes: { [-1]: t } }]),
          (this.built = !0)
      }
      computeOutputShape(e) {
        const t = (e = ay(e)).slice()
        return (t[t.length - 1] = this.units), t
      }
      call(e, t) {
        return qi(() => {
          this.invokeCallHook(e, t)
          const n = sy(e),
            r = Hm(this.activation.getClassName())
          let s
          return (
            null != r
              ? (s = Cg(
                  n,
                  this.kernel.read(),
                  r,
                  this.bias ? this.bias.read() : null,
                ))
              : ((s = Cg(n, this.kernel.read())),
                null != this.bias && (s = Ag(s, this.bias.read())),
                null != this.activation && (s = this.activation.apply(s))),
            s
          )
        })
      }
      getConfig() {
        const e = {
            units: this.units,
            activation: rx(this.activation),
            useBias: this.useBias,
            kernelInitializer: ey(this.kernelInitializer),
            biasInitializer: ey(this.biasInitializer),
            kernelRegularizer: ux(this.kernelRegularizer),
            biasRegularizer: ux(this.biasRegularizer),
            activityRegularizer: ux(this.activityRegularizer),
            kernelConstraint: Fy(this.kernelConstraint),
            biasConstraint: Fy(this.biasConstraint),
          },
          t = super.getConfig()
        return Object.assign(e, t), e
      }
    }
    ;(tw.className = 'Dense'), Gi(tw)
    class nw extends gy {
      constructor(e) {
        super((e = e || {})),
          (this.inputSpec = [{ minNDim: 3 }]),
          (this.dataFormat = e.dataFormat)
      }
      computeOutputShape(e) {
        e = ay(e)
        for (const t of e.slice(1))
          if (null == t)
            throw new Im(
              `The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`,
            )
        return [e[0], pg(e, 1)]
      }
      call(e, t) {
        return qi(() => {
          this.invokeCallHook(e, t)
          let n = sy(e)
          if ('channelsFirst' === this.dataFormat && n.rank > 1) {
            const e = [0]
            for (let t = 2; t < n.rank; ++t) e.push(t)
            e.push(1), (n = th(n, e))
          }
          return (function (e) {
            if (e.rank <= 1)
              throw new Im(
                `batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`,
              )
            const t = [e.shape[0], pg(e.shape, 1)]
            return Eo(e, t)
          })(n)
        })
      }
      getConfig() {
        const e = {}
        null != this.dataFormat && (e.dataFormat = this.dataFormat)
        const t = super.getConfig()
        return Object.assign(e, t), e
      }
    }
    ;(nw.className = 'Flatten'), Gi(nw)
    class rw extends gy {
      constructor(e) {
        super(e),
          (this.supportsMasking = !0),
          (this.activation = ax(e.activation))
      }
      call(e, t) {
        return qi(() => {
          this.invokeCallHook(e, t)
          const n = sy(e)
          return this.activation.apply(n)
        })
      }
      getConfig() {
        const e = { activation: rx(this.activation) },
          t = super.getConfig()
        return Object.assign(e, t), e
      }
    }
    ;(rw.className = 'Activation'), Gi(rw)
    class sw extends gy {
      constructor(e) {
        super(e), (this.n = e.n), (this.inputSpec = [{ ndim: 2 }])
      }
      computeOutputShape(e) {
        return [e[0], this.n, e[1]]
      }
      call(e, t) {
        return qi(() =>
          (function (e, t) {
            return qi(() => {
              if (2 !== e.shape.length)
                throw new Im(
                  `repeat() expects a rank-2 tensor, but received a rank-${e.shape.length} tensor.`,
                )
              return Sg(xg(e, 1), [1, t, 1])
            })
          })((e = sy(e)), this.n),
        )
      }
      getConfig() {
        const e = { n: this.n },
          t = super.getConfig()
        return Object.assign(e, t), e
      }
    }
    ;(sw.className = 'RepeatVector'), Gi(sw)
    class aw extends gy {
      constructor(e) {
        super(e), (this.targetShape = e.targetShape)
        for (let e = 0; e < this.targetShape.length; ++e)
          this.isUnknown(this.targetShape[e]) && (this.targetShape[e] = null)
      }
      isUnknown(e) {
        return e < 0 || null == e
      }
      fixUnknownDimension(e, t) {
        const n = 'Total size of new array must be unchanged.',
          r = t.slice()
        let s = 1,
          a = null
        for (let e = 0; e < r.length; ++e) {
          const t = r[e]
          if (this.isUnknown(t)) {
            if (null !== a)
              throw new Im('Can only specifiy one unknown dimension.')
            a = e
          } else s *= t
        }
        const i = pg(e)
        if (null !== a) {
          if (0 === s || i % s != 0) throw new Im(n)
          r[a] = i / s
        } else if (i !== s) throw new Im(n)
        return r
      }
      computeOutputShape(e) {
        let t = !1
        for (let n = 0; n < e.length; ++n)
          if (this.isUnknown(e[n])) {
            t = !0
            break
          }
        return t
          ? e.slice(0, 1).concat(this.targetShape)
          : e
              .slice(0, 1)
              .concat(this.fixUnknownDimension(e.slice(1), this.targetShape))
      }
      call(e, t) {
        return qi(() => {
          this.invokeCallHook(e, t)
          const n = sy(e),
            r = n.shape,
            s = r
              .slice(0, 1)
              .concat(this.fixUnknownDimension(r.slice(1), this.targetShape))
          return Eo(n, s)
        })
      }
      getConfig() {
        const e = { targetShape: this.targetShape },
          t = super.getConfig()
        return Object.assign(e, t), e
      }
    }
    ;(aw.className = 'Reshape'), Gi(aw)
    class iw extends gy {
      constructor(e) {
        if ((super(e), null == e.dims))
          throw new Error(
            'Required configuration field `dims` is missing during Permute constructor call.',
          )
        if (!Array.isArray(e.dims))
          throw new Error(
            `Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`,
          )
        const t = mg(1, e.dims.length + 1)
        if (!B(e.dims.slice().sort(), t))
          throw new Error(
            'Invalid permutation `dims`: ' +
              JSON.stringify(e.dims) +
              ' `dims` must contain consecutive integers starting from 1.',
          )
        ;(this.dims = e.dims),
          (this.dimsIncludingBatch = [0].concat(this.dims)),
          (this.inputSpec = [new hy({ ndim: this.dims.length + 1 })])
      }
      computeOutputShape(e) {
        const t = (e = ay(e)).slice()
        return (
          this.dims.forEach((n, r) => {
            t[r + 1] = e[n]
          }),
          t
        )
      }
      call(e, t) {
        return th(sy(e), this.dimsIncludingBatch)
      }
      getConfig() {
        const e = { dims: this.dims },
          t = super.getConfig()
        return Object.assign(e, t), e
      }
    }
    ;(iw.className = 'Permute'), Gi(iw)
    class ow extends gy {
      constructor(e) {
        super(null == e ? {} : e),
          (this.supportsMasking = !0),
          (this.maskValue =
            null != e ? (null == e.maskValue ? 0 : e.maskValue) : 0)
      }
      computeOutputShape(e) {
        return e
      }
      getConfig() {
        const e = super.getConfig(),
          t = { maskValue: this.maskValue }
        return Object.assign(t, e), t
      }
      computeMask(e, t) {
        const n = sy(e)
        return io(Mu(n, this.maskValue), -1)
      }
      call(e, t) {
        return qi(() => {
          this.invokeCallHook(e, t)
          const n = sy(e),
            r = io(Mu(n, this.maskValue), -1, !0)
          return Do(n, Ka(r, n.dtype))
        })
      }
    }
    ;(ow.className = 'Masking'), Gi(ow)
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */
    class lw extends gy {
      constructor(e) {
        if (
          (super(e),
          (this.embeddings = null),
          (this.DEFAULT_EMBEDDINGS_INITIALIZER = 'randomUniform'),
          null == e.batchInputShape && null == e.inputShape)
        ) {
          let t = null
          null != e.batchSize && (t = e.batchSize),
            null == e.inputLength
              ? (this.batchInputShape = [t, null])
              : (this.batchInputShape = [t].concat(Am(e.inputLength)))
        }
        ;(this.inputDim = e.inputDim),
          Um(this.inputDim, 'inputDim'),
          (this.outputDim = e.outputDim),
          Um(this.outputDim, 'outputDim'),
          (this.embeddingsInitializer = ty(
            e.embeddingsInitializer || this.DEFAULT_EMBEDDINGS_INITIALIZER,
          )),
          (this.embeddingsRegularizer = hx(e.embeddingsRegularizer)),
          (this.activityRegularizer = hx(e.activityRegularizer)),
          (this.embeddingsConstraint = Oy(e.embeddingsConstraint)),
          (this.maskZero = e.maskZero),
          (this.supportsMasking = e.maskZero),
          (this.inputLength = e.inputLength)
      }
      build(e) {
        ;(this.embeddings = this.addWeight(
          'embeddings',
          [this.inputDim, this.outputDim],
          this.dtype,
          this.embeddingsInitializer,
          this.embeddingsRegularizer,
          !0,
          this.embeddingsConstraint,
        )),
          (this.built = !0)
      }
      warnOnIncompatibleInputShape(e) {}
      computeMask(e, t) {
        return qi(() => (this.maskZero ? ((e = sy(e)), Mu(e, wl(e))) : null))
      }
      computeOutputShape(e) {
        if (((e = ay(e)), null == this.inputLength))
          return [...e, this.outputDim]
        const t = Am(this.inputLength)
        if (t.length !== e.length - 1)
          throw new Im(
            `"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`,
          )
        {
          let n = 0
          for (let r = 0; r < t.length; ++r) {
            const s = t[r],
              a = e[r + 1]
            if (null != s && null != a && s !== a)
              throw new Im(
                `"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`,
              )
            null == s && (t[n] = a), n++
          }
        }
        return [e[0], ...t, this.outputDim]
      }
      call(e, t) {
        return qi(() => {
          this.invokeCallHook(e, t)
          let n = sy(e)
          'int32' !== n.dtype && (n = bg(n, 'int32'))
          const r = $g(this.embeddings.read(), Eo(n, [n.size]))
          return Eo(r, ay(this.computeOutputShape(n.shape)))
        })
      }
      getConfig() {
        const e = {
            inputDim: this.inputDim,
            outputDim: this.outputDim,
            embeddingsInitializer: ey(this.embeddingsInitializer),
            embeddingsRegularizer: ux(this.embeddingsRegularizer),
            activityRegularizer: ux(this.activityRegularizer),
            embeddingsConstraint: Fy(this.embeddingsConstraint),
            maskZero: this.maskZero,
            inputLength: this.inputLength,
          },
          t = super.getConfig()
        return Object.assign(e, t), e
      }
    }
    ;(lw.className = 'Embedding'), Gi(lw)
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */
    class uw extends gy {
      constructor(e) {
        super(e || {}), (this.supportsMasking = !0)
      }
      mergeFunction(e) {
        throw new Nm()
      }
      computeElementwiseOpOutputShape(e, t) {
        if (null == e || null == t) return null
        if (e.length < t.length)
          return this.computeElementwiseOpOutputShape(t, e)
        if (0 === t.length) return e
        const n = e.slice(0, e.length - t.length)
        for (let r = 0; r < t.length; ++r) {
          const s = e[e.length - t.length + r],
            a = t[r]
          if (null == s || null == a || s < 0 || a < 0) n.push(null)
          else if (1 === s) n.push(a)
          else if (1 === a) n.push(s)
          else {
            if (s !== a)
              throw new Im(
                'Operands could not be broadcast together with shapes ' +
                  JSON.stringify(e) +
                  ' ' +
                  JSON.stringify(t),
              )
            n.push(s)
          }
        }
        return n
      }
      build(e) {
        if (
          (Array.isArray(e) && !Array.isArray(e[0]) && (e = [ay(e)]),
          e.length < 2)
        )
          throw new Im(
            `A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`,
          )
        let t = []
        for (const n of e) null != n && null !== n[0] && t.push(n[0])
        if (((t = Pm(t)), t.length > 1))
          throw new Im(
            `Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`,
          )
        let n = null == e[0] ? null : e[0].slice(1)
        for (let t = 1; t < e.length; ++t) {
          const r = null == e[t] ? null : e[t].slice(1)
          n = this.computeElementwiseOpOutputShape(n, r)
        }
        const r = e.map((e) => e.length)
        ;-1 === e.indexOf(null) && 1 === Pm(r).length
          ? (this.reshapeRequired = !1)
          : (this.reshapeRequired = !0)
      }
      call(e, t) {
        return qi(() => {
          if (this.reshapeRequired) {
            const t = [],
              n = e.map((e) => e.rank)
            if (-1 === n.indexOf(null)) {
              const r = fg(n)
              for (let n of e) {
                const e = n.rank
                for (let t = 0; t < r - e; ++t) n = xg(n, 1)
                t.push(n)
              }
              return this.mergeFunction(t)
            }
            {
              let n = !1
              for (const r of e) {
                const e = r.rank
                if (null == e) {
                  const e = r.shape,
                    s = e[0],
                    a = e.slice(1).concat([s])
                  let i = Eo(r, [s].concat(pg(e.slice(1))))
                  ;(i = th(i, [1, 0])), (i = Eo(i, a)), t.push(i), (n = !0)
                } else if (e > 1) {
                  const s = mg(1, e).concat([0])
                  t.push(th(r, s)), (n = !0)
                } else t.push(r)
              }
              let r = this.mergeFunction(t)
              const s = r.rank
              if (n)
                if (null == s) {
                  const e = r.shape,
                    t = e[e.length - 1],
                    n = [t].concat(e.slice(0, e.length - 1))
                  r = Eo(th(Eo(r, [-1, t]), [1, 0]), n)
                } else if (s > 1) {
                  const e = [s - 1].concat(mg(0, s - 1))
                  r = th(r, e)
                }
              return r
            }
          }
          return this.mergeFunction(e)
        })
      }
      computeOutputShape(e) {
        let t
        t = null == e[0] ? null : e[0].slice(1)
        for (let n = 1; n < e.length; ++n) {
          const r = null == e[n] ? null : e[n].slice(1)
          t = this.computeElementwiseOpOutputShape(t, r)
        }
        let n = []
        for (const t of e) null != t && null !== t[0] && n.push(t[0])
        return (
          (n = Pm(n)), (t = 1 === n.length ? n.concat(t) : [null].concat(t)), t
        )
      }
      computeMask(e, t) {
        return qi(() => {
          if (null == t) return null
          if (!Array.isArray(t)) throw new Im('`mask` should be an Array')
          if (!Array.isArray(e)) throw new Im('`inputs` should be an Array')
          if (t.length !== e.length)
            throw new Im(
              `The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`,
            )
          if (t.every((e) => null == e)) return null
          let n = (t = t.map((e) => (null == e ? e : Gl(e, 0))))[0]
          for (let e = 1; e < t.length - 1; ++e) n = mu(n, t[e])
          return n
        })
      }
    }
    class cw extends uw {
      constructor(e) {
        super(e)
      }
      mergeFunction(e) {
        return qi(() => {
          let t = e[0].clone()
          for (let n = 1; n < e.length; ++n) t = ro(t, e[n])
          return t
        })
      }
    }
    ;(cw.className = 'Add'), Gi(cw)
    class hw extends uw {
      constructor(e) {
        super(e)
      }
      mergeFunction(e) {
        return qi(() => {
          let t = e[0].clone()
          for (let n = 1; n < e.length; ++n) t = Do(t, e[n])
          return t
        })
      }
    }
    ;(hw.className = 'Multiply'), Gi(hw)
    class pw extends uw {
      constructor(e) {
        super(e)
      }
      mergeFunction(e) {
        return qi(() => {
          let t = e[0].clone()
          for (let n = 1; n < e.length; ++n) t = ro(t, e[n])
          return Do(1 / e.length, t)
        })
      }
    }
    ;(pw.className = 'Average'), Gi(pw)
    class dw extends uw {
      constructor(e) {
        super(e)
      }
      mergeFunction(e) {
        return qi(() => {
          let t = e[0]
          for (let n = 1; n < e.length; ++n) t = Su(t, e[n])
          return t
        })
      }
    }
    ;(dw.className = 'Maximum'), Gi(dw)
    class fw extends uw {
      constructor(e) {
        super(e)
      }
      mergeFunction(e) {
        return qi(() => {
          let t = e[0]
          for (let n = 1; n < e.length; ++n) t = Ru(t, e[n])
          return t
        })
      }
    }
    ;(fw.className = 'Minimum'), Gi(fw)
    class mw extends uw {
      constructor(e) {
        super(e),
          (this.DEFAULT_AXIS = -1),
          null == e && (e = {}),
          (this.axis = null == e.axis ? this.DEFAULT_AXIS : e.axis),
          (this.supportsMasking = !0),
          (this.reshapeRequired = !1)
      }
      build(e) {
        if (!Array.isArray(e) || !Array.isArray(e[0]) || 1 === e.length)
          throw new Im(
            'A `Concatenate` layer should be called on a list of at least 2 inputs',
          )
        let t = !0
        for (const n of e)
          if (null != n) {
            t = !1
            break
          }
        if (t) return
        const n = []
        for (let t = 0; t < e.length; ++t) {
          const r = e[t].slice()
          r.splice(this.axis, 1)
          let s = !1
          for (const e of n)
            if (B(e, r)) {
              s = !0
              break
            }
          s || n.push(r)
        }
        if (n.length > 1)
          throw new Im(
            'A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: ' +
              JSON.stringify(e),
          )
      }
      mergeFunction(e) {
        return qi(() => Ig(e, this.axis))
      }
      computeOutputShape(e) {
        if (!Array.isArray(e) || !Array.isArray(e[0]))
          throw new Im(
            'A `Concatenate` layer should be called on a list of inputs.',
          )
        const t = e,
          n = t[0].slice(),
          r = this.axis < 0 ? n.length + this.axis : this.axis
        for (const e of t.slice(1)) {
          if (null == n[r] || null == e[r]) {
            n[r] = null
            break
          }
          n[r] += e[r]
        }
        return n
      }
      computeMask(e, t) {
        if (null == t) return null
        if (!Array.isArray(t))
          throw new Im('`mask` should be an array for Concatenate')
        if (!Array.isArray(e))
          throw new Im('`inputs` should be an array for Concatenate')
        if (t.length !== e.length)
          throw new Im(
            `Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`,
          )
        return qi(() => {
          let n = !0
          if (
            (t.forEach((e) => {
              null == e || (n = !1)
            }),
            n)
          )
            return null
          const r = []
          for (let n = 0; n < e.length; ++n)
            null == t[n]
              ? r.push(Ka(zu(e[n]), 'bool'))
              : t[n].rank < e[n].rank
                ? r.push(Gl(t[n], -1))
                : r.push(t[n])
          const s = _o(r, this.axis)
          return ao(s, -1, !1)
        })
      }
      getConfig() {
        const e = { axis: this.axis },
          t = super.getConfig()
        return Object.assign(e, t), e
      }
    }
    function gw(e, t) {
      for (; e < 0; ) e += t
      return e
    }
    ;(mw.className = 'Concatenate'), Gi(mw)
    class yw extends uw {
      constructor(e) {
        super(e),
          (this.axes = e.axes),
          (this.normalize = null != e.normalize && e.normalize),
          (this.supportsMasking = !0),
          (this.reshapeRequired = !1)
      }
      build(e) {
        O(
          Array.isArray(e) &&
            2 === e.length &&
            Array.isArray(e[0]) &&
            Array.isArray(e[1]),
          () => 'A `Dot` layer should be called on a list of exactly 2 inputs.',
        )
        const t = e[0],
          n = e[1]
        if (t.length > 3 || n.length > 3)
          throw new Nm(
            'Dot layer does not support tensors of 4D or higher rank yet.',
          )
        const r = this.interpretAxes(t, n)
        if (t[r[0]] !== n[r[1]])
          throw new Im(`Dimension incompatibility: ${t[r[0]]} !== ${n[r[1]]}`)
      }
      mergeFunction(e) {
        if (2 !== e.length)
          throw new Im(
            `A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`,
          )
        let t,
          n = e[0],
          r = e[1]
        return (
          (t = Array.isArray(this.axes)
            ? this.axes.map((t, n) => gw(t, e[n].shape.length))
            : [gw(this.axes, n.shape.length), gw(this.axes, r.shape.length)]),
          this.normalize && ((n = Ky(n, t[0])), (r = Ky(r, t[1]))),
          (function (e, t, n) {
            if (e.shape.length > 3 || t.shape.length > 3)
              throw new Nm(
                'batchDot is not implemented for tensors of 4D or higher rank yet',
              )
            if (
              (O(
                e.shape.length >= 2,
                () =>
                  `batchDot requires the rank of x to be >= 2, but got ${e.shape.length}`,
              ),
              O(
                e.shape.length >= 2,
                () =>
                  `batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`,
              ),
              'number' == typeof n && (n = [n, n]),
              'complex64' === e.dtype || 'complex64' === t.dtype)
            )
              throw new Nm(
                'batchDot is not implemented for complex64-type Tensors yet.',
              )
            const r = e.shape.length,
              s = t.shape.length
            null == n && (n = [r - 1, s - 2])
            const a = n
            return qi(() => {
              let n, i
              if (r > s) {
                n = r - s
                const e = []
                for (let t = 0; t < n; ++t) e.push(1)
                t = Eo(t, t.shape.concat(e))
              } else if (s > r) {
                n = s - r
                const t = []
                for (let e = 0; e < n; ++e) t.push(1)
                e = Eo(e, e.shape.concat(t))
              } else n = 0
              if (2 === e.shape.length && 2 === t.shape.length)
                i =
                  a[0] === a[1]
                    ? Pl(Do(e, t), a[0])
                    : Pl(Do(th(e, [1, 0]), t), a[1])
              else {
                const n = a[0] !== e.shape.length - 1,
                  r = a[1] === t.shape.length - 1
                i = Fo(e, t, n, r)
              }
              if (n > 0) {
                let e
                e = r > s ? r + s - 3 : r - 1
                const t = []
                for (let r = e; r < e + n; ++r) t.push(r)
                i = Oc(i, t)
              }
              return 1 === i.shape.length && (i = Gl(i, 1)), i
            })
          })(n, r, t)
        )
      }
      interpretAxes(e, t) {
        let n
        return (
          (n = Array.isArray(this.axes)
            ? this.axes
            : [gw(this.axes, e.length), gw(this.axes, t.length)]),
          n
        )
      }
      computeOutputShape(e) {
        O(
          Array.isArray(e) &&
            2 === e.length &&
            Array.isArray(e[0]) &&
            Array.isArray(e[1]),
          () => 'A `Dot` layer should be called on a list of exactly 2 inputs.',
        )
        const t = e[0].slice(),
          n = e[1].slice()
        if (t.length > 3 || n.length > 3)
          throw new Nm(
            'Dot layer does not support tensors of 4D or higher rank yet.',
          )
        const r = this.interpretAxes(t, n)
        t.splice(r[0], 1), n.splice(r[1], 1), n.splice(0, 1)
        const s = t.concat(n)
        return 1 === s.length && s.push(1), s
      }
      computeMask(e, t) {
        return null
      }
      getConfig() {
        const e = { axes: this.axes, normalize: this.normalize },
          t = super.getConfig()
        return Object.assign(e, t), e
      }
    }
    ;(yw.className = 'Dot'), Gi(yw)
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */
    class bw extends gy {
      constructor(e) {
        super(e), (this.supportsMasking = !0), (this.stddev = e.stddev)
      }
      computeOutputShape(e) {
        return e
      }
      getConfig() {
        const e = super.getConfig(),
          t = { stddev: this.stddev }
        return Object.assign(t, e), t
      }
      call(e, t) {
        return qi(() => {
          this.invokeCallHook(e, t)
          const n = sy(e)
          return Fg(
            () => ro(Tg(n.shape, 0, this.stddev), n),
            () => n,
            t.training || !1,
          )
        })
      }
    }
    ;(bw.className = 'GaussianNoise'), Gi(bw)
    class xw extends gy {
      constructor(e) {
        super(e), (this.supportsMasking = !0), (this.rate = e.rate)
      }
      computeOutputShape(e) {
        return e
      }
      getConfig() {
        const e = super.getConfig(),
          t = { rate: this.rate }
        return Object.assign(t, e), t
      }
      call(e, t) {
        return qi(() => {
          this.invokeCallHook(e, t)
          const n = sy(e)
          return this.rate > 0 && this.rate < 1
            ? Fg(
                () => {
                  const e = Math.sqrt(this.rate / (1 - this.rate))
                  return Do(n, Tg(n.shape, 1, e))
                },
                () => n,
                t.training || !1,
              )
            : n
        })
      }
    }
    ;(xw.className = 'GaussianDropout'), Gi(xw)
    class ww extends gy {
      constructor(e) {
        super(e),
          (this.supportsMasking = !0),
          (this.rate = e.rate),
          (this.noiseShape = e.noiseShape)
      }
      _getNoiseShape(e) {
        return this.noiseShape || sy(e).shape
      }
      computeOutputShape(e) {
        return e
      }
      getConfig() {
        const e = super.getConfig(),
          t = { rate: this.rate }
        return Object.assign(t, e), t
      }
      call(e, t) {
        return qi(() => {
          if (this.rate < 1 && this.rate > 0) {
            const n = this._getNoiseShape(e),
              r = () => {
                const t = sy(e),
                  r = -1.7580993408473766
                let s = Zl(ac(n), this.rate)
                s = bg(s, 'float32')
                const a = ((1 - this.rate) * (1 + this.rate * r ** 2)) ** -0.5,
                  i = -a * r * this.rate,
                  o = ro(Do(t, s), Do(ro(s, -1), r))
                return ro(Do(o, a), i)
              }
            return Fg(r, () => sy(e), t.training || !1)
          }
          return e
        })
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */ function vw(e, t, n, r, s, a = 0.001) {
      let i
      if (2 === e.rank) i = Wo(e, t, n, r, s, a)
      else if (3 === e.rank) i = Vo(e, t, n, r, s, a)
      else {
        if (4 !== e.rank)
          throw new Nm(
            `batchNormalization is not implemented for array of rank ${e.rank} yet`,
          )
        i = Uo(e, t, n, r, s, a)
      }
      return i
    }
    ;(ww.className = 'AlphaDropout'), Gi(ww)
    class kw extends gy {
      constructor(e) {
        null == e && (e = {}),
          super(e),
          (this.supportsMasking = !0),
          (this.axis = null == e.axis ? -1 : e.axis),
          (this.momentum = null == e.momentum ? 0.99 : e.momentum),
          (this.epsilon = null == e.epsilon ? 0.001 : e.epsilon),
          (this.center = null == e.center || e.center),
          (this.scale = null == e.scale || e.scale),
          (this.betaInitializer = ty(e.betaInitializer || 'zeros')),
          (this.gammaInitializer = ty(e.gammaInitializer || 'ones')),
          (this.movingMeanInitializer = ty(e.movingMeanInitializer || 'zeros')),
          (this.movingVarianceInitializer = ty(
            e.movingVarianceInitializer || 'ones',
          )),
          (this.betaConstraint = Oy(e.betaConstraint)),
          (this.gammaConstraint = Oy(e.gammaConstraint)),
          (this.betaRegularizer = hx(e.betaRegularizer)),
          (this.gammaRegularizer = hx(e.gammaRegularizer))
      }
      build(e) {
        e = ay(e)
        const t = this.axis >= 0 ? this.axis : this.axis + e.length,
          n = e[t]
        if (null == n)
          throw new Im(
            `Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`,
          )
        this.inputSpec = [new hy({ ndim: e.length, axes: { [t]: n } })]
        const r = [n]
        this.scale &&
          (this.gamma = this.addWeight(
            'gamma',
            r,
            null,
            this.gammaInitializer,
            this.gammaRegularizer,
            !0,
            this.gammaConstraint,
          )),
          this.center &&
            (this.beta = this.addWeight(
              'beta',
              r,
              null,
              this.betaInitializer,
              this.betaRegularizer,
              !0,
              this.betaConstraint,
            )),
          (this.movingMean = this.addWeight(
            'moving_mean',
            r,
            null,
            this.movingMeanInitializer,
            null,
            !1,
          )),
          (this.movingVariance = this.addWeight(
            'moving_variance',
            r,
            null,
            this.movingVarianceInitializer,
            null,
            !1,
          )),
          (this.built = !0)
      }
      call(e, t) {
        return qi(() => {
          const n = null != t.training && t.training,
            r = sy(e),
            s = r.shape,
            a = s.length,
            i = mg(0, a),
            o = this.axis >= 0 ? this.axis : this.axis + a
          i.splice(o, 1)
          const l = Cm(1, a)
          l[o] = s[o]
          const u = i.slice()
          u.sort()
          const c = !B(u, mg(0, a).slice(0, a - 1))
          if (!n)
            return (() => {
              if (c) {
                const e = Eo(this.movingMean.read(), l),
                  t = Eo(this.movingVariance.read(), l),
                  n = this.center ? Eo(this.beta.read(), l) : null,
                  s = this.scale ? Eo(this.gamma.read(), l) : null
                return vw(r, e, t, n, s, this.epsilon)
              }
              return vw(
                r,
                this.movingMean.read(),
                this.movingVariance.read(),
                null == this.beta ? null : this.beta.read(),
                null == this.gamma ? null : this.gamma.read(),
                this.epsilon,
              )
            })()
          const [h, p, d] = (function (e, t, n, r, s = 0.001) {
              return B(r.slice().sort(), mg(0, e.rank - 1))
                ? (function (e, t, n, r, s = 0.001) {
                    return qi(() => {
                      const a = Fu(e, r),
                        i = a.mean,
                        o = a.variance
                      return [vw(e, i, o, n, t, s), i, o]
                    })
                  })(e, t, n, r, s)
                : (function (e, t, n, r, s = 0.001) {
                    return qi(() => {
                      const a = Fu(e, r),
                        i = a.mean,
                        o = a.variance,
                        l = []
                      for (const t of mg(0, e.rank))
                        -1 !== r.indexOf(t) ? l.push(1) : l.push(e.shape[t])
                      const u = Eo(i, l),
                        c = Eo(o, l),
                        h = null == t ? null : Eo(t, l),
                        p = null == n ? null : Eo(n, l)
                      return [vw(e, u, c, p, h, s), i, o]
                    })
                  })(e, t, n, r, s)
            })(r, this.gamma.read(), this.beta.read(), i, this.epsilon),
            f = (e, t, n) => {
              qi(() => {
                const r = 1 - n,
                  s = e.read(),
                  a = Do(pu(s, t), r)
                e.write(pu(s, a))
              })
            }
          return (
            (() => {
              f(this.movingMean, p, this.momentum),
                f(this.movingVariance, d, this.momentum)
            })(),
            h
          )
        })
      }
      getConfig() {
        const e = {
            axis: this.axis,
            momentum: this.momentum,
            epsilon: this.epsilon,
            center: this.center,
            scale: this.scale,
            betaInitializer: ey(this.betaInitializer),
            gammaInitializer: ey(this.gammaInitializer),
            movingMeanInitializer: ey(this.movingMeanInitializer),
            movingVarianceInitializer: ey(this.movingVarianceInitializer),
            betaRegularizer: ux(this.betaRegularizer),
            gammaRegularizer: ux(this.gammaRegularizer),
            betaConstraint: Fy(this.betaConstraint),
            gammaConstraint: Fy(this.gammaConstraint),
          },
          t = super.getConfig()
        return Object.assign(e, t), e
      }
    }
    ;(kw.className = 'BatchNormalization'), Gi(kw)
    class Iw extends gy {
      constructor(e) {
        if (
          (null == e && (e = {}),
          super(e),
          (this.axis = null == e.axis ? -1 : e.axis),
          'number' == typeof this.axis)
        ) {
          if (!Number.isInteger(this.axis))
            throw new Error(
              `Expected axis to be an integer, but received ${this.axis}`,
            )
        } else {
          if (!Array.isArray(this.axis))
            throw new Error(
              `Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`,
            )
          for (const e of this.axis)
            if (!Number.isInteger(e))
              throw new Error(
                `Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`,
              )
        }
        ;(this.epsilon = null == e.epsilon ? 0.001 : e.epsilon),
          (this.center = null == e.center || e.center),
          (this.scale = null == e.scale || e.scale),
          (this.betaInitializer = ty(e.betaInitializer || 'zeros')),
          (this.gammaInitializer = ty(e.gammaInitializer || 'ones')),
          (this.betaRegularizer = hx(e.betaRegularizer)),
          (this.gammaRegularizer = hx(e.gammaRegularizer)),
          (this.supportsMasking = !0)
      }
      build(e) {
        const t = (e = ay(e)).length
        'number' == typeof this.axis && (this.axis = [this.axis])
        for (let e = 0; e < this.axis.length; ++e)
          this.axis[e] < 0 && (this.axis[e] += t)
        for (const e of this.axis)
          if (e < 0 || e >= t) throw new Error(`Invalid axis: ${e}`)
        if (this.axis.length !== Pm(this.axis).length)
          throw new Error(`Found duplicate axes in: ${this.axis}`)
        const n = this.axis.map((t) => e[t]),
          r = !0
        this.scale
          ? (this.gamma = this.addWeight(
              'gamma',
              n,
              'float32',
              this.gammaInitializer,
              this.gammaRegularizer,
              r,
            ))
          : (this.gamma = null),
          this.center
            ? (this.beta = this.addWeight(
                'beta',
                n,
                'float32',
                this.betaInitializer,
                this.betaRegularizer,
                r,
              ))
            : (this.beta = null),
          (this.built = !0)
      }
      call(e, t) {
        const n = sy(e),
          r = n.shape,
          s = r.length
        return qi(() => {
          let { mean: e, variance: t } = Fu(n, this.axis, !0)
          const a = Cm(1, s)
          for (const e of this.axis) a[e] = r[e]
          const i = (e) => (null != e && e.shape.length !== s ? Eo(e, a) : e)
          let o = this.scale ? i(this.gamma.read()) : null,
            l = this.center ? i(this.beta.read()) : null
          const u = [],
            c = []
          for (let e = 0; e < s; ++e)
            -1 !== this.axis.indexOf(e)
              ? (u.push(r[e]), c.push(1))
              : (u.push(1), c.push(r[e]))
          return (
            (e = jl(e, u)),
            (t = jl(t, u)),
            null != o && (o = jl(o, c)),
            null != l && (l = jl(l, c)),
            vw(n, e, t, l, o, this.epsilon)
          )
        })
      }
      getConfig() {
        const e = {
            axis: this.axis,
            epsilon: this.epsilon,
            center: this.center,
            scale: this.scale,
            betaInitializer: ey(this.betaInitializer),
            gammaInitializer: ey(this.gammaInitializer),
            betaRegularizer: ux(this.betaRegularizer),
            gammaRegularizer: ux(this.gammaRegularizer),
          },
          t = super.getConfig()
        return Object.assign(e, t), e
      }
    }
    ;(Iw.className = 'LayerNormalization'), Gi(Iw)
    class Nw extends gy {
      constructor(e) {
        if (
          (null == e && (e = {}),
          super(e),
          (this.dataFormat =
            null == e.dataFormat ? 'channelsLast' : e.dataFormat),
          null == e.padding)
        )
          this.padding = [
            [1, 1],
            [1, 1],
          ]
        else if ('number' == typeof e.padding)
          this.padding = [
            [e.padding, e.padding],
            [e.padding, e.padding],
          ]
        else {
          if (((e.padding = e.padding), 2 !== e.padding.length))
            throw new Im(
              `ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`,
            )
          let t, n
          if ('number' == typeof e.padding[0])
            (t = [e.padding[0], e.padding[0]]),
              (n = [e.padding[1], e.padding[1]])
          else {
            if (((e.padding = e.padding), 2 !== e.padding[0].length))
              throw new Im(
                `ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`,
              )
            if (((t = e.padding[0]), 2 !== e.padding[1].length))
              throw new Im(
                `ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`,
              )
            n = e.padding[1]
          }
          this.padding = [t, n]
        }
        this.inputSpec = [new hy({ ndim: 4 })]
      }
      computeOutputShape(e) {
        let t, n
        return (
          (e = ay(e)),
          'channelsFirst' === this.dataFormat
            ? ((t =
                null != e[2] && e[2] >= 0
                  ? e[2] + this.padding[0][0] + this.padding[0][1]
                  : null),
              (n =
                null != e[3] && e[3] >= 0
                  ? e[3] + this.padding[1][0] + this.padding[1][1]
                  : null),
              [e[0], e[1], t, n])
            : ((t =
                null != e[1] && e[1] >= 0
                  ? e[1] + this.padding[0][0] + this.padding[0][1]
                  : null),
              (n =
                null != e[2] && e[2] >= 0
                  ? e[2] + this.padding[1][0] + this.padding[1][1]
                  : null),
              [e[0], t, n, e[3]])
        )
      }
      call(e, t) {
        return qi(() =>
          (function (e, t, n) {
            return qi(() => {
              if (4 !== e.rank)
                throw new Im(
                  `temporalPadding expects input tensor to be 4-D, but received a ${e.rank}-D tensor.`,
                )
              if (
                (null == t &&
                  (t = [
                    [1, 1],
                    [1, 1],
                  ]),
                2 !== t.length || 2 !== t[0].length || 2 !== t[1].length)
              )
                throw new Im(
                  'spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.',
                )
              if (
                (null == n && (n = 'channelsLast'),
                'channelsLast' !== n && 'channelsFirst' !== n)
              )
                throw new Im(
                  `Unknown data format: ${n}. Supported data formats are 'channelsLast' and 'channelsFirst.`,
                )
              let r
              return (
                (r =
                  'channelsFirst' === n
                    ? [[0, 0], [0, 0], t[0], t[1]]
                    : [[0, 0], t[0], t[1], [0, 0]]),
                Bu(e, r)
              )
            })
          })(sy(e), this.padding, this.dataFormat),
        )
      }
      getConfig() {
        const e = { padding: this.padding, dataFormat: this.dataFormat },
          t = super.getConfig()
        return Object.assign(e, t), e
        /**
         * @license
         * Copyright 2018 Google LLC
         *
         * Use of this source code is governed by an MIT-style
         * license that can be found in the LICENSE file or at
         * https://opensource.org/licenses/MIT.
         * =============================================================================
         */
      }
    }
    function Sw(e, t, n, r, s, a) {
      return qi(() => {
        let i
        ng(s),
          sg(a),
          rg(r),
          null == n && (n = [1, 1]),
          null == r && (r = 'valid'),
          null == s && (s = 'channelsLast'),
          null == a && (a = 'max'),
          (e = vx(e, s))
        const o = 'same' === r ? 'same' : 'valid'
        return (
          (i = 'max' === a ? ku(e, t, n, o) : Ro(e, t, n, o)),
          'channelsFirst' === s && (i = th(i, [0, 3, 1, 2])),
          i
        )
      })
    }
    function Tw(e, t, n, r, s, a) {
      return qi(() => {
        let i
        ng(s),
          sg(a),
          rg(r),
          null == n && (n = [1, 1, 1]),
          null == r && (r = 'valid'),
          null == s && (s = 'channelsLast'),
          null == a && (a = 'max'),
          (e = kx(e, s))
        const o = 'same' === r ? 'same' : 'valid'
        return (
          (i = 'max' === a ? Iu(e, t, n, o) : Ao(e, t, n, o)),
          'channelsFirst' === s && (i = th(i, [0, 4, 1, 2, 3])),
          i
        )
      })
    }
    ;(Nw.className = 'ZeroPadding2D'), Gi(Nw)
    class Cw extends gy {
      constructor(e) {
        if (
          (null == e.poolSize && (e.poolSize = 2),
          super(e),
          'number' == typeof e.poolSize)
        )
          this.poolSize = [e.poolSize]
        else {
          if (
            !Array.isArray(e.poolSize) ||
            1 !== e.poolSize.length ||
            'number' != typeof e.poolSize[0]
          )
            throw new Im(
              `poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`,
            )
          this.poolSize = e.poolSize
        }
        if ((Um(this.poolSize, 'poolSize'), null == e.strides))
          this.strides = this.poolSize
        else if ('number' == typeof e.strides) this.strides = [e.strides]
        else {
          if (
            !Array.isArray(e.strides) ||
            1 !== e.strides.length ||
            'number' != typeof e.strides[0]
          )
            throw new Im(
              `strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`,
            )
          this.strides = e.strides
        }
        Um(this.strides, 'strides'),
          (this.padding = null == e.padding ? 'valid' : e.padding),
          rg(this.padding),
          (this.inputSpec = [new hy({ ndim: 3 })])
      }
      computeOutputShape(e) {
        const t = xx(
          (e = ay(e))[1],
          this.poolSize[0],
          this.padding,
          this.strides[0],
        )
        return [e[0], t, e[2]]
      }
      call(e, t) {
        return qi(() => {
          this.invokeCallHook(e, t), (e = xg(sy(e), 2))
          const n = this.poolingFunction(
            sy(e),
            [this.poolSize[0], 1],
            [this.strides[0], 1],
            this.padding,
            'channelsLast',
          )
          return Oc(n, [2])
        })
      }
      getConfig() {
        const e = {
            poolSize: this.poolSize,
            padding: this.padding,
            strides: this.strides,
          },
          t = super.getConfig()
        return Object.assign(e, t), e
      }
    }
    class $w extends Cw {
      constructor(e) {
        super(e)
      }
      poolingFunction(e, t, n, r, s) {
        return ng(s), rg(r), Sw(e, t, n, r, s, 'max')
      }
    }
    ;($w.className = 'MaxPooling1D'), Gi($w)
    class Ew extends Cw {
      constructor(e) {
        super(e)
      }
      poolingFunction(e, t, n, r, s) {
        return ng(s), rg(r), Sw(e, t, n, r, s, 'avg')
      }
    }
    ;(Ew.className = 'AveragePooling1D'), Gi(Ew)
    class Rw extends gy {
      constructor(e) {
        if (
          (null == e.poolSize && (e.poolSize = [2, 2]),
          super(e),
          (this.poolSize = Array.isArray(e.poolSize)
            ? e.poolSize
            : [e.poolSize, e.poolSize]),
          null == e.strides)
        )
          this.strides = this.poolSize
        else if (Array.isArray(e.strides)) {
          if (2 !== e.strides.length)
            throw new Im(
              `If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`,
            )
          this.strides = e.strides
        } else this.strides = [e.strides, e.strides]
        Um(this.poolSize, 'poolSize'),
          Um(this.strides, 'strides'),
          (this.padding = null == e.padding ? 'valid' : e.padding),
          (this.dataFormat =
            null == e.dataFormat ? 'channelsLast' : e.dataFormat),
          ng(this.dataFormat),
          rg(this.padding),
          (this.inputSpec = [new hy({ ndim: 4 })])
      }
      computeOutputShape(e) {
        e = ay(e)
        let t = 'channelsFirst' === this.dataFormat ? e[2] : e[1],
          n = 'channelsFirst' === this.dataFormat ? e[3] : e[2]
        return (
          (t = xx(t, this.poolSize[0], this.padding, this.strides[0])),
          (n = xx(n, this.poolSize[1], this.padding, this.strides[1])),
          'channelsFirst' === this.dataFormat
            ? [e[0], e[1], t, n]
            : [e[0], t, n, e[3]]
        )
      }
      call(e, t) {
        return qi(
          () => (
            this.invokeCallHook(e, t),
            this.poolingFunction(
              sy(e),
              this.poolSize,
              this.strides,
              this.padding,
              this.dataFormat,
            )
          ),
        )
      }
      getConfig() {
        const e = {
            poolSize: this.poolSize,
            padding: this.padding,
            strides: this.strides,
            dataFormat: this.dataFormat,
          },
          t = super.getConfig()
        return Object.assign(e, t), e
      }
    }
    class Aw extends Rw {
      constructor(e) {
        super(e)
      }
      poolingFunction(e, t, n, r, s) {
        return ng(s), rg(r), Sw(e, t, n, r, s, 'max')
      }
    }
    ;(Aw.className = 'MaxPooling2D'), Gi(Aw)
    class _w extends Rw {
      constructor(e) {
        super(e)
      }
      poolingFunction(e, t, n, r, s) {
        return ng(s), rg(r), Sw(e, t, n, r, s, 'avg')
      }
    }
    ;(_w.className = 'AveragePooling2D'), Gi(_w)
    class Fw extends gy {
      constructor(e) {
        if (
          (null == e.poolSize && (e.poolSize = [2, 2, 2]),
          super(e),
          (this.poolSize = Array.isArray(e.poolSize)
            ? e.poolSize
            : [e.poolSize, e.poolSize, e.poolSize]),
          null == e.strides)
        )
          this.strides = this.poolSize
        else if (Array.isArray(e.strides)) {
          if (3 !== e.strides.length)
            throw new Im(
              `If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`,
            )
          this.strides = e.strides
        } else this.strides = [e.strides, e.strides, e.strides]
        Um(this.poolSize, 'poolSize'),
          Um(this.strides, 'strides'),
          (this.padding = null == e.padding ? 'valid' : e.padding),
          (this.dataFormat =
            null == e.dataFormat ? 'channelsLast' : e.dataFormat),
          ng(this.dataFormat),
          rg(this.padding),
          (this.inputSpec = [new hy({ ndim: 5 })])
      }
      computeOutputShape(e) {
        e = ay(e)
        let t = 'channelsFirst' === this.dataFormat ? e[2] : e[1],
          n = 'channelsFirst' === this.dataFormat ? e[3] : e[2],
          r = 'channelsFirst' === this.dataFormat ? e[4] : e[3]
        return (
          (t = xx(t, this.poolSize[0], this.padding, this.strides[0])),
          (n = xx(n, this.poolSize[1], this.padding, this.strides[1])),
          (r = xx(r, this.poolSize[2], this.padding, this.strides[2])),
          'channelsFirst' === this.dataFormat
            ? [e[0], e[1], t, n, r]
            : [e[0], t, n, r, e[4]]
        )
      }
      call(e, t) {
        return qi(
          () => (
            this.invokeCallHook(e, t),
            this.poolingFunction(
              sy(e),
              this.poolSize,
              this.strides,
              this.padding,
              this.dataFormat,
            )
          ),
        )
      }
      getConfig() {
        const e = {
            poolSize: this.poolSize,
            padding: this.padding,
            strides: this.strides,
            dataFormat: this.dataFormat,
          },
          t = super.getConfig()
        return Object.assign(e, t), e
      }
    }
    class Dw extends Fw {
      constructor(e) {
        super(e)
      }
      poolingFunction(e, t, n, r, s) {
        return ng(s), rg(r), Tw(e, t, n, r, s, 'max')
      }
    }
    ;(Dw.className = 'MaxPooling3D'), Gi(Dw)
    class Ow extends Fw {
      constructor(e) {
        super(e)
      }
      poolingFunction(e, t, n, r, s) {
        return ng(s), rg(r), Tw(e, t, n, r, s, 'avg')
      }
    }
    ;(Ow.className = 'AveragePooling3D'), Gi(Ow)
    class Mw extends gy {
      constructor(e) {
        super(e), (this.inputSpec = [new hy({ ndim: 3 })])
      }
      computeOutputShape(e) {
        return [e[0], e[2]]
      }
      call(e, t) {
        throw new Nm()
      }
    }
    class Lw extends Mw {
      constructor(e) {
        super(e || {})
      }
      call(e, t) {
        return qi(() => {
          const t = sy(e)
          return Tu(t, 1)
        })
      }
    }
    ;(Lw.className = 'GlobalAveragePooling1D'), Gi(Lw)
    class zw extends Mw {
      constructor(e) {
        super(e || {})
      }
      call(e, t) {
        return qi(() => {
          const t = sy(e)
          return Dl(t, 1)
        })
      }
    }
    ;(zw.className = 'GlobalMaxPooling1D'), Gi(zw)
    class Pw extends gy {
      constructor(e) {
        super(e),
          (this.dataFormat =
            null == e.dataFormat ? 'channelsLast' : e.dataFormat),
          ng(this.dataFormat),
          (this.inputSpec = [new hy({ ndim: 4 })])
      }
      computeOutputShape(e) {
        return 'channelsLast' === this.dataFormat ? [e[0], e[3]] : [e[0], e[1]]
      }
      call(e, t) {
        throw new Nm()
      }
      getConfig() {
        const e = { dataFormat: this.dataFormat },
          t = super.getConfig()
        return Object.assign(e, t), e
      }
    }
    class Bw extends Pw {
      call(e, t) {
        return qi(() => {
          const t = sy(e)
          return 'channelsLast' === this.dataFormat
            ? Tu(t, [1, 2])
            : Tu(t, [2, 3])
        })
      }
    }
    ;(Bw.className = 'GlobalAveragePooling2D'), Gi(Bw)
    class Ww extends Pw {
      call(e, t) {
        return qi(() => {
          const t = sy(e)
          return 'channelsLast' === this.dataFormat
            ? Dl(t, [1, 2])
            : Dl(t, [2, 3])
        })
      }
    }
    ;(Ww.className = 'GlobalMaxPooling2D'), Gi(Ww)
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */
    class Vw extends gy {
      constructor(e) {
        super(e), (this.layer = e.layer)
      }
      build(e) {
        this.built = !0
      }
      get trainable() {
        return null != this.layer && this.layer.trainable
      }
      set trainable(e) {
        null != this.layer && (this.layer.trainable = e)
      }
      get trainableWeights() {
        return this.layer.trainableWeights
      }
      get nonTrainableWeights() {
        return this.layer.nonTrainableWeights
      }
      get updates() {
        return this.layer._updates
      }
      get losses() {
        return this.layer.losses
      }
      getWeights() {
        return this.layer.getWeights()
      }
      setWeights(e) {
        this.layer.setWeights(e)
      }
      getConfig() {
        const e = {
            layer: {
              className: this.layer.getClassName(),
              config: this.layer.getConfig(),
            },
          },
          t = super.getConfig()
        return Object.assign(e, t), e
      }
      setFastWeightInitDuringBuild(e) {
        super.setFastWeightInitDuringBuild(e),
          null != this.layer && this.layer.setFastWeightInitDuringBuild(e)
      }
      static fromConfig(e, t, n = {}) {
        const r = qy(t.layer, n)
        delete t.layer
        const s = { layer: r }
        return Object.assign(s, t), new e(s)
      }
    }
    class Uw extends Vw {
      constructor(e) {
        super(e), (this.supportsMasking = !0)
      }
      build(e) {
        if ((e = ay(e)).length < 3)
          throw new Im(
            `TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`,
          )
        this.inputSpec = [{ shape: e }]
        const t = [e[0]].concat(e.slice(2))
        this.layer.built || (this.layer.build(t), (this.layer.built = !0)),
          super.build(e)
      }
      computeOutputShape(e) {
        const t = [(e = ay(e))[0]].concat(e.slice(2)),
          n = this.layer.computeOutputShape(t),
          r = e[1]
        return [n[0], r].concat(n.slice(1))
      }
      call(e, t) {
        return qi(
          () =>
            Lx(
              (e, n) => [sy(this.layer.call(e, t)), []],
              (e = sy(e)),
              [],
              !1,
              null,
              null,
              !1,
              !0,
            )[1],
        )
      }
    }
    ;(Uw.className = 'TimeDistributed'), Gi(Uw)
    class Gw extends Vw {
      constructor(e) {
        super(e)
        const t = e.layer.getConfig(),
          n = {}
        ;(n.className = e.layer.getClassName()),
          (n.config = t),
          (this.forwardLayer = qy(n)),
          (t.goBackwards = !0 !== t.goBackwards)
        const r = {}
        var s
        if (
          ((r.className = e.layer.getClassName()),
          (r.config = t),
          (this.backwardLayer = qy(r)),
          (this.forwardLayer.name = 'forward_' + this.forwardLayer.name),
          (this.backwardLayer.name = 'backward_' + this.backwardLayer.name),
          (this.mergeMode = void 0 === e.mergeMode ? 'concat' : e.mergeMode),
          (s = this.mergeMode),
          Wm(eg, 'BidirectionalMergeMode', s),
          e.weights)
        )
          throw new Nm(
            'weights support is not implemented for Bidirectional layer yet.',
          )
        ;(this._stateful = e.layer.stateful),
          (this.returnSequences = e.layer.returnSequences),
          (this.returnState = e.layer.returnState),
          (this.supportsMasking = !0),
          (this._trainable = !0),
          (this.inputSpec = e.layer.inputSpec),
          (this.numConstants = null)
      }
      get trainable() {
        return this._trainable
      }
      set trainable(e) {
        ;(this._trainable = e),
          null != this.forwardLayer && (this.forwardLayer.trainable = e),
          null != this.backwardLayer && (this.backwardLayer.trainable = e)
      }
      getWeights() {
        return this.forwardLayer
          .getWeights()
          .concat(this.backwardLayer.getWeights())
      }
      setWeights(e) {
        const t = e.length,
          n = Math.floor(t / 2)
        this.forwardLayer.setWeights(e.slice(0, n)),
          this.backwardLayer.setWeights(e.slice(n))
      }
      computeOutputShape(e) {
        let t,
          n,
          r,
          s = this.forwardLayer.computeOutputShape(e)
        return (
          (Array.isArray(s) && Array.isArray(s[0])) || (s = [s]),
          this.returnState ? ((r = s.slice(1)), (t = s[0])) : (t = s[0]),
          'concat' === this.mergeMode
            ? ((t[t.length - 1] *= 2), (n = [t]))
            : (n = null == this.mergeMode ? [t, t.slice()] : [t]),
          this.returnState
            ? null == this.mergeMode
              ? n.concat(r).concat(r.slice())
              : [t].concat(r).concat(r.slice())
            : Rm(n)
        )
      }
      apply(e, t) {
        let n = null == t ? null : t.initialState,
          r = null == t ? null : t.constants
        null == t && (t = {})
        const s = Mx(e, n, r, this.numConstants)
        if (
          ((e = s.inputs),
          (n = s.initialState),
          (r = s.constants),
          Array.isArray(e) && ((n = e.slice(1)), (e = e[0])),
          (null == n || 0 === n.length) && null == r)
        )
          return super.apply(e, t)
        const a = [],
          i = []
        if (null != n) {
          const e = n.length
          if (e % 2 > 0)
            throw new Im(
              'When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.',
            )
          ;(t.initialState = n), a.push(...n)
          const r = n.map((e) => new hy({ shape: e.shape }))
          ;(this.forwardLayer.stateSpec = r.slice(0, e / 2)),
            (this.backwardLayer.stateSpec = r.slice(e / 2)),
            i.push(...r)
        }
        if (null != r)
          throw new Nm(
            'Support for constants in Bidirectional layers is not implemented yet.',
          )
        const o = a[0] instanceof py
        for (const e of a)
          if (e instanceof py !== o)
            throw new Im(
              'The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors',
            )
        if (o) {
          const n = [e].concat(a),
            r = this.inputSpec.concat(i),
            s = this.inputSpec
          this.inputSpec = r
          const o = super.apply(n, t)
          return (this.inputSpec = s), o
        }
        return super.apply(e, t)
      }
      call(e, t) {
        return qi(() => {
          const n = t.initialState
          let r, s, a, i
          if (null == n)
            (r = this.forwardLayer.call(e, t)),
              (s = this.backwardLayer.call(e, t))
          else {
            const a = n.slice(0, n.length / 2),
              i = n.slice(n.length / 2)
            ;(r = this.forwardLayer.call(
              e,
              Object.assign(t, { initialState: a }),
            )),
              (s = this.backwardLayer.call(
                e,
                Object.assign(t, { initialState: i }),
              ))
          }
          return (
            this.returnState &&
              (Array.isArray(r) && (a = r.slice(1).concat(s.slice(1))),
              (r = r[0]),
              (s = s[0])),
            this.returnSequences && (s = hc(s, 1)),
            'concat' === this.mergeMode
              ? (i = Ig([r, s]))
              : 'sum' === this.mergeMode
                ? (i = ro(r, s))
                : 'ave' === this.mergeMode
                  ? (i = Do(0.5, ro(r, s)))
                  : 'mul' === this.mergeMode
                    ? (i = Do(r, s))
                    : null == this.mergeMode && (i = [r, s]),
            this.returnState
              ? null == this.mergeMode
                ? i.concat(a)
                : [i].concat(a)
              : i
          )
        })
      }
      resetStates(e) {
        this.forwardLayer.resetStates(), this.backwardLayer.resetStates()
      }
      build(e) {
        ig(this.forwardLayer.name, () => {
          this.forwardLayer.build(e)
        }),
          ig(this.backwardLayer.name, () => {
            this.backwardLayer.build(e)
          }),
          (this.built = !0)
      }
      computeMask(e, t) {
        let n
        if (
          (Array.isArray(t) && (t = t[0]),
          (n = this.returnSequences
            ? null == this.mergeMode
              ? [t, t]
              : t
            : null == this.mergeMode
              ? [null, null]
              : null),
          this.returnState)
        ) {
          const e = this.forwardLayer.states.map((e) => null)
          return Array.isArray(n)
            ? n.concat(e).concat(e)
            : [n].concat(e).concat(e)
        }
        return n
      }
      get trainableWeights() {
        return this.forwardLayer.trainableWeights.concat(
          this.backwardLayer.trainableWeights,
        )
      }
      get nonTrainableWeights() {
        return this.forwardLayer.nonTrainableWeights.concat(
          this.backwardLayer.nonTrainableWeights,
        )
      }
      setFastWeightInitDuringBuild(e) {
        super.setFastWeightInitDuringBuild(e),
          null != this.forwardLayer &&
            this.forwardLayer.setFastWeightInitDuringBuild(e),
          null != this.backwardLayer &&
            this.backwardLayer.setFastWeightInitDuringBuild(e)
      }
      getConfig() {
        const e = { mergeMode: this.mergeMode },
          t = super.getConfig()
        return Object.assign(e, t), e
      }
      static fromConfig(e, t) {
        const n = qy(t.layer)
        if ((delete t.layer, null != t.numConstants))
          throw new Nm(
            'Deserialization of a Bidirectional layer with numConstants present is not supported yet.',
          )
        const r = t
        return (r.layer = n), new e(r)
      }
    }
    ;(Gw.className = 'Bidirectional'), Gi(Gw)
    /**
     * @license
     * Copyright 2022 CodeSmith LLC
     *
     * Use of this source code is governed by an MIT-style
     * license that can be found in the LICENSE file or at
     * https://opensource.org/licenses/MIT.
     * =============================================================================
     */
    class Hw extends gy {
      constructor(e) {
        super(e),
          (this.scale = e.scale),
          e.offset ? (this.offset = e.offset) : (this.offset = 0)
      }
      getConfig() {
        const e = { scale: this.scale, offset: this.offset },
          t = super.getConfig()
        return Object.assign(e, t), e
      }
      call(e, t) {
        return qi(
          () => (
            'float32' !== (e = sy(e)).dtype && (e = bg(e, 'float32')),
            ro(Do(e, this.scale), this.offset)
          ),
        )
      }
    }
    ;(Hw.className = 'Rescaling'),
      Gi(Hw),
      /**
       * @license
       * Copyright 2019 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       *
       * =============================================================================
       */ ye().registerFlag(
        'KEEP_INTERMEDIATE_TENSORS',
        () => !1,
        (e) => {
          e &&
            console.warn(
              'Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.',
            )
        },
      ),
      (function (e) {
        ;(e[(e.DT_INVALID = 0)] = 'DT_INVALID'),
          (e[(e.DT_FLOAT = 1)] = 'DT_FLOAT'),
          (e[(e.DT_DOUBLE = 2)] = 'DT_DOUBLE'),
          (e[(e.DT_INT32 = 3)] = 'DT_INT32'),
          (e[(e.DT_UINT8 = 4)] = 'DT_UINT8'),
          (e[(e.DT_INT16 = 5)] = 'DT_INT16'),
          (e[(e.DT_INT8 = 6)] = 'DT_INT8'),
          (e[(e.DT_STRING = 7)] = 'DT_STRING'),
          (e[(e.DT_COMPLEX64 = 8)] = 'DT_COMPLEX64'),
          (e[(e.DT_INT64 = 9)] = 'DT_INT64'),
          (e[(e.DT_BOOL = 10)] = 'DT_BOOL'),
          (e[(e.DT_QINT8 = 11)] = 'DT_QINT8'),
          (e[(e.DT_QUINT8 = 12)] = 'DT_QUINT8'),
          (e[(e.DT_QINT32 = 13)] = 'DT_QINT32'),
          (e[(e.DT_BFLOAT16 = 14)] = 'DT_BFLOAT16'),
          (e[(e.DT_QINT16 = 15)] = 'DT_QINT16'),
          (e[(e.DT_QUINT16 = 16)] = 'DT_QUINT16'),
          (e[(e.DT_UINT16 = 17)] = 'DT_UINT16'),
          (e[(e.DT_COMPLEX128 = 18)] = 'DT_COMPLEX128'),
          (e[(e.DT_HALF = 19)] = 'DT_HALF'),
          (e[(e.DT_RESOURCE = 20)] = 'DT_RESOURCE'),
          (e[(e.DT_VARIANT = 21)] = 'DT_VARIANT'),
          (e[(e.DT_UINT32 = 22)] = 'DT_UINT32'),
          (e[(e.DT_UINT64 = 23)] = 'DT_UINT64'),
          (e[(e.DT_FLOAT_REF = 101)] = 'DT_FLOAT_REF'),
          (e[(e.DT_DOUBLE_REF = 102)] = 'DT_DOUBLE_REF'),
          (e[(e.DT_INT32_REF = 103)] = 'DT_INT32_REF'),
          (e[(e.DT_UINT8_REF = 104)] = 'DT_UINT8_REF'),
          (e[(e.DT_INT16_REF = 105)] = 'DT_INT16_REF'),
          (e[(e.DT_INT8_REF = 106)] = 'DT_INT8_REF'),
          (e[(e.DT_STRING_REF = 107)] = 'DT_STRING_REF'),
          (e[(e.DT_COMPLEX64_REF = 108)] = 'DT_COMPLEX64_REF'),
          (e[(e.DT_INT64_REF = 109)] = 'DT_INT64_REF'),
          (e[(e.DT_BOOL_REF = 110)] = 'DT_BOOL_REF'),
          (e[(e.DT_QINT8_REF = 111)] = 'DT_QINT8_REF'),
          (e[(e.DT_QUINT8_REF = 112)] = 'DT_QUINT8_REF'),
          (e[(e.DT_QINT32_REF = 113)] = 'DT_QINT32_REF'),
          (e[(e.DT_BFLOAT16_REF = 114)] = 'DT_BFLOAT16_REF'),
          (e[(e.DT_QINT16_REF = 115)] = 'DT_QINT16_REF'),
          (e[(e.DT_QUINT16_REF = 116)] = 'DT_QUINT16_REF'),
          (e[(e.DT_UINT16_REF = 117)] = 'DT_UINT16_REF'),
          (e[(e.DT_COMPLEX128_REF = 118)] = 'DT_COMPLEX128_REF'),
          (e[(e.DT_HALF_REF = 119)] = 'DT_HALF_REF'),
          (e[(e.DT_RESOURCE_REF = 120)] = 'DT_RESOURCE_REF'),
          (e[(e.DT_VARIANT_REF = 121)] = 'DT_VARIANT_REF'),
          (e[(e.DT_UINT32_REF = 122)] = 'DT_UINT32_REF'),
          (e[(e.DT_UINT64_REF = 123)] = 'DT_UINT64_REF')
      })(Kx || (Kx = {})),
      (function (e) {
        let t
        !(function (e) {
          ;(e[(e.LEGACY = 0)] = 'LEGACY'),
            (e[(e.V1 = 1)] = 'V1'),
            (e[(e.V2 = 2)] = 'V2')
        })((t = e.CheckpointFormatVersion || (e.CheckpointFormatVersion = {})))
      })(Xx || (Xx = {}))
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const jw = {}
    function qw(e) {
      return jw[e]
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Kw(e, t, n, r, s) {
      const a = t.inputParams[e]
      if (a && void 0 !== a.inputIndexStart) {
        const e = a.inputIndexStart,
          i =
            0 === a.inputIndexEnd
              ? void 0
              : void 0 === a.inputIndexEnd
                ? e + 1
                : a.inputIndexEnd
        if ('tensor' === a.type)
          return Xw(t.inputNames[a.inputIndexStart], n, r, s)
        if ('tensors' === a.type)
          return t.inputNames.slice(e, i).map((e) => Xw(e, n, r, s))
        const o = Xw(t.inputNames.slice(e)[0], n, r, s),
          l = o.dataSync()
        return 'number' === a.type ? l[0] : ie(o.shape, l)
      }
      const i = t.attrParams[e]
      return i && i.value
    }
    function Xw(e, t, n, r) {
      const [s, a] = Jw(e)
      if (null != r) {
        const e = r.getHashTableHandleByName(s)
        if (null != e) return e
      }
      const i = n.currentContextIds.find((e) => !!t[Zw(s, e)])
      return void 0 !== i ? t[Zw(s, i)][a] : void 0
    }
    function Yw(e, t) {
      const [n, r, s] = Jw(e)
      return [Zw(n, t && t.currentContextId), r, s]
    }
    function Zw(e, t) {
      return t ? `${e}-${t}` : e
    }
    function Jw(e) {
      const t = e.split(':')
      if (1 === t.length) return [e, 0, void 0]
      const n = t[0],
        r = 3 === t.length ? t[1] : void 0
      return [n, Number(t[t.length - 1]), r]
    }
    function Qw(e, t, n) {
      let r = Kw('pad', e, t, n)
      if ('explicit' === r) {
        r = Kw('explicitPaddings', e, t, n)
        const s = [
          [0, 0],
          [0, 0],
          [0, 0],
          [0, 0],
        ]
        for (let e = 0; e < 4; e++)
          (s[e][0] = r[2 * e]), (s[e][1] = r[2 * e + 1])
        return s
      }
      return r
    }
    function ev(e) {
      return e.kept ? e : Xa(e)
    }
    /**
     * @license
     * Copyright 2022 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const tv = [
        {
          tfOpName: 'Add',
          category: 'arithmetic',
          inputs: [
            { start: 0, name: 'a', type: 'tensor' },
            { start: 1, name: 'b', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'AddV2',
          category: 'arithmetic',
          inputs: [
            { start: 0, name: 'a', type: 'tensor' },
            { start: 1, name: 'b', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'AddN',
          category: 'arithmetic',
          inputs: [{ start: 0, end: 0, name: 'tensors', type: 'tensors' }],
        },
        {
          tfOpName: 'BiasAdd',
          category: 'arithmetic',
          inputs: [
            { start: 0, name: 'a', type: 'tensor' },
            { start: 1, name: 'b', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            {
              tfName: 'data_format',
              name: 'dataFormat',
              type: 'string',
              notSupported: !0,
            },
          ],
        },
        {
          tfOpName: 'Sub',
          category: 'arithmetic',
          inputs: [
            { start: 0, name: 'a', type: 'tensor' },
            { start: 1, name: 'b', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'RealDiv',
          category: 'arithmetic',
          inputs: [
            { start: 0, name: 'a', type: 'tensor' },
            { start: 1, name: 'b', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Div',
          category: 'arithmetic',
          inputs: [
            { start: 0, name: 'a', type: 'tensor' },
            { start: 1, name: 'b', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'DivNoNan',
          category: 'arithmetic',
          inputs: [
            { start: 0, name: 'a', type: 'tensor' },
            { start: 1, name: 'b', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'FloorDiv',
          category: 'arithmetic',
          inputs: [
            { start: 0, name: 'a', type: 'tensor' },
            { start: 1, name: 'b', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Mul',
          category: 'arithmetic',
          inputs: [
            { start: 0, name: 'a', type: 'tensor' },
            { start: 1, name: 'b', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Maximum',
          category: 'arithmetic',
          inputs: [
            { start: 0, name: 'a', type: 'tensor' },
            { start: 1, name: 'b', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Minimum',
          category: 'arithmetic',
          inputs: [
            { start: 0, name: 'a', type: 'tensor' },
            { start: 1, name: 'b', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Pow',
          category: 'arithmetic',
          inputs: [
            { start: 0, name: 'a', type: 'tensor' },
            { start: 1, name: 'b', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'SquaredDifference',
          category: 'arithmetic',
          inputs: [
            { start: 0, name: 'a', type: 'tensor' },
            { start: 1, name: 'b', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Mod',
          category: 'arithmetic',
          inputs: [
            { start: 0, name: 'a', type: 'tensor' },
            { start: 1, name: 'b', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'FloorMod',
          category: 'arithmetic',
          inputs: [
            { start: 0, name: 'a', type: 'tensor' },
            { start: 1, name: 'b', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
      ],
      nv = [
        {
          tfOpName: 'Abs',
          category: 'basic_math',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Acos',
          category: 'basic_math',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Asin',
          category: 'basic_math',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Atan',
          category: 'basic_math',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Atan2',
          category: 'basic_math',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'y', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Ceil',
          category: 'basic_math',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'ClipByValue',
          category: 'basic_math',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'clipValueMin', type: 'number' },
            { start: 2, name: 'clipValueMax', type: 'number' },
          ],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Complex',
          category: 'basic_math',
          inputs: [
            { start: 0, name: 'real', type: 'tensor' },
            { start: 1, name: 'imag', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'ComplexAbs',
          category: 'basic_math',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Cos',
          category: 'basic_math',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Cosh',
          category: 'basic_math',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Elu',
          category: 'basic_math',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Exp',
          category: 'basic_math',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Floor',
          category: 'basic_math',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Log',
          category: 'basic_math',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Imag',
          category: 'basic_math',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            {
              tfName: 'Tout',
              name: 'outputType',
              type: 'dtype',
              notSupported: !0,
            },
          ],
        },
        {
          tfOpName: 'Neg',
          category: 'basic_math',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Real',
          category: 'basic_math',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            {
              tfName: 'Tout',
              name: 'outputType',
              type: 'dtype',
              notSupported: !0,
            },
          ],
        },
        {
          tfOpName: 'Prelu',
          category: 'basic_math',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'alpha', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Relu',
          category: 'basic_math',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Relu6',
          category: 'basic_math',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Selu',
          category: 'basic_math',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Sigmoid',
          category: 'basic_math',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Sin',
          category: 'basic_math',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Sinh',
          category: 'basic_math',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Sqrt',
          category: 'basic_math',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Rsqrt',
          category: 'basic_math',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Square',
          category: 'basic_math',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Tan',
          category: 'basic_math',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Tanh',
          category: 'basic_math',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Sign',
          category: 'basic_math',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Round',
          category: 'basic_math',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Expm1',
          category: 'basic_math',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Log1p',
          category: 'basic_math',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Reciprocal',
          category: 'basic_math',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Softplus',
          category: 'basic_math',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Asinh',
          category: 'basic_math',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Acosh',
          category: 'basic_math',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Atanh',
          category: 'basic_math',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Erf',
          category: 'basic_math',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Prod',
          category: 'basic_math',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'axes', type: 'number[]' },
          ],
          attrs: [
            {
              tfName: 'keep_dims',
              name: 'keepDims',
              type: 'bool',
              notSupported: !0,
            },
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'LeakyRelu',
          category: 'basic_math',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            {
              tfName: 'alpha',
              name: 'alpha',
              type: 'number',
              defaultValue: 0.2,
            },
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'IsNan',
          category: 'basic_math',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
      ],
      rv = [
        {
          tfOpName: 'EmptyTensorList',
          category: 'control',
          inputs: [
            { start: 0, name: 'elementShape', type: 'shape' },
            { start: 1, name: 'maxNumElements', type: 'number' },
          ],
          attrs: [
            { tfName: 'element_dtype', name: 'elementDType', type: 'dtype' },
          ],
        },
        {
          tfOpName: 'LoopCond',
          category: 'control',
          inputs: [{ start: 0, name: 'pred', type: 'tensor' }],
        },
        {
          tfOpName: 'Switch',
          category: 'control',
          inputs: [
            { start: 0, name: 'data', type: 'tensor' },
            { start: 1, name: 'pred', type: 'tensor' },
          ],
        },
        {
          tfOpName: 'Merge',
          category: 'control',
          inputs: [{ start: 0, end: 0, name: 'tensors', type: 'tensors' }],
        },
        {
          tfOpName: 'Enter',
          category: 'control',
          inputs: [{ start: 0, name: 'tensor', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            { tfName: 'frame_name', name: 'frameName', type: 'string' },
            { tfName: 'is_constant', name: 'isConstant', type: 'bool' },
          ],
        },
        {
          tfOpName: 'Exit',
          category: 'control',
          inputs: [{ start: 0, name: 'tensor', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'NextIteration',
          category: 'control',
          inputs: [{ start: 0, name: 'tensor', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'TensorArrayV3',
          category: 'control',
          inputs: [{ start: 0, name: 'size', type: 'number' }],
          attrs: [
            { tfName: 'dtype', name: 'dtype', type: 'dtype' },
            { tfName: 'element_shape', name: 'elementShape', type: 'shape' },
            { tfName: 'dynamic_size', name: 'dynamicSize', type: 'bool' },
            {
              tfName: 'clear_after_read',
              name: 'clearAfterRead',
              type: 'bool',
            },
            {
              tfName: 'identical_element_shapes',
              name: 'identicalElementShapes',
              type: 'bool',
            },
            { tfName: 'tensor_array_name', name: 'name', type: 'string' },
          ],
        },
        {
          tfOpName: 'TensorArrayWriteV3',
          category: 'control',
          inputs: [
            { start: 0, name: 'tensorArrayId', type: 'tensor' },
            { start: 1, name: 'index', type: 'number' },
            { start: 2, name: 'tensor', type: 'tensor' },
            { start: 3, name: 'flowIn', type: 'number' },
          ],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'TensorArrayReadV3',
          category: 'control',
          inputs: [
            { start: 0, name: 'tensorArrayId', type: 'tensor' },
            { start: 1, name: 'index', type: 'number' },
            { start: 2, name: 'flowIn', type: 'number' },
          ],
          attrs: [
            { tfName: 'dtype', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'TensorArrayGatherV3',
          category: 'control',
          inputs: [
            { start: 0, name: 'tensorArrayId', type: 'tensor' },
            { start: 1, name: 'indices', type: 'number[]' },
            { start: 2, name: 'flowIn', type: 'number' },
          ],
          attrs: [
            { tfName: 'dtype', name: 'dtype', type: 'dtype' },
            { tfName: 'element_shape', name: 'elementShape', type: 'shape' },
          ],
        },
        {
          tfOpName: 'TensorArrayScatterV3',
          category: 'control',
          inputs: [
            { start: 0, name: 'tensorArrayId', type: 'tensor' },
            { start: 1, name: 'indices', type: 'number[]' },
            { start: 2, name: 'tensor', type: 'tensor' },
            { start: 3, name: 'flowIn', type: 'number' },
          ],
          attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype' }],
        },
        {
          tfOpName: 'TensorArrayConcatV3',
          category: 'control',
          inputs: [
            { start: 0, name: 'tensorArrayId', type: 'tensor' },
            { start: 1, name: 'flowIn', type: 'number' },
          ],
          attrs: [
            { tfName: 'dtype', name: 'dtype', type: 'dtype' },
            {
              tfName: 'element_shape_except0',
              name: 'elementShapeExcept0',
              type: 'shape',
              notSupported: !0,
            },
          ],
        },
        {
          tfOpName: 'TensorArraySplitV3',
          category: 'control',
          inputs: [
            { start: 0, name: 'tensorArrayId', type: 'tensor' },
            { start: 1, name: 'tensor', type: 'tensor' },
            { start: 2, name: 'lengths', type: 'number[]' },
            { start: 3, name: 'flowIn', type: 'number' },
          ],
          attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype' }],
        },
        {
          tfOpName: 'TensorArraySizeV3',
          category: 'control',
          inputs: [
            { start: 0, name: 'tensorArrayId', type: 'tensor' },
            { start: 1, name: 'flowIn', type: 'number' },
          ],
        },
        {
          tfOpName: 'TensorArrayCloseV3',
          category: 'control',
          inputs: [{ start: 0, name: 'tensorArrayId', type: 'tensor' }],
        },
        {
          tfOpName: 'StatelessIf',
          category: 'control',
          inputs: [
            { start: 0, name: 'cond', type: 'tensor' },
            { start: 1, end: 0, name: 'args', type: 'tensors' },
          ],
          attrs: [
            { tfName: 'then_branch', name: 'thenBranch', type: 'func' },
            { tfName: 'else_branch', name: 'elseBranch', type: 'func' },
          ],
        },
        {
          tfOpName: 'If',
          category: 'control',
          inputs: [
            { start: 0, name: 'cond', type: 'tensor' },
            { start: 1, end: 0, name: 'args', type: 'tensors' },
          ],
          attrs: [
            { tfName: 'then_branch', name: 'thenBranch', type: 'func' },
            { tfName: 'else_branch', name: 'elseBranch', type: 'func' },
          ],
        },
        {
          tfOpName: 'StatelessWhile',
          category: 'control',
          inputs: [{ start: 0, end: 0, name: 'args', type: 'tensors' }],
          attrs: [
            { tfName: 'cond', name: 'cond', type: 'func' },
            { tfName: 'body', name: 'body', type: 'func' },
          ],
        },
        {
          tfOpName: 'While',
          category: 'control',
          inputs: [{ start: 0, end: 0, name: 'args', type: 'tensors' }],
          attrs: [
            { tfName: 'cond', name: 'cond', type: 'func' },
            { tfName: 'body', name: 'body', type: 'func' },
          ],
        },
        {
          tfOpName: 'TensorListScatter',
          category: 'control',
          inputs: [
            { start: 0, name: 'tensor', type: 'tensor' },
            { start: 1, name: 'indices', type: 'number[]' },
            { start: 2, name: 'elementShape', type: 'shape' },
          ],
          attrs: [
            { tfName: 'element_dtype', name: 'elementDType', type: 'dtype' },
          ],
        },
        {
          tfOpName: 'TensorListScatterV2',
          category: 'control',
          inputs: [
            { start: 0, name: 'tensor', type: 'tensor' },
            { start: 1, name: 'indices', type: 'number[]' },
            { start: 2, name: 'elementShape', type: 'shape' },
            { start: 3, name: 'numElements', type: 'number' },
          ],
          attrs: [
            { tfName: 'element_dtype', name: 'elementDType', type: 'dtype' },
          ],
        },
        {
          tfOpName: 'TensorListGather',
          category: 'control',
          inputs: [
            { start: 0, name: 'tensorListId', type: 'tensor' },
            { start: 1, name: 'indices', type: 'number[]' },
            { start: 2, name: 'elementShape', type: 'shape' },
          ],
          attrs: [
            { tfName: 'element_dtype', name: 'elementDType', type: 'dtype' },
          ],
        },
        {
          tfOpName: 'TensorListGetItem',
          category: 'control',
          inputs: [
            { start: 0, name: 'tensorListId', type: 'tensor' },
            { start: 1, name: 'index', type: 'number' },
            { start: 2, name: 'elementShape', type: 'shape' },
          ],
          attrs: [
            { tfName: 'element_dtype', name: 'elementDType', type: 'dtype' },
          ],
        },
        {
          tfOpName: 'TensorListSetItem',
          category: 'control',
          inputs: [
            { start: 0, name: 'tensorListId', type: 'tensor' },
            { start: 1, name: 'index', type: 'number' },
            { start: 2, name: 'tensor', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'element_dtype', name: 'elementDType', type: 'dtype' },
          ],
        },
        {
          tfOpName: 'TensorListReserve',
          category: 'control',
          inputs: [
            { start: 0, name: 'elementShape', type: 'shape' },
            { start: 1, name: 'numElements', type: 'number' },
          ],
          attrs: [
            { tfName: 'element_dtype', name: 'elementDType', type: 'dtype' },
          ],
        },
        {
          tfOpName: 'TensorListFromTensor',
          category: 'control',
          inputs: [
            { start: 0, name: 'tensor', type: 'tensor' },
            { start: 1, name: 'elementShape', type: 'shape' },
          ],
          attrs: [
            { tfName: 'element_dtype', name: 'elementDType', type: 'dtype' },
          ],
        },
        {
          tfOpName: 'TensorListStack',
          category: 'control',
          inputs: [
            { start: 0, name: 'tensorListId', type: 'tensor' },
            { start: 1, name: 'elementShape', type: 'shape' },
          ],
          attrs: [
            { tfName: 'element_dtype', name: 'elementDType', type: 'dtype' },
            { tfName: 'num_elements', name: 'numElements', type: 'dtype' },
          ],
        },
        {
          tfOpName: 'TensorListSplit',
          category: 'control',
          inputs: [
            { start: 0, name: 'tensor', type: 'tensor' },
            { start: 1, name: 'elementShape', type: 'shape' },
            { start: 2, name: 'lengths', type: 'number[]' },
          ],
          attrs: [
            { tfName: 'element_dtype', name: 'elementDType', type: 'dtype' },
          ],
        },
        {
          tfOpName: 'TensorListConcat',
          category: 'control',
          inputs: [{ start: 0, name: 'tensorListId', type: 'tensor' }],
          attrs: [
            { tfName: 'element_shape', name: 'elementShape', type: 'shape' },
            { tfName: 'element_dtype', name: 'elementDType', type: 'dtype' },
          ],
        },
        {
          tfOpName: 'TensorListConcatV2',
          category: 'control',
          inputs: [{ start: 0, name: 'tensorListId', type: 'tensor' }],
          attrs: [
            { tfName: 'element_shape', name: 'elementShape', type: 'shape' },
            { tfName: 'element_dtype', name: 'elementDType', type: 'dtype' },
          ],
        },
        {
          tfOpName: 'TensorListPopBack',
          category: 'control',
          inputs: [
            { start: 0, name: 'tensorListId', type: 'tensor' },
            { start: 1, name: 'elementShape', type: 'shape' },
          ],
          attrs: [
            { tfName: 'element_dtype', name: 'elementDType', type: 'dtype' },
          ],
        },
        {
          tfOpName: 'TensorListPushBack',
          category: 'control',
          inputs: [
            { start: 0, name: 'tensorListId', type: 'tensor' },
            { start: 1, name: 'tensor', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'element_dtype', name: 'elementDType', type: 'dtype' },
          ],
        },
        {
          tfOpName: 'TensorListLength',
          category: 'control',
          inputs: [{ start: 0, name: 'tensorListId', type: 'tensor' }],
        },
        {
          tfOpName: 'TensorListResize',
          category: 'control',
          inputs: [
            { start: 0, name: 'tensorListId', type: 'tensor' },
            { start: 1, name: 'size', type: 'number' },
          ],
        },
      ],
      sv = [
        {
          tfOpName: 'AvgPool',
          category: 'convolution',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'strides', name: 'strides', type: 'number[]' },
            { tfName: 'padding', name: 'pad', type: 'string' },
            {
              tfName: 'data_format',
              name: 'dataFormat',
              type: 'string',
              notSupported: !0,
            },
            { tfName: 'ksize', name: 'kernelSize', type: 'number[]' },
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'MaxPool',
          category: 'convolution',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'strides', name: 'strides', type: 'number[]' },
            { tfName: 'padding', name: 'pad', type: 'string' },
            {
              tfName: 'data_format',
              name: 'dataFormat',
              type: 'string',
              notSupported: !0,
            },
            { tfName: 'ksize', name: 'kernelSize', type: 'number[]' },
            {
              tfName: 'explicit_paddings',
              name: 'explicitPaddings',
              type: 'number[]',
              defaultValue: [],
              notSupported: !0,
            },
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'MaxPoolWithArgmax',
          category: 'convolution',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'strides', name: 'strides', type: 'number[]' },
            { tfName: 'padding', name: 'pad', type: 'string' },
            { tfName: 'ksize', name: 'kernelSize', type: 'number[]' },
            {
              tfName: 'include_batch_in_index',
              name: 'includeBatchInIndex',
              type: 'bool',
            },
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'AvgPool3D',
          category: 'convolution',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'strides', name: 'strides', type: 'number[]' },
            { tfName: 'padding', name: 'pad', type: 'string' },
            {
              tfName: 'data_format',
              name: 'dataFormat',
              type: 'string',
              notSupported: !0,
            },
            { tfName: 'ksize', name: 'kernelSize', type: 'number[]' },
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'MaxPool3D',
          category: 'convolution',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'strides', name: 'strides', type: 'number[]' },
            { tfName: 'padding', name: 'pad', type: 'string' },
            {
              tfName: 'data_format',
              name: 'dataFormat',
              type: 'string',
              notSupported: !0,
            },
            { tfName: 'ksize', name: 'kernelSize', type: 'number[]' },
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Conv1D',
          category: 'convolution',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'filter', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'stride', name: 'stride', type: 'number' },
            { tfName: 'padding', name: 'pad', type: 'string' },
            {
              tfName: 'data_format',
              name: 'dataFormat',
              type: 'string',
              defaultValue: 'NWC',
            },
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            {
              tfName: 'dilation',
              name: 'dilation',
              type: 'number',
              defaultValue: 1,
            },
          ],
        },
        {
          tfOpName: 'Conv2D',
          category: 'convolution',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'filter', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            { tfName: 'strides', name: 'strides', type: 'number[]' },
            { tfName: 'padding', name: 'pad', type: 'string' },
            { tfName: 'useCudnnOnGpu', name: 'useCudnnOnGpu', type: 'bool' },
            {
              tfName: 'data_format',
              name: 'dataFormat',
              type: 'string',
              defaultValue: 'NHWC',
            },
            {
              tfName: 'explicit_paddings',
              name: 'explicitPaddings',
              type: 'number[]',
              defaultValue: [],
            },
            { tfName: 'dilations', name: 'dilations', type: 'number[]' },
          ],
        },
        {
          tfOpName: '_FusedConv2D',
          category: 'convolution',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'filter', type: 'tensor' },
            { start: 2, end: 0, name: 'args', type: 'tensors' },
          ],
          attrs: [
            { tfName: 'num_args', name: 'numArgs', type: 'number' },
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            { tfName: 'strides', name: 'strides', type: 'number[]' },
            { tfName: 'padding', name: 'pad', type: 'string' },
            {
              tfName: 'explicit_paddings',
              name: 'explicitPaddings',
              type: 'number[]',
              defaultValue: [],
            },
            {
              tfName: 'use_cudnn_on_gpu',
              name: 'useCudnnOnGpu',
              type: 'bool',
              defaultValue: !0,
            },
            {
              tfName: 'data_format',
              name: 'dataFormat',
              type: 'string',
              defaultValue: 'NHWC',
            },
            {
              tfName: 'dilations',
              name: 'dilations',
              type: 'number[]',
              defaultValue: [1, 1, 1, 1],
            },
            {
              tfName: 'fused_ops',
              name: 'fusedOps',
              type: 'string[]',
              defaultValue: [],
            },
            {
              tfName: 'epsilon',
              name: 'epsilon',
              type: 'number',
              defaultValue: 1e-4,
            },
            {
              tfName: 'leakyrelu_alpha',
              name: 'leakyreluAlpha',
              type: 'number',
              defaultValue: 0.2,
            },
          ],
        },
        {
          tfOpName: 'Conv2DBackpropInput',
          category: 'convolution',
          inputs: [
            { start: 2, name: 'x', type: 'tensor' },
            { start: 1, name: 'filter', type: 'tensor' },
            { start: 0, name: 'outputShape', type: 'number[]' },
          ],
          attrs: [
            { tfName: 'strides', name: 'strides', type: 'number[]' },
            { tfName: 'padding', name: 'pad', type: 'string' },
            {
              tfName: 'data_format',
              name: 'dataFormat',
              type: 'string',
              notSupported: !0,
            },
            {
              tfName: 'explicit_paddings',
              name: 'explicitPaddings',
              type: 'number[]',
              defaultValue: [],
            },
            {
              tfName: 'dilations',
              name: 'dilations',
              type: 'number[]',
              notSupported: !0,
            },
          ],
        },
        {
          tfOpName: 'DepthwiseConv2d',
          category: 'convolution',
          inputs: [
            { start: 0, name: 'input', type: 'tensor' },
            { start: 1, name: 'filter', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'strides', name: 'strides', type: 'number[]' },
            { tfName: 'padding', name: 'pad', type: 'string' },
            {
              tfName: 'data_format',
              name: 'dataFormat',
              type: 'string',
              defaultValue: 'NHWC',
            },
            {
              tfName: 'explicit_paddings',
              name: 'explicitPaddings',
              type: 'number[]',
              defaultValue: [],
            },
            { tfName: 'dilations', name: 'dilations', type: 'number[]' },
          ],
        },
        {
          tfOpName: 'DepthwiseConv2dNative',
          category: 'convolution',
          inputs: [
            { start: 0, name: 'input', type: 'tensor' },
            { start: 1, name: 'filter', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'strides', name: 'strides', type: 'number[]' },
            { tfName: 'padding', name: 'pad', type: 'string' },
            {
              tfName: 'data_format',
              name: 'dataFormat',
              type: 'string',
              defaultValue: 'NHWC',
            },
            {
              tfName: 'explicit_paddings',
              name: 'explicitPaddings',
              type: 'number[]',
              defaultValue: [],
            },
            { tfName: 'dilations', name: 'dilations', type: 'number[]' },
          ],
        },
        {
          tfOpName: 'FusedDepthwiseConv2dNative',
          category: 'convolution',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'filter', type: 'tensor' },
            { start: 2, end: 0, name: 'args', type: 'tensors' },
          ],
          attrs: [
            { tfName: 'num_args', name: 'numArgs', type: 'number' },
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            { tfName: 'strides', name: 'strides', type: 'number[]' },
            { tfName: 'padding', name: 'pad', type: 'string' },
            {
              tfName: 'data_format',
              name: 'dataFormat',
              type: 'string',
              defaultValue: 'NHWC',
            },
            {
              tfName: 'dilations',
              name: 'dilations',
              type: 'number[]',
              defaultValue: [1, 1, 1, 1],
            },
            {
              tfName: 'fused_ops',
              name: 'fusedOps',
              type: 'string[]',
              defaultValue: [],
            },
            {
              tfName: 'explicit_paddings',
              name: 'explicitPaddings',
              type: 'number[]',
              defaultValue: [],
            },
          ],
        },
        {
          tfOpName: 'Conv3D',
          category: 'convolution',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'filter', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'strides', name: 'strides', type: 'number[]' },
            { tfName: 'padding', name: 'pad', type: 'string' },
            {
              tfName: 'data_format',
              name: 'dataFormat',
              type: 'string',
              defaultValue: 'NHWC',
            },
            { tfName: 'dilations', name: 'dilations', type: 'number[]' },
          ],
        },
        {
          tfOpName: 'Dilation2D',
          category: 'convolution',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'filter', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'strides', name: 'strides', type: 'number[]' },
            { tfName: 'rates', name: 'dilations', type: 'number[]' },
            { tfName: 'padding', name: 'pad', type: 'string' },
          ],
        },
      ],
      av = [
        {
          tfOpName: 'Fill',
          category: 'creation',
          inputs: [
            { start: 0, name: 'shape', type: 'number[]' },
            { start: 1, name: 'value', type: 'number' },
          ],
          attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype' }],
        },
        {
          tfOpName: 'LinSpace',
          category: 'creation',
          inputs: [
            { start: 0, name: 'start', type: 'number' },
            { start: 1, name: 'stop', type: 'number' },
            { start: 2, name: 'num', type: 'number' },
          ],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'OneHot',
          category: 'creation',
          inputs: [
            { start: 0, name: 'indices', type: 'tensor' },
            { start: 1, name: 'depth', type: 'number' },
            { start: 2, name: 'onValue', type: 'number', defaultValue: 1 },
            { start: 3, name: 'offValue', type: 'number', defaultValue: 0 },
          ],
          attrs: [
            { tfName: 'axis', name: 'axis', type: 'number', notSupported: !0 },
            { tfName: 'T', name: 'dtype', type: 'dtype' },
          ],
        },
        {
          tfOpName: 'Ones',
          category: 'creation',
          inputs: [{ start: 0, name: 'shape', type: 'number[]' }],
          attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype' }],
        },
        {
          tfOpName: 'OnesLike',
          category: 'creation',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [{ tfName: 'dtype', name: 'dtype', type: 'dtype' }],
        },
        {
          tfOpName: 'RandomStandardNormal',
          category: 'creation',
          inputs: [{ start: 0, name: 'shape', type: 'number[]' }],
          attrs: [
            { tfName: 'seed', name: 'seed', type: 'number', defaultValue: 0 },
            {
              tfName: 'seed2',
              name: 'seed2',
              type: 'number',
              defaultValue: 0,
              notSupported: !0,
            },
            { tfName: 'dtype', name: 'dtype', type: 'dtype' },
            { tfName: 'T', name: 'T', type: 'number', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'RandomUniform',
          category: 'creation',
          inputs: [{ start: 0, name: 'shape', type: 'number[]' }],
          attrs: [
            {
              tfName: 'minval',
              name: 'minval',
              type: 'number',
              defaultValue: 0,
            },
            {
              tfName: 'maxval',
              name: 'maxval',
              type: 'number',
              defaultValue: 1,
            },
            { tfName: 'dtype', name: 'dtype', type: 'dtype' },
            { tfName: 'seed', name: 'seed', type: 'number', defaultValue: 0 },
            {
              tfName: 'seed2',
              name: 'seed2',
              type: 'number',
              defaultValue: 0,
              notSupported: !0,
            },
            { tfName: 'T', name: 'T', type: 'number', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Range',
          category: 'creation',
          inputs: [
            { start: 0, name: 'start', type: 'number' },
            { start: 1, name: 'stop', type: 'number' },
            { start: 2, name: 'step', type: 'number', defaultValue: 0 },
          ],
          attrs: [{ tfName: 'Tidx', name: 'dtype', type: 'dtype' }],
        },
        {
          tfOpName: 'TruncatedNormal',
          category: 'creation',
          inputs: [{ start: 0, name: 'shape', type: 'number[]' }],
          attrs: [
            { tfName: 'means', name: 'mean', type: 'number', defaultValue: 0 },
            {
              tfName: 'stddev',
              name: 'stdDev',
              type: 'number',
              defaultValue: 1,
            },
            { tfName: 'seed', name: 'seed', type: 'number' },
            {
              tfName: 'seed2',
              name: 'seed2',
              type: 'number',
              defaultValue: 0,
              notSupported: !0,
            },
            { tfName: 'dtype', name: 'dtype', type: 'dtype' },
            { tfName: 'T', name: 'T', type: 'number', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Zeros',
          category: 'creation',
          inputs: [{ start: 0, name: 'shape', type: 'number[]' }],
          attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype' }],
        },
        {
          tfOpName: 'ZerosLike',
          category: 'creation',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype' }],
        },
        {
          tfOpName: 'Multinomial',
          category: 'creation',
          inputs: [
            { start: 0, name: 'logits', type: 'tensor' },
            { start: 1, name: 'numSamples', type: 'number' },
          ],
          attrs: [
            { tfName: 'seed', name: 'seed', type: 'number' },
            { tfName: 'seed2', name: 'seed2', type: 'number' },
            { tfName: 'T', name: 'dtype', type: 'dtype' },
            { tfName: 'output_dtype', name: 'output_dtype', type: 'dtype' },
          ],
        },
      ],
      iv = [
        {
          tfOpName: 'NonMaxSuppressionV2',
          category: 'dynamic',
          inputs: [
            { start: 0, name: 'boxes', type: 'tensor' },
            { start: 1, name: 'scores', type: 'tensor' },
            { start: 2, name: 'maxOutputSize', type: 'number' },
            { start: 3, name: 'iouThreshold', type: 'number' },
          ],
        },
        {
          tfOpName: 'NonMaxSuppressionV3',
          category: 'dynamic',
          inputs: [
            { start: 0, name: 'boxes', type: 'tensor' },
            { start: 1, name: 'scores', type: 'tensor' },
            { start: 2, name: 'maxOutputSize', type: 'number' },
            { start: 3, name: 'iouThreshold', type: 'number' },
            { start: 4, name: 'scoreThreshold', type: 'number' },
          ],
        },
        {
          tfOpName: 'NonMaxSuppressionV4',
          category: 'dynamic',
          inputs: [
            { start: 0, name: 'boxes', type: 'tensor' },
            { start: 1, name: 'scores', type: 'tensor' },
            { start: 2, name: 'maxOutputSize', type: 'number' },
            { start: 3, name: 'iouThreshold', type: 'number' },
            { start: 4, name: 'scoreThreshold', type: 'number' },
          ],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            {
              tfName: 'T_threshold',
              name: 'threshold',
              type: 'dtype',
              notSupported: !0,
            },
            {
              tfName: 'pad_to_max_output_size',
              name: 'padToMaxOutputSize',
              type: 'bool',
            },
          ],
        },
        {
          tfOpName: 'NonMaxSuppressionV5',
          category: 'dynamic',
          inputs: [
            { start: 0, name: 'boxes', type: 'tensor' },
            { start: 1, name: 'scores', type: 'tensor' },
            { start: 2, name: 'maxOutputSize', type: 'number' },
            { start: 3, name: 'iouThreshold', type: 'number' },
            { start: 4, name: 'scoreThreshold', type: 'number' },
            { start: 5, name: 'softNmsSigma', type: 'number' },
          ],
        },
        {
          tfOpName: 'Where',
          category: 'dynamic',
          inputs: [{ start: 0, name: 'condition', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'ListDiff',
          category: 'dynamic',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'y', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
      ],
      ov = [
        {
          tfOpName: 'LowerBound',
          category: 'evaluation',
          inputs: [
            { start: 0, name: 'sortedSequence', type: 'tensor' },
            { start: 1, name: 'values', type: 'tensor' },
          ],
        },
        {
          tfOpName: 'TopKV2',
          category: 'evaluation',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'k', type: 'number' },
          ],
          attrs: [{ tfName: 'sorted', name: 'sorted', type: 'bool' }],
        },
        {
          tfOpName: 'UpperBound',
          category: 'evaluation',
          inputs: [
            { start: 0, name: 'sortedSequence', type: 'tensor' },
            { start: 1, name: 'values', type: 'tensor' },
          ],
        },
        {
          tfOpName: 'Unique',
          category: 'evaluation',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
        },
        {
          tfOpName: 'UniqueV2',
          category: 'evaluation',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'axis', type: 'number' },
          ],
        },
      ],
      lv = [
        {
          tfOpName: 'PlaceholderWithDefault',
          category: 'graph',
          inputs: [{ start: 0, name: 'default', type: 'tensor' }],
          attrs: [
            { tfName: 'shape', name: 'shape', type: 'shape' },
            { tfName: 'dtype', name: 'dtype', type: 'dtype' },
          ],
        },
        {
          tfOpName: 'Placeholder',
          category: 'graph',
          attrs: [
            { tfName: 'shape', name: 'shape', type: 'shape' },
            { tfName: 'dtype', name: 'dtype', type: 'dtype' },
          ],
        },
        { tfOpName: 'Const', category: 'graph' },
        {
          tfOpName: 'Identity',
          category: 'graph',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
        },
        {
          tfOpName: 'IdentityN',
          category: 'graph',
          inputs: [{ start: 0, end: 0, name: 'x', type: 'tensors' }],
        },
        {
          tfOpName: 'Snapshot',
          category: 'graph',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
        },
        {
          tfOpName: 'Rank',
          category: 'graph',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
        },
        {
          tfOpName: 'Size',
          category: 'graph',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
        },
        {
          tfOpName: 'Shape',
          category: 'graph',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
        },
        {
          tfOpName: 'ShapeN',
          category: 'graph',
          inputs: [{ start: 0, end: 0, name: 'x', type: 'tensors' }],
        },
        {
          tfOpName: 'Print',
          category: 'graph',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'data', type: 'tensors' },
          ],
          attrs: [
            { tfName: 'message', name: 'message', type: 'string' },
            {
              tfName: 'first_n',
              name: 'firstN',
              type: 'number',
              notSupported: !0,
            },
            {
              tfName: 'summarize',
              name: 'summarize',
              type: 'number',
              defaultValue: 3,
            },
          ],
        },
        { tfOpName: 'NoOp', category: 'graph', inputs: [] },
        {
          tfOpName: 'StopGradient',
          category: 'graph',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
        },
        {
          tfOpName: 'FakeQuantWithMinMaxVars',
          category: 'graph',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'min', name: 'min', type: 'number' },
            { tfName: 'max', name: 'max', type: 'number' },
          ],
        },
      ],
      uv = [
        {
          tfOpName: 'HashTable',
          category: 'hash_table',
          inputs: [],
          attrs: [
            { tfName: 'shared_name', name: 'sharedName', type: 'string' },
            {
              tfName: 'use_node_name_sharing',
              name: 'useNodeNameSharing',
              type: 'bool',
            },
            { tfName: 'key_dtype', name: 'keyDType', type: 'dtype' },
            { tfName: 'value_dtype', name: 'valueDType', type: 'dtype' },
          ],
        },
        {
          tfOpName: 'HashTableV2',
          category: 'hash_table',
          inputs: [],
          attrs: [
            { tfName: 'shared_name', name: 'sharedName', type: 'string' },
            {
              tfName: 'use_node_name_sharing',
              name: 'useNodeNameSharing',
              type: 'bool',
            },
            { tfName: 'key_dtype', name: 'keyDType', type: 'dtype' },
            { tfName: 'value_dtype', name: 'valueDType', type: 'dtype' },
          ],
        },
        {
          tfOpName: 'LookupTableImport',
          category: 'hash_table',
          inputs: [
            { start: 0, name: 'tableHandle', type: 'tensor' },
            { start: 1, name: 'keys', type: 'tensor' },
            { start: 2, name: 'values', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'Tin', name: 'tIn', type: 'dtype', notSupported: !0 },
            { tfName: 'Tout', name: 'tOut', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'LookupTableImportV2',
          category: 'hash_table',
          inputs: [
            { start: 0, name: 'tableHandle', type: 'tensor' },
            { start: 1, name: 'keys', type: 'tensor' },
            { start: 2, name: 'values', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'Tin', name: 'tIn', type: 'dtype', notSupported: !0 },
            { tfName: 'Tout', name: 'tOut', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'LookupTableFind',
          category: 'hash_table',
          inputs: [
            { start: 0, name: 'tableHandle', type: 'tensor' },
            { start: 1, name: 'keys', type: 'tensor' },
            { start: 2, name: 'defaultValue', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'Tin', name: 'tIn', type: 'dtype', notSupported: !0 },
            { tfName: 'Tout', name: 'tOut', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'LookupTableFindV2',
          category: 'hash_table',
          inputs: [
            { start: 0, name: 'tableHandle', type: 'tensor' },
            { start: 1, name: 'keys', type: 'tensor' },
            { start: 2, name: 'defaultValue', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'Tin', name: 'tIn', type: 'dtype', notSupported: !0 },
            { tfName: 'Tout', name: 'tOut', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'LookupTableSize',
          category: 'hash_table',
          inputs: [{ start: 0, name: 'tableHandle', type: 'tensor' }],
        },
        {
          tfOpName: 'LookupTableSizeV2',
          category: 'hash_table',
          inputs: [{ start: 0, name: 'tableHandle', type: 'tensor' }],
        },
      ],
      cv = [
        {
          tfOpName: 'ResizeBilinear',
          category: 'image',
          inputs: [
            { start: 0, name: 'images', type: 'tensor' },
            { start: 1, name: 'size', type: 'number[]' },
          ],
          attrs: [
            { tfName: 'align_corners', name: 'alignCorners', type: 'bool' },
            {
              tfName: 'half_pixel_centers',
              name: 'halfPixelCenters',
              type: 'bool',
            },
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'ResizeNearestNeighbor',
          category: 'image',
          inputs: [
            { start: 0, name: 'images', type: 'tensor' },
            { start: 1, name: 'size', type: 'number[]' },
          ],
          attrs: [
            { tfName: 'align_corners', name: 'alignCorners', type: 'bool' },
            {
              tfName: 'half_pixel_centers',
              name: 'halfPixelCenters',
              type: 'bool',
            },
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'CropAndResize',
          category: 'image',
          inputs: [
            { start: 0, name: 'image', type: 'tensor' },
            { start: 1, name: 'boxes', type: 'tensor' },
            { start: 2, name: 'boxInd', type: 'tensor' },
            { start: 3, name: 'cropSize', type: 'number[]' },
          ],
          attrs: [
            { tfName: 'method', name: 'method', type: 'string' },
            {
              tfName: 'extrapolation_value',
              name: 'extrapolationValue',
              type: 'number',
            },
          ],
        },
        {
          tfOpName: 'ImageProjectiveTransformV3',
          category: 'image',
          inputs: [
            { start: 0, name: 'images', type: 'tensor' },
            { start: 1, name: 'transforms', type: 'tensor' },
            { start: 2, name: 'outputShape', type: 'number[]' },
            { start: 3, name: 'fillValue', type: 'number' },
          ],
          attrs: [
            { tfName: 'interpolation', name: 'interpolation', type: 'string' },
            { tfName: 'fill_mode', name: 'fillMode', type: 'string' },
          ],
        },
      ],
      hv = [
        {
          tfOpName: 'Equal',
          category: 'logical',
          inputs: [
            { start: 0, name: 'a', type: 'tensor' },
            { start: 1, name: 'b', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'NotEqual',
          category: 'logical',
          inputs: [
            { start: 0, name: 'a', type: 'tensor' },
            { start: 1, name: 'b', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Greater',
          category: 'logical',
          inputs: [
            { start: 0, name: 'a', type: 'tensor' },
            { start: 1, name: 'b', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'GreaterEqual',
          category: 'logical',
          inputs: [
            { start: 0, name: 'a', type: 'tensor' },
            { start: 1, name: 'b', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Less',
          category: 'logical',
          inputs: [
            { start: 0, name: 'a', type: 'tensor' },
            { start: 1, name: 'b', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'LessEqual',
          category: 'logical',
          inputs: [
            { start: 0, name: 'a', type: 'tensor' },
            { start: 1, name: 'b', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'LogicalAnd',
          category: 'logical',
          inputs: [
            { start: 0, name: 'a', type: 'tensor' },
            { start: 1, name: 'b', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'LogicalNot',
          category: 'logical',
          inputs: [{ start: 0, name: 'a', type: 'tensor' }],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'LogicalOr',
          category: 'logical',
          inputs: [
            { start: 0, name: 'a', type: 'tensor' },
            { start: 1, name: 'b', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Select',
          category: 'logical',
          inputs: [
            { start: 0, name: 'condition', type: 'tensor' },
            { start: 1, name: 'a', type: 'tensor' },
            { start: 2, name: 'b', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'SelectV2',
          category: 'logical',
          inputs: [
            { start: 0, name: 'condition', type: 'tensor' },
            { start: 1, name: 'a', type: 'tensor' },
            { start: 2, name: 'b', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
      ],
      pv = [
        {
          tfOpName: '_FusedMatMul',
          category: 'matrices',
          inputs: [
            { start: 0, name: 'a', type: 'tensor' },
            { start: 1, name: 'b', type: 'tensor' },
            { start: 2, end: 0, name: 'args', type: 'tensors' },
          ],
          attrs: [
            { tfName: 'num_args', name: 'numArgs', type: 'number' },
            {
              tfName: 'fused_ops',
              name: 'fusedOps',
              type: 'string[]',
              defaultValue: [],
            },
            {
              tfName: 'epsilon',
              name: 'epsilon',
              type: 'number',
              defaultValue: 1e-4,
            },
            {
              tfName: 'transpose_a',
              name: 'transposeA',
              type: 'bool',
              defaultValue: !1,
            },
            {
              tfName: 'transpose_b',
              name: 'transposeB',
              type: 'bool',
              defaultValue: !1,
            },
            {
              tfName: 'leakyrelu_alpha',
              name: 'leakyreluAlpha',
              type: 'number',
              defaultValue: 0.2,
            },
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'MatMul',
          category: 'matrices',
          inputs: [
            { start: 0, name: 'a', type: 'tensor' },
            { start: 1, name: 'b', type: 'tensor' },
          ],
          attrs: [
            {
              tfName: 'transpose_a',
              name: 'transposeA',
              type: 'bool',
              defaultValue: !1,
            },
            {
              tfName: 'transpose_b',
              name: 'transposeB',
              type: 'bool',
              defaultValue: !1,
            },
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'BatchMatMul',
          category: 'matrices',
          inputs: [
            { start: 0, name: 'a', type: 'tensor' },
            { start: 1, name: 'b', type: 'tensor' },
          ],
          attrs: [
            {
              tfName: 'adj_x',
              name: 'transposeA',
              type: 'bool',
              defaultValue: !1,
            },
            {
              tfName: 'adj_y',
              name: 'transposeB',
              type: 'bool',
              defaultValue: !1,
            },
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'BatchMatMulV2',
          category: 'matrices',
          inputs: [
            { start: 0, name: 'a', type: 'tensor' },
            { start: 1, name: 'b', type: 'tensor' },
          ],
          attrs: [
            {
              tfName: 'adj_x',
              name: 'transposeA',
              type: 'bool',
              defaultValue: !1,
            },
            {
              tfName: 'adj_y',
              name: 'transposeB',
              type: 'bool',
              defaultValue: !1,
            },
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Transpose',
          category: 'matrices',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'perm', type: 'number[]' },
          ],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'Einsum',
          category: 'matrices',
          inputs: [{ start: 0, end: 0, name: 'tensors', type: 'tensors' }],
          attrs: [
            { tfName: 'equation', name: 'equation', type: 'string' },
            { tfName: 'N', name: 'n', type: 'number', defaultValue: 2 },
            { tfName: 'T', name: 'dtype', type: 'dtype' },
          ],
        },
      ],
      dv = [
        {
          tfOpName: 'EuclideanNorm',
          category: 'normalization',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'axis', type: 'number[]' },
          ],
          attrs: [
            {
              tfName: 'keep_dims',
              name: 'keepDims',
              type: 'bool',
              defaultValue: !1,
            },
          ],
        },
        {
          tfOpName: 'FusedBatchNorm',
          category: 'normalization',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'scale', type: 'tensor' },
            { start: 2, name: 'offset', type: 'tensor' },
            { start: 3, name: 'mean', type: 'tensor' },
            { start: 4, name: 'variance', type: 'tensor' },
          ],
          attrs: [
            {
              tfName: 'epsilon',
              name: 'epsilon',
              type: 'number',
              defaultValue: 0.001,
            },
            {
              tfName: 'data_format',
              name: 'dataFormat',
              type: 'string',
              notSupported: !0,
            },
          ],
        },
        {
          tfOpName: 'FusedBatchNormV2',
          category: 'normalization',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'scale', type: 'tensor' },
            { start: 2, name: 'offset', type: 'tensor' },
            { start: 3, name: 'mean', type: 'tensor' },
            { start: 4, name: 'variance', type: 'tensor' },
          ],
          attrs: [
            {
              tfName: 'epsilon',
              name: 'epsilon',
              type: 'number',
              defaultValue: 0.001,
            },
            {
              tfName: 'data_format',
              name: 'dataFormat',
              type: 'string',
              notSupported: !0,
            },
          ],
        },
        {
          tfOpName: 'FusedBatchNormV3',
          category: 'normalization',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'scale', type: 'tensor' },
            { start: 2, name: 'offset', type: 'tensor' },
            { start: 3, name: 'mean', type: 'tensor' },
            { start: 4, name: 'variance', type: 'tensor' },
          ],
          attrs: [
            {
              tfName: 'epsilon',
              name: 'epsilon',
              type: 'number',
              defaultValue: 0.001,
            },
            {
              tfName: 'data_format',
              name: 'dataFormat',
              type: 'string',
              notSupported: !0,
            },
          ],
        },
        {
          tfOpName: 'LRN',
          category: 'normalization',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            {
              tfName: 'depth_radius',
              name: 'radius',
              type: 'number',
              defaultValue: 5,
            },
            { tfName: 'bias', name: 'bias', type: 'number', defaultValue: 1 },
            { tfName: 'alpha', name: 'alpha', type: 'number', defaultValue: 1 },
            { tfName: 'beta', name: 'beta', type: 'number', defaultValue: 0.5 },
          ],
        },
        {
          tfOpName: 'Softmax',
          category: 'normalization',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
        },
        {
          tfOpName: 'LogSoftmax',
          category: 'normalization',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
        },
        {
          tfOpName: 'SparseToDense',
          category: 'normalization',
          inputs: [
            { start: 0, name: 'sparseIndices', type: 'tensor' },
            { start: 1, name: 'outputShape', type: 'number[]' },
            { start: 2, name: 'sparseValues', type: 'tensor' },
            { start: 3, name: 'defaultValue', type: 'tensor' },
          ],
          attrs: [
            {
              tfName: 'validate_indices',
              name: 'validateIndices',
              type: 'bool',
              defaultValue: !0,
              notSupported: !0,
            },
          ],
        },
      ],
      fv = [
        {
          tfOpName: 'Bincount',
          category: 'reduction',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'size', type: 'number' },
            { start: 2, name: 'weights', type: 'tensor' },
          ],
        },
        {
          tfOpName: 'DenseBincount',
          category: 'reduction',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'size', type: 'number' },
            { start: 2, name: 'weights', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'binary_output', name: 'binaryOutput', type: 'bool' },
          ],
        },
        {
          tfOpName: 'Max',
          category: 'reduction',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'axis', type: 'number[]' },
          ],
          attrs: [{ tfName: 'keep_dims', name: 'keepDims', type: 'bool' }],
        },
        {
          tfOpName: 'Mean',
          category: 'reduction',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'axis', type: 'number[]' },
          ],
          attrs: [{ tfName: 'keep_dims', name: 'keepDims', type: 'bool' }],
        },
        {
          tfOpName: 'Min',
          category: 'reduction',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'axis', type: 'number[]' },
          ],
          attrs: [{ tfName: 'keep_dims', name: 'keepDims', type: 'bool' }],
        },
        {
          tfOpName: 'Sum',
          category: 'reduction',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'axis', type: 'number[]' },
          ],
          attrs: [{ tfName: 'keep_dims', name: 'keepDims', type: 'bool' }],
        },
        {
          tfOpName: 'All',
          category: 'reduction',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'axis', type: 'number[]' },
          ],
          attrs: [{ tfName: 'keep_dims', name: 'keepDims', type: 'bool' }],
        },
        {
          tfOpName: 'Any',
          category: 'reduction',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'axis', type: 'number[]' },
          ],
          attrs: [{ tfName: 'keep_dims', name: 'keepDims', type: 'bool' }],
        },
        {
          tfOpName: 'ArgMax',
          category: 'reduction',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'axis', type: 'number' },
          ],
        },
        {
          tfOpName: 'ArgMin',
          category: 'reduction',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'axis', type: 'number' },
          ],
        },
        {
          tfOpName: 'Prod',
          category: 'reduction',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'axis', type: 'number[]' },
          ],
          attrs: [{ tfName: 'keep_dims', name: 'keepDims', type: 'bool' }],
        },
        {
          tfOpName: 'Cumprod',
          category: 'reduction',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'axis', type: 'number' },
          ],
          attrs: [
            { tfName: 'exclusive', name: 'exclusive', type: 'bool' },
            { tfName: 'reverse', name: 'reverse', type: 'bool' },
          ],
        },
        {
          tfOpName: 'Cumsum',
          category: 'reduction',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'axis', type: 'number' },
          ],
          attrs: [
            { tfName: 'exclusive', name: 'exclusive', type: 'bool' },
            { tfName: 'reverse', name: 'reverse', type: 'bool' },
          ],
        },
      ],
      mv = [
        {
          tfOpName: 'ConcatV2',
          category: 'slice_join',
          inputs: [
            { start: 0, end: -1, name: 'tensors', type: 'tensors' },
            { start: -1, name: 'axis', type: 'number' },
          ],
          attrs: [{ tfName: 'N', name: 'n', type: 'number', defaultValue: 2 }],
        },
        {
          tfOpName: 'Concat',
          category: 'slice_join',
          inputs: [
            { start: 1, end: 0, name: 'tensors', type: 'tensors' },
            { start: 0, name: 'axis', type: 'number' },
          ],
          attrs: [{ tfName: 'N', name: 'n', type: 'number', defaultValue: 2 }],
        },
        {
          tfOpName: 'GatherV2',
          category: 'slice_join',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'indices', type: 'tensor' },
            { start: 2, name: 'axis', type: 'number', defaultValue: 0 },
          ],
          attrs: [
            {
              tfName: 'batch_dims',
              name: 'batchDims',
              type: 'number',
              defaultValue: 0,
            },
          ],
        },
        {
          tfOpName: 'Gather',
          category: 'slice_join',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'indices', type: 'tensor' },
          ],
          attrs: [
            {
              tfName: 'validate_indices',
              name: 'validateIndices',
              type: 'bool',
              notSupported: !0,
            },
          ],
        },
        {
          tfOpName: 'Reverse',
          category: 'slice_join',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'dims', type: 'bool[]' },
          ],
        },
        {
          tfOpName: 'ReverseV2',
          category: 'slice_join',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'axis', type: 'number[]' },
          ],
        },
        {
          tfOpName: 'Slice',
          category: 'slice_join',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'begin', type: 'number[]' },
            { start: 2, name: 'size', type: 'number[]' },
          ],
        },
        {
          tfOpName: 'StridedSlice',
          category: 'slice_join',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'begin', type: 'number[]' },
            { start: 2, name: 'end', type: 'number[]' },
            { start: 3, name: 'strides', type: 'number[]' },
          ],
          attrs: [
            {
              tfName: 'begin_mask',
              name: 'beginMask',
              type: 'number',
              defaultValue: 0,
            },
            {
              tfName: 'end_mask',
              name: 'endMask',
              type: 'number',
              defaultValue: 0,
            },
            {
              tfName: 'new_axis_mask',
              name: 'newAxisMask',
              type: 'number',
              defaultValue: 0,
            },
            {
              tfName: 'ellipsis_mask',
              name: 'ellipsisMask',
              type: 'number',
              defaultValue: 0,
            },
            {
              tfName: 'shrink_axis_mask',
              name: 'shrinkAxisMask',
              type: 'number',
              defaultValue: 0,
            },
          ],
        },
        {
          tfOpName: 'Pack',
          category: 'slice_join',
          inputs: [{ start: 0, end: 0, name: 'tensors', type: 'tensors' }],
          attrs: [
            { tfName: 'axis', name: 'axis', type: 'number', defaultValue: 0 },
          ],
        },
        {
          tfOpName: 'Unpack',
          category: 'slice_join',
          inputs: [{ start: 0, name: 'tensor', type: 'tensor' }],
          attrs: [
            { tfName: 'axis', name: 'axis', type: 'number', defaultValue: 0 },
            {
              tfName: 'num',
              name: 'num',
              type: 'number',
              defaultValue: 0,
              notSupported: !0,
            },
          ],
        },
        {
          tfOpName: 'Tile',
          category: 'slice_join',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'reps', type: 'number[]' },
          ],
        },
        {
          tfOpName: 'Split',
          category: 'slice_join',
          inputs: [
            { start: 0, name: 'axis', type: 'number', defaultValue: 0 },
            { start: 1, name: 'x', type: 'tensor' },
          ],
          attrs: [
            {
              tfName: 'num_split',
              name: 'numOrSizeSplits',
              type: 'number',
              defaultValue: 1,
            },
          ],
        },
        {
          tfOpName: 'SplitV',
          category: 'slice_join',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'numOrSizeSplits', type: 'number[]' },
            { start: 2, name: 'axis', type: 'number', defaultValue: 0 },
          ],
        },
        {
          tfOpName: 'ScatterNd',
          category: 'slice_join',
          inputs: [
            { start: 0, name: 'indices', type: 'tensor' },
            { start: 1, name: 'values', type: 'tensor' },
            { start: 2, name: 'shape', type: 'number[]' },
          ],
        },
        {
          tfOpName: 'GatherNd',
          category: 'slice_join',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'indices', type: 'tensor' },
          ],
        },
        {
          tfOpName: 'SparseToDense',
          category: 'slice_join',
          inputs: [
            { start: 0, name: 'sparseIndices', type: 'tensor' },
            { start: 1, name: 'outputShape', type: 'number[]' },
            { start: 2, name: 'sparseValues', type: 'tensor' },
            { start: 3, name: 'defaultValue', type: 'tensor' },
          ],
          attrs: [
            {
              tfName: 'validate_indices',
              name: 'validateIndices',
              type: 'bool',
              defaultValue: !1,
              notSupported: !0,
            },
          ],
        },
      ],
      gv = [
        {
          tfOpName: 'SparseFillEmptyRows',
          category: 'sparse',
          inputs: [
            { start: 0, name: 'indices', type: 'tensor' },
            { start: 1, name: 'values', type: 'tensor' },
            { start: 2, name: 'denseShape', type: 'tensor' },
            { start: 3, name: 'defaultValue', type: 'tensor' },
          ],
        },
        {
          tfOpName: 'SparseReshape',
          category: 'sparse',
          inputs: [
            { start: 0, name: 'inputIndices', type: 'tensor' },
            { start: 1, name: 'inputShape', type: 'tensor' },
            { start: 2, name: 'newShape', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'SparseSegmentMean',
          category: 'sparse',
          inputs: [
            { start: 0, name: 'data', type: 'tensor' },
            { start: 1, name: 'indices', type: 'tensor' },
            { start: 2, name: 'segmentIds', type: 'tensor' },
          ],
        },
        {
          tfOpName: 'SparseSegmentSum',
          category: 'sparse',
          inputs: [
            { start: 0, name: 'data', type: 'tensor' },
            { start: 1, name: 'indices', type: 'tensor' },
            { start: 2, name: 'segmentIds', type: 'tensor' },
          ],
        },
      ],
      yv = [
        {
          tfOpName: 'FFT',
          category: 'spectral',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
        },
        {
          tfOpName: 'IFFT',
          category: 'spectral',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
        },
        {
          tfOpName: 'RFFT',
          category: 'spectral',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'fft_length', type: 'number', notSupported: !0 },
          ],
        },
        {
          tfOpName: 'IRFFT',
          category: 'spectral',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'fft_length', type: 'number', notSupported: !0 },
          ],
        },
      ],
      bv = [
        {
          tfOpName: 'StringNGrams',
          category: 'string',
          inputs: [
            { start: 0, name: 'data', type: 'tensor' },
            { start: 1, name: 'dataSplits', type: 'tensor' },
          ],
          attrs: [
            { tfName: 'separator', name: 'separator', type: 'string' },
            { tfName: 'ngram_widths', name: 'nGramWidths', type: 'number[]' },
            { tfName: 'left_pad', name: 'leftPad', type: 'string' },
            { tfName: 'right_pad', name: 'rightPad', type: 'string' },
            { tfName: 'pad_width', name: 'padWidth', type: 'number' },
            {
              tfName: 'preserve_short_sequences',
              name: 'preserveShortSequences',
              type: 'bool',
            },
          ],
          outputs: ['ngrams', 'ngrams_splits'],
        },
        {
          tfOpName: 'StringSplit',
          category: 'string',
          inputs: [
            { start: 0, name: 'input', type: 'tensor' },
            { start: 1, name: 'delimiter', type: 'tensor' },
          ],
          attrs: [{ tfName: 'skip_empty', name: 'skipEmpty', type: 'bool' }],
          outputs: ['indices', 'values', 'shape'],
        },
        {
          tfOpName: 'StringToHashBucketFast',
          category: 'string',
          inputs: [{ start: 0, name: 'input', type: 'tensor' }],
          attrs: [
            { tfName: 'num_buckets', name: 'numBuckets', type: 'number' },
          ],
        },
      ],
      xv = [
        {
          tfOpName: 'Cast',
          category: 'transformation',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'SrcT', name: 'sdtype', type: 'dtype', notSupported: !0 },
            { tfName: 'DstT', name: 'dtype', type: 'dtype' },
          ],
        },
        {
          tfOpName: 'ExpandDims',
          category: 'transformation',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'axis', type: 'number' },
          ],
        },
        {
          tfOpName: 'MirrorPad',
          category: 'transformation',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'padding', type: 'number[]' },
          ],
          attrs: [{ tfName: 'mode', name: 'mode', type: 'string' }],
        },
        {
          tfOpName: 'Pad',
          category: 'transformation',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'padding', type: 'number[]' },
          ],
          attrs: [
            {
              tfName: 'constant_value',
              name: 'constantValue',
              type: 'number',
              defaultValue: 0,
            },
          ],
        },
        {
          tfOpName: 'PadV2',
          category: 'transformation',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'padding', type: 'number[]' },
            {
              start: 2,
              name: 'constantValue',
              type: 'number',
              defaultValue: 0,
            },
          ],
        },
        {
          tfOpName: 'Reshape',
          category: 'transformation',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'shape', type: 'number[]' },
          ],
        },
        {
          tfOpName: 'Squeeze',
          category: 'transformation',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            {
              tfName: 'axis',
              tfDeprecatedName: 'squeeze_dims',
              name: 'axis',
              type: 'number[]',
            },
          ],
        },
        {
          tfOpName: 'SpaceToBatchND',
          category: 'transformation',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'blockShape', type: 'number[]' },
            { start: 2, name: 'paddings', type: 'number[]' },
          ],
        },
        {
          tfOpName: 'BatchToSpaceND',
          category: 'transformation',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'blockShape', type: 'number[]' },
            { start: 2, name: 'crops', type: 'number[]' },
          ],
        },
        {
          tfOpName: 'DepthToSpace',
          category: 'transformation',
          inputs: [{ start: 0, name: 'x', type: 'tensor' }],
          attrs: [
            { tfName: 'block_size', name: 'blockSize', type: 'number' },
            { tfName: 'data_format', name: 'dataFormat', type: 'string' },
          ],
        },
        {
          tfOpName: 'BroadcastTo',
          category: 'transformation',
          inputs: [
            { start: 0, name: 'x', type: 'tensor' },
            { start: 1, name: 'shape', type: 'number[]' },
          ],
          attrs: [],
        },
        {
          tfOpName: 'BroadcastArgs',
          category: 'transformation',
          inputs: [
            { start: 0, name: 's0', type: 'tensor' },
            { start: 1, name: 's1', type: 'tensor' },
          ],
          attrs: [],
        },
      ]
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class wv {
      static get Instance() {
        return this._instance || (this._instance = new this())
      }
      constructor() {
        const e = [].concat(
          ...[o, l, u, c, h, p, d, f, m, g, y, b, x, w, v, k, I, N, S].map(
            (e) => e.json,
          ),
        )
        this.opMappers = e.reduce((e, t) => ((e[t.tfOpName] = t), e), {})
      }
      transformGraph(e, t = {}) {
        const n = e.node,
          r = [],
          s = [],
          a = [],
          i = n.reduce(
            (e, t) => (
              (e[t.name] = this.mapNode(t)),
              t.op.startsWith('Placeholder')
                ? r.push(e[t.name])
                : 'Const' === t.op
                  ? s.push(e[t.name])
                  : (null != t.input && 0 !== t.input.length) ||
                    a.push(e[t.name]),
              e
            ),
            {},
          )
        let o = []
        const l = []
        let u = {},
          c = {}
        null != t &&
          ((u = this.mapSignatureEntries(t.inputs)),
          (c = this.mapSignatureEntries(t.outputs)))
        const h = Object.keys(i)
        h.forEach((e) => {
          const t = i[e]
          t.inputNames.forEach((e, n) => {
            const [r, , s] = Yw(e),
              a = i[r]
            if (null != a.outputs) {
              const e = a.outputs.indexOf(s)
              if (-1 !== e) {
                const s = `${r}:${e}`
                t.inputNames[n] = s
              }
            }
            t.inputs.push(a), a.children.push(t)
          })
        }),
          0 === Object.keys(c).length
            ? h.forEach((e) => {
                const t = i[e]
                0 === t.children.length && l.push(t)
              })
            : Object.keys(c).forEach((e) => {
                const [t] = Yw(e),
                  n = i[t]
                null != n && ((n.signatureKey = c[e]), l.push(n))
              }),
          Object.keys(u).length > 0
            ? Object.keys(u).forEach((e) => {
                const [t] = Yw(e),
                  n = i[t]
                n && ((n.signatureKey = u[e]), o.push(n))
              })
            : (o = r)
        let p = {}
        null != e.library &&
          null != e.library.function &&
          (p = e.library.function.reduce(
            (e, t) => ((e[t.signature.name] = this.mapFunction(t)), e),
            {},
          ))
        const d = {
          nodes: i,
          inputs: o,
          outputs: l,
          weights: s,
          placeholders: r,
          signature: t,
          functions: p,
        }
        return a.length > 0 && (d.initNodes = a), d
      }
      mapSignatureEntries(e) {
        return Object.keys(e || {}).reduce(
          (t, n) => ((t[e[n].name] = n), t),
          {},
        )
      }
      mapNode(e) {
        const t = qw(e.op) || this.opMappers[e.op] || {}
        null == e.attr && (e.attr = {})
        const n = {
          name: e.name,
          op: e.op,
          category: t.category,
          inputNames: (e.input || []).map((e) =>
            e.startsWith('^') ? e.slice(1) : e,
          ),
          inputs: [],
          children: [],
          inputParams: {},
          attrParams: {},
          rawAttrs: e.attr,
          outputs: t.outputs,
        }
        return (
          null != t.inputs &&
            (n.inputParams = t.inputs.reduce(
              (e, t) => (
                (e[t.name] = {
                  type: t.type,
                  inputIndexStart: t.start,
                  inputIndexEnd: t.end,
                }),
                e
              ),
              {},
            )),
          null != t.attrs &&
            (n.attrParams = t.attrs.reduce((t, n) => {
              const r = n.type
              let s
              switch (n.type) {
                case 'string':
                  ;(s = kv(e.attr, n.tfName, n.defaultValue)),
                    void 0 === s &&
                      n.tfDeprecatedName &&
                      (s = kv(e.attr, n.tfDeprecatedName, n.defaultValue))
                  break
                case 'string[]':
                  ;(s = _v(e.attr, n.tfName, n.defaultValue)),
                    void 0 === s &&
                      n.tfDeprecatedName &&
                      (s = _v(e.attr, n.tfDeprecatedName, n.defaultValue))
                  break
                case 'number':
                  ;(s = Nv(e.attr, n.tfName, n.defaultValue || 0)),
                    void 0 === s &&
                      n.tfDeprecatedName &&
                      (s = Nv(e.attr, n.tfDeprecatedName, n.defaultValue))
                  break
                case 'number[]':
                  ;(s = Av(e.attr, n.tfName, n.defaultValue)),
                    void 0 === s &&
                      n.tfDeprecatedName &&
                      (s = Av(e.attr, n.tfDeprecatedName, n.defaultValue))
                  break
                case 'bool':
                  ;(s = Iv(e.attr, n.tfName, n.defaultValue)),
                    void 0 === s &&
                      n.tfDeprecatedName &&
                      (s = Iv(e.attr, n.tfDeprecatedName, n.defaultValue))
                  break
                case 'bool[]':
                  ;(s = Dv(e.attr, n.tfName, n.defaultValue)),
                    void 0 === s &&
                      n.tfDeprecatedName &&
                      (s = Dv(e.attr, n.tfDeprecatedName, n.defaultValue))
                  break
                case 'shape':
                  ;(s = Rv(e.attr, n.tfName, n.defaultValue)),
                    void 0 === s &&
                      n.tfDeprecatedName &&
                      (s = Rv(e.attr, n.tfDeprecatedName, n.defaultValue))
                  break
                case 'shape[]':
                  ;(s = Fv(e.attr, n.tfName, n.defaultValue)),
                    void 0 === s &&
                      n.tfDeprecatedName &&
                      (s = Fv(e.attr, n.tfDeprecatedName, n.defaultValue))
                  break
                case 'dtype':
                  ;(s = Cv(e.attr, n.tfName, n.defaultValue)),
                    void 0 === s &&
                      n.tfDeprecatedName &&
                      (s = Cv(e.attr, n.tfDeprecatedName, n.defaultValue))
                  break
                case 'dtype[]':
                  ;(s = $v(e.attr, n.tfName, n.defaultValue)),
                    void 0 === s &&
                      n.tfDeprecatedName &&
                      (s = $v(e.attr, n.tfDeprecatedName, n.defaultValue))
                  break
                case 'func':
                  ;(s = Tv(e.attr, n.tfName, n.defaultValue)),
                    void 0 === s &&
                      n.tfDeprecatedName &&
                      (s = Tv(e.attr, n.tfDeprecatedName, n.defaultValue))
                  break
                case 'tensor':
                case 'tensors':
                  break
                default:
                  throw new Error(
                    `Unsupported param type: ${n.type} for op: ${e.op}`,
                  )
              }
              return (t[n.name] = { value: s, type: r }), t
            }, {})),
          n
        )
      }
      mapFunction(e) {
        const t = e.nodeDef,
          n = []
        let r = {}
        null != t &&
          (r = t.reduce(
            (e, t) => (
              (e[t.name] = this.mapNode(t)),
              'Const' === t.op && n.push(e[t.name]),
              e
            ),
            {},
          ))
        const s = [],
          a = []
        e.signature.inputArg.forEach((e) => {
          const [t] = Yw(e.name),
            n = {
              name: t,
              op: 'Placeholder',
              inputs: [],
              inputNames: [],
              category: 'graph',
              inputParams: {},
              attrParams: { dtype: { value: Sv(e.type), type: 'dtype' } },
              children: [],
            }
          ;(n.signatureKey = e.name), s.push(n), (r[t] = n)
        }),
          Object.keys(r).forEach((e) => {
            const t = r[e]
            t.inputNames.forEach((e, n) => {
              const [s, , a] = Yw(e),
                i = r[s]
              if (null != i.outputs) {
                const e = i.outputs.indexOf(a)
                if (-1 !== e) {
                  const r = `${s}:${e}`
                  t.inputNames[n] = r
                }
              }
              t.inputs.push(i), i.children.push(t)
            })
          })
        const i = e.ret
        e.signature.outputArg.forEach((e) => {
          const [t, n] = Yw(i[e.name]),
            s = r[t]
          null != s && ((s.defaultOutput = n), a.push(s))
        })
        const o = this.mapArgsToSignature(e)
        return {
          nodes: r,
          inputs: s,
          outputs: a,
          weights: n,
          placeholders: [],
          signature: o,
        }
      }
      mapArgsToSignature(e) {
        return {
          methodName: e.signature.name,
          inputs: e.signature.inputArg.reduce(
            (e, t) => ((e[t.name] = this.mapArgToTensorInfo(t)), e),
            {},
          ),
          outputs: e.signature.outputArg.reduce(
            (t, n) => ((t[n.name] = this.mapArgToTensorInfo(n, e.ret)), t),
            {},
          ),
        }
      }
      mapArgToTensorInfo(e, t) {
        let n = e.name
        return null != t && (n = t[n]), { name: n, dtype: e.type }
      }
    }
    function vv(e, t) {
      const n = Array.isArray(e)
        ? String.fromCharCode.apply(null, e)
        : (function (e) {
            const t = ye().global
            if (void 0 !== t.atob) return t.atob(e)
            if ('undefined' != typeof Buffer)
              return new Buffer(e, 'base64').toString()
            throw new Error(
              'Unable to decode base64 in this environment. Missing built-in atob() or Buffer()',
            )
          })(e)
      return t ? n : n.toLowerCase()
    }
    function kv(e, t, n, r = !1) {
      const s = e[t]
      return null != s ? vv(s.s, r) : n
    }
    function Iv(e, t, n) {
      const r = e[t]
      return r ? r.b : n
    }
    function Nv(e, t, n) {
      const r = e[t] || {},
        s = null != r.i ? r.i : null != r.f ? r.f : n
      return 'number' == typeof s ? s : parseInt(s, 10)
    }
    function Sv(e) {
      switch (('string' == typeof e && (e = Kx[e]), e)) {
        case Kx.DT_FLOAT:
        case Kx.DT_HALF:
          return 'float32'
        case Kx.DT_INT32:
        case Kx.DT_INT64:
        case Kx.DT_INT8:
        case Kx.DT_UINT8:
          return 'int32'
        case Kx.DT_BOOL:
          return 'bool'
        case Kx.DT_DOUBLE:
          return 'float32'
        case Kx.DT_STRING:
          return 'string'
        default:
          return null
      }
    }
    function Tv(e, t, n) {
      const r = e[t]
      return r && r.func ? r.func.name : n
    }
    function Cv(e, t, n) {
      const r = e[t]
      return r && r.type ? Sv(r.type) : n
    }
    function $v(e, t, n) {
      const r = e[t]
      return r && r.list && r.list.type ? r.list.type.map((e) => Sv(e)) : n
    }
    function Ev(e) {
      if (!e.unknownRank)
        return null != e.dim
          ? e.dim.map((e) =>
              'number' == typeof e.size ? e.size : parseInt(e.size, 10),
            )
          : []
    }
    function Rv(e, t, n) {
      const r = e[t]
      return r && r.shape ? Ev(r.shape) : n
    }
    function Av(e, t, n) {
      const r = e[t]
      return r
        ? ((r.list.f && r.list.f.length ? r.list.f : r.list.i) || []).map(
            (e) => ('number' == typeof e ? e : parseInt(e, 10)),
          )
        : n
    }
    function _v(e, t, n, r = !1) {
      const s = e[t]
      return s && s.list && s.list.s ? s.list.s.map((e) => vv(e, r)) : n
    }
    function Fv(e, t, n) {
      const r = e[t]
      return r && r.list && r.list.shape ? r.list.shape.map((e) => Ev(e)) : n
    }
    function Dv(e, t, n) {
      const r = e[t]
      return r && r.list && r.list.b ? r.list.b : n
    }
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Ov {
      constructor(e, t, n) {
        ;(this.node = e),
          (this.tensorMap = t),
          (this.context = n),
          (this.inputs = []),
          (this.attrs = {}),
          (this.inputs = e.inputNames.map((e) => this.getInput(e))),
          null != e.rawAttrs &&
            (this.attrs = Object.keys(e.rawAttrs).reduce(
              (e, t) => ((e[t] = this.getAttr(t)), e),
              {},
            ))
      }
      getInput(e) {
        return Xw(e, this.tensorMap, this.context)
      }
      getAttr(e, t) {
        const n = this.node.rawAttrs[e]
        if (null != n.tensor) return Xw(e, this.tensorMap, this.context)
        if (null != n.i || null != n.f) return Nv(this.node.rawAttrs, e, t)
        if (null != n.s) return kv(this.node.rawAttrs, e, t)
        if (null != n.b) return Iv(this.node.rawAttrs, e, t)
        if (null != n.shape) return Rv(this.node.rawAttrs, e, t)
        if (null != n.type) return Cv(this.node.rawAttrs, e, t)
        if (null != n.list) {
          if (null != n.list.i || null != n.list.f)
            return Av(this.node.rawAttrs, e, t)
          if (null != n.list.s) return _v(this.node.rawAttrs, e, t)
          if (null != n.list.shape) return Fv(this.node.rawAttrs, e, t)
          if (null != n.list.b) return Dv(this.node.rawAttrs, e, t)
          if (null != n.list.type) return $v(this.node.rawAttrs, e, t)
        }
        return t
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Mv(e, t, n = '') {
      if ('number' != typeof e && 'number' != typeof t) {
        O(e.length === t.length, () => n + ` Shapes ${e} and ${t} must match`)
        for (let r = 0; r < e.length; r++) {
          const s = e[r],
            a = t[r]
          O(
            s < 0 || a < 0 || s === a,
            () => n + ` Shapes ${e} and ${t} must match`,
          )
        }
      }
    }
    function Lv(e) {
      return 'number' != typeof e && !e.some((e) => e < 0)
    }
    function zv(e, t, n) {
      let r = Pv(e, n)
      const s = !Lv(r)
      if (s && 0 === t.length)
        throw new Error(
          `Tried to calculate elements of an empty list with non-fully-defined elementShape: ${r}`,
        )
      if (
        (s &&
          t.forEach((e) => {
            r = Pv(e.shape, r)
          }),
        !Lv(r))
      )
        throw new Error(`Non-fully-defined elementShape: ${r}`)
      return r
    }
    function Pv(e, t) {
      if ('number' == typeof e) return t
      if ('number' == typeof t) return e
      if (e.length !== t.length)
        throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`)
      const n = []
      for (let r = 0; r < e.length; ++r) {
        const s = e[r],
          a = t[r]
        if (s >= 0 && a >= 0 && s !== a)
          throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`)
        n[r] = s >= 0 ? s : a
      }
      return n
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Bv {
      constructor(e, t, n, r, s, a, i) {
        ;(this.name = e),
          (this.dtype = t),
          (this.maxSize = n),
          (this.elementShape = r),
          (this.identicalElementShapes = s),
          (this.dynamicSize = a),
          (this.clearAfterRead = i),
          (this.tensors = []),
          (this.closed_ = !1),
          (this.idTensor = Ji(0)),
          Xi(this.idTensor)
      }
      get id() {
        return this.idTensor.id
      }
      get closed() {
        return this.closed_
      }
      clearAndClose(e) {
        this.tensors.forEach((t) => {
          ;(null != e && e.has(t.tensor.id)) || t.tensor.dispose()
        }),
          (this.tensors = []),
          (this.closed_ = !0),
          this.idTensor.dispose()
      }
      size() {
        return this.tensors.length
      }
      read(e) {
        if (this.closed_)
          throw new Error(`TensorArray ${this.name} has already been closed.`)
        if (e < 0 || e >= this.size())
          throw new Error(
            `Tried to read from index ${e}, but array size is: ${this.size()}`,
          )
        const t = this.tensors[e]
        if (t.cleared)
          throw new Error(
            `TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`,
          )
        return this.clearAfterRead && (t.cleared = !0), (t.read = !0), t.tensor
      }
      readMany(e) {
        return e.map((e) => this.read(e))
      }
      write(e, t) {
        if (this.closed_)
          throw new Error(`TensorArray ${this.name} has already been closed.`)
        if (e < 0 || (!this.dynamicSize && e >= this.maxSize))
          throw new Error(
            `Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`,
          )
        const n = this.tensors[e] || {}
        if (t.dtype !== this.dtype)
          throw new Error(
            `TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`,
          )
        if (
          (0 !== this.size() ||
            (null != this.elementShape && 0 !== this.elementShape.length) ||
            (this.elementShape = t.shape),
          Mv(
            this.elementShape,
            t.shape,
            `TensorArray ${this.name}: Could not write to TensorArray index ${e}.`,
          ),
          n.read)
        )
          throw new Error(
            `TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`,
          )
        if (n.written)
          throw new Error(
            `TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`,
          )
        ;(n.tensor = t), Xi(t), (n.written = !0), (this.tensors[e] = n)
      }
      writeMany(e, t) {
        if (e.length !== t.length)
          throw new Error(
            `TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`,
          )
        e.forEach((e, n) => this.write(e, t[n]))
      }
      gather(e, t) {
        if (t && t !== this.dtype)
          throw new Error(
            `TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`,
          )
        if (e) e = e.slice(0, this.size())
        else {
          e = []
          for (let t = 0; t < this.size(); t++) e.push(t)
        }
        if (0 === e.length) return Xs([], [0].concat(this.elementShape))
        const n = this.readMany(e)
        return (
          Mv(this.elementShape, n[0].shape, 'TensorArray shape mismatch: '),
          Mc(n, 0)
        )
      }
      concat(e) {
        if (e && e !== this.dtype)
          throw new Error(
            `TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`,
          )
        if (0 === this.size()) return Xs([], [0].concat(this.elementShape))
        const t = []
        for (let e = 0; e < this.size(); e++) t.push(e)
        const n = this.readMany(t)
        return (
          Mv(
            this.elementShape,
            n[0].shape,
            `TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`,
          ),
          _o(n, 0)
        )
      }
      scatter(e, t) {
        if (t.dtype !== this.dtype)
          throw new Error(
            `TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`,
          )
        if (e.length !== t.shape[0])
          throw new Error(
            `Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`,
          )
        const n = Math.max(...e)
        if (!this.dynamicSize && n >= this.maxSize)
          throw new Error(
            `Max index must be < array size (${n}  vs. ${this.maxSize})`,
          )
        this.writeMany(e, Xc(t, 0))
      }
      split(e, t) {
        if (t.dtype !== this.dtype)
          throw new Error(
            `TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`,
          )
        let n = 0
        const r = e.map((e) => ((n += e), n))
        if (n !== t.shape[0])
          throw new Error(
            `Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`,
          )
        if (!this.dynamicSize && e.length !== this.maxSize)
          throw new Error(
            `TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`,
          )
        const s = 0 === n ? 0 : t.size / n,
          a = []
        qi(() => {
          t = Eo(t, [1, n, s])
          for (let n = 0; n < e.length; ++n) {
            const i = [0, 0 === n ? 0 : r[n - 1], 0],
              o = [1, e[n], s]
            a[n] = Eo(Mo(t, i, o), this.elementShape)
          }
          return a
        })
        const i = []
        for (let t = 0; t < e.length; t++) i[t] = t
        this.writeMany(i, a)
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Wv {
      constructor(e, t, n, r = -1) {
        ;(this.tensors = e),
          (this.elementShape = t),
          (this.elementDtype = n),
          null != e &&
            e.forEach((e) => {
              if (n !== e.dtype)
                throw new Error(
                  `Invalid data types; op elements ${n}, but list elements ${e.dtype}`,
                )
              Mv(t, e.shape, 'TensorList shape mismatch: '), Xi(e)
            }),
          (this.idTensor = Ji(0)),
          (this.maxNumElements = r),
          Xi(this.idTensor)
      }
      get id() {
        return this.idTensor.id
      }
      copy() {
        return new Wv([...this.tensors], this.elementShape, this.elementDtype)
      }
      clearAndClose(e) {
        this.tensors.forEach((t) => {
          ;(null != e && e.has(t.id)) || t.dispose()
        }),
          (this.tensors.length = 0),
          this.idTensor.dispose()
      }
      size() {
        return this.tensors.length
      }
      stack(e, t, n = -1) {
        if (t !== this.elementDtype)
          throw new Error(
            `Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`,
          )
        if (-1 !== n && this.tensors.length !== n)
          throw new Error(
            `Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`,
          )
        Mv(e, this.elementShape, 'TensorList shape mismatch: ')
        const r = zv(this.elementShape, this.tensors, e)
        return qi(() => {
          const e = this.tensors.map((e) => Eo(e, r))
          return Mc(e, 0)
        })
      }
      popBack(e, t) {
        if (t !== this.elementDtype)
          throw new Error(
            `Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`,
          )
        if (0 === this.size())
          throw new Error('Trying to pop from an empty list.')
        const n = zv(this.elementShape, this.tensors, e),
          r = this.tensors.pop()
        return (
          (r.kept = !1), Mv(r.shape, e, 'TensorList shape mismatch: '), Eo(r, n)
        )
      }
      pushBack(e) {
        if (e.dtype !== this.elementDtype)
          throw new Error(
            `Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`,
          )
        if (
          (Mv(e.shape, this.elementShape, 'TensorList shape mismatch: '),
          this.maxNumElements === this.size())
        )
          throw new Error('Trying to push element into a full list.')
        Xi(e), this.tensors.push(e)
      }
      resize(e) {
        if (e < 0)
          throw new Error(
            `TensorListResize expects size to be non-negative. Got: ${e}`,
          )
        if (-1 !== this.maxNumElements && e > this.maxNumElements)
          throw new Error(
            `TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`,
          )
        const t = new Wv(
          [],
          this.elementShape,
          this.elementDtype,
          this.maxNumElements,
        )
        t.tensors.length = e
        for (let n = 0; n < Math.min(this.tensors.length, e); ++n)
          t.tensors[n] = this.tensors[n]
        return t
      }
      getItem(e, t, n) {
        if (n !== this.elementDtype)
          throw new Error(
            `Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`,
          )
        if (e < 0 || e > this.tensors.length)
          throw new Error(
            `Trying to access element ${e} in a list with ${this.tensors.length} elements.`,
          )
        if (null == this.tensors[e])
          throw new Error(`element at index ${e} is null.`)
        Mv(this.tensors[e].shape, t, 'TensorList shape mismatch: ')
        const r = zv(this.elementShape, this.tensors, t)
        return Eo(this.tensors[e], r)
      }
      setItem(e, t) {
        if (t.dtype !== this.elementDtype)
          throw new Error(
            `Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`,
          )
        if (e < 0 || (-1 !== this.maxNumElements && e >= this.maxNumElements))
          throw new Error(
            `Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`,
          )
        Mv(this.elementShape, t.shape, 'TensorList shape mismatch: '),
          Xi(t),
          null != this.tensors[e] && (this.tensors[e].kept = !1),
          (this.tensors[e] = t)
      }
      gather(e, t, n) {
        if (t !== this.elementDtype)
          throw new Error(
            `Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`,
          )
        Mv(this.elementShape, n, 'TensorList shape mismatch: '),
          (e = e.slice(0, this.size()))
        const r = zv(this.elementShape, this.tensors, n)
        return 0 === e.length
          ? Xs([], [0].concat(r))
          : qi(() => {
              const t = e.map((e) => Eo(this.tensors[e], r))
              return Mc(t, 0)
            })
      }
      concat(e, t) {
        if (e && e !== this.elementDtype)
          throw new Error(
            `TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`,
          )
        Mv(this.elementShape, t, 'TensorList shape mismatch: ')
        const n = zv(this.elementShape, this.tensors, t)
        return 0 === this.size()
          ? Xs([], [0].concat(n))
          : qi(() => {
              const e = this.tensors.map((e) => Eo(e, n))
              return _o(e, 0)
            })
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function Vv(e, t, n) {
      const [r, s] = Kw('fusedOps', e, t, n),
        a = 'biasadd' === r,
        i = !a,
        o = 'prelu' === s,
        l = 'fusedbatchnorm' === r,
        u = Kw('numArgs', e, t, n)
      if (a) {
        if (o && 2 !== u)
          throw new Error(
            'FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.',
          )
        if (!o && a && 1 !== u)
          throw new Error(
            'FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.',
          )
      }
      if (l)
        throw new Error(
          'FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported',
        )
      const c = Kw('strides', e, t, n),
        h = Qw(e, t, n),
        p = Kw('dataFormat', e, t, n).toUpperCase(),
        d = Kw('dilations', e, t, n)
      let [f, m] = Kw('args', e, t, n)
      return (
        i && ((m = f), (f = void 0)),
        {
          stride: c,
          pad: h,
          dataFormat: p,
          dilations: d,
          biasArg: f,
          preluArg: m,
          activationFunc: s,
          leakyreluAlpha: Kw('leakyreluAlpha', e, t, n),
        }
      )
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Uv(e, t, n) {
      return {
        boxes: Kw('boxes', e, t, n),
        scores: Kw('scores', e, t, n),
        maxOutputSize: Kw('maxOutputSize', e, t, n),
        iouThreshold: Kw('iouThreshold', e, t, n),
        scoreThreshold: Kw('scoreThreshold', e, t, n),
        softNmsSigma: Kw('softNmsSigma', e, t, n),
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Gv {
      constructor(e, t) {
        ;(this.keyDType = e),
          (this.valueDType = t),
          (this.handle = Ji(0)),
          (this.tensorMap = new Map()),
          Xi(this.handle)
      }
      get id() {
        return this.handle.id
      }
      clearAndClose() {
        this.tensorMap.forEach((e) => e.dispose()),
          this.tensorMap.clear(),
          this.handle.dispose()
      }
      size() {
        return this.tensorMap.size
      }
      tensorSize() {
        return Ji(this.size(), 'int32')
      }
      async import(e, t) {
        this.checkKeyAndValueTensor(e, t)
        const n = await e.data()
        return (
          this.tensorMap.forEach((e) => e.dispose()),
          this.tensorMap.clear(),
          qi(() => {
            const e = Xc(t),
              r = n.length,
              s = e.length
            O(
              r === s,
              () =>
                `The number of elements doesn't match, keys has ${r} elements, the values has ${s} elements.`,
            )
            for (let t = 0; t < r; t++) {
              const r = n[t],
                s = e[t]
              Xi(s), this.tensorMap.set(r, s)
            }
            return this.handle
          })
        )
      }
      async find(e, t) {
        this.checkKeyAndValueTensor(e, t)
        const n = await e.data()
        return qi(() => {
          const e = []
          for (let r = 0; r < n.length; r++) {
            const s = n[r],
              a = this.findWithDefault(s, t)
            e.push(a)
          }
          return Mc(e)
        })
      }
      findWithDefault(e, t) {
        const n = this.tensorMap.get(e)
        return null != n ? n : t
      }
      checkKeyAndValueTensor(e, t) {
        if (e.dtype !== this.keyDType)
          throw new Error(
            `Expect key dtype ${this.keyDType}, but got ${e.dtype}`,
          )
        if (t.dtype !== this.valueDType)
          throw new Error(
            `Expect value dtype ${this.valueDType}, but got ${t.dtype}`,
          )
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Hv(e, t, n, r, s = qi) {
      const a = ((e, t, n) => {
        switch (e.category) {
          case 'arithmetic':
            return s(() =>
              ((e, t, n, r = T) => {
                switch (e.op) {
                  case 'BiasAdd':
                  case 'AddV2':
                  case 'Add':
                    return [r.add(Kw('a', e, t, n), Kw('b', e, t, n))]
                  case 'AddN':
                    return [r.addN(Kw('tensors', e, t, n))]
                  case 'FloorMod':
                  case 'Mod':
                    return [r.mod(Kw('a', e, t, n), Kw('b', e, t, n))]
                  case 'Mul':
                    return [r.mul(Kw('a', e, t, n), Kw('b', e, t, n))]
                  case 'RealDiv':
                  case 'Div':
                    return [r.div(Kw('a', e, t, n), Kw('b', e, t, n))]
                  case 'DivNoNan':
                    return [r.divNoNan(Kw('a', e, t, n), Kw('b', e, t, n))]
                  case 'FloorDiv':
                    return [r.floorDiv(Kw('a', e, t, n), Kw('b', e, t, n))]
                  case 'Sub':
                    return [r.sub(Kw('a', e, t, n), Kw('b', e, t, n))]
                  case 'Minimum':
                    return [r.minimum(Kw('a', e, t, n), Kw('b', e, t, n))]
                  case 'Maximum':
                    return [r.maximum(Kw('a', e, t, n), Kw('b', e, t, n))]
                  case 'Pow':
                    return [r.pow(Kw('a', e, t, n), Kw('b', e, t, n))]
                  case 'SquaredDifference':
                    return [
                      r.squaredDifference(Kw('a', e, t, n), Kw('b', e, t, n)),
                    ]
                  default:
                    throw TypeError(`Node type ${e.op} is not implemented`)
                }
              })(e, t, n),
            )
          case 'basic_math':
            return s(() =>
              ((e, t, n, r = T) => {
                switch (e.op) {
                  case 'Abs':
                  case 'ComplexAbs':
                    return [r.abs(Kw('x', e, t, n))]
                  case 'Acos':
                    return [r.acos(Kw('x', e, t, n))]
                  case 'Acosh':
                    return [r.acosh(Kw('x', e, t, n))]
                  case 'Asin':
                    return [r.asin(Kw('x', e, t, n))]
                  case 'Asinh':
                    return [r.asinh(Kw('x', e, t, n))]
                  case 'Atan':
                    return [r.atan(Kw('x', e, t, n))]
                  case 'Atan2':
                    return [r.atan2(Kw('x', e, t, n), Kw('y', e, t, n))]
                  case 'Atanh':
                    return [r.atanh(Kw('x', e, t, n))]
                  case 'Ceil':
                    return [r.ceil(Kw('x', e, t, n))]
                  case 'Complex':
                    return [r.complex(Kw('real', e, t, n), Kw('imag', e, t, n))]
                  case 'Cos':
                    return [r.cos(Kw('x', e, t, n))]
                  case 'Cosh':
                    return [r.cosh(Kw('x', e, t, n))]
                  case 'Elu':
                    return [r.elu(Kw('x', e, t, n))]
                  case 'Erf':
                    return [r.erf(Kw('x', e, t, n))]
                  case 'Exp':
                    return [r.exp(Kw('x', e, t, n))]
                  case 'Expm1':
                    return [r.expm1(Kw('x', e, t, n))]
                  case 'Floor':
                    return [r.floor(Kw('x', e, t, n))]
                  case 'Log':
                    return [r.log(Kw('x', e, t, n))]
                  case 'Log1p':
                    return [r.log1p(Kw('x', e, t, n))]
                  case 'Imag':
                    return [r.imag(Kw('x', e, t, n))]
                  case 'Neg':
                    return [r.neg(Kw('x', e, t, n))]
                  case 'Reciprocal':
                    return [r.reciprocal(Kw('x', e, t, n))]
                  case 'Real':
                    return [r.real(Kw('x', e, t, n))]
                  case 'Relu':
                    return [r.relu(Kw('x', e, t, n))]
                  case 'Round':
                    return [r.round(Kw('x', e, t, n))]
                  case 'Selu':
                    return [r.selu(Kw('x', e, t, n))]
                  case 'Sigmoid':
                    return [r.sigmoid(Kw('x', e, t, n))]
                  case 'Sin':
                    return [r.sin(Kw('x', e, t, n))]
                  case 'Sign':
                    return [r.sign(Kw('x', e, t, n))]
                  case 'Sinh':
                    return [r.sinh(Kw('x', e, t, n))]
                  case 'Softplus':
                    return [r.softplus(Kw('x', e, t, n))]
                  case 'Sqrt':
                    return [r.sqrt(Kw('x', e, t, n))]
                  case 'Square':
                    return [r.square(Kw('x', e, t, n))]
                  case 'Tanh':
                    return [r.tanh(Kw('x', e, t, n))]
                  case 'Tan':
                    return [r.tan(Kw('x', e, t, n))]
                  case 'ClipByValue':
                    return [
                      r.clipByValue(
                        Kw('x', e, t, n),
                        Kw('clipValueMin', e, t, n),
                        Kw('clipValueMax', e, t, n),
                      ),
                    ]
                  case 'Relu6':
                    return [r.relu6(Kw('x', e, t, n))]
                  case 'Rsqrt':
                    return [r.rsqrt(Xw(e.inputNames[0], t, n))]
                  case 'Prod':
                    return [r.prod(Kw('x', e, t, n), Kw('axes', e, t, n))]
                  case 'LeakyRelu':
                    return [r.leakyRelu(Kw('x', e, t, n), Kw('alpha', e, t, n))]
                  case 'Prelu':
                    return [r.prelu(Kw('x', e, t, n), Kw('alpha', e, t, n))]
                  case 'IsNan':
                    return [r.isNaN(Xw(e.inputNames[0], t, n))]
                  default:
                    throw TypeError(`Node type ${e.op} is not implemented`)
                }
              })(e, t, n),
            )
          case 'control':
            return (async (e, t, n) => {
              switch (e.op) {
                case 'If':
                case 'StatelessIf': {
                  const r = Kw('thenBranch', e, t, n),
                    s = Kw('elseBranch', e, t, n),
                    a = Kw('cond', e, t, n),
                    i = Kw('args', e, t, n)
                  return (await a.data())[0]
                    ? n.functionMap[r].executeFunctionAsync(
                        i,
                        n.tensorArrayMap,
                        n.tensorListMap,
                      )
                    : n.functionMap[s].executeFunctionAsync(
                        i,
                        n.tensorArrayMap,
                        n.tensorListMap,
                      )
                }
                case 'While':
                case 'StatelessWhile': {
                  const r = Kw('body', e, t, n),
                    s = Kw('cond', e, t, n),
                    a = Kw('args', e, t, n),
                    i = await n.functionMap[s].executeFunctionAsync(
                      a,
                      n.tensorArrayMap,
                      n.tensorListMap,
                    ),
                    o = a.map((e) => e.id)
                  let l = await i[0].data()
                  i.forEach((e) => {
                    e.kept || -1 !== o.indexOf(e.id) || e.dispose()
                  })
                  let u = a
                  for (; l[0]; ) {
                    const e = u
                    u = await n.functionMap[r].executeFunctionAsync(
                      u,
                      n.tensorArrayMap,
                      n.tensorListMap,
                    )
                    const t = u.map((e) => e.id)
                    e.forEach((e) => {
                      e.kept ||
                        -1 !== o.indexOf(e.id) ||
                        -1 !== t.indexOf(e.id) ||
                        e.dispose()
                    })
                    const a = await n.functionMap[s].executeFunctionAsync(
                      u,
                      n.tensorArrayMap,
                      n.tensorListMap,
                    )
                    ;(l = await a[0].data()),
                      a.forEach((e) => {
                        e.kept ||
                          -1 !== o.indexOf(e.id) ||
                          -1 !== t.indexOf(e.id) ||
                          e.dispose()
                      })
                  }
                  return u
                }
                case 'LoopCond':
                  return [ev(Kw('pred', e, t, n))]
                case 'Switch': {
                  const r = Kw('pred', e, t, n)
                  let s = Kw('data', e, t, n)
                  return (
                    s.kept || (s = ev(s)),
                    (await r.data())[0] ? [void 0, s] : [s, void 0]
                  )
                }
                case 'Merge': {
                  const r = e.inputNames.find((e) => void 0 !== Xw(e, t, n))
                  return r ? [ev(Xw(r, t, n))] : void 0
                }
                case 'Enter': {
                  const r = Kw('frameName', e, t, n),
                    s = Kw('tensor', e, t, n)
                  return n.enterFrame(r), [ev(s)]
                }
                case 'Exit': {
                  const r = Kw('tensor', e, t, n)
                  return n.exitFrame(), [ev(r)]
                }
                case 'NextIteration': {
                  const r = Kw('tensor', e, t, n)
                  return n.nextIteration(), [ev(r)]
                }
                case 'TensorArrayV3': {
                  const r = Kw('size', e, t, n),
                    s = Kw('dtype', e, t, n),
                    a = Kw('elementShape', e, t, n),
                    i = Kw('dynamicSize', e, t, n),
                    o = Kw('clearAfterRead', e, t, n),
                    l = Kw('identicalElementShapes', e, t, n),
                    u = Kw('name', e, t, n),
                    c = new Bv(u, s, r, a, l, i, o)
                  return n.addTensorArray(c), [c.idTensor, Ji(1)]
                }
                case 'TensorArrayWriteV3': {
                  const r = Kw('tensorArrayId', e, t, n),
                    s = Kw('index', e, t, n),
                    a = Kw('tensor', e, t, n),
                    i = n.getTensorArray(r.id)
                  return i.write(s, a), [i.idTensor]
                }
                case 'TensorArrayReadV3': {
                  const r = Kw('tensorArrayId', e, t, n),
                    s = Kw('index', e, t, n)
                  return [n.getTensorArray(r.id).read(s)]
                }
                case 'TensorArrayGatherV3': {
                  const r = Kw('tensorArrayId', e, t, n),
                    s = Kw('indices', e, t, n),
                    a = Kw('dtype', e, t, n)
                  return [n.getTensorArray(r.id).gather(s, a)]
                }
                case 'TensorArrayScatterV3': {
                  const r = Kw('tensorArrayId', e, t, n),
                    s = Kw('indices', e, t, n),
                    a = Kw('tensor', e, t, n),
                    i = n.getTensorArray(r.id)
                  return i.scatter(s, a), [i.idTensor]
                }
                case 'TensorArrayConcatV3': {
                  const r = Kw('tensorArrayId', e, t, n),
                    s = n.getTensorArray(r.id),
                    a = Kw('dtype', e, t, n)
                  return [s.concat(a)]
                }
                case 'TensorArraySplitV3': {
                  const r = Kw('tensorArrayId', e, t, n),
                    s = Kw('tensor', e, t, n),
                    a = Kw('lengths', e, t, n),
                    i = n.getTensorArray(r.id)
                  return i.split(a, s), [i.idTensor]
                }
                case 'TensorArraySizeV3': {
                  const r = Kw('tensorArrayId', e, t, n)
                  return [Ji(n.getTensorArray(r.id).size(), 'int32')]
                }
                case 'TensorArrayCloseV3': {
                  const r = Kw('tensorArrayId', e, t, n),
                    s = n.getTensorArray(r.id)
                  return s.clearAndClose(), [s.idTensor]
                }
                case 'TensorListSetItem': {
                  const r = Kw('tensorListId', e, t, n),
                    s = Kw('index', e, t, n),
                    a = Kw('tensor', e, t, n),
                    i = n.getTensorList(r.id)
                  return i.setItem(s, a), [i.idTensor]
                }
                case 'TensorListGetItem': {
                  const r = Kw('tensorListId', e, t, n),
                    s = Kw('index', e, t, n),
                    a = Kw('elementShape', e, t, n),
                    i = Kw('elementDType', e, t, n)
                  return [n.getTensorList(r.id).getItem(s, a, i)]
                }
                case 'TensorListScatterV2':
                case 'TensorListScatter': {
                  const r = Kw('indices', e, t, n),
                    s = (function (e, t, n, r) {
                      if (t.length !== e.shape[0])
                        throw new Error(
                          `Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`,
                        )
                      const s = Math.max(...t)
                      if (null != r && -1 !== r && s >= r)
                        throw new Error(
                          `Max index must be < array size (${s}  vs. ${r})`,
                        )
                      const a = new Wv([], n, e.dtype, r),
                        i = Xc(e, 0)
                      return (
                        t.forEach((e, t) => {
                          a.setItem(e, i[t])
                        }),
                        a
                      )
                    })(
                      Kw('tensor', e, t, n),
                      r,
                      Kw('elementShape', e, t, n),
                      Kw('numElements', e, t, n),
                    )
                  return n.addTensorList(s), [s.idTensor]
                }
                case 'TensorListReserve':
                case 'EmptyTensorList': {
                  const r = Kw('elementShape', e, t, n),
                    s = Kw('elementDType', e, t, n)
                  let a
                  a =
                    'TensorListReserve' === e.op
                      ? 'numElements'
                      : 'maxNumElements'
                  const i = Kw(a, e, t, n),
                    o = (function (e, t, n, r) {
                      return new Wv([], e, t, r)
                    })(r, s, 0, 'TensorListReserve' === e.op ? -1 : i)
                  return n.addTensorList(o), [o.idTensor]
                }
                case 'TensorListGather': {
                  const r = Kw('tensorListId', e, t, n),
                    s = Kw('indices', e, t, n),
                    a = Kw('elementShape', e, t, n),
                    i = Kw('elementDType', e, t, n)
                  return [n.getTensorList(r.id).gather(s, i, a)]
                }
                case 'TensorListStack': {
                  const r = Kw('tensorListId', e, t, n),
                    s = Kw('elementShape', e, t, n),
                    a = Kw('elementDType', e, t, n),
                    i = Kw('numElements', e, t, n)
                  return [n.getTensorList(r.id).stack(s, a, i)]
                }
                case 'TensorListFromTensor': {
                  const r = (function (e, t, n) {
                    const r = e.dtype
                    if (e.shape.length < 1)
                      throw new Error(
                        `Tensor must be at least a vector, but saw shape: ${e.shape}`,
                      )
                    if (e.dtype !== n)
                      throw new Error(
                        `Invalid data types; op elements ${e.dtype}, but list elements ${n}`,
                      )
                    Mv(e.shape.slice(1), t, 'TensorList shape mismatch: ')
                    const s = Xc(e)
                    return new Wv(s, t, r)
                  })(
                    Kw('tensor', e, t, n),
                    Kw('elementShape', e, t, n),
                    Kw('elementDType', e, t, n),
                  )
                  return n.addTensorList(r), [r.idTensor]
                }
                case 'TensorListConcat':
                case 'TensorListConcatV2': {
                  const r = Kw('tensorListId', e, t, n),
                    s = n.getTensorList(r.id),
                    a = Kw('dtype', e, t, n),
                    i = Kw('elementShape', e, t, n)
                  return [s.concat(a, i)]
                }
                case 'TensorListPushBack': {
                  const r = Kw('tensorListId', e, t, n),
                    s = Kw('tensor', e, t, n),
                    a = n.getTensorList(r.id)
                  return a.pushBack(s), [a.idTensor]
                }
                case 'TensorListPopBack': {
                  const r = Kw('tensorListId', e, t, n),
                    s = Kw('elementShape', e, t, n),
                    a = Kw('elementDType', e, t, n)
                  return [n.getTensorList(r.id).popBack(s, a)]
                }
                case 'TensorListSplit': {
                  const r = Kw('tensor', e, t, n),
                    s = Kw('elementShape', e, t, n),
                    a = (function (e, t, n) {
                      let r = 0
                      const s = t.map((e) => ((r += e), r))
                      if (r !== e.shape[0])
                        throw new Error(
                          `Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${r}, and tensor's shape is: ${e.shape}`,
                        )
                      const a = Pv(e.shape.slice(1), n),
                        i = 0 === r ? 0 : e.size / r,
                        o = qi(() => {
                          const n = []
                          e = Eo(e, [1, r, i])
                          for (let r = 0; r < t.length; ++r) {
                            const o = [0, 0 === r ? 0 : s[r - 1], 0],
                              l = [1, t[r], i]
                            n[r] = Eo(Mo(e, o, l), a)
                          }
                          return e.dispose(), n
                        }),
                        l = new Wv([], n, e.dtype, t.length)
                      for (let e = 0; e < o.length; e++) l.setItem(e, o[e])
                      return l
                    })(r, Kw('lengths', e, t, n), s)
                  return n.addTensorList(a), [a.idTensor]
                }
                case 'TensorListLength': {
                  const r = Kw('tensorListId', e, t, n)
                  return [Ji(n.getTensorList(r.id).size(), 'int32')]
                }
                case 'TensorListResize': {
                  const r = Kw('tensorListId', e, t, n),
                    s = Kw('size', e, t, n),
                    a = n.getTensorList(r.id).resize(s)
                  return n.addTensorList(a), [a.idTensor]
                }
                default:
                  throw TypeError(`Node type ${e.op} is not implemented`)
              }
            })(e, t, n)
          case 'convolution':
            return s(() =>
              ((e, t, n, r = T) => {
                switch (e.op) {
                  case 'Conv1D': {
                    const s = Kw('stride', e, t, n),
                      a = Kw('pad', e, t, n),
                      i = Kw('dataFormat', e, t, n).toUpperCase(),
                      o = Kw('dilation', e, t, n)
                    return [
                      r.conv1d(
                        Kw('x', e, t, n),
                        Kw('filter', e, t, n),
                        s,
                        a,
                        i,
                        o,
                      ),
                    ]
                  }
                  case 'Conv2D': {
                    const s = Kw('strides', e, t, n),
                      a = Qw(e, t, n),
                      i = Kw('dataFormat', e, t, n).toUpperCase(),
                      o = Kw('dilations', e, t, n)
                    return [
                      r.conv2d(
                        Kw('x', e, t, n),
                        Kw('filter', e, t, n),
                        [s[1], s[2]],
                        a,
                        i,
                        [o[1], o[2]],
                      ),
                    ]
                  }
                  case '_FusedConv2D': {
                    const {
                      stride: s,
                      pad: a,
                      dataFormat: i,
                      dilations: o,
                      biasArg: l,
                      preluArg: u,
                      activationFunc: c,
                      leakyreluAlpha: h,
                    } = Vv(e, t, n)
                    return [
                      r.fused.conv2d({
                        x: Kw('x', e, t, n),
                        filter: Kw('filter', e, t, n),
                        strides: [s[1], s[2]],
                        pad: a,
                        dataFormat: i,
                        dilations: [o[1], o[2]],
                        bias: l,
                        activation: c,
                        preluActivationWeights: u,
                        leakyreluAlpha: h,
                      }),
                    ]
                  }
                  case 'FusedDepthwiseConv2dNative': {
                    const {
                      stride: s,
                      pad: a,
                      dataFormat: i,
                      dilations: o,
                      biasArg: l,
                      preluArg: u,
                      activationFunc: c,
                      leakyreluAlpha: h,
                    } = Vv(e, t, n)
                    return [
                      r.fused.depthwiseConv2d({
                        x: Kw('x', e, t, n),
                        filter: Kw('filter', e, t, n),
                        strides: [s[1], s[2]],
                        pad: a,
                        dataFormat: i,
                        dilations: [o[1], o[2]],
                        bias: l,
                        activation: c,
                        preluActivationWeights: u,
                        leakyreluAlpha: h,
                      }),
                    ]
                  }
                  case 'Conv2DBackpropInput':
                  case 'Conv2dTranspose': {
                    const s = Kw('outputShape', e, t, n),
                      a = Kw('strides', e, t, n),
                      i = Qw(e, t, n)
                    return [
                      r.conv2dTranspose(
                        Kw('x', e, t, n),
                        Kw('filter', e, t, n),
                        s,
                        [a[1], a[2]],
                        i,
                      ),
                    ]
                  }
                  case 'DepthwiseConv2dNative':
                  case 'DepthwiseConv2d': {
                    const s = Kw('strides', e, t, n),
                      a = Qw(e, t, n),
                      i = Kw('dilations', e, t, n),
                      o = Kw('dataFormat', e, t, n).toUpperCase()
                    return [
                      r.depthwiseConv2d(
                        Kw('input', e, t, n),
                        Kw('filter', e, t, n),
                        [s[1], s[2]],
                        a,
                        o,
                        [i[1], i[2]],
                      ),
                    ]
                  }
                  case 'Conv3D': {
                    const s = Kw('strides', e, t, n),
                      a = Kw('pad', e, t, n),
                      i = Kw('dataFormat', e, t, n).toUpperCase(),
                      o = Kw('dilations', e, t, n)
                    return [
                      r.conv3d(
                        Kw('x', e, t, n),
                        Kw('filter', e, t, n),
                        [s[1], s[2], s[3]],
                        a,
                        i,
                        [o[1], o[2], o[3]],
                      ),
                    ]
                  }
                  case 'AvgPool': {
                    const s = Kw('strides', e, t, n),
                      a = Kw('pad', e, t, n),
                      i = Kw('kernelSize', e, t, n)
                    return [
                      r.avgPool(
                        Kw('x', e, t, n),
                        [i[1], i[2]],
                        [s[1], s[2]],
                        a,
                      ),
                    ]
                  }
                  case 'MaxPool': {
                    const s = Kw('strides', e, t, n),
                      a = Kw('pad', e, t, n),
                      i = Kw('kernelSize', e, t, n)
                    return [
                      r.maxPool(
                        Kw('x', e, t, n),
                        [i[1], i[2]],
                        [s[1], s[2]],
                        a,
                      ),
                    ]
                  }
                  case 'MaxPoolWithArgmax': {
                    const s = Kw('strides', e, t, n),
                      a = Kw('pad', e, t, n),
                      i = Kw('kernelSize', e, t, n),
                      o = Kw('includeBatchInIndex', e, t, n),
                      { result: l, indexes: u } = r.maxPoolWithArgmax(
                        Kw('x', e, t, n),
                        [i[1], i[2]],
                        [s[1], s[2]],
                        a,
                        o,
                      )
                    return [l, u]
                  }
                  case 'AvgPool3D': {
                    const s = Kw('strides', e, t, n),
                      a = Kw('pad', e, t, n),
                      i = Kw('kernelSize', e, t, n)
                    return [
                      r.avgPool3d(
                        Kw('x', e, t, n),
                        [i[1], i[2], i[3]],
                        [s[1], s[2], s[3]],
                        a,
                      ),
                    ]
                  }
                  case 'MaxPool3D': {
                    const s = Kw('strides', e, t, n),
                      a = Kw('pad', e, t, n),
                      i = Kw('kernelSize', e, t, n)
                    return [
                      r.maxPool3d(
                        Kw('x', e, t, n),
                        [i[1], i[2], i[3]],
                        [s[1], s[2], s[3]],
                        a,
                      ),
                    ]
                  }
                  case 'Dilation2D': {
                    const s = Kw('strides', e, t, n),
                      a = Kw('pad', e, t, n),
                      i = Kw('dilations', e, t, n),
                      o = s[1],
                      l = s[2],
                      u = i[1],
                      c = i[2]
                    return [
                      r.dilation2d(
                        Kw('x', e, t, n),
                        Kw('filter', e, t, n),
                        [o, l],
                        a,
                        [u, c],
                        'NHWC',
                      ),
                    ]
                  }
                  default:
                    throw TypeError(`Node type ${e.op} is not implemented`)
                }
              })(e, t, n),
            )
          case 'creation':
            return s(() =>
              ((e, t, n, r = T) => {
                switch (e.op) {
                  case 'Fill': {
                    const s = Kw('shape', e, t, n),
                      a = Kw('dtype', e, t, n),
                      i = Kw('value', e, t, n)
                    return [r.fill(s, i, a)]
                  }
                  case 'LinSpace': {
                    const s = Kw('start', e, t, n),
                      a = Kw('stop', e, t, n),
                      i = Kw('num', e, t, n)
                    return [r.linspace(s, a, i)]
                  }
                  case 'Multinomial': {
                    const s = Kw('logits', e, t, n),
                      a = Kw('numSamples', e, t, n),
                      i = Kw('seed', e, t, n)
                    return [r.multinomial(s, a, i)]
                  }
                  case 'OneHot': {
                    const s = Kw('indices', e, t, n),
                      a = Kw('depth', e, t, n),
                      i = Kw('onValue', e, t, n),
                      o = Kw('offValue', e, t, n),
                      l = Kw('dtype', e, t, n)
                    return [r.oneHot(s, a, i, o, l)]
                  }
                  case 'Ones':
                    return [r.ones(Kw('shape', e, t, n), Kw('dtype', e, t, n))]
                  case 'OnesLike':
                    return [r.onesLike(Kw('x', e, t, n))]
                  case 'RandomStandardNormal':
                    return [
                      r.randomStandardNormal(
                        Kw('shape', e, t, n),
                        Kw('dtype', e, t, n),
                        Kw('seed', e, t, n),
                      ),
                    ]
                  case 'RandomUniform':
                    return [
                      r.randomUniform(
                        Kw('shape', e, t, n),
                        Kw('minval', e, t, n),
                        Kw('maxval', e, t, n),
                        Kw('dtype', e, t, n),
                      ),
                    ]
                  case 'Range': {
                    const s = Kw('start', e, t, n),
                      a = Kw('stop', e, t, n),
                      i = Kw('step', e, t, n)
                    return [r.range(s, a, i, Kw('dtype', e, t, n))]
                  }
                  case 'TruncatedNormal': {
                    const s = Kw('shape', e, t, n),
                      a = Kw('mean', e, t, n),
                      i = Kw('stdDev', e, t, n),
                      o = Kw('seed', e, t, n)
                    return [r.truncatedNormal(s, a, i, Kw('dtype', e, t, n), o)]
                  }
                  case 'Zeros':
                    return [r.zeros(Kw('shape', e, t, n), Kw('dtype', e, t, n))]
                  case 'ZerosLike':
                    return [r.zerosLike(Kw('x', e, t, n))]
                  default:
                    throw TypeError(`Node type ${e.op} is not implemented`)
                }
              })(e, t, n),
            )
          case 'dynamic':
            return (async (e, t, n, r, s = T) => {
              switch (e.op) {
                case 'NonMaxSuppressionV5': {
                  const {
                      boxes: r,
                      scores: a,
                      maxOutputSize: i,
                      iouThreshold: o,
                      scoreThreshold: l,
                      softNmsSigma: u,
                    } = Uv(e, t, n),
                    c = await s.image.nonMaxSuppressionWithScoreAsync(
                      r,
                      a,
                      i,
                      o,
                      l,
                      u,
                    )
                  return [c.selectedIndices, c.selectedScores]
                }
                case 'NonMaxSuppressionV4': {
                  const {
                      boxes: r,
                      scores: a,
                      maxOutputSize: i,
                      iouThreshold: o,
                      scoreThreshold: l,
                    } = Uv(e, t, n),
                    u = Kw('padToMaxOutputSize', e, t, n),
                    c = await s.image.nonMaxSuppressionPaddedAsync(
                      r,
                      a,
                      i,
                      o,
                      l,
                      u,
                    )
                  return [c.selectedIndices, c.validOutputs]
                }
                case 'NonMaxSuppressionV3':
                case 'NonMaxSuppressionV2': {
                  const {
                    boxes: r,
                    scores: a,
                    maxOutputSize: i,
                    iouThreshold: o,
                    scoreThreshold: l,
                  } = Uv(e, t, n)
                  return [await s.image.nonMaxSuppressionAsync(r, a, i, o, l)]
                }
                case 'Where': {
                  const r = s.cast(Kw('condition', e, t, n), 'bool'),
                    a = [await s.whereAsync(r)]
                  return r.dispose(), a
                }
                case 'ListDiff':
                  return s.setdiff1dAsync(Kw('x', e, t, n), Kw('y', e, t, n))
                default:
                  throw TypeError(`Node type ${e.op} is not implemented`)
              }
            })(e, t, n)
          case 'evaluation':
            return s(() =>
              ((e, t, n, r = T) => {
                switch (e.op) {
                  case 'LowerBound': {
                    const s = Kw('sortedSequence', e, t, n),
                      a = Kw('values', e, t, n)
                    return [r.lowerBound(s, a)]
                  }
                  case 'TopKV2': {
                    const s = Kw('x', e, t, n),
                      a = Kw('k', e, t, n),
                      i = Kw('sorted', e, t, n),
                      o = r.topk(s, a, i)
                    return [o.values, o.indices]
                  }
                  case 'UpperBound': {
                    const s = Kw('sortedSequence', e, t, n),
                      a = Kw('values', e, t, n)
                    return [r.upperBound(s, a)]
                  }
                  case 'Unique': {
                    const s = Kw('x', e, t, n),
                      a = r.unique(s)
                    return [a.values, a.indices]
                  }
                  case 'UniqueV2': {
                    const s = Kw('x', e, t, n),
                      a = Kw('axis', e, t, n),
                      i = r.unique(s, a)
                    return [i.values, i.indices]
                  }
                  default:
                    throw TypeError(`Node type ${e.op} is not implemented`)
                }
              })(e, t, n),
            )
          case 'image':
            return s(() =>
              ((e, t, n, r = T) => {
                switch (e.op) {
                  case 'ResizeBilinear': {
                    const s = Kw('images', e, t, n),
                      a = Kw('size', e, t, n),
                      i = Kw('alignCorners', e, t, n),
                      o = Kw('halfPixelCenters', e, t, n)
                    return [r.image.resizeBilinear(s, [a[0], a[1]], i, o)]
                  }
                  case 'ResizeNearestNeighbor': {
                    const s = Kw('images', e, t, n),
                      a = Kw('size', e, t, n),
                      i = Kw('alignCorners', e, t, n),
                      o = Kw('halfPixelCenters', e, t, n)
                    return [
                      r.image.resizeNearestNeighbor(s, [a[0], a[1]], i, o),
                    ]
                  }
                  case 'CropAndResize': {
                    const s = Kw('image', e, t, n),
                      a = Kw('boxes', e, t, n),
                      i = Kw('boxInd', e, t, n),
                      o = Kw('cropSize', e, t, n),
                      l = Kw('method', e, t, n),
                      u = Kw('extrapolationValue', e, t, n)
                    return [r.image.cropAndResize(s, a, i, o, l, u)]
                  }
                  case 'ImageProjectiveTransformV3': {
                    const s = Kw('images', e, t, n),
                      a = Kw('transforms', e, t, n),
                      i = Kw('outputShape', e, t, n),
                      o = Kw('fillValue', e, t, n),
                      l = Kw('interpolation', e, t, n),
                      u = Kw('fillMode', e, t, n)
                    return [
                      r.image.transform(
                        s,
                        a,
                        l.toLowerCase(),
                        u.toLowerCase(),
                        o,
                        i,
                      ),
                    ]
                  }
                  default:
                    throw TypeError(`Node type ${e.op} is not implemented`)
                }
              })(e, t, n),
            )
          case 'graph':
            return s(() =>
              ((e, t, n, r = T) => {
                switch (e.op) {
                  case 'Const':
                    return t[e.name]
                  case 'PlaceholderWithDefault':
                    const s = Kw('default', e, t, n)
                    return [Xw(e.name, t, n) || s]
                  case 'Placeholder':
                    return [Xw(e.name, t, n)]
                  case 'Identity':
                  case 'StopGradient':
                  case 'FakeQuantWithMinMaxVars':
                  case 'Snapshot':
                    return [ev(Kw('x', e, t, n))]
                  case 'IdentityN':
                    return Kw('x', e, t, n).map((e) => ev(e))
                  case 'Shape':
                    return [r.tensor1d(Kw('x', e, t, n).shape, 'int32')]
                  case 'ShapeN':
                    return Kw('x', e, t, n).map((e) => r.tensor1d(e.shape))
                  case 'Size':
                    return [r.scalar(Kw('x', e, t, n).size, 'int32')]
                  case 'Rank':
                    return [r.scalar(Kw('x', e, t, n).rank, 'int32')]
                  case 'NoOp':
                    return [r.scalar(1)]
                  case 'Print':
                    const a = Kw('x', e, t, n),
                      i = Kw('data', e, t, n),
                      o = Kw('message', e, t, n),
                      l = Kw('summarize', e, t, n)
                    console.warn(
                      'The graph has a tf.print() operation,usually used for debugging, which slows down performance.',
                    ),
                      console.log(o)
                    for (let e = 0; e < i.length; e++)
                      console.log(
                        Array.prototype.slice.call(i[e].dataSync()).slice(0, l),
                      )
                    return [a]
                  default:
                    throw TypeError(`Node type ${e.op} is not implemented`)
                }
              })(e, t, n),
            )
          case 'logical':
            return s(() =>
              ((e, t, n, r = T) => {
                switch (e.op) {
                  case 'Equal':
                    return [r.equal(Kw('a', e, t, n), Kw('b', e, t, n))]
                  case 'NotEqual':
                    return [r.notEqual(Kw('a', e, t, n), Kw('b', e, t, n))]
                  case 'Greater':
                    return [r.greater(Kw('a', e, t, n), Kw('b', e, t, n))]
                  case 'GreaterEqual':
                    return [r.greaterEqual(Kw('a', e, t, n), Kw('b', e, t, n))]
                  case 'Less':
                    return [r.less(Kw('a', e, t, n), Kw('b', e, t, n))]
                  case 'LessEqual':
                    return [r.lessEqual(Kw('a', e, t, n), Kw('b', e, t, n))]
                  case 'LogicalAnd':
                    return [r.logicalAnd(Kw('a', e, t, n), Kw('b', e, t, n))]
                  case 'LogicalNot':
                    return [r.logicalNot(Kw('a', e, t, n))]
                  case 'LogicalOr':
                    return [r.logicalOr(Kw('a', e, t, n), Kw('b', e, t, n))]
                  case 'Select':
                  case 'SelectV2':
                    return [
                      r.where(
                        Kw('condition', e, t, n),
                        Kw('a', e, t, n),
                        Kw('b', e, t, n),
                      ),
                    ]
                  default:
                    throw TypeError(`Node type ${e.op} is not implemented`)
                }
              })(e, t, n),
            )
          case 'matrices':
            return s(() =>
              ((e, t, n, r = T) => {
                switch (e.op) {
                  case 'BatchMatMul':
                  case 'BatchMatMulV2':
                  case 'MatMul':
                    return [
                      r.matMul(
                        Kw('a', e, t, n),
                        Kw('b', e, t, n),
                        Kw('transposeA', e, t, n),
                        Kw('transposeB', e, t, n),
                      ),
                    ]
                  case 'Einsum':
                    return [
                      r.einsum(
                        Kw('equation', e, t, n),
                        ...Kw('tensors', e, t, n),
                      ),
                    ]
                  case 'Transpose':
                    return [r.transpose(Kw('x', e, t, n), Kw('perm', e, t, n))]
                  case '_FusedMatMul':
                    const [s, a] = Kw('fusedOps', e, t, n),
                      i = 'biasadd' === s,
                      o = 'prelu' === a,
                      l = Kw('numArgs', e, t, n),
                      u = Kw('leakyreluAlpha', e, t, n)
                    if (i) {
                      if (o && 2 !== l)
                        throw new Error(
                          'Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.',
                        )
                      if (!o && 1 !== l)
                        throw new Error(
                          'Fused MatMul with BiasAdd must have one extra argument: bias.',
                        )
                    }
                    const [c, h] = Kw('args', e, t, n)
                    return [
                      r.fused.matMul({
                        a: Kw('a', e, t, n),
                        b: Kw('b', e, t, n),
                        transposeA: Kw('transposeA', e, t, n),
                        transposeB: Kw('transposeB', e, t, n),
                        bias: c,
                        activation: a,
                        preluActivationWeights: h,
                        leakyreluAlpha: u,
                      }),
                    ]
                  default:
                    throw TypeError(`Node type ${e.op} is not implemented`)
                }
              })(e, t, n),
            )
          case 'normalization':
            return s(() =>
              ((e, t, n, r = T) => {
                switch (e.op) {
                  case 'EuclideanNorm':
                    return [
                      r.euclideanNorm(
                        Kw('x', e, t, n),
                        Kw('axis', e, t, n),
                        Kw('keepDims', e, t, n),
                      ),
                    ]
                  case 'FusedBatchNorm':
                  case 'FusedBatchNormV2':
                  case 'FusedBatchNormV3':
                    return [
                      r.batchNorm(
                        Kw('x', e, t, n),
                        Kw('mean', e, t, n),
                        Kw('variance', e, t, n),
                        Kw('offset', e, t, n),
                        Kw('scale', e, t, n),
                        Kw('epsilon', e, t, n),
                      ),
                    ]
                  case 'LRN':
                    return [
                      r.localResponseNormalization(
                        Kw('x', e, t, n),
                        Kw('radius', e, t, n),
                        Kw('bias', e, t, n),
                        Kw('alpha', e, t, n),
                        Kw('beta', e, t, n),
                      ),
                    ]
                  case 'Softmax':
                    return [r.softmax(Kw('x', e, t, n))]
                  case 'LogSoftmax':
                    return [r.logSoftmax(Kw('x', e, t, n))]
                  case 'SparseToDense':
                    return [
                      r.sparseToDense(
                        Kw('sparseIndices', e, t, n),
                        Kw('outputShape', e, t, n),
                        Kw('sparseValues', e, t, n),
                        Kw('defaultValue', e, t, n),
                      ),
                    ]
                  default:
                    throw TypeError(`Node type ${e.op} is not implemented`)
                }
              })(e, t, n),
            )
          case 'reduction':
            return s(() =>
              ((e, t, n, r = T) => {
                switch (e.op) {
                  case 'Max': {
                    const s = Kw('axis', e, t, n),
                      a = Kw('keepDims', e, t, n)
                    return [r.max(Kw('x', e, t, n), s, a)]
                  }
                  case 'Mean': {
                    const s = Kw('axis', e, t, n),
                      a = Kw('keepDims', e, t, n)
                    return [r.mean(Kw('x', e, t, n), s, a)]
                  }
                  case 'Min': {
                    const s = Kw('axis', e, t, n),
                      a = Kw('keepDims', e, t, n)
                    return [r.min(Kw('x', e, t, n), s, a)]
                  }
                  case 'Sum': {
                    const s = Kw('axis', e, t, n),
                      a = Kw('keepDims', e, t, n)
                    return [r.sum(Kw('x', e, t, n), s, a)]
                  }
                  case 'All': {
                    const s = Kw('axis', e, t, n),
                      a = Kw('keepDims', e, t, n)
                    return [r.all(Kw('x', e, t, n), s, a)]
                  }
                  case 'Any': {
                    const s = Kw('axis', e, t, n),
                      a = Kw('keepDims', e, t, n)
                    return [r.any(Kw('x', e, t, n), s, a)]
                  }
                  case 'ArgMax': {
                    const s = Kw('axis', e, t, n)
                    return [r.argMax(Kw('x', e, t, n), s)]
                  }
                  case 'ArgMin': {
                    const s = Kw('axis', e, t, n)
                    return [r.argMin(Kw('x', e, t, n), s)]
                  }
                  case 'Prod': {
                    const s = Kw('axis', e, t, n),
                      a = Kw('keepDims', e, t, n)
                    return [r.prod(Kw('x', e, t, n), s, a)]
                  }
                  case 'Cumprod': {
                    const s = Kw('axis', e, t, n),
                      a = Kw('exclusive', e, t, n),
                      i = Kw('reverse', e, t, n)
                    return [r.cumprod(Kw('x', e, t, n), s, a, i)]
                  }
                  case 'Cumsum': {
                    const s = Kw('axis', e, t, n),
                      a = Kw('exclusive', e, t, n),
                      i = Kw('reverse', e, t, n)
                    return [r.cumsum(Kw('x', e, t, n), s, a, i)]
                  }
                  case 'Bincount':
                    const s = Kw('x', e, t, n),
                      a = Kw('weights', e, t, n),
                      i = Kw('size', e, t, n)
                    return [r.bincount(s, a, i)]
                  case 'DenseBincount': {
                    const s = Kw('x', e, t, n),
                      a = Kw('weights', e, t, n),
                      i = Kw('size', e, t, n),
                      o = Kw('binaryOutput', e, t, n)
                    return [r.denseBincount(s, a, i, o)]
                  }
                  default:
                    throw TypeError(`Node type ${e.op} is not implemented`)
                }
              })(e, t, n),
            )
          case 'slice_join':
            return s(() =>
              ((e, t, n, r = T) => {
                switch (e.op) {
                  case 'ConcatV2':
                  case 'Concat': {
                    const s = Kw('n', e, t, n),
                      a = Kw('axis', e, t, n)
                    let i = Kw('tensors', e, t, n)
                    return (i = i.slice(0, s)), [r.concat(i, a)]
                  }
                  case 'Gather': {
                    const s = Kw('x', e, t, n),
                      a = Kw('indices', e, t, n)
                    return [r.gather(s, r.cast(a, 'int32'), 0)]
                  }
                  case 'GatherV2': {
                    const s = Kw('axis', e, t, n),
                      a = Kw('batchDims', e, t, n),
                      i = Kw('x', e, t, n),
                      o = Kw('indices', e, t, n)
                    return [r.gather(i, r.cast(o, 'int32'), s, a)]
                  }
                  case 'Reverse': {
                    const s = Kw('dims', e, t, n),
                      a = []
                    for (let e = 0; e < s.length; e++) s[e] && a.push(e)
                    const i = Kw('x', e, t, n)
                    return [r.reverse(i, a)]
                  }
                  case 'ReverseV2': {
                    const s = Kw('axis', e, t, n),
                      a = Kw('x', e, t, n)
                    return [r.reverse(a, s)]
                  }
                  case 'Slice': {
                    const s = Kw('begin', e, t, n),
                      a = Kw('size', e, t, n)
                    return [r.slice(Kw('x', e, t, n), s, a)]
                  }
                  case 'StridedSlice': {
                    const s = Kw('begin', e, t, n),
                      a = Kw('end', e, t, n),
                      i = Kw('strides', e, t, n),
                      o = Kw('beginMask', e, t, n),
                      l = Kw('endMask', e, t, n),
                      u = Kw('ellipsisMask', e, t, n),
                      c = Kw('newAxisMask', e, t, n),
                      h = Kw('shrinkAxisMask', e, t, n),
                      p = Kw('x', e, t, n)
                    return [r.stridedSlice(p, s, a, i, o, l, u, c, h)]
                  }
                  case 'Pack':
                    return qi(() => {
                      const s = Kw('axis', e, t, n),
                        a = Kw('tensors', e, t, n),
                        i = a[0].shape,
                        o = r.squeeze(a[0]).shape,
                        l = a.map((e) => {
                          const t = B(e.shape, i)
                          if (!t && !B(r.squeeze(e).shape, o))
                            throw new Error(
                              'the input tensors shape does not match',
                            )
                          return t ? e : r.reshape(e, i)
                        })
                      return [r.stack(l, s)]
                    })
                  case 'Unpack': {
                    const s = Kw('axis', e, t, n),
                      a = Kw('tensor', e, t, n)
                    return r.unstack(a, s)
                  }
                  case 'Tile': {
                    const s = Kw('reps', e, t, n)
                    return [r.tile(Kw('x', e, t, n), s)]
                  }
                  case 'Split':
                  case 'SplitV': {
                    const s = Kw('axis', e, t, n),
                      a = Kw('numOrSizeSplits', e, t, n),
                      i = Kw('x', e, t, n)
                    return r.split(i, a, s)
                  }
                  case 'ScatterNd': {
                    const s = Kw('indices', e, t, n),
                      a = Kw('values', e, t, n),
                      i = Kw('shape', e, t, n)
                    return [r.scatterND(s, a, i)]
                  }
                  case 'GatherNd': {
                    const s = Kw('x', e, t, n),
                      a = Kw('indices', e, t, n)
                    return [r.gatherND(s, a)]
                  }
                  case 'SparseToDense': {
                    const s = Kw('sparseIndices', e, t, n),
                      a = Kw('outputShape', e, t, n),
                      i = Kw('sparseValues', e, t, n),
                      o = Kw('defaultValue', e, t, n)
                    return [
                      r.sparseToDense(
                        s,
                        i,
                        a,
                        i.dtype === o.dtype ? o : r.cast(o, i.dtype),
                      ),
                    ]
                  }
                  default:
                    throw TypeError(`Node type ${e.op} is not implemented`)
                }
              })(e, t, n),
            )
          case 'sparse':
            return s(() =>
              ((e, t, n, r = T) => {
                switch (e.op) {
                  case 'SparseFillEmptyRows': {
                    const {
                      outputIndices: s,
                      outputValues: a,
                      emptyRowIndicator: i,
                      reverseIndexMap: o,
                    } = r.sparse.sparseFillEmptyRows(
                      Kw('indices', e, t, n),
                      Kw('values', e, t, n),
                      Kw('denseShape', e, t, n),
                      Kw('defaultValue', e, t, n),
                    )
                    return [s, a, i, o]
                  }
                  case 'SparseReshape': {
                    const { outputIndices: s, outputShape: a } =
                      r.sparse.sparseReshape(
                        Kw('inputIndices', e, t, n),
                        Kw('inputShape', e, t, n),
                        Kw('newShape', e, t, n),
                      )
                    return [s, a]
                  }
                  case 'SparseSegmentMean':
                    return [
                      r.sparse.sparseSegmentMean(
                        Kw('data', e, t, n),
                        Kw('indices', e, t, n),
                        Kw('segmentIds', e, t, n),
                      ),
                    ]
                  case 'SparseSegmentSum':
                    return [
                      r.sparse.sparseSegmentSum(
                        Kw('data', e, t, n),
                        Kw('indices', e, t, n),
                        Kw('segmentIds', e, t, n),
                      ),
                    ]
                  default:
                    throw TypeError(`Node type ${e.op} is not implemented`)
                }
              })(e, t, n),
            )
          case 'spectral':
            return s(() =>
              ((e, t, n, r = T) => {
                switch (e.op) {
                  case 'FFT':
                    return [r.fft(Kw('x', e, t, n))]
                  case 'IFFT':
                    return [r.ifft(Kw('x', e, t, n))]
                  case 'RFFT':
                    return [r.rfft(Kw('x', e, t, n))]
                  case 'IRFFT':
                    return [r.irfft(Kw('x', e, t, n))]
                  default:
                    throw TypeError(`Node type ${e.op} is not implemented`)
                }
              })(e, t, n),
            )
          case 'string':
            return s(() =>
              ((e, t, n, r = T) => {
                switch (e.op) {
                  case 'StringNGrams': {
                    const { nGrams: s, nGramsSplits: a } =
                      r.string.stringNGrams(
                        Kw('data', e, t, n),
                        Kw('dataSplits', e, t, n),
                        Kw('separator', e, t, n),
                        Kw('nGramWidths', e, t, n),
                        Kw('leftPad', e, t, n),
                        Kw('rightPad', e, t, n),
                        Kw('padWidth', e, t, n),
                        Kw('preserveShortSequences', e, t, n),
                      )
                    return [s, a]
                  }
                  case 'StringSplit': {
                    const {
                      indices: s,
                      values: a,
                      shape: i,
                    } = r.string.stringSplit(
                      Kw('input', e, t, n),
                      Kw('delimiter', e, t, n),
                      Kw('skipEmpty', e, t, n),
                    )
                    return [s, a, i]
                  }
                  case 'StringToHashBucketFast':
                    return [
                      r.string.stringToHashBucketFast(
                        Kw('input', e, t, n),
                        Kw('numBuckets', e, t, n),
                      ),
                    ]
                  default:
                    throw TypeError(`Node type ${e.op} is not implemented`)
                }
              })(e, t, n),
            )
          case 'transformation':
            return s(() =>
              ((e, t, n, r = T) => {
                switch (e.op) {
                  case 'Cast':
                    return [r.cast(Kw('x', e, t, n), Kw('dtype', e, t, n))]
                  case 'ExpandDims': {
                    const s = Kw('axis', e, t, n)
                    return [r.expandDims(Kw('x', e, t, n), s)]
                  }
                  case 'Squeeze': {
                    const s = Kw('axis', e, t, n)
                    return [r.squeeze(Kw('x', e, t, n), s)]
                  }
                  case 'Reshape':
                    return [r.reshape(Kw('x', e, t, n), Kw('shape', e, t, n))]
                  case 'MirrorPad':
                    return [
                      r.mirrorPad(
                        Kw('x', e, t, n),
                        Kw('padding', e, t, n),
                        Kw('mode', e, t, n),
                      ),
                    ]
                  case 'PadV2':
                  case 'Pad':
                    return [
                      r.pad(
                        Kw('x', e, t, n),
                        Kw('padding', e, t, n),
                        Kw('constantValue', e, t, n),
                      ),
                    ]
                  case 'SpaceToBatchND': {
                    const s = Kw('blockShape', e, t, n),
                      a = Kw('paddings', e, t, n)
                    return [r.spaceToBatchND(Kw('x', e, t, n), s, a)]
                  }
                  case 'BatchToSpaceND': {
                    const s = Kw('blockShape', e, t, n),
                      a = Kw('crops', e, t, n)
                    return [r.batchToSpaceND(Kw('x', e, t, n), s, a)]
                  }
                  case 'DepthToSpace': {
                    const s = Kw('blockSize', e, t, n),
                      a = Kw('dataFormat', e, t, n).toUpperCase()
                    return [r.depthToSpace(Kw('x', e, t, n), s, a)]
                  }
                  case 'BroadcastTo':
                    return [
                      r.broadcastTo(Kw('x', e, t, n), Kw('shape', e, t, n)),
                    ]
                  case 'BroadcastArgs':
                    return [
                      r.broadcastArgs(Kw('s0', e, t, n), Kw('s1', e, t, n)),
                    ]
                  default:
                    throw TypeError(`Node type ${e.op} is not implemented`)
                }
              })(e, t, n),
            )
          case 'hash_table':
            return (async (e, t, n, r) => {
              switch (e.op) {
                case 'HashTable':
                case 'HashTableV2': {
                  const s = Kw('keyDType', e, t, n),
                    a = Kw('valueDType', e, t, n),
                    i = new Gv(s, a)
                  return r.addHashTable(e.name, i), [i.handle]
                }
                case 'LookupTableImport':
                case 'LookupTableImportV2': {
                  const s = Kw('tableHandle', e, t, n, r),
                    a = Kw('keys', e, t, n),
                    i = Kw('values', e, t, n),
                    o = r.getHashTableById(s.id)
                  return [await o.import(a, i)]
                }
                case 'LookupTableFind':
                case 'LookupTableFindV2': {
                  const s = Kw('tableHandle', e, t, n, r),
                    a = Kw('keys', e, t, n),
                    i = Kw('defaultValue', e, t, n),
                    o = r.getHashTableById(s.id)
                  return [await o.find(a, i)]
                }
                case 'LookupTableSize':
                case 'LookupTableSizeV2': {
                  const s = Kw('tableHandle', e, t, n, r)
                  return [r.getHashTableById(s.id).tensorSize()]
                }
                default:
                  throw TypeError(`Node type ${e.op} is not implemented`)
              }
            })(e, t, n, r)
          case 'custom':
            const a = qw(e.op)
            if (a && a.customExecutor) return a.customExecutor(new Ov(e, t, n))
            throw TypeError(`Custom op ${e.op} is not registered.`)
          default:
            throw TypeError(
              `Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`,
            )
        }
      })(e, t, n)
      return de(a) ? a.then((e) => [].concat(e)) : [].concat(a)
    }
    class jv {
      constructor(e = {}, t = {}, n = {}, r = {}) {
        ;(this.weightMap = e),
          (this.tensorArrayMap = t),
          (this.tensorListMap = n),
          (this.functionMap = r),
          (this.rootContext = { id: 0, frameName: '', iterationId: 0 }),
          (this.contexts = [this.rootContext]),
          (this.lastId = 0),
          this.generateCurrentContextIds()
      }
      newFrame(e, t) {
        return { id: e, frameName: t, iterationId: 0 }
      }
      set currentContext(e) {
        this.contexts !== e &&
          ((this.contexts = e), this.generateCurrentContextIds())
      }
      get currentContext() {
        return this.contexts
      }
      get currentContextId() {
        return this._currentContextIds[0]
      }
      get currentContextIds() {
        return this._currentContextIds
      }
      generateCurrentContextIds() {
        const e = []
        for (let t = 0; t < this.contexts.length - 1; t++) {
          const n = this.contexts.slice(0, this.contexts.length - t)
          e.push(this.contextIdforContexts(n))
        }
        e.push(''), (this._currentContextIds = e)
      }
      contextIdforContexts(e) {
        return e
          ? e
              .map((e) =>
                0 === e.id && 0 === e.iterationId
                  ? ''
                  : `${e.frameName}-${e.iterationId}`,
              )
              .join('/')
          : ''
      }
      enterFrame(e) {
        this.contexts &&
          (this.lastId++,
          (this.contexts = this.contexts.slice()),
          this.contexts.push(this.newFrame(this.lastId, e)),
          this._currentContextIds.unshift(
            this.contextIdforContexts(this.contexts),
          ))
      }
      exitFrame() {
        if (!(this.contexts && this.contexts.length > 1))
          throw new Error('Cannot exit frame, the context is empty')
        ;(this.contexts = this.contexts.slice()),
          this.contexts.splice(-1),
          this.currentContextIds.shift()
      }
      nextIteration() {
        if (!(this.contexts && this.contexts.length > 0))
          throw new Error(
            'Cannot increase frame iteration, the context is empty',
          )
        {
          ;(this.contexts = this.contexts.slice()), this.lastId++
          const e = Object.assign({}, this.contexts[this.contexts.length - 1])
          ;(e.iterationId += 1),
            (e.id = this.lastId),
            this.contexts.splice(-1, 1, e),
            this._currentContextIds.splice(
              0,
              1,
              this.contextIdforContexts(this.contexts),
            )
        }
      }
      getWeight(e) {
        return this.weightMap[e]
      }
      addTensorArray(e) {
        this.tensorArrayMap[e.id] = e
      }
      getTensorArray(e) {
        return this.tensorArrayMap[e]
      }
      addTensorList(e) {
        this.tensorListMap[e.id] = e
      }
      getTensorList(e) {
        return this.tensorListMap[e]
      }
      dispose(e) {
        for (const t in this.tensorArrayMap)
          this.tensorArrayMap[t].clearAndClose(e)
        for (const t in this.tensorListMap)
          this.tensorListMap[t].clearAndClose(e)
      }
    }
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function qv(e, t, n, r) {
      const s = new Set(),
        a = []
      let i = null,
        o = null
      const l = new Set(),
        u = Object.keys(e).map((e) => Jw(e)[0])
      let c = []
      null != r && (c = r.map((e) => Jw(e.name)[0]))
      const h = [...t]
      for (; h.length > 0; ) {
        const e = h.pop()
        ;(Zv(e) || Jv(e) || Qv(e)) &&
          null == i &&
          ((i = e),
          (o = i.children.map((e) => e.name).filter((e) => s.has(e)))),
          s.add(e.name),
          null == n[e.name] &&
            -1 === u.indexOf(e.name) &&
            -1 === c.indexOf(e.name) &&
            (0 !== e.inputs.length
              ? e.inputs.forEach((e) => {
                  l.has(e.name) || (l.add(e.name), h.push(e))
                })
              : a.push(e.name))
      }
      return {
        inputs: e,
        outputs: t,
        usedNodes: s,
        missingInputs: a,
        dynamicNode: i,
        syncInputs: o,
      }
    }
    const Kv = [
        'Switch',
        'Merge',
        'Enter',
        'Exit',
        'NextIteration',
        'StatelessIf',
        'StatelessWhile',
        'if',
        'While',
      ],
      Xv = [
        'NonMaxSuppressionV2',
        'NonMaxSuppressionV3',
        'NonMaxSuppressionV5',
        'Where',
      ],
      Yv = [
        'HashTable',
        'HashTableV2',
        'LookupTableImport',
        'LookupTableImportV2',
        'LookupTableFind',
        'LookupTableFindV2',
        'LookupTableSize',
        'LookupTableSizeV2',
      ]
    function Zv(e) {
      return Kv.indexOf(e.op) >= 0
    }
    function Jv(e) {
      return Xv.indexOf(e.op) >= 0
    }
    function Qv(e) {
      return Yv.indexOf(e.op) >= 0
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class ek {
      constructor(e, t) {
        ;(this.graph = e),
          (this.parent = t),
          (this.compiledMap = new Map()),
          (this._weightMap = {}),
          (this.SEPERATOR = ','),
          (this._functions = {}),
          (this._functionExecutorMap = {}),
          (this.intermediateTensors = {}),
          (this.keepTensorForDebug = !1),
          (this._outputs = e.outputs),
          (this._inputs = e.inputs),
          (this._initNodes = e.initNodes),
          (this._signature = e.signature),
          (this._functions = e.functions),
          null != e.functions &&
            Object.keys(e.functions).forEach((t) => {
              this._functionExecutorMap[t] = new ek(e.functions[t], this)
            })
      }
      get weightIds() {
        return this.parent ? this.parent.weightIds : this._weightIds
      }
      get functionExecutorMap() {
        return this.parent
          ? this.parent.functionExecutorMap
          : this._functionExecutorMap
      }
      get weightMap() {
        return this.parent ? this.parent.weightMap : this._weightMap
      }
      set weightMap(e) {
        const t = Object.keys(e).map((t) => e[t].map((e) => e.id))
        ;(this._weightIds = [].concat(...t)), (this._weightMap = e)
      }
      set resourceManager(e) {
        this._resourceManager = e
      }
      get inputs() {
        return this._inputs.map((e) => ({
          name: e.name,
          shape: e.attrParams.shape ? e.attrParams.shape.value : void 0,
          dtype: e.attrParams.dtype ? e.attrParams.dtype.value : void 0,
        }))
      }
      get outputs() {
        return this._outputs.map((e) => ({
          name: e.name,
          shape: e.attrParams.shape ? e.attrParams.shape.value : void 0,
          dtype: e.attrParams.dtype ? e.attrParams.dtype.value : void 0,
        }))
      }
      get inputNodes() {
        return this._inputs.map((e) => e.signatureKey || e.name)
      }
      get outputNodes() {
        return this._outputs.map((e) => {
          const t = e.signatureKey || e.name
          return e.defaultOutput ? `${t}:${e.defaultOutput}` : t
        })
      }
      get functions() {
        return Object.keys(this._functions).reduce(
          (e, t) => ((e[t] = this._functions[t].signature), e),
          {},
        )
      }
      getCompilationKey(e, t) {
        const n = e.map((e) => e.name).sort(),
          r = t.map((e) => e.name).sort()
        return n.join(this.SEPERATOR) + '--' + r.join(this.SEPERATOR)
      }
      compile(e, t) {
        const n = qv(e, t, this.weightMap, this._initNodes),
          { missingInputs: r, dynamicNode: s, syncInputs: a } = n
        if (null != s)
          throw new Error(
            `This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`,
          )
        if (r.length > 0) {
          const n = t.map((e) => e.name),
            s = Object.keys(e)
          throw new Error(
            `Cannot compute the outputs [${n}] from the provided inputs [${s}]. Missing the following inputs: [${r}]`,
          )
        }
        return (function (e, t, n) {
          const { usedNodes: r, inputs: s } = n,
            a = [],
            i = Object.keys(s)
              .map((e) => Jw(e)[0])
              .map((t) => e.nodes[t]),
            o = e.initNodes
          i.forEach((e) => {
            r.has(e.name) && a.push(e)
          }),
            e.weights.forEach((e) => {
              r.has(e.name) && a.push(e)
            }),
            null != o &&
              o.forEach((e) => {
                r.has(e.name) && a.push(e)
              })
          const l = new Set(),
            u = []
          for (; a.length > 0; ) {
            const e = a.pop()
            l.add(e.name),
              t[e.name] || u.push(e),
              e.children.forEach((e) => {
                !l.has(e.name) &&
                  r.has(e.name) &&
                  e.inputs.every((e) => l.has(e.name)) &&
                  a.push(e)
              })
          }
          return u
        })(this.graph, this.weightMap, n)
      }
      execute(e, t) {
        e = this.mapInputs(e)
        const n = Object.keys(e).sort()
        this.checkInputs(e),
          this.checkInputShapeAndType(e),
          (t = this.mapOutputs(t)),
          this.checkOutputs(t)
        const r = n.map((e) => this.graph.nodes[Jw(e)[0]]),
          s = t.map((e) => Jw(e)[0])
        let a = s.map((e) => this.graph.nodes[e])
        this.resetIntermediateTensors(), 0 === a.length && (a = this._outputs)
        const i = this.getCompilationKey(r, a)
        let o = this.compiledMap.get(i)
        null == o && ((o = this.compile(e, a)), this.compiledMap.set(i, o))
        const l = {},
          u = {}
        return qi(() => {
          const n = new jv(this.weightMap, l, u, this.functionExecutorMap),
            r = Object.assign({}, this.weightMap)
          Object.keys(e).forEach((t) => {
            const [n, s] = Jw(t),
              a = []
            ;(a[s] = e[t]), (r[n] = a)
          })
          const a = this.getFrozenTensorIds(r),
            i = {}
          for (let e = 0; e < o.length; e++) {
            const t = o[e]
            if (!r[t.name]) {
              const e = Hv(t, r, n, this._resourceManager)
              if (de(e))
                throw new Error(
                  `The execution of the op '${t.op}' returned a promise. Please use model.executeAsync() instead.`,
                )
              ;(r[t.name] = e),
                this.checkTensorForDisposal(t.name, t, r, n, a, s, i)
            }
          }
          return null == this.parent && n.dispose(a), t.map((e) => Xw(e, r, n))
        })
      }
      getFrozenTensorIds(e) {
        const t = [].concat.apply(
          [],
          Object.keys(e)
            .map((t) => e[t])
            .map((e) => e.map((e) => e.id)),
        )
        return new Set(t)
      }
      checkTensorForDisposal(e, t, n, r, s, a, i) {
        'control' !== t.category &&
          -1 === a.indexOf(e) &&
          (n[e].forEach((e) => {
            null != e && (i[e.id] = (i[e.id] || 0) + t.children.length)
          }),
          t.inputs.forEach((e) => {
            if ('control' !== e.category) {
              const a = (function (e, t, n) {
                return t[Zw(e, n.currentContextId)]
              })(e.name, n, r)
              null != a &&
                a.forEach((e) => {
                  if (e && !e.kept && !s.has(e.id)) {
                    const n = i[e.id]
                    if (1 === n) {
                      if (this.keepTensorForDebug) {
                        const [n, s] = Yw(t.name, r)
                        this.intermediateTensors[n] ||
                          (this.intermediateTensors[n] = []),
                          (this.intermediateTensors[n][s] = e)
                      } else e.dispose()
                      delete i[e.id]
                    } else null != n && i[e.id]--
                  }
                })
            }
          }))
      }
      async executeAsync(e, t) {
        return this._executeAsync(e, t)
      }
      disposeIntermediateTensors() {
        this.intermediateTensors &&
          (Object.keys(this.intermediateTensors).forEach((e) =>
            this.intermediateTensors[e].forEach((e) => e.dispose()),
          ),
          this.disposeTensorsMap())
      }
      disposeTensorsMap() {
        this.tensorsMap &&
          Object.keys(this.tensorsMap).forEach((e) => {
            this.tensorsMap[e].forEach((e) => {
              !e ||
                e.kept ||
                e.isDisposed ||
                this.keepIds.has(e.id) ||
                e.dispose()
            })
          })
      }
      getIntermediateTensors() {
        return this.tensorsMap
      }
      resetIntermediateTensors() {
        for (const e in this.intermediateTensors)
          this.intermediateTensors[e].forEach((e) => e.dispose()),
            delete this.intermediateTensors[e]
      }
      async _executeAsync(e, t, n = !1, r = {}, s = {}) {
        n ||
          ((e = this.mapInputs(e)),
          this.checkInputs(e),
          this.checkInputShapeAndType(e),
          (t = this.mapOutputs(t)),
          this.checkOutputs(t))
        try {
          this.keepTensorForDebug = ye().getBool('KEEP_INTERMEDIATE_TENSORS')
        } catch (e) {
          console.warn(e.message)
        }
        this.resetIntermediateTensors()
        const a = new jv(this.weightMap, r, s, this.functionExecutorMap)
        this.tensorsMap = await this.executeWithControlFlow(e, a, t, n)
        const i = t.map((e) => Xw(e, this.tensorsMap, a)),
          o = i.map((e) => e.id),
          l = Object.keys(e).map((t) => e[t].id)
        return (
          (this.keepIds = new Set([...o, ...l, ...this.weightIds])),
          this.keepTensorForDebug || this.disposeTensorsMap(),
          null == this.parent && a.dispose(this.keepIds),
          i
        )
      }
      async executeFunctionAsync(e, t, n) {
        const r = e.reduce((e, t, n) => ((e[this.inputs[n].name] = t), e), {})
        return this._executeAsync(r, this.outputNodes, !0, t, n)
      }
      async executeWithControlFlow(e, t, n, r) {
        const s = Object.keys(e),
          a = s.map((e) => this.graph.nodes[Jw(e)[0]]),
          i = n.map((e) => Jw(e)[0])
        let o = i.map((e) => this.graph.nodes[e])
        0 === o.length && (o = this._outputs)
        const {
            usedNodes: l,
            missingInputs: u,
            dynamicNode: c,
            syncInputs: h,
          } = qv(e, o, this.weightMap, this._initNodes),
          p = [...a, ...this.graph.weights, ...(this._initNodes || [])].map(
            (e) => ({ node: e, contexts: t.currentContext }),
          ),
          d = Object.assign({}, this.weightMap)
        Object.keys(e).forEach((t) => {
          const [n, r] = Jw(t),
            s = []
          ;(s[r] = e[t]), (d[n] = s)
        })
        const f = {},
          m = this.getFrozenTensorIds(d),
          g = {}
        for (; p.length > 0; ) {
          const e = this.processStack(a, p, t, d, g, m, i, f, l)
          await Promise.all(e)
        }
        null != c ||
          r ||
          console.warn(
            'This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.',
          )
        const y = o
          .filter((e) => !Zv(e) && !Xw(e.name, d, t))
          .map((e) => e.name)
        if (y.length > 0) {
          let e = ''
          throw (
            (null != c &&
              (e = `Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${h}]`),
            new Error(
              `Cannot compute the outputs [${y}] from the provided inputs [${s}]. Consider providing the following inputs: [${u}]. ${e}`,
            ))
          )
        }
        return d
      }
      processStack(e, t, n, r, s, a, i, o, l) {
        const u = []
        for (; t.length > 0; ) {
          const e = t.pop()
          n.currentContext = e.contexts
          let c = ''
          if (
            ('Enter' === e.node.op &&
              Kw('isConstant', e.node, r, n) &&
              ([c] = Yw(e.node.name, n)),
            null == r[e.node.name])
          ) {
            const h = Hv(e.node, r, n, this._resourceManager)
            c || ([c] = Yw(e.node.name, n))
            const p = n.currentContext
            de(h)
              ? u.push(
                  h.then(
                    (u) => (
                      (r[c] = u),
                      (n.currentContext = p),
                      this.checkTensorForDisposal(c, e.node, r, n, a, i, o),
                      this.processChildNodes(e.node, t, n, r, s, l),
                      u
                    ),
                  ),
                )
              : ((r[c] = h),
                this.checkTensorForDisposal(c, e.node, r, n, a, i, o),
                this.processChildNodes(e.node, t, n, r, s, l))
          } else this.processChildNodes(e.node, t, n, r, s, l)
        }
        return u
      }
      processChildNodes(e, t, n, r, s, a) {
        e.children.forEach((e) => {
          const [i] = Yw(e.name, n)
          !s[i] &&
            a.has(e.name) &&
            ('Merge' === e.op
              ? e.inputNames.some((e) => !!Xw(e, r, n)) &&
                ((s[i] = !0), t.push({ contexts: n.currentContext, node: e }))
              : e.inputNames.every((e) => !!Xw(e, r, n)) &&
                ((s[i] = !0), t.push({ contexts: n.currentContext, node: e })))
        })
      }
      dispose() {
        Object.keys(this.weightMap).forEach((e) =>
          this.weightMap[e].forEach((e) => e.dispose()),
        )
      }
      checkInputShapeAndType(e) {
        Object.keys(e).forEach((t) => {
          const n = e[t],
            [r] = Jw(t),
            s = this.graph.nodes[r]
          if (s.attrParams.shape && s.attrParams.shape.value) {
            const e = s.attrParams.shape.value
            O(
              e.length === n.shape.length &&
                n.shape.every((t, n) => -1 === e[n] || e[n] === t),
              () =>
                `The shape of dict['${s.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`,
            )
          }
          s.attrParams.dtype &&
            s.attrParams.dtype.value &&
            O(
              n.dtype === s.attrParams.dtype.value,
              () =>
                `The dtype of dict['${s.name}'] provided in model.execute(dict) must be ${s.attrParams.dtype.value}, but was ${n.dtype}`,
            )
        })
      }
      mapInputs(e) {
        const t = {}
        for (const n in e)
          null != this._signature &&
          null != this._signature.inputs &&
          null != this._signature.inputs[n]
            ? (t[this._signature.inputs[n].name] = e[n])
            : (t[n] = e[n])
        return t
      }
      checkInputs(e) {
        const t = Object.keys(e).filter((e) => {
          const [t] = Jw(e)
          return null == this.graph.nodes[t]
        })
        if (t.length > 0)
          throw new Error(
            `The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`,
          )
      }
      mapOutputs(e) {
        return e.map(
          (e) =>
            null != this._signature &&
            null != this._signature.outputs &&
            null != this._signature.outputs[e]
              ? this._signature.outputs[e].name
              : e,
          {},
        )
      }
      checkOutputs(e) {
        e.forEach((e) => {
          const [t] = Jw(e)
          if (!this.graph.nodes[t])
            throw new Error(`The output '${e}' is not found in the graph`)
        })
      }
    }
    class tk {
      constructor(e = {}, t = {}) {
        ;(this.hashTableNameToHandle = e), (this.hashTableMap = t)
      }
      addHashTable(e, t) {
        ;(this.hashTableNameToHandle[e] = t.handle),
          (this.hashTableMap[t.id] = t)
      }
      getHashTableHandleByName(e) {
        return this.hashTableNameToHandle[e]
      }
      getHashTableById(e) {
        return this.hashTableMap[e]
      }
      dispose() {
        for (const e in this.hashTableMap)
          this.hashTableMap[e].clearAndClose(), delete this.hashTableMap[e]
        for (const e in this.hashTableNameToHandle)
          this.hashTableNameToHandle[e].dispose(),
            delete this.hashTableNameToHandle[e]
        /**
         * @license
         * Copyright 2018 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
      }
    }
    class nk {
      constructor(t, n = {}, r = e) {
        ;(this.modelUrl = t),
          (this.loadOptions = n),
          (this.version = 'n/a'),
          (this.io = r),
          null == n && (this.loadOptions = {}),
          (this.resourceManager = new tk())
      }
      get modelVersion() {
        return this.version
      }
      get inputNodes() {
        return this.executor.inputNodes
      }
      get outputNodes() {
        return this.executor.outputNodes
      }
      get inputs() {
        return this.executor.inputs
      }
      get outputs() {
        return this.executor.outputs
      }
      get weights() {
        return this.executor.weightMap
      }
      get metadata() {
        return this.artifacts.userDefinedMetadata
      }
      get modelSignature() {
        return this.signature
      }
      get modelStructuredOutputKeys() {
        return this.structuredOutputKeys
      }
      findIOHandler() {
        const e = this.modelUrl
        if (null != e.load) this.handler = e
        else if (null != this.loadOptions.requestInit)
          this.handler = this.io.browserHTTPRequest(e, this.loadOptions)
        else {
          const t = this.io.getLoadHandlers(e, this.loadOptions)
          if (0 === t.length)
            t.push(this.io.browserHTTPRequest(e, this.loadOptions))
          else if (t.length > 1)
            throw new Error(
              `Found more than one (${t.length}) load handlers for URL '${[e]}'`,
            )
          this.handler = t[0]
        }
      }
      load() {
        if ((this.findIOHandler(), null == this.handler.load))
          throw new Error(
            'Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.',
          )
        const e = this.handler.load()
        return de(e) ? e.then((e) => this.loadSync(e)) : this.loadSync(e)
      }
      loadSync(e) {
        this.artifacts = e
        const t = this.artifacts.modelTopology
        let n = this.artifacts.signature
        if (null != this.artifacts.userDefinedMetadata) {
          const e = this.artifacts.userDefinedMetadata
          null != e.signature && (n = e.signature),
            null != e.structuredOutputKeys &&
              (this.structuredOutputKeys = e.structuredOutputKeys)
        }
        ;(this.signature = n),
          (this.version = `${t.versions.producer}.${t.versions.minConsumer}`)
        const r = this.io.decodeWeights(
          this.artifacts.weightData,
          this.artifacts.weightSpecs,
        )
        if (
          ((this.executor = new ek(
            wv.Instance.transformGraph(t, this.signature),
          )),
          (this.executor.weightMap = this.convertTensorMapToTensorsMap(r)),
          (this.executor.resourceManager = this.resourceManager),
          null != e.modelInitializer && null != e.modelInitializer.node)
        ) {
          const t = wv.Instance.transformGraph(e.modelInitializer)
          ;(this.initializer = new ek(t)),
            (this.initializer.weightMap = this.executor.weightMap),
            (this.initializer.resourceManager = this.resourceManager),
            this.initializer.executeAsync({}, [])
        }
        return !0
      }
      async save(e, t) {
        if ('string' == typeof e) {
          const t = this.io.getSaveHandlers(e)
          if (0 === t.length)
            throw new Error(`Cannot find any save handlers for URL '${e}'`)
          if (t.length > 1)
            throw new Error(
              `Found more than one (${t.length}) save handlers for URL '${e}'`,
            )
          e = t[0]
        }
        if (null == e.save)
          throw new Error(
            'GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.',
          )
        return e.save(this.artifacts)
      }
      predict(e, t) {
        const n = this.execute(e, this.outputNodes)
        if (this.structuredOutputKeys) {
          const e = {}
          return (
            (n instanceof gs ? [n] : n).forEach(
              (t, n) => (e[this.structuredOutputKeys[n]] = t),
            ),
            e
          )
        }
        return n
      }
      normalizeInputs(e) {
        if (!(e instanceof gs || Array.isArray(e))) return e
        if ((e = Array.isArray(e) ? e : [e]).length !== this.inputNodes.length)
          throw new Error(
            `Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`,
          )
        return this.inputNodes.reduce((t, n, r) => ((t[n] = e[r]), t), {})
      }
      normalizeOutputs(e) {
        return (e = e || this.outputNodes), Array.isArray(e) ? e : [e]
      }
      execute(e, t) {
        ;(e = this.normalizeInputs(e)), (t = this.normalizeOutputs(t))
        const n = this.executor.execute(e, t)
        return n.length > 1 ? n : n[0]
      }
      async executeAsync(e, t) {
        ;(e = this.normalizeInputs(e)), (t = this.normalizeOutputs(t))
        const n = await this.executor.executeAsync(e, t)
        return n.length > 1 ? n : n[0]
      }
      getIntermediateTensors() {
        return this.executor.getIntermediateTensors()
      }
      disposeIntermediateTensors() {
        this.executor.disposeIntermediateTensors()
      }
      convertTensorMapToTensorsMap(e) {
        return Object.keys(e).reduce((t, n) => ((t[n] = [e[n]]), t), {})
      }
      dispose() {
        this.executor.dispose(),
          this.initializer && this.initializer.dispose(),
          this.resourceManager.dispose()
      }
    }
    async function rk(t, n = {}, r = e) {
      if (null == t)
        throw new Error(
          'modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model',
        )
      null == n && (n = {}),
        n.fromTFHub &&
          'string' == typeof t &&
          (t = (function (e) {
            return (
              e.endsWith('/') || (e += '/'), `${e}model.json?tfjs-format=file`
            )
          })(t))
      const s = new nk(t, n, r)
      return await s.load(), s
    }
    function sk(e, t, n = new Map(), r = new Set()) {
      if (null == e) return null
      if ('function' == typeof Blob && e instanceof Blob) return e.slice()
      if (r.has(e)) throw new Error('Circular references are not supported.')
      if (n.has(e)) return n.get(e)
      const s = t(e)
      if (s.recurse && null !== s.value)
        throw new Error(
          'A deep map function may not return both a value and recurse=true.',
        )
      if (s.recurse) {
        if (lk(e)) {
          const s = Array.isArray(e) ? [] : {}
          r.add(e)
          for (const a in e) {
            const i = sk(e[a], t, n, r)
            s[a] = i
          }
          return r.delete(e), e.__proto__ && (s.__proto__ = e.__proto__), s
        }
        throw new Error(`Can't recurse into non-iterable type: ${e}`)
      }
      return n.set(e, s.value), s.value
    }
    function ak(e, t = ok) {
      return ik(e, t)
    }
    function ik(e, t, n = new Set()) {
      const r = e[0]
      if (n.has(r)) throw new Error('Circular references are not supported.')
      const s = t(e)
      if (s.recurse && null !== s.value)
        throw new Error(
          'A deep zip function may not return both a value and recurse=true.',
        )
      if (s.recurse) {
        if (lk(r)) {
          const s = Array.isArray(r) ? [] : {}
          n.add(r)
          for (const a in r) {
            const r = ik(
              e.map((e) => e[a]),
              t,
              n,
            )
            s[a] = r
          }
          return n.delete(r), s
        }
        throw new Error(`Can't recurse into non-iterable type: ${r}`)
      }
      return s.value
    }
    function ok(e) {
      return null === e
        ? null
        : lk(e[0])
          ? { value: null, recurse: !0 }
          : { value: e, recurse: !1 }
    }
    function lk(e) {
      let t = !1
      if (ye().get('IS_BROWSER')) t = e instanceof TextDecoder
      else {
        const { StringDecoder: r } = n(551)
        t = e instanceof r
      }
      return (
        null != e &&
        !ArrayBuffer.isView(e) &&
        (Array.isArray(e) ||
          ('object' == typeof e &&
            !(e instanceof gs) &&
            !(e instanceof Promise) &&
            !t))
      )
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     *
     * =============================================================================
     */ function uk(e) {
      /**
       * @license
       * Copyright 2018 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       *
       * =============================================================================
       */
      return (function (e, t) {
        return sk(e, t)
      })(e, ck)
    }
    function ck(e) {
      return e instanceof gs
        ? { value: e.clone(), recurse: !1 }
        : lk(e)
          ? { value: null, recurse: !0 }
          : { value: e, recurse: !1 }
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     *
     * =============================================================================
     */ class hk {
      constructor(e) {
        if (((this.capacity = e), (this.begin = 0), (this.end = 0), null == e))
          throw new RangeError(
            "Can't create a ring buffer of unknown capacity.",
          )
        if (e < 1)
          throw new RangeError("Can't create ring buffer of capacity < 1.")
        ;(this.data = new Array(e)), (this.doubledCapacity = 2 * e)
      }
      wrap(e) {
        for (; e < 0; ) e += this.doubledCapacity
        return e % this.doubledCapacity
      }
      get(e) {
        if (e < 0) throw new RangeError("Can't get item at a negative index.")
        return this.data[e % this.capacity]
      }
      set(e, t) {
        if (e < 0) throw new RangeError("Can't set item at a negative index.")
        this.data[e % this.capacity] = t
      }
      length() {
        let e = this.end - this.begin
        return e < 0 && (e = this.doubledCapacity + e), e
      }
      isFull() {
        return this.length() === this.capacity
      }
      isEmpty() {
        return 0 === this.length()
      }
      push(e) {
        if (this.isFull()) throw new RangeError('Ring buffer is full.')
        this.set(this.end, e), (this.end = this.wrap(this.end + 1))
      }
      pushAll(e) {
        for (const t of e) this.push(t)
      }
      pop() {
        if (this.isEmpty()) throw new RangeError('Ring buffer is empty.')
        this.end = this.wrap(this.end - 1)
        const e = this.get(this.end)
        return this.set(this.end, void 0), e
      }
      unshift(e) {
        if (this.isFull()) throw new RangeError('Ring buffer is full.')
        ;(this.begin = this.wrap(this.begin - 1)), this.set(this.begin, e)
      }
      shift() {
        if (this.isEmpty()) throw new RangeError('Ring buffer is empty.')
        const e = this.get(this.begin)
        return (
          this.set(this.begin, void 0),
          (this.begin = this.wrap(this.begin + 1)),
          e
        )
      }
      shuffleExcise(e) {
        if (this.isEmpty()) throw new RangeError('Ring buffer is empty.')
        const t = this.wrap(this.begin + e),
          n = this.get(t)
        return this.set(t, this.pop()), n
        /**
         * @license
         * Copyright 2018 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         *
         * =============================================================================
         */
      }
    }
    class pk extends hk {
      constructor() {
        super(pk.INITIAL_CAPACITY)
      }
      isFull() {
        return !1
      }
      push(e) {
        super.isFull() && this.expand(), super.push(e)
      }
      unshift(e) {
        super.isFull() && this.expand(), super.unshift(e)
      }
      expand() {
        const e = 2 * this.capacity,
          t = new Array(e),
          n = this.length()
        for (let e = 0; e < n; e++) t[e] = this.get(this.wrap(this.begin + e))
        ;(this.data = t),
          (this.capacity = e),
          (this.doubledCapacity = 2 * this.capacity),
          (this.begin = 0),
          (this.end = n)
      }
    }
    pk.INITIAL_CAPACITY = 32
    class dk {
      async toArray() {
        const e = []
        let t = await this.next()
        for (; !t.done; ) e.push(t.value), (t = await this.next())
        return e
      }
      async toArrayForTest() {
        const e = this.prefetch(100),
          t = []
        let n = await e.next()
        for (; !n.done; ) t.push(n.value), (n = await e.next())
        return t
      }
      async resolveFully() {
        let e = await this.next()
        for (; !e.done; ) e = await this.next()
      }
      async resolveWhile(e) {
        let t = await this.next(),
          n = e(t.value)
        for (; !t.done && n; ) (t = await this.next()), (n = e(t.value))
      }
      handleErrors(e) {
        return new kk(this, e)
      }
      filter(e) {
        return new wk(this, e)
      }
      map(e) {
        return new vk(this, e)
      }
      mapAsync(e) {
        return new Ik(this, e)
      }
      serialMapAsync(e) {
        return new Ik(this, e).serial()
      }
      flatmap(e) {
        return new Sk(this, e)
      }
      async forEachAsync(e) {
        return this.map(e).resolveFully()
      }
      async serialForEach(e) {
        return this.serialMapAsync(e).resolveWhile((e) => !0 === e)
      }
      rowMajorBatch(e, t = !0) {
        return new xk(this, e, t)
      }
      columnMajorBatch(e, t = !0, n = ok) {
        return this.rowMajorBatch(e, t).map((e) => ak(e, n))
      }
      concatenate(e, t) {
        return new Tk(new fk([this, e]), t)
      }
      take(e) {
        return e < 0 || null == e ? this : new bk(this, e)
      }
      skip(e) {
        return e < 0 || null == e ? this : new yk(this, e)
      }
      prefetch(e) {
        return new $k(this, e)
      }
      shuffle(e, t) {
        return new Ek(this, e, t)
      }
      serial() {
        return new gk(this)
      }
    }
    class fk extends dk {
      constructor(e) {
        super(), (this.items = e), (this.trav = 0)
      }
      summary() {
        return `Array of ${this.items.length} items`
      }
      async next() {
        if (this.trav >= this.items.length) return { value: null, done: !0 }
        const e = this.items[this.trav]
        return this.trav++, { value: uk(e), done: !1 }
      }
    }
    class mk extends dk {
      constructor(e) {
        super(), (this.nextFn = e)
      }
      summary() {
        return 'Function call'
      }
      async next() {
        try {
          return this.nextFn()
        } catch (e) {
          throw (
            ((e.message = `Error thrown while iterating through a dataset: ${e.message}`),
            e)
          )
        }
      }
    }
    class gk extends dk {
      constructor(e) {
        super(),
          (this.upstream = e),
          (this.lastRead = Promise.resolve({ value: null, done: !1 }))
      }
      summary() {
        return `${this.upstream.summary()} -> Serial`
      }
      async next() {
        return (
          (this.lastRead = this.lastRead.then(() => this.serialNext())),
          this.lastRead
        )
      }
      async serialNext() {
        return this.upstream.next()
      }
    }
    class yk extends dk {
      constructor(e, t) {
        super(),
          (this.upstream = e),
          (this.maxCount = t),
          (this.count = 0),
          (this.lastRead = Promise.resolve({ value: null, done: !1 }))
      }
      summary() {
        return `${this.upstream.summary()} -> Skip`
      }
      async next() {
        return (
          (this.lastRead = this.lastRead.then(() => this.serialNext())),
          this.lastRead
        )
      }
      async serialNext() {
        for (; this.count++ < this.maxCount; ) {
          const e = await this.upstream.next()
          if (e.done) return e
          Ki(e.value)
        }
        return this.upstream.next()
      }
    }
    class bk extends dk {
      constructor(e, t) {
        super(), (this.upstream = e), (this.maxCount = t), (this.count = 0)
      }
      summary() {
        return `${this.upstream.summary()} -> Take`
      }
      async next() {
        return this.count++ >= this.maxCount
          ? { value: null, done: !0 }
          : this.upstream.next()
      }
    }
    class xk extends dk {
      constructor(e, t, n = !0) {
        super(),
          (this.upstream = e),
          (this.batchSize = t),
          (this.enableSmallLastBatch = n),
          (this.lastRead = Promise.resolve({ value: null, done: !1 }))
      }
      summary() {
        return `${this.upstream.summary()} -> RowMajorBatch`
      }
      async next() {
        return (
          (this.lastRead = this.lastRead.then(() => this.serialNext())),
          this.lastRead
        )
      }
      async serialNext() {
        const e = []
        for (; e.length < this.batchSize; ) {
          const t = await this.upstream.next()
          if (t.done)
            return this.enableSmallLastBatch && e.length > 0
              ? { value: e, done: !1 }
              : { value: null, done: !0 }
          e.push(t.value)
        }
        return { value: e, done: !1 }
      }
    }
    class wk extends dk {
      constructor(e, t) {
        super(),
          (this.upstream = e),
          (this.predicate = t),
          (this.lastRead = Promise.resolve({ value: null, done: !1 }))
      }
      summary() {
        return `${this.upstream.summary()} -> Filter`
      }
      async next() {
        return (
          (this.lastRead = this.lastRead.then(() => this.serialNext())),
          this.lastRead
        )
      }
      async serialNext() {
        for (;;) {
          const e = await this.upstream.next()
          if (e.done || this.predicate(e.value)) return e
          Ki(e.value)
        }
      }
    }
    class vk extends dk {
      constructor(e, t) {
        super(), (this.upstream = e), (this.transform = t)
      }
      summary() {
        return `${this.upstream.summary()} -> Map`
      }
      async next() {
        const e = await this.upstream.next()
        if (e.done) return { value: null, done: !0 }
        const t = Es(e.value),
          n = this.transform(e.value),
          r = Es(n)
        for (const e of t) $s(e, r) || e.dispose()
        return { value: n, done: !1 }
      }
    }
    class kk extends dk {
      constructor(e, t) {
        super(),
          (this.upstream = e),
          (this.handler = t),
          (this.count = 0),
          (this.lastRead = Promise.resolve({ value: null, done: !1 }))
      }
      summary() {
        return `${this.upstream.summary()} -> handleErrors`
      }
      async next() {
        return (
          (this.lastRead = this.lastRead.then(() => this.serialNext())),
          this.lastRead
        )
      }
      async serialNext() {
        for (;;)
          try {
            return await this.upstream.next()
          } catch (e) {
            if (!this.handler(e)) return { value: null, done: !0 }
          }
      }
    }
    class Ik extends dk {
      constructor(e, t) {
        super(), (this.upstream = e), (this.transform = t)
      }
      summary() {
        return `${this.upstream.summary()} -> AsyncMap`
      }
      async next() {
        const e = await this.upstream.next()
        if (e.done) return { value: null, done: !0 }
        const t = Es(e.value),
          n = await this.transform(e.value),
          r = Es(n)
        for (const e of t) $s(e, r) || e.dispose()
        return { value: n, done: !1 }
      }
    }
    class Nk extends dk {
      constructor() {
        super(),
          (this.outputQueue = new pk()),
          (this.lastRead = Promise.resolve({ value: null, done: !1 }))
      }
      async next() {
        return (
          (this.lastRead = this.lastRead.then(() => this.serialNext())),
          this.lastRead
        )
      }
      async serialNext() {
        for (; 0 === this.outputQueue.length(); )
          if (!(await this.pump())) return { value: null, done: !0 }
        return { value: this.outputQueue.shift(), done: !1 }
      }
    }
    class Sk extends Nk {
      constructor(e, t) {
        super(), (this.upstream = e), (this.transform = t)
      }
      summary() {
        return `${this.upstream.summary()} -> Flatmap`
      }
      async pump() {
        const e = await this.upstream.next()
        if (e.done) return !1
        const t = Es(e.value),
          n = this.transform(e.value),
          r = Es(n)
        this.outputQueue.pushAll(n)
        for (const e of t) $s(e, r) || e.dispose()
        return !0
      }
    }
    class Tk extends dk {
      constructor(e, t) {
        super(),
          (this.baseErrorHandler = t),
          (this.lastRead = null),
          (this.iterator = null),
          (this.moreIterators = e)
      }
      summary() {
        return 'TODO: fill in upstream of chained summaries -> Chained'
      }
      async next() {
        return (
          (this.lastRead = this.readFromChain(this.lastRead)), this.lastRead
        )
      }
      async readFromChain(e) {
        if ((await e, null == this.iterator)) {
          const e = await this.moreIterators.next()
          if (e.done) return { value: null, done: !0 }
          ;(this.iterator = e.value),
            null != this.baseErrorHandler &&
              (this.iterator = this.iterator.handleErrors(
                this.baseErrorHandler,
              ))
        }
        const t = await this.iterator.next()
        return t.done ? ((this.iterator = null), this.readFromChain(e)) : t
      }
    }
    var Ck
    !(function (e) {
      ;(e[(e.FAIL = 0)] = 'FAIL'),
        (e[(e.SHORTEST = 1)] = 'SHORTEST'),
        (e[(e.LONGEST = 2)] = 'LONGEST')
    })(Ck || (Ck = {}))
    class $k extends dk {
      constructor(e, t) {
        super(),
          (this.upstream = e),
          (this.bufferSize = t),
          (this.buffer = new hk(t))
      }
      summary() {
        return `${this.upstream.summary()} -> Prefetch`
      }
      refill() {
        for (; !this.buffer.isFull(); ) {
          const e = this.upstream.next()
          this.buffer.push(e)
        }
      }
      next() {
        return this.refill(), this.buffer.shift()
      }
    }
    class Ek extends $k {
      constructor(e, t, n) {
        super(e, t),
          (this.upstream = e),
          (this.windowSize = t),
          (this.upstreamExhausted = !1),
          (this.random = Ju.alea(n || ts().toString())),
          (this.lastRead = Promise.resolve({ value: null, done: !1 }))
      }
      async next() {
        return (
          (this.lastRead = this.lastRead.then(() => this.serialNext())),
          this.lastRead
        )
      }
      randomInt(e) {
        return Math.floor(this.random() * e)
      }
      chooseIndex() {
        return this.randomInt(this.buffer.length())
      }
      async serialNext() {
        for (
          this.upstreamExhausted || this.refill();
          !this.buffer.isEmpty();

        ) {
          const e = this.chooseIndex(),
            t = await this.buffer.shuffleExcise(e)
          if (!t.done) return this.refill(), t
          this.upstreamExhausted = !0
        }
        return { value: null, done: !0 }
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     *
     * =============================================================================
     */ class Rk {
      constructor() {
        this.size = null
      }
      batch(e, t = !0) {
        const n = this
        let r
        return (
          O(
            e > 0,
            () => `batchSize needs to be positive, but it is\n      ${e}`,
          ),
          (r =
            this.size === 1 / 0 || null == this.size
              ? this.size
              : t
                ? Math.ceil(this.size / e)
                : Math.floor(this.size / e)),
          Ak(async () => (await n.iterator()).columnMajorBatch(e, t, _k), r)
        )
      }
      concatenate(e) {
        const t = this
        let n
        return (
          (n =
            this.size === 1 / 0 || e.size === 1 / 0
              ? 1 / 0
              : null != this.size && null != e.size
                ? this.size + e.size
                : null),
          Ak(
            async () => (await t.iterator()).concatenate(await e.iterator()),
            n,
          )
        )
      }
      filter(e) {
        const t = this
        let n
        return (
          (n = this.size === 1 / 0 ? 1 / 0 : null),
          Ak(async () => (await t.iterator()).filter((t) => qi(() => e(t))), n)
        )
      }
      async forEachAsync(e) {
        return (await this.iterator()).forEachAsync(e)
      }
      map(e) {
        const t = this
        return Ak(
          async () => (await t.iterator()).map((t) => qi(() => e(t))),
          this.size,
        )
      }
      mapAsync(e) {
        const t = this
        return Ak(async () => (await t.iterator()).mapAsync(e), this.size)
      }
      prefetch(e) {
        if (null == e)
          throw new RangeError(
            '`Dataset.prefetch()` requires bufferSize to be specified.',
          )
        const t = this
        return Ak(async () => (await t.iterator()).prefetch(e), this.size)
      }
      repeat(e) {
        const t = this
        let n
        return (
          (n =
            null != this.size && e > 0
              ? this.size * e
              : 0 === e
                ? 0
                : null != this.size && (void 0 === e || e < 0)
                  ? 1 / 0
                  : null),
          Ak(
            async () =>
              (function (e, t) {
                return new Tk(e, t)
              })(
                (function (e) {
                  return new mk(e)
                })(async () => ({ value: await t.iterator(), done: !1 })).take(
                  e,
                ),
              ),
            n,
          )
        )
      }
      skip(e) {
        const t = this
        let n
        return (
          (n =
            null != this.size && e >= 0 && this.size >= e
              ? this.size - e
              : null != this.size && (this.size < e || void 0 === e || e < 0)
                ? 0
                : null),
          Ak(async () => (await t.iterator()).skip(e), n)
        )
      }
      shuffle(e, t, n = !0) {
        if (null == e || e < 0)
          throw null == this.size
            ? new RangeError(
                '`Dataset.shuffle()` requires bufferSize to be specified.',
              )
            : new RangeError(
                `\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`,
              )
        const r = this,
          s = Ju.alea(t || ts().toString())
        return Ak(async () => {
          let t = s.int32()
          return (
            n && (t += s.int32()), (await r.iterator()).shuffle(e, t.toString())
          )
        }, this.size)
      }
      take(e) {
        const t = this
        let n
        return (
          (n =
            null != this.size && this.size > e
              ? e
              : null != this.size && this.size <= e
                ? this.size
                : null),
          Ak(async () => (await t.iterator()).take(e), n)
        )
      }
      async toArray() {
        if (this.size === 1 / 0)
          throw new Error('Can not convert infinite data stream to array.')
        return (await this.iterator()).toArray()
      }
      async toArrayForTest() {
        if (this.size === 1 / 0)
          throw new Error('Can not convert infinite data stream to array.')
        return (await this.iterator()).toArrayForTest()
      }
    }
    function Ak(e, t = null) {
      return new (class extends Rk {
        constructor() {
          super(...arguments), (this.size = t)
        }
        async iterator() {
          return e()
        }
      })()
    }
    function _k(e) {
      if (null === e) return null
      return null == (t = e[0]) ||
        null === (n = t) ||
        ('object' != typeof n && 'function' != typeof n) ||
        Array.isArray(t) ||
        ('object' == typeof t && t instanceof gs) ||
        Z(t)
        ? {
            value: (function (e) {
              if (0 === e.length)
                throw new Error("Can't make a batch of zero elements.")
              return e[0] instanceof gs ? Mc(e) : Xs(e)
            })(e),
            recurse: !1,
          }
        : { value: null, recurse: !0 }
      var t, n
    }
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function Fk(e, t) {
      Array.isArray(e) || (e = [e]),
        e.forEach((e) => {
          null != e &&
            O(
              'complex64' !== e.dtype,
              () =>
                `${t} does not support complex64 tensors in the CPU backend.`,
            )
        })
    }
    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ ;(Rk.MAX_BUFFER_SIZE = 1e4),
      /**
       * @license
       * Copyright 2018 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       *
       * =============================================================================
       */ Symbol('out'),
      Symbol('field'),
      Symbol('quote'),
      Symbol('quoteafterquote'),
      Symbol('quoteinquote')
    const Dk = Jc
    class Ok extends E {
      constructor() {
        super(),
          (this.blockSize = 48),
          (this.firstUse = !0),
          (this.data = new $(this, Hi()))
      }
      nextDataId() {
        return Ok.nextDataId++
      }
      write(e, t, n) {
        this.firstUse &&
          ((this.firstUse = !1),
          ye().get('IS_NODE') &&
            Er(
              '\n============================\nHi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. \n============================',
            ))
        const r = { id: this.nextDataId() }
        return this.data.set(r, { values: e, dtype: n, refCount: 1 }), r
      }
      makeTensorInfo(e, t, n) {
        let r
        if ('string' === t && null != n && n.length > 0 && Q(n[0])) {
          const s = n.map((e) => ns(e))
          r = this.write(s, e, t)
        } else r = this.write(n, e, t)
        return { dataId: r, shape: e, dtype: t }
      }
      refCount(e) {
        return this.data.has(e) ? this.data.get(e).refCount : 0
      }
      incRef(e) {
        this.data.get(e).refCount++
      }
      decRef(e) {
        this.data.has(e) && this.data.get(e).refCount--
      }
      move(e, t, n, r, s) {
        this.data.set(e, { values: t, dtype: r, refCount: s })
      }
      numDataIds() {
        return this.data.numDataIds()
      }
      async read(e) {
        return this.readSync(e)
      }
      readSync(e) {
        const { dtype: t, complexTensorInfos: n } = this.data.get(e)
        return 'complex64' === t
          ? rd(this.readSync(n.real.dataId), this.readSync(n.imag.dataId))
          : this.data.get(e).values
      }
      bufferSync(e) {
        const t = this.readSync(e.dataId)
        if ('string' === e.dtype)
          try {
            const n = t.map((e) => rs(e))
            return qa(e.shape, e.dtype, n)
          } catch (e) {
            throw new Error('Failed to decode encoded string bytes into utf-8')
          }
        return qa(e.shape, e.dtype, t)
      }
      makeOutput(e, t, n) {
        return Hi().makeTensorFromTensorInfo(this.makeTensorInfo(t, n, e), this)
      }
      disposeData(e, t = !1) {
        if (this.data.has(e)) {
          if (
            (this.data.get(e).refCount--, !t && this.data.get(e).refCount > 0)
          )
            return !1
          const { complexTensorInfos: n } = this.data.get(e)
          null != n &&
            (this.disposeData(n.real.dataId, !0),
            this.disposeData(n.imag.dataId, !0)),
            this.data.delete(e)
        }
        return !0
      }
      disposeIntermediateTensorInfo(e) {
        this.disposeData(e.dataId)
      }
      async time(e) {
        const t = ts()
        return e(), { kernelMs: ts() - t }
      }
      memory() {
        return {
          unreliable: !0,
          reasons: [
            'The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less.',
          ],
        }
      }
      where(e) {
        Fk([e], 'where')
        const t = this.readSync(e.dataId)
        return Dk(e.shape, t)
      }
      dispose() {}
      floatPrecision() {
        return 32
      }
      epsilon() {
        return super.epsilon()
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function Mk(e, t, n) {
      return ({ inputs: r, attrs: s, backend: a }) => {
        const { x: i } = r
        if ((Fk(i, e), 'string' === i.dtype || 'string' === n))
          throw new Error(
            'unaryKernelFunc does not support string input/output',
          )
        const o = a,
          l = o.data.get(i.dataId).values,
          u = P(i.shape),
          c = n || i.dtype,
          h = X(c, u)
        for (let e = 0; e < u; ++e) h[e] = t(l[e], s)
        return o.makeTensorInfo(i.shape, c, h)
      }
    }
    function Lk(e, t, n) {
      return ({ inputs: r, attrs: s, backend: a }) => {
        const { x: i } = r
        if ((Fk(i, e), 'string' === i.dtype || 'string' === n))
          throw new Error(
            'unaryKernelFunc does not support string input/output',
          )
        const o = a,
          l = o.data.get(i.dataId).values,
          u = n || i.dtype,
          c = t(l, u, s)
        return o.makeTensorInfo(i.shape, u, c)
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ ;(Ok.nextDataId = 0), Yi('cpu', () => new Ok(), 1)
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const zk = Mk(bt, (e) => (e >= 0 ? e : Math.exp(e) - 1)),
      Pk = { kernelName: bt, backendName: 'cpu', kernelFunc: zk }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Bk(e) {
      const { inputs: t, backend: n } = e,
        { x: r } = t
      return (
        n.incRef(r.dataId), { dataId: r.dataId, shape: r.shape, dtype: r.dtype }
      )
    }
    const Wk = { kernelName: Ot, backendName: 'cpu', kernelFunc: Bk }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Vk(e) {
      const { inputs: t, backend: n, attrs: r } = e,
        { x: s } = t,
        { alpha: a } = r
      Fk([s], 'leakyRelu')
      const i = P(s.shape),
        o = n.data.get(s.dataId).values,
        l = K('float32', i)
      for (let e = 0; e < o.length; e++) l[e] = o[e] < 0 ? a * o[e] : o[e]
      return n.makeTensorInfo(s.shape, 'float32', l)
    }
    const Uk = { kernelName: Wt, backendName: 'cpu', kernelFunc: Vk }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Gk(e) {
      return (t, n, r, s, a) => {
        const i = xi(t, n),
          o = i.length,
          l = se(i),
          u = K(a, P(i)),
          c = t.length,
          h = n.length,
          p = se(t),
          d = se(n),
          f = yi(t, i),
          m = yi(n, i)
        if (f.length + m.length === 0)
          for (let t = 0; t < u.length; ++t)
            u[t] = e(r[t % r.length], s[t % s.length])
        else
          for (let t = 0; t < u.length; ++t) {
            const n = pe(t, o, l),
              a = n.slice(-c)
            f.forEach((e) => (a[e] = 0))
            const i = he(a, c, p),
              g = n.slice(-h)
            m.forEach((e) => (g[e] = 0))
            const y = he(g, h, d)
            u[t] = e(r[i], s[y])
          }
        return [u, i]
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Hk = Gk((e, t) => (e < 0 ? t * e : e))
    function jk(e) {
      const { inputs: t, backend: n } = e,
        { x: r, alpha: s } = t
      Fk([r, s], 'prelu')
      const a = n.data.get(r.dataId).values,
        i = n.data.get(s.dataId).values,
        [o, l] = Hk(r.shape, s.shape, a, i, 'float32')
      return n.makeTensorInfo(l, 'float32', o)
    }
    const qk = { kernelName: In, backendName: 'cpu', kernelFunc: jk },
      Kk = Mk(Rn, (e) => Math.max(0, e)),
      Xk = { kernelName: Rn, backendName: 'cpu', kernelFunc: Kk },
      Yk = Mk(Mn, (e) => Math.min(Math.max(0, e), 6)),
      Zk = { kernelName: Mn, backendName: 'cpu', kernelFunc: Yk }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function Jk(e) {
      return (t, n, r) => {
        const s = K(n, t.length)
        for (let n = 0; n < t.length; ++n) s[n] = e(t[n], r)
        return s
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const Qk = Jk((e) => 1 / (1 + Math.exp(-e))),
      eI = Mk(Kn, (e) => 1 / (1 + Math.exp(-e))),
      tI = { kernelName: Kn, backendName: 'cpu', kernelFunc: eI }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function nI(e, t, n, r, s) {
      if ('linear' === n) return Bk({ inputs: { x: t }, backend: e })
      if ('relu' === n) return Kk({ inputs: { x: t }, backend: e })
      if ('elu' === n) return zk({ inputs: { x: t }, backend: e })
      if ('relu6' === n) return Yk({ inputs: { x: t }, backend: e })
      if ('prelu' === n) return jk({ inputs: { x: t, alpha: r }, backend: e })
      if ('leakyrelu' === n)
        return Vk({ inputs: { x: t }, backend: e, attrs: { alpha: s } })
      if ('sigmoid' === n) return eI({ inputs: { x: t }, backend: e })
      throw new Error(
        `Activation ${n} has not been implemented for the CPU backend.`,
      )
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function rI(e) {
      const { inputs: t, backend: n } = e,
        { real: r, imag: s } = t,
        a = n.data.get(r.dataId).values,
        i = n.data.get(s.dataId).values,
        o = n.makeTensorInfo(r.shape, 'complex64')
      return (
        (n.data.get(o.dataId).complexTensorInfos = {
          real: n.makeTensorInfo(r.shape, 'float32', a),
          imag: n.makeTensorInfo(s.shape, 'float32', i),
        }),
        o
      )
    }
    const sI = { kernelName: qe, backendName: 'cpu', kernelFunc: rI }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function aI(e, t, n = 'float32') {
      if ('complex64' === n)
        return rI({
          inputs: { real: aI(e, t, 'float32'), imag: aI(e, t, 'float32') },
          backend: e,
        })
      const r = le(P(t), n)
      return e.makeTensorInfo(t, n, r)
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function iI(e) {
      const { inputs: t, backend: n } = e,
        { input: r } = t,
        s = n.data.get(r.dataId).complexTensorInfos.real,
        a = n.data.get(s.dataId).values
      return n.makeTensorInfo(s.shape, s.dtype, a)
    }
    const oI = { kernelName: $n, backendName: 'cpu', kernelFunc: iI }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function lI(e, t, n, r) {
      if ('int32' === r) return [t, 'int32', Int32Array.from(e)]
      if ('bool' === r) {
        const r = es([0], n),
          [s, a] = Gk((e, t) => (e !== t ? 1 : 0))(t, [], e, r, 'bool')
        return [a, 'bool', s]
      }
      throw new Error(`Error in Cast: failed to cast ${n} to ${r}`)
    }
    function uI(e) {
      const { inputs: t, backend: n, attrs: r } = e,
        { x: s } = t,
        { dtype: a } = r
      if ('complex64' === a) {
        if ('complex64' === s.dtype) return Bk({ inputs: { x: s }, backend: n })
        const e = aI(n, s.shape, s.dtype),
          t = uI({ inputs: { x: s }, backend: n, attrs: { dtype: 'float32' } }),
          r = rI({ inputs: { real: t, imag: e }, backend: n })
        return (
          n.disposeIntermediateTensorInfo(e),
          n.disposeIntermediateTensorInfo(t),
          r
        )
      }
      if ('complex64' === s.dtype) {
        const e = iI({ inputs: { input: s }, backend: n }),
          t = uI({ inputs: { x: e }, backend: n, attrs: { dtype: a } })
        return n.disposeIntermediateTensorInfo(e), t
      }
      if (!Y(s.dtype, a)) {
        const e = Bk({ inputs: { x: s }, backend: n })
        return { dataId: e.dataId, shape: e.shape, dtype: a }
      }
      const i = n.data.get(s.dataId).values,
        [o, l, u] = lI(i, s.shape, s.dtype, a)
      return n.makeTensorInfo(o, l, u)
    }
    const cI = { kernelName: Ge, backendName: 'cpu', kernelFunc: uI }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function hI(e, t, n, r) {
      return null == n
        ? ({ inputs: n, backend: s }) => {
            const { a: a, b: i } = n,
              o = s
            Fk([a, i], e)
            const l = o.data.get(a.dataId).values,
              u = o.data.get(i.dataId).values,
              c = 'string' === a.dtype ? Ld(l) : l,
              h = 'string' === a.dtype ? Ld(u) : u,
              p = r || a.dtype,
              [d, f] = t(a.shape, i.shape, c, h, p)
            return o.makeTensorInfo(f, p, d)
          }
        : ({ inputs: e, backend: s }) => {
            const { a: a, b: i } = e,
              o = s
            if ('complex64' === a.dtype || 'complex64' === i.dtype) {
              const e = uI({
                  inputs: { x: a },
                  backend: o,
                  attrs: { dtype: 'complex64' },
                }),
                t = o.data.get(e.dataId),
                r = t.complexTensorInfos.real,
                s = t.complexTensorInfos.imag,
                l = o.data.get(r.dataId).values,
                u = o.data.get(s.dataId).values,
                c = uI({
                  inputs: { x: i },
                  backend: o,
                  attrs: { dtype: 'complex64' },
                }),
                h = o.data.get(c.dataId),
                p = h.complexTensorInfos.real,
                d = h.complexTensorInfos.imag,
                f = o.data.get(p.dataId).values,
                m = o.data.get(d.dataId).values,
                [g, y, b] = n(a.shape, i.shape, l, u, f, m),
                x = o.makeTensorInfo(b, 'float32', g),
                w = o.makeTensorInfo(b, 'float32', y),
                v = rI({ inputs: { real: x, imag: w }, backend: o })
              return (
                o.disposeIntermediateTensorInfo(e),
                o.disposeIntermediateTensorInfo(c),
                o.disposeIntermediateTensorInfo(x),
                o.disposeIntermediateTensorInfo(w),
                v
              )
            }
            {
              const e = o.data.get(a.dataId).values,
                n = o.data.get(i.dataId).values,
                s = r || a.dtype,
                [l, u] = t(a.shape, i.shape, e, n, s)
              return o.makeTensorInfo(u, s, l)
            }
          }
    }
    function pI(e) {
      return (t, n, r, s, a, i) => {
        const o = xi(t, n),
          l = P(o),
          u = o.length,
          c = se(o),
          h = K('float32', l),
          p = K('float32', l),
          d = yi(t, o),
          f = yi(n, o),
          m = rd(r, s),
          g = rd(a, i),
          y = t.length,
          b = se(t),
          x = n.length,
          w = se(n)
        if (d.length + f.length === 0)
          for (let t = 0; t < h.length; t++) {
            const n = t % m.length,
              r = t % g.length,
              s = e(m[2 * n], m[2 * n + 1], g[2 * r], g[2 * r + 1])
            ;(h[t] = s.real), (p[t] = s.imag)
          }
        else
          for (let t = 0; t < h.length; t++) {
            const n = pe(t, u, c),
              r = n.slice(-y)
            d.forEach((e) => (r[e] = 0))
            const s = he(r, y, b),
              a = n.slice(-x)
            f.forEach((e) => (a[e] = 0))
            const i = he(a, x, w),
              o = e(m[2 * s], m[2 * s + 1], g[2 * i], g[2 * i + 1])
            ;(h[t] = o.real), (p[t] = o.imag)
          }
        return [h, p, o]
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const dI = Gk((e, t) => e + t),
      fI = pI((e, t, n, r) => ({ real: e + n, imag: t + r })),
      mI = hI(Se, dI, fI),
      gI = { kernelName: Se, backendName: 'cpu', kernelFunc: mI }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function yI(e) {
      const { inputs: t, backend: n, attrs: r } = e,
        { x: s } = t,
        { shape: a } = r,
        i = P(s.shape),
        o = H(a, i),
        l = P(o)
      O(
        i === l,
        () =>
          `The new shape (${o}) has ${l} elements and the old shape (${s.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`,
      ),
        n.incRef(s.dataId)
      const u = n.data.get(s.dataId)
      if (null != u.complexTensorInfos) {
        const e = u.complexTensorInfos.real,
          t = u.complexTensorInfos.imag
        ;(e.shape = o), (t.shape = o)
      }
      return { dataId: s.dataId, shape: o, dtype: s.dtype }
    }
    const bI = { kernelName: An, backendName: 'cpu', kernelFunc: yI }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function xI(e) {
      const { inputs: t, backend: n, attrs: r } = e,
        { a: s, b: a } = t,
        { transposeA: i, transposeB: o } = r
      Fk([s, a], 'matMul')
      const l = s.shape.length,
        u = a.shape.length,
        c = i ? s.shape[l - 2] : s.shape[l - 1],
        h = o ? a.shape[u - 1] : a.shape[u - 2],
        p = i ? s.shape[l - 1] : s.shape[l - 2],
        d = o ? a.shape[u - 2] : a.shape[u - 1],
        f = s.shape.slice(0, -2),
        m = a.shape.slice(0, -2),
        g = P(f),
        y = P(m),
        b = xi(s.shape.slice(0, -2), a.shape.slice(0, -2)).concat([p, d])
      O(
        c === h,
        () =>
          `Error in matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${s.shape} and ${a.shape} and transposeA=${i} and transposeB=${o} must match.`,
      )
      const x = o ? [y, d, h] : [y, h, d],
        w = yI({
          inputs: { x: s },
          backend: n,
          attrs: { shape: i ? [g, c, p] : [g, p, c] },
        }),
        v = yI({ inputs: { x: a }, backend: n, attrs: { shape: x } }),
        k = i ? w.shape[1] : w.shape[2],
        I = i ? w.shape[2] : w.shape[1],
        N = o ? v.shape[1] : v.shape[2],
        S = Math.max(g, y),
        T = n.data.get(w.dataId).values,
        C = n.data.get(v.dataId).values,
        $ = se(w.shape),
        E = se(v.shape),
        [R, A, _] = i ? [$[0], 1, $[1]] : [$[0], $[1], 1],
        [F, D, M] = o ? [1, E[1], E[0]] : [E[1], 1, E[0]],
        L = I * N,
        z = qa([S, I, N], w.dtype),
        B = z.values,
        W = n.blockSize
      for (let e = 0; e < S; e++)
        for (let t = 0; t < I; t += W)
          for (let n = 0; n < N; n += W)
            for (let r = 0; r < k; r += W) {
              const s = Math.min(t + W, I),
                a = Math.min(n + W, N),
                i = Math.min(r + W, k)
              for (let o = t; o < s; o++)
                for (let t = n; t < a; t++) {
                  let n = 0
                  for (let s = r; s < i; s++) {
                    const r = Math.min(e, g - 1) * R,
                      a = Math.min(e, y - 1) * M
                    n += T[r + o * A + s * _] * C[s * F + t * D + a]
                  }
                  B[e * L + (o * N + t)] += n
                }
            }
      return (
        n.disposeIntermediateTensorInfo(w),
        n.disposeIntermediateTensorInfo(v),
        n.makeTensorInfo(b, z.dtype, z.values)
      )
    }
    const wI = { kernelName: Be, backendName: 'cpu', kernelFunc: xI },
      vI = {
        kernelName: Tr,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the License);
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an AS IS BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { a: s, b: a, bias: i, preluActivationWeights: o } = t,
              {
                transposeA: l,
                transposeB: u,
                activation: c,
                leakyreluAlpha: h,
              } = r
            let p, d, f
            const m = []
            ;(p = xI({
              inputs: { a: s, b: a },
              attrs: { transposeA: l, transposeB: u },
              backend: n,
            })),
              i &&
                ((d = mI({ inputs: { a: p, b: i }, backend: n })),
                m.push(p),
                (p = d)),
              c && ((f = nI(n, p, c, o, h)), m.push(p), (p = f))
            for (const e of m) n.disposeIntermediateTensorInfo(e)
            return p
          },
      }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function kI(e) {
      const t = new Float32Array(e.length)
      for (let n = 0; n < e.length; ++n) t[n] = Math.abs(e[n])
      return t
    }
    const II = {
        kernelName: ke,
        backendName: 'cpu',
        kernelFunc: (e) => {
          const { x: t } = e.inputs,
            n = e.backend
          Fk(t, 'abs')
          let r = new Float32Array(P(t.shape))
          return (
            (r = kI(n.data.get(t.dataId).values)),
            n.makeOutput(r, t.shape, t.dtype)
          )
        },
      },
      NI = Mk(Ie, (e) => Math.acos(e)),
      SI = { kernelName: Ie, backendName: 'cpu', kernelFunc: NI },
      TI = Mk(Ne, (e) => Math.acosh(e)),
      CI = { kernelName: Ne, backendName: 'cpu', kernelFunc: TI },
      $I = {
        kernelName: Te,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n } = e,
              r = t
            Fk(t, 'addN')
            const s = r.map((e) => n.data.get(e.dataId).values),
              a = qa(r[0].shape, r[0].dtype),
              i = a.values
            for (let e = 0; e < r.length; e++) {
              const t = s[e]
              for (let e = 0; e < i.length; e++) i[e] += t[e]
            }
            return n.makeTensorInfo(a.shape, a.dtype, a.values)
          },
      }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function EI(e, t, n, r, s) {
      const a = t.length,
        i = P(t),
        o = se(t),
        l = se(s),
        u = K(n, P(s))
      for (let t = 0; t < i; ++t) {
        const n = pe(t, a, o),
          s = new Array(n.length)
        for (let e = 0; e < s.length; e++) s[e] = n[r[e]]
        u[he(s, a, l)] = e[t]
      }
      return u
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function RI(e) {
      const { inputs: t, attrs: n, backend: r } = e,
        { x: s } = t,
        { perm: a } = n
      Fk(s, 'transpose')
      const i = s.shape.length,
        o = new Array(i)
      for (let e = 0; e < o.length; e++) o[e] = s.shape[a[e]]
      const l = EI(r.data.get(s.dataId).values, s.shape, s.dtype, a, o)
      return { dataId: r.write(l, o, s.dtype), shape: o, dtype: s.dtype }
    }
    const AI = { kernelName: br, backendName: 'cpu', kernelFunc: RI },
      _I = {
        kernelName: Ce,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s } = t,
              { axis: a, keepDims: i } = r
            Fk(s, 'all')
            const o = j(a, s.shape)
            let l = o
            const u = Al(l, s.shape.length)
            let c = s
            null != u &&
              ((c = RI({ inputs: { x: s }, backend: n, attrs: { perm: u } })),
              (l = Fl(l.length, s.shape.length))),
              Rl('all', l, c.shape.length)
            const [h, p] = $l(c.shape, l),
              d = P(p),
              f = le(P(h), c.dtype),
              m = n.data.get(c.dataId).values
            for (let e = 0; e < f.length; ++e) {
              const t = e * d
              let n = m[t]
              for (let e = 0; e < d; ++e) {
                const r = m[t + e]
                n = n && r
              }
              f[e] = n
            }
            null != u && n.disposeIntermediateTensorInfo(c)
            const g = n.makeTensorInfo(h, c.dtype, f)
            if (i) {
              const e = yI({
                inputs: { x: g },
                backend: n,
                attrs: { shape: El(h, o) },
              })
              return n.disposeIntermediateTensorInfo(g), e
            }
            return g
          },
      },
      FI = {
        kernelName: $e,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s } = t,
              { axis: a, keepDims: i } = r
            Fk(s, 'any')
            const o = j(a, s.shape)
            let l = o
            const u = Al(l, s.shape.length)
            let c = s
            null != u &&
              ((c = RI({ inputs: { x: s }, backend: n, attrs: { perm: u } })),
              (l = Fl(l.length, s.shape.length))),
              Rl('any', l, c.shape.length)
            const [h, p] = $l(c.shape, l),
              d = P(p),
              f = le(P(h), c.dtype),
              m = n.data.get(c.dataId).values
            for (let e = 0; e < f.length; ++e) {
              const t = e * d
              let n = m[t]
              for (let e = 0; e < d; ++e) {
                const r = m[t + e]
                n = n || r
              }
              f[e] = n
            }
            null != u && n.disposeIntermediateTensorInfo(c)
            const g = n.makeTensorInfo(h, c.dtype, f)
            if (i) {
              const e = yI({
                inputs: { x: g },
                backend: n,
                attrs: { shape: El(h, o) },
              })
              return n.disposeIntermediateTensorInfo(g), e
            }
            return g
          },
      },
      DI = {
        kernelName: Ee,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s } = t,
              { axis: a } = r
            Fk(s, 'argMax')
            let i = j(a, s.shape)
            const o = Al(i, s.shape.length)
            let l = s
            const u = []
            null != o &&
              ((l = RI({ inputs: { x: s }, backend: n, attrs: { perm: o } })),
              u.push(l),
              (i = Fl(i.length, l.shape.length))),
              (i = [i[0]]),
              Rl('argMax', i, l.shape.length)
            const [c, h] = $l(l.shape, i),
              p = le(P(c), 'int32'),
              d = P(h),
              f = n.data.get(l.dataId).values
            for (let e = 0; e < p.length; ++e) {
              const t = e * d
              let n = f[t],
                r = 0
              for (let e = 0; e < d; ++e) {
                const s = f[t + e]
                s > n && ((n = s), (r = e))
              }
              p[e] = r
            }
            return (
              u.forEach((e) => n.disposeIntermediateTensorInfo(e)),
              n.makeTensorInfo(c, 'int32', p)
            )
          },
      },
      OI = {
        kernelName: Re,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s } = t,
              { axis: a } = r
            Fk(s, 'argMin')
            let i = j(a, s.shape)
            const o = Al(i, s.shape.length)
            let l = s
            const u = []
            null != o &&
              ((l = RI({ inputs: { x: s }, backend: n, attrs: { perm: o } })),
              u.push(l),
              (i = Fl(i.length, l.shape.length))),
              (i = [i[0]]),
              Rl('argMin', i, l.shape.length)
            const [c, h] = $l(l.shape, i),
              p = le(P(c), 'int32'),
              d = P(h),
              f = n.data.get(l.dataId).values
            for (let e = 0; e < p.length; ++e) {
              const t = e * d
              let n = f[t],
                r = 0
              for (let e = 0; e < d; ++e) {
                const s = f[t + e]
                s < n && ((n = s), (r = e))
              }
              p[e] = r
            }
            return (
              u.forEach((e) => n.disposeIntermediateTensorInfo(e)),
              n.makeTensorInfo(c, 'int32', p)
            )
          },
      },
      MI = Mk(Ae, (e) => Math.asin(e)),
      LI = { kernelName: Ae, backendName: 'cpu', kernelFunc: MI },
      zI = Mk(_e, (e) => Math.asinh(e)),
      PI = { kernelName: _e, backendName: 'cpu', kernelFunc: zI },
      BI = Mk(Fe, (e) => Math.atan(e)),
      WI = { kernelName: Fe, backendName: 'cpu', kernelFunc: BI },
      VI = Gk((e, t) => Math.atan2(e, t)),
      UI = hI(Oe, VI),
      GI = { kernelName: Oe, backendName: 'cpu', kernelFunc: UI },
      HI = Mk(De, (e) => Math.atanh(e)),
      jI = { kernelName: De, backendName: 'cpu', kernelFunc: HI }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function qI(e, t, n, r, s, a) {
      const i = s.strideHeight,
        o = s.strideWidth,
        l = s.dilationHeight,
        u = s.dilationWidth,
        c = s.effectiveFilterHeight,
        h = s.effectiveFilterWidth,
        p = s.padInfo.top,
        d = s.padInfo.left,
        f = 'max' === a ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,
        m = qa(s.outShape, n),
        g = m.values,
        y = s.outShape[1] * s.outShape[2] * s.outShape[3],
        b = s.outShape[2] * s.outShape[3],
        x = s.outShape[3]
      for (let t = 0; t < s.batchSize; ++t) {
        const n = t * y,
          m = t * r[0]
        for (let t = 0; t < s.inChannels; ++t)
          for (let y = 0; y < s.outHeight; ++y) {
            const w = y * i - p,
              v = Math.max(0, w),
              k = Math.min(s.inHeight, c + w),
              I = n + y * b
            for (let n = 0; n < s.outWidth; ++n) {
              const i = n * o - d,
                c = Math.max(0, i),
                p = Math.min(s.inWidth, h + i)
              let y = f,
                b = 0,
                w = 0
              for (let n = v; n < k; n += l) {
                const s = m + n * r[1]
                for (let n = c; n < p; n += u) {
                  const i = e[s + n * r[2] + t]
                  'max' === a && i > y
                    ? (y = i)
                    : 'avg' === a && ((b += i), w++)
                }
                if (isNaN(y)) break
              }
              g[I + n * x + t] = 'avg' === a ? b / w : y
            }
          }
      }
      return m
    }
    function KI(e, t, n, r, s = !1, a = !1) {
      const i = qa(r.outShape, 'int32'),
        o = r.strideHeight,
        l = r.strideWidth,
        u = r.dilationHeight,
        c = r.dilationWidth,
        h = r.effectiveFilterHeight,
        p = r.effectiveFilterWidth,
        d = r.padInfo.top,
        f = r.padInfo.left,
        m = qa(t, n, e)
      for (let e = 0; e < r.batchSize; ++e)
        for (let t = 0; t < r.inChannels; ++t)
          for (let n = 0; n < r.outHeight; ++n) {
            const g = n * o - d
            let y = g
            for (; y < 0; ) y += u
            const b = Math.min(r.inHeight, h + g)
            for (let o = 0; o < r.outWidth; ++o) {
              const h = o * l - f
              let d = h
              for (; d < 0; ) d += c
              const x = Math.min(r.inWidth, p + h)
              let w = Number.NEGATIVE_INFINITY,
                v = -1
              for (let n = y; n < b; n += u) {
                const i = n - g
                for (let o = d; o < x; o += c) {
                  const l = o - h,
                    u = m.get(e, n, o, t)
                  u > w &&
                    ((w = u),
                    (v = s
                      ? a
                        ? ((e * r.inHeight + n) * r.inWidth + o) *
                            r.inChannels +
                          t
                        : (n * r.inWidth + o) * r.inChannels + t
                      : i * p + l))
                }
              }
              i.set(v, e, n, o, t)
            }
          }
      return i
    }
    function XI(e, t, n, r, s, a) {
      const i = s.strideDepth,
        o = s.strideHeight,
        l = s.strideWidth,
        u = s.dilationDepth,
        c = s.dilationHeight,
        h = s.dilationWidth,
        p = s.effectiveFilterDepth,
        d = s.effectiveFilterHeight,
        f = s.effectiveFilterWidth,
        m = s.padInfo.front,
        g = s.padInfo.top,
        y = s.padInfo.left,
        b = 'max' === a ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,
        x = qa(s.outShape, n),
        w = x.values,
        v = s.outShape[1] * s.outShape[2] * s.outShape[3] * s.outShape[4],
        k = s.outShape[2] * s.outShape[3] * s.outShape[4],
        I = s.outShape[3] * s.outShape[4],
        N = s.outShape[4]
      for (let t = 0; t < s.batchSize; ++t) {
        const n = t * v,
          x = t * r[0]
        for (let t = 0; t < s.inChannels; ++t)
          for (let v = 0; v < s.outDepth; ++v) {
            const S = v * i - m
            let T = S
            for (; T < 0; ) T += u
            const C = Math.min(s.inDepth, p + S),
              $ = n + v * k
            for (let n = 0; n < s.outHeight; ++n) {
              const i = n * o - g
              let p = i
              for (; p < 0; ) p += c
              const m = Math.min(s.inHeight, d + i),
                v = $ + n * I
              for (let n = 0; n < s.outWidth; ++n) {
                const i = n * l - y
                let o = i
                for (; o < 0; ) o += h
                const d = Math.min(s.inWidth, f + i),
                  g = v + n * N
                let k = b,
                  I = 0,
                  S = 0
                for (let n = T; n < C; n += u) {
                  const s = x + n * r[1]
                  for (let n = p; n < m; n += c) {
                    const i = s + n * r[2]
                    for (let n = o; n < d; n += h) {
                      const s = e[i + n * r[3] + t]
                      if (
                        ('max' === a && s > k
                          ? (k = s)
                          : 'avg' === a && ((I += s), S++),
                        isNaN(k))
                      )
                        break
                    }
                    if (isNaN(k)) break
                  }
                  if (isNaN(k)) break
                }
                w[g + t] = 'avg' === a ? I / S : k
              }
            }
          }
      }
      return x
    }
    const YI = {
        kernelName: Me,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s } = t
            Fk(s, 'avgPool')
            const { filterSize: a, strides: i, pad: o, dimRoundingMode: l } = r
            O(
              To(i, 1),
              () =>
                `Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`,
            )
            const u = go(s.shape, a, i, 1, o, l)
            let c
            if (
              1 === u.filterWidth &&
              1 === u.filterHeight &&
              B(u.inShape, u.outShape)
            )
              c = Bk({ inputs: { x: s }, backend: n })
            else {
              const e = n.data.get(s.dataId).values,
                t = se(s.shape),
                r = qI(e, s.shape, s.dtype, t, u, 'avg')
              c = n.makeTensorInfo(u.outShape, s.dtype, r.values)
            }
            return c
          },
      },
      ZI = {
        kernelName: ze,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s } = t,
              {
                filterSize: a,
                strides: i,
                pad: o,
                dimRoundingMode: l,
                dataFormat: u,
              } = r
            Fk(s, 'avgPool3d')
            const c = yo(s.shape, a, i, 1, o, l, u),
              h = XI(
                n.data.get(s.dataId).values,
                s.shape,
                s.dtype,
                se(s.shape),
                c,
                'avg',
              )
            return n.makeTensorInfo(h.shape, 'float32', h.values)
          },
      },
      JI = {
        kernelName: Pe,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { dy: s, input: a } = t,
              { filterSize: i, strides: o, pad: l, dimRoundingMode: u } = r
            Fk([s, a], 'avgPool3DGrad')
            const c = yo(a.shape, i, o, 1, l, u),
              h = c.strideDepth,
              p = c.strideHeight,
              d = c.strideWidth,
              f = c.filterDepth,
              m = c.filterHeight,
              g = c.filterWidth,
              y = c.dilationDepth,
              b = c.dilationHeight,
              x = c.dilationWidth,
              w = c.effectiveFilterDepth,
              v = c.effectiveFilterHeight,
              k = c.effectiveFilterWidth,
              I = w - 1 - c.padInfo.front,
              N = k - 1 - c.padInfo.left,
              S = v - 1 - c.padInfo.top,
              T = qa(a.shape, 'float32'),
              C = 1 / (f * m * g),
              $ = n.bufferSync(s)
            for (let e = 0; e < c.batchSize; ++e)
              for (let t = 0; t < c.inChannels; ++t)
                for (let n = 0; n < c.inDepth; ++n)
                  for (let r = 0; r < c.inHeight; ++r)
                    for (let s = 0; s < c.inWidth; ++s) {
                      const a = n - I,
                        i = r - S,
                        o = s - N
                      let l = 0
                      for (let n = 0; n < w; n += y) {
                        const r = (a + n) / h
                        if (!(r < 0 || r >= c.outDepth || Math.floor(r) !== r))
                          for (let n = 0; n < v; n += b) {
                            const s = (i + n) / p
                            if (
                              !(
                                s < 0 ||
                                s >= c.outHeight ||
                                Math.floor(s) !== s
                              )
                            )
                              for (let n = 0; n < k; n += x) {
                                const a = (o + n) / d
                                a < 0 ||
                                  a >= c.outWidth ||
                                  Math.floor(a) !== a ||
                                  (l += $.get(e, r, s, a, t))
                              }
                          }
                      }
                      T.set(l * C, e, n, r, s, t)
                    }
            return n.makeTensorInfo(T.shape, T.dtype, T.values)
          },
      },
      QI = {
        kernelName: Le,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { dy: s, input: a } = t,
              i = a
            Fk([s, a], 'avgPoolGrad')
            const { filterSize: o, strides: l, pad: u } = r,
              c = go(i.shape, o, l, 1, u),
              h = c.strideHeight,
              p = c.strideWidth,
              d = c.filterHeight,
              f = c.filterWidth,
              m = c.dilationHeight,
              g = c.dilationWidth,
              y = c.effectiveFilterHeight,
              b = c.effectiveFilterWidth,
              x = b - 1 - c.padInfo.left,
              w = y - 1 - c.padInfo.top,
              v = qa(i.shape, 'float32'),
              k = 1 / (d * f),
              I = n.data.get(s.dataId).values,
              N = qa(s.shape, 'float32', I)
            for (let e = 0; e < c.batchSize; ++e)
              for (let t = 0; t < c.inChannels; ++t)
                for (let n = 0; n < c.inHeight; ++n)
                  for (let r = 0; r < c.inWidth; ++r) {
                    const s = n - w,
                      a = r - x
                    let i = 0
                    for (let n = 0; n < y; n += m) {
                      const r = (s + n) / h
                      if (!(r < 0 || r >= c.outHeight || Math.floor(r) !== r))
                        for (let n = 0; n < b; n += g) {
                          const s = (a + n) / p
                          s < 0 ||
                            s >= c.outWidth ||
                            Math.floor(s) !== s ||
                            (i += N.get(e, r, s, t))
                        }
                    }
                    v.set(i * k, e, n, r, t)
                  }
            return n.makeTensorInfo(v.shape, v.dtype, v.values)
          },
      },
      eN = {
        kernelName: Rt,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s, scale: a, offset: i, mean: o, variance: l } = t
            O(
              o.shape.length === l.shape.length,
              () =>
                'Batch normalization gradient requires mean and variance to have equal ranks.',
            ),
              O(
                null == i || o.shape.length === i.shape.length,
                () =>
                  'Batch normalization gradient requires mean and offset to have equal ranks.',
              ),
              O(
                null == a || o.shape.length === a.shape.length,
                () =>
                  'Batch normalization gradient requires mean and scale to have equal ranks.',
              ),
              Fk([s, o, l, a, i], 'batchNorm')
            let { varianceEpsilon: u } = r
            null == u && (u = 0.001)
            const c = n.data.get(s.dataId).values,
              h = n.data.get(o.dataId).values,
              p = n.data.get(l.dataId).values,
              d = a ? n.data.get(a.dataId).values : new Float32Array([1]),
              f = i ? n.data.get(i.dataId).values : new Float32Array([0]),
              m = new Float32Array(c.length),
              g = f.length,
              y = d.length,
              b = p.length,
              x = h.length
            let w = 0,
              v = 0,
              k = 0,
              I = 0
            for (let e = 0; e < c.length; ++e)
              (m[e] =
                f[w++] + ((c[e] - h[v++]) * d[k++]) / Math.sqrt(p[I++] + u)),
                w >= g && (w = 0),
                v >= x && (v = 0),
                k >= y && (k = 0),
                I >= b && (I = 0)
            return n.makeTensorInfo(s.shape, s.dtype, m)
          },
      }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function tN(e, t, n, r, s) {
      const a = Li(r, t, n),
        i = P(n),
        o = se(r)
      if (a) {
        const n = zi(t, o)
        return 'string' === s ? e.slice(n, n + i) : e.subarray(n, n + i)
      }
      const l = qa(r, s, 'string' === s ? Ld(e) : e),
        u = qa(n, s)
      for (let e = 0; e < u.size; ++e) {
        const n = u.indexToLoc(e),
          r = n.map((e, n) => e + t[n])
        u.set(l.get(...r), ...n)
      }
      return 'string' === s ? zd(u.values) : u.values
    }
    function nN(e) {
      const { inputs: t, backend: n, attrs: r } = e,
        { x: s } = t,
        { begin: a, size: i } = r
      Fk(s, 'slice')
      const [o, l] = Pi(s, a, i)
      Si(s, o, l)
      const u = tN(n.data.get(s.dataId).values, o, l, s.shape, s.dtype)
      return n.makeTensorInfo(l, s.dtype, u)
    }
    const rN = { kernelName: Gn, backendName: 'cpu', kernelFunc: nN },
      sN = {
        kernelName: We,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s } = t,
              { blockShape: a, crops: i } = r
            Fk([s], 'batchToSpaceND')
            const o = a.reduce((e, t) => e * t),
              l = Up(s.shape, a, o),
              u = Gp(l.length, a.length),
              c = Hp(s.shape, a, o),
              h = jp(i, a.length),
              p = qp(c, i, a.length),
              d = yI({ inputs: { x: s }, backend: n, attrs: { shape: l } }),
              f = RI({ inputs: { x: d }, backend: n, attrs: { perm: u } }),
              m = yI({ inputs: { x: f }, backend: n, attrs: { shape: c } }),
              g = nN({
                inputs: { x: m },
                backend: n,
                attrs: { begin: h, size: p },
              })
            return (
              n.disposeIntermediateTensorInfo(d),
              n.disposeIntermediateTensorInfo(f),
              n.disposeIntermediateTensorInfo(m),
              g
            )
          },
      }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function aN(e, t, n, r, s) {
      const a = P(r),
        i = le(s, n)
      for (let n = 0; n < e.length; n++) {
        const r = e[n]
        if (r < 0) throw new Error('Input x must be non-negative!')
        r >= s || (i[r] += a > 0 ? t[n] : 1)
      }
      return i
    }
    function iN(e, t, n, r = !1) {
      const s = e.shape[0],
        a = e.shape[1],
        i = qa([s, n], t.dtype)
      for (let o = 0; o < s; o++)
        for (let s = 0; s < a; s++) {
          const a = e.get(o, s)
          if (a < 0) throw new Error('Input x must be non-negative!')
          a >= n ||
            (r
              ? i.set(1, o, a)
              : t.size > 0
                ? i.set(i.get(o, a) + t.get(o, s), o, a)
                : i.set(i.get(o, a) + 1, o, a))
        }
      return i
    }
    const oN = {
        kernelName: Ve,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s, weights: a } = t,
              { size: i } = r,
              o = aN(
                n.data.get(s.dataId).values,
                n.data.get(a.dataId).values,
                a.dtype,
                a.shape,
                i,
              )
            return n.makeTensorInfo([i], a.dtype, o)
          },
      },
      lN = {
        kernelName: Ue,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2021 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n } = e,
              { s0: r, s1: s } = t,
              a = n.data.get(r.dataId).values,
              i = n.data.get(s.dataId).values,
              o = xi(Array.from(a), Array.from(i))
            return n.makeTensorInfo([o.length], 'int32', Int32Array.from(o))
          },
      },
      uN = Jk((e) => Math.ceil(e)),
      cN = Lk(He, uN),
      hN = { kernelName: He, backendName: 'cpu', kernelFunc: cN },
      pN = Mk(je, (e, t) => {
        const n = t
        return e > n.clipValueMax
          ? n.clipValueMax
          : e < n.clipValueMin
            ? n.clipValueMin
            : e
      }),
      dN = { kernelName: je, backendName: 'cpu', kernelFunc: pN },
      fN = {
        kernelName: Ke,
        backendName: 'cpu',
        kernelFunc: (e) => {
          const { x: t } = e.inputs,
            n = e.backend,
            r = new Float32Array(P(t.shape)),
            s = n.data.get(t.dataId),
            a = s.complexTensorInfos.real,
            i = s.complexTensorInfos.imag,
            o = n.data.get(a.dataId).values,
            l = n.data.get(i.dataId).values
          for (let e = 0; e < o.length; e++) {
            const t = o[e],
              n = l[e]
            r[e] = Math.hypot(t, n)
          }
          return n.makeOutput(r, t.shape, 'float32')
        },
      }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function mN(e, t, n, r) {
      const s = X(n, P(t))
      if (r && 'string' !== n) {
        let t = 0
        e.forEach((e) => {
          const n = P(e.shape)
          s.set(e.vals, t), (t += n)
        })
      } else {
        let r = 0
        e.forEach((e) => {
          const a = 'string' === n ? Ld(e.vals) : e.vals
          let i = 0
          for (let n = 0; n < e.shape[0]; ++n) {
            const o = n * t[1] + r
            for (let t = 0; t < e.shape[1]; ++t) s[o + t] = a[i++]
          }
          r += e.shape[1]
        })
      }
      return s
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function gN(e) {
      const { inputs: t, backend: n } = e,
        { input: r } = t,
        s = n.data.get(r.dataId).complexTensorInfos.imag,
        a = n.data.get(s.dataId).values
      return n.makeTensorInfo(s.shape, s.dtype, a)
    }
    const yN = { kernelName: Lt, backendName: 'cpu', kernelFunc: gN }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function bN(e) {
      const { inputs: t, backend: n, attrs: r } = e,
        { axis: s } = r,
        a = j(s, t[0].shape)[0]
      Fp(
        t.map((e) => e.shape),
        a,
      )
      let i = Dp(
        t.map((e) => e.shape),
        a,
      )
      if (0 === P(i)) return n.makeTensorInfo(i, t[0].dtype, [])
      const o = t.filter((e) => P(e.shape) > 0)
      if (1 === o.length) return Bk({ inputs: { x: o[0] }, backend: n })
      if ('complex64' === o[0].dtype) {
        const e = o.map((e) => iI({ inputs: { input: e }, backend: n })),
          t = o.map((e) => gN({ inputs: { input: e }, backend: n })),
          r = bN({ inputs: e, backend: n, attrs: { axis: a } }),
          s = bN({ inputs: t, backend: n, attrs: { axis: a } }),
          i = rI({ inputs: { real: r, imag: s }, backend: n })
        return (
          e.forEach((e) => n.disposeIntermediateTensorInfo(e)),
          t.forEach((e) => n.disposeIntermediateTensorInfo(e)),
          n.disposeIntermediateTensorInfo(r),
          n.disposeIntermediateTensorInfo(s),
          i
        )
      }
      const l = o.map((e) => {
          const t = P(e.shape.slice(a))
          return yI({ inputs: { x: e }, backend: n, attrs: { shape: [-1, t] } })
        }),
        u = l.map((e) => ({
          vals: n.data.get(e.dataId).values,
          shape: e.shape,
        }))
      i = Dp(
        l.map((e) => e.shape),
        1,
      )
      const c = 1 === l[0].shape[0],
        h = mN(u, i, t[0].dtype, c),
        p = Dp(
          o.map((e) => e.shape),
          a,
        ),
        d = n.makeTensorInfo(p, t[0].dtype, h)
      return l.forEach((e) => n.disposeIntermediateTensorInfo(e)), d
    }
    const xN = { kernelName: Xe, backendName: 'cpu', kernelFunc: bN }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function wN(e) {
      const { inputs: t, backend: n, attrs: r } = e,
        { x: s, filter: a } = t,
        {
          strides: i,
          pad: o,
          dataFormat: l,
          dilations: u,
          dimRoundingMode: c,
        } = r
      Fk([s, a], 'conv2d')
      const h = Co(l),
        p = bo(s.shape, a.shape, i, u, o, c, !1, h),
        d = p.filterHeight,
        f = p.filterWidth,
        m = p.dilationHeight,
        g = p.dilationWidth,
        y = p.padInfo.left,
        b = p.padInfo.top,
        x = 'channelsLast' === p.dataFormat,
        w = new ps(p.outShape, s.dtype),
        v = se(s.shape),
        k = se(a.shape),
        I = v[0],
        N = x ? v[1] : v[2],
        S = x ? v[2] : 1,
        T = x ? 1 : v[1],
        C = w.strides[0],
        $ = x ? w.strides[1] : w.strides[2],
        E = x ? w.strides[2] : 1,
        R = x ? 1 : w.strides[1],
        A = n.data.get(s.dataId).values,
        _ = n.data.get(a.dataId).values,
        F = w.values
      for (let e = 0; e < p.batchSize; ++e) {
        const t = e * I,
          n = e * C
        for (let e = 0; e < p.outHeight; ++e) {
          const r = n + e * $,
            s = e * p.strideHeight - b
          for (let e = 0; e < d; ++e) {
            const n = s + e * m
            if (n < 0 || n >= p.inHeight) continue
            const a = e * k[0],
              i = t + n * N
            for (let e = 0; e < p.outWidth; ++e) {
              const t = r + e * E,
                n = e * p.strideWidth - y
              for (let e = 0; e < f; ++e) {
                const r = n + e * g
                if (r < 0 || r >= p.inWidth) continue
                const s = i + r * S
                let o = a + e * k[1]
                for (let e = 0; e < p.inChannels; ++e) {
                  const n = A[s + e * T]
                  for (let e = 0; e < p.outChannels; ++e)
                    F[t + e * R] += n * _[o + e]
                  o += p.outChannels
                }
              }
            }
          }
        }
      }
      return n.makeTensorInfo(w.shape, w.dtype, F)
    }
    const vN = { kernelName: Ye, backendName: 'cpu', kernelFunc: wN },
      kN = {
        kernelName: Ze,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s, dy: a } = t,
              {
                strides: i,
                pad: o,
                dataFormat: l,
                dimRoundingMode: u,
                filterShape: c,
              } = r
            Fk([s, a], 'conv2dBackpropFilter')
            const h = Co(l),
              p = bo(s.shape, c, i, 1, o, u, !1, h),
              {
                strideHeight: d,
                strideWidth: f,
                filterHeight: m,
                filterWidth: g,
              } = p,
              y = 'channelsLast' === p.dataFormat,
              b = new ps(p.filterShape, 'float32'),
              x = p.padInfo.left,
              w = p.padInfo.top,
              v = n.data.get(s.dataId).values,
              k = n.data.get(a.dataId).values,
              I = new ps(s.shape, s.dtype, v),
              N = new ps(a.shape, a.dtype, k)
            for (let e = 0; e < m; ++e) {
              const t = Math.max(0, Math.ceil((w - e) / d)),
                n = Math.min(p.outHeight, (p.inHeight + w - e) / d)
              for (let r = 0; r < g; ++r) {
                const s = Math.max(0, Math.ceil((x - r) / f)),
                  a = Math.min(p.outWidth, (p.inWidth + x - r) / f)
                for (let i = 0; i < p.inChannels; ++i)
                  for (let o = 0; o < p.outChannels; ++o) {
                    let l = 0
                    for (let u = 0; u < p.batchSize; ++u)
                      for (let c = t; c < n; ++c) {
                        const t = e + c * d - w
                        for (let e = s; e < a; ++e) {
                          const n = r + e * f - x
                          l += y
                            ? I.get(u, t, n, i) * N.get(u, c, e, o)
                            : I.get(u, i, t, n) * N.get(u, o, c, e)
                        }
                      }
                    b.set(l, e, r, i, o)
                  }
              }
            }
            return n.makeTensorInfo(b.shape, b.dtype, b.values)
          },
      },
      IN = {
        kernelName: Je,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { dy: s, filter: a } = t,
              {
                inputShape: i,
                strides: o,
                pad: l,
                dataFormat: u,
                dimRoundingMode: c,
              } = r
            Fk([s, a], 'conv2dBackpropInput')
            const h = se(a.shape),
              p = se(s.shape)
            let d = Co(u)
            const f = bo(i, a.shape, o, 1, l, c, !1, d),
              m = new ps(f.inShape, 'float32'),
              g = m.values,
              y = n.data.get(s.dataId).values,
              b = n.data.get(a.dataId).values,
              [x, w, v] = h,
              {
                batchSize: k,
                filterHeight: I,
                filterWidth: N,
                inChannels: S,
                inHeight: T,
                inWidth: C,
                outChannels: $,
                outHeight: E,
                outWidth: R,
                strideHeight: A,
                strideWidth: _,
              } = f
            d = f.dataFormat
            const F = I - 1 - f.padInfo.top,
              D = N - 1 - f.padInfo.left,
              O = 'channelsLast' === d,
              M = m.strides[0],
              L = O ? m.strides[1] : m.strides[2],
              z = O ? m.strides[2] : 1,
              P = O ? 1 : m.strides[1],
              B = p[0],
              W = O ? p[1] : p[2],
              V = O ? p[2] : 1,
              U = O ? 1 : p[1]
            for (let e = 0; e < k; ++e)
              for (let t = 0; t < S; ++t)
                for (let n = 0; n < T; ++n) {
                  const r = n - F,
                    s = Math.max(0, Math.ceil(r / A)),
                    a = Math.min(E, (I + r) / A)
                  for (let i = 0; i < C; ++i) {
                    const o = i - D,
                      l = Math.max(0, Math.ceil(o / _)),
                      u = Math.min(R, (N + o) / _)
                    let c = 0
                    for (let n = s; n < a; ++n) {
                      const s = n * A - r
                      for (let r = l; r < u; ++r) {
                        const a = B * e + W * n + V * r,
                          i =
                            x * (I - 1 - s) + w * (N - 1 - (r * _ - o)) + v * t
                        for (let e = 0; e < $; ++e) c += y[a + U * e] * b[i + e]
                      }
                    }
                    g[M * e + L * n + z * i + P * t] = c
                  }
                }
            return n.makeTensorInfo(m.shape, m.dtype, m.values)
          },
      },
      NN = {
        kernelName: Qe,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s, filter: a } = t,
              { strides: i, pad: o, dilations: l } = r
            Fk([s, a], 'conv3d')
            const u = xo(s.shape, a.shape, i, l, o),
              {
                filterDepth: c,
                filterHeight: h,
                filterWidth: p,
                dilationDepth: d,
                dilationHeight: f,
                dilationWidth: m,
                padInfo: g,
              } = u,
              y = g.front,
              b = g.left,
              x = g.top,
              w = new ps(u.outShape, s.dtype),
              v = n.data.get(s.dataId).values,
              k = n.data.get(a.dataId).values,
              I = w.values,
              N = se(s.shape),
              S = se(a.shape)
            for (let e = 0; e < u.batchSize; ++e) {
              const t = e * N[0],
                n = e * w.strides[0]
              for (let e = 0; e < u.outDepth; ++e) {
                const r = n + e * w.strides[1],
                  s = e * u.strideDepth - y
                for (let e = 0; e < c; ++e) {
                  const n = s + e * d
                  if (n < 0 || n >= u.inDepth) continue
                  const a = e * S[0],
                    i = t + n * N[1]
                  for (let e = 0; e < u.outHeight; ++e) {
                    const t = r + e * w.strides[2],
                      n = e * u.strideHeight - x
                    for (let e = 0; e < h; ++e) {
                      const r = n + e * f
                      if (r < 0 || r >= u.inHeight) continue
                      const s = a + e * S[1],
                        o = i + r * N[2]
                      for (let e = 0; e < u.outWidth; ++e) {
                        const n = t + e * u.outChannels,
                          r = e * u.strideWidth - b
                        for (let e = 0; e < p; ++e) {
                          const t = r + e * m
                          if (t < 0 || t >= u.inWidth) continue
                          const a = s + e * S[2],
                            i = o + t * u.inChannels
                          let l = a
                          for (let e = 0; e < u.inChannels; ++e) {
                            const t = v[i + e]
                            for (let e = 0; e < u.outChannels; ++e)
                              I[n + e] += t * k[l + e]
                            l += u.outChannels
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            return n.makeTensorInfo(w.shape, w.dtype, w.values)
          },
      },
      SN = {
        kernelName: et,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s, dy: a } = t,
              { strides: i, pad: o, filterShape: l } = r
            Fk([s, a], 'conv3dBackpropFilterV2')
            const u = se(s.shape),
              c = se(a.shape),
              h = xo(s.shape, l, i, 1, o),
              p = h.strideDepth,
              d = h.strideHeight,
              f = h.strideWidth,
              m = h.filterDepth,
              g = h.filterHeight,
              y = h.filterWidth,
              b = new ps(h.filterShape, 'float32'),
              x = b.values,
              [w, v, k, I] = b.strides,
              N = n.data.get(a.dataId).values,
              [S, T, C, $] = c,
              E = n.data.get(s.dataId).values,
              [R, A, _, F] = u,
              D = h.padInfo.front,
              O = h.padInfo.left,
              M = h.padInfo.top
            for (let e = 0; e < m; ++e) {
              const t = Math.max(0, Math.ceil((D - e) / p)),
                n = Math.min(h.outDepth, (h.inDepth + D - e) / p),
                r = e * w
              for (let s = 0; s < g; ++s) {
                const a = Math.max(0, Math.ceil((M - s) / d)),
                  i = Math.min(h.outHeight, (h.inHeight + M - s) / d),
                  o = s * v + r
                for (let r = 0; r < y; ++r) {
                  const l = Math.max(0, Math.ceil((O - r) / f)),
                    u = Math.min(h.outWidth, (h.inWidth + O - r) / f),
                    c = r * k + o
                  for (let o = 0; o < h.inChannels; ++o) {
                    const m = o * I + c
                    for (let c = 0; c < h.outChannels; ++c) {
                      let g = 0
                      for (let m = 0; m < h.batchSize; ++m) {
                        const h = m * R,
                          y = m * S
                        for (let m = t; m < n; ++m) {
                          const t = (e + m * p - D) * A + h,
                            n = m * T + y
                          for (let e = a; e < i; ++e) {
                            const a = (s + e * d - M) * _ + t,
                              i = e * C + n
                            for (let e = l; e < u; ++e) {
                              const t = e * $ + i
                              g += E[(r + e * f - O) * F + a + o] * N[t + c]
                            }
                          }
                        }
                      }
                      x[m + c] = g
                    }
                  }
                }
              }
            }
            return n.makeTensorInfo(b.shape, b.dtype, b.values)
          },
      },
      TN = {
        kernelName: tt,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { dy: s, filter: a } = t,
              { pad: i, strides: o, inputShape: l } = r
            Fk([s], 'conv3dBackpropInputV2')
            const u = se(s.shape),
              c = se(a.shape),
              h = xo(l, a.shape, o, 1, i),
              p = new ps(h.inShape, 'float32'),
              d = p.values,
              [f, m, g, y] = p.strides,
              b = n.data.get(s.dataId).values,
              [x, w, v, k] = u,
              I = n.data.get(a.dataId).values,
              [N, S, T, C] = c,
              {
                batchSize: $,
                filterDepth: E,
                filterHeight: R,
                filterWidth: A,
                inChannels: _,
                inDepth: F,
                inHeight: D,
                inWidth: O,
                outChannels: M,
                outDepth: L,
                outHeight: z,
                outWidth: P,
                strideDepth: B,
                strideHeight: W,
                strideWidth: V,
              } = h,
              U = E - 1 - h.padInfo.front,
              G = R - 1 - h.padInfo.top,
              H = A - 1 - h.padInfo.left
            for (let e = 0; e < $; ++e)
              for (let t = 0; t < _; ++t)
                for (let n = 0; n < F; ++n) {
                  const r = n - U,
                    s = Math.max(0, Math.ceil(r / B)),
                    a = Math.min(L, (E + r) / B)
                  for (let i = 0; i < D; ++i) {
                    const o = i - G,
                      l = Math.max(0, Math.ceil(o / W)),
                      u = Math.min(z, (R + o) / W)
                    for (let c = 0; c < O; ++c) {
                      const h = c - H,
                        p = Math.max(0, Math.ceil(h / V)),
                        $ = Math.min(P, (A + h) / V)
                      let _ = 0
                      for (let n = s; n < a; ++n) {
                        const s = n * B - r
                        for (let r = l; r < u; ++r) {
                          const a = r * W - o
                          for (let i = p; i < $; ++i) {
                            const o = x * e + w * n + v * r + k * i,
                              l =
                                N * (E - 1 - s) +
                                S * (R - 1 - a) +
                                T * (A - 1 - (i * V - h)) +
                                C * t
                            for (let e = 0; e < M; ++e) _ += b[o + e] * I[l + e]
                          }
                        }
                      }
                      d[f * e + m * n + g * i + y * c + t] = _
                    }
                  }
                }
            return n.makeTensorInfo(p.shape, p.dtype, p.values)
          },
      },
      CN = Mk(nt, (e) => Math.cos(e)),
      $N = { kernelName: nt, backendName: 'cpu', kernelFunc: CN },
      EN = Mk(rt, (e) => Math.cosh(e)),
      RN = { kernelName: rt, backendName: 'cpu', kernelFunc: EN },
      AN = {
        kernelName: it,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { image: s, boxes: a, boxInd: i } = t,
              { cropSize: o, method: l, extrapolationValue: u } = r,
              [c, h, p, d] = s.shape,
              f = a.shape[0],
              [m, g] = o,
              y = qa([f, m, g, d], 'float32'),
              b = n.data.get(a.dataId).values,
              x = n.data.get(i.dataId).values,
              w = n.data.get(s.dataId).values,
              v = se(s.shape),
              k = se(y.shape)
            for (let e = 0; e < f; e++) {
              const t = 4 * e,
                n = b[t],
                r = b[t + 1],
                s = b[t + 2],
                a = b[t + 3],
                i = x[e]
              if (i >= c) continue
              const o = m > 1 ? ((s - n) * (h - 1)) / (m - 1) : 0,
                f = g > 1 ? ((a - r) * (p - 1)) / (g - 1) : 0
              for (let t = 0; t < m; t++) {
                const c = m > 1 ? n * (h - 1) + t * o : 0.5 * (n + s) * (h - 1)
                if (c < 0 || c > h - 1)
                  for (let n = 0; n < g; n++)
                    for (let r = 0; r < d; r++) {
                      const s = r + n * k[2] + t * k[1] + e * k[0]
                      y.values[s] = u
                    }
                else if ('bilinear' === l) {
                  const n = Math.floor(c),
                    s = Math.ceil(c),
                    o = c - n
                  for (let l = 0; l < g; l++) {
                    const c =
                      g > 1 ? r * (p - 1) + l * f : 0.5 * (r + a) * (p - 1)
                    if (c < 0 || c > p - 1) {
                      for (let n = 0; n < d; n++) {
                        const r = n + l * k[2] + t * k[1] + e * k[0]
                        y.values[r] = u
                      }
                      continue
                    }
                    const h = Math.floor(c),
                      m = Math.ceil(c),
                      b = c - h
                    for (let r = 0; r < d; r++) {
                      let a = r + h * v[2] + n * v[1] + i * v[0]
                      const u = w[a]
                      a = r + m * v[2] + n * v[1] + i * v[0]
                      const c = w[a]
                      a = r + h * v[2] + s * v[1] + i * v[0]
                      const p = w[a]
                      a = r + m * v[2] + s * v[1] + i * v[0]
                      const d = u + (c - u) * b,
                        f = p + (w[a] - p) * b
                      ;(a = r + l * k[2] + t * k[1] + e * k[0]),
                        (y.values[a] = d + (f - d) * o)
                    }
                  }
                } else
                  for (let n = 0; n < g; ++n) {
                    const s =
                      g > 1 ? r * (p - 1) + n * f : 0.5 * (r + a) * (p - 1)
                    if (s < 0 || s > p - 1) {
                      for (let r = 0; r < d; r++) {
                        const s = r + n * k[2] + t * k[1] + e * k[0]
                        y.values[s] = u
                      }
                      continue
                    }
                    const o = Math.round(s),
                      l = Math.round(c)
                    for (let r = 0; r < d; r++) {
                      const s = r + o * v[2] + l * v[1] + i * v[0],
                        a = r + n * k[2] + t * k[1] + e * k[0]
                      y.values[a] = w[s]
                    }
                  }
              }
            }
            return n.makeTensorInfo(y.shape, y.dtype, y.values)
          },
      },
      _N = {
        kernelName: st,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2022 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s } = t,
              { axis: a, exclusive: i, reverse: o } = r
            Fk(s, 'cumprod')
            const l = Al([a], s.shape.length)
            let u = s
            null != l &&
              (u = RI({ inputs: { x: s }, backend: n, attrs: { perm: l } }))
            const c = Fl(1, s.shape.length)[0]
            if (c !== u.shape.length - 1)
              throw new Error(
                `backend.cumprod in CPU expects an inner-most axis=${u.shape.length - 1} but got axis=${c}`,
              )
            const h = Ss(u.dtype, 'int32'),
              p = oe(P(u.shape), h),
              d = n.data.get(u.dataId).values,
              f = u.shape[u.shape.length - 1],
              m = o ? (e, t) => e + f - t - 1 : (e, t) => e + t
            for (let e = 0; e < d.length; e += f)
              for (let t = 0; t < f; t++) {
                const n = m(e, t)
                if (0 === t) p[n] = i ? 1 : d[n]
                else {
                  const r = m(e, t - 1)
                  p[n] = i ? d[r] * p[r] : d[n] * p[r]
                }
              }
            const g = n.makeTensorInfo(u.shape, h, p)
            if (null != l) {
              const e = RI({
                inputs: { x: g },
                backend: n,
                attrs: { perm: _l(l) },
              })
              return (
                n.disposeIntermediateTensorInfo(g),
                n.disposeIntermediateTensorInfo(u),
                e
              )
            }
            return g
          },
      },
      FN = {
        kernelName: at,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s } = t,
              { axis: a, exclusive: i, reverse: o } = r
            Fk(s, 'cumsum')
            const l = Al([a], s.shape.length)
            let u = s
            null != l &&
              (u = RI({ inputs: { x: s }, backend: n, attrs: { perm: l } }))
            const c = Fl(1, s.shape.length)[0]
            if (c !== u.shape.length - 1)
              throw new Error(
                `backend.cumsum in CPU expects an inner-most axis=${u.shape.length - 1} but got axis=${c}`,
              )
            const h = Ss(u.dtype, 'int32'),
              p = le(P(u.shape), h),
              d = n.data.get(u.dataId).values,
              f = u.shape[u.shape.length - 1],
              m = o ? (e, t) => e + f - t - 1 : (e, t) => e + t
            for (let e = 0; e < d.length; e += f)
              for (let t = 0; t < f; t++) {
                const n = m(e, t)
                if (0 === t) p[n] = i ? 0 : d[n]
                else {
                  const r = m(e, t - 1)
                  p[n] = i ? d[r] + p[r] : d[n] + p[r]
                }
              }
            const g = n.makeTensorInfo(u.shape, h, p)
            if (null != l) {
              const e = RI({
                inputs: { x: g },
                backend: n,
                attrs: { perm: _l(l) },
              })
              return (
                n.disposeIntermediateTensorInfo(g),
                n.disposeIntermediateTensorInfo(u),
                e
              )
            }
            return g
          },
      },
      DN = {
        kernelName: ot,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s, weights: a } = t,
              { size: i, binaryOutput: o } = r
            if (1 === s.shape.length) {
              const e = aN(
                n.data.get(s.dataId).values,
                n.data.get(a.dataId).values,
                a.dtype,
                a.shape,
                i,
              )
              return n.makeTensorInfo([i], a.dtype, e)
            }
            if (2 === s.shape.length) {
              const e = iN(n.bufferSync(s), n.bufferSync(a), i, o)
              return n.makeTensorInfo(e.shape, a.dtype, e.values)
            }
            throw new Error(
              `Error in denseBincount: input must be at most rank 2, but got rank${s.shape.length}.`,
            )
          },
      },
      ON = {
        kernelName: lt,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s } = t,
              { blockSize: a, dataFormat: i } = r
            O(
              'NHWC' === i,
              () =>
                `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`,
            )
            const o = s.shape[0],
              l = s.shape[1],
              u = s.shape[2],
              c = s.shape[3],
              h = l * a,
              p = u * a,
              d = c / (a * a),
              f = n.data.get(s.dataId).values,
              m = new Float32Array(o * h * p * d)
            let g = 0
            for (let e = 0; e < o; ++e)
              for (let t = 0; t < h; ++t) {
                const n = Math.floor(t / a),
                  r = t % a
                for (let t = 0; t < p; ++t) {
                  const s = Math.floor(t / a),
                    i = (r * a + (t % a)) * d
                  for (let t = 0; t < d; ++t) {
                    const r = t + i + c * (s + u * (n + l * e))
                    m[g++] = f[r]
                  }
                }
              }
            return n.makeTensorInfo([o, h, p, d], s.dtype, m)
          },
      }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function MN(e) {
      const { inputs: t, backend: n, attrs: r } = e,
        { x: s, filter: a } = t,
        { strides: i, pad: o, dilations: l, dimRoundingMode: u } = r
      Fk([s, a], 'depthwiseConv2DNative')
      const c = se(s.shape),
        h = se(a.shape)
      let p = l
      null == p && (p = [1, 1]),
        O(
          To(i, p),
          () =>
            `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${p}'`,
        )
      const d = bo(s.shape, a.shape, i, p, o, u, !0),
        {
          filterHeight: f,
          filterWidth: m,
          dilationHeight: g,
          dilationWidth: y,
          padInfo: b,
        } = d,
        x = b.left,
        w = b.top,
        v = d.outChannels / d.inChannels,
        k = new ps(d.outShape, s.dtype),
        I = n.data.get(s.dataId).values,
        N = n.data.get(a.dataId).values,
        S = k.values
      for (let e = 0; e < d.batchSize; ++e) {
        const t = e * c[0],
          n = e * k.strides[0]
        for (let e = 0; e < d.outHeight; ++e) {
          const r = n + e * k.strides[1],
            s = e * d.strideHeight - w
          for (let e = 0; e < f; ++e) {
            const n = s + e * g
            if (n < 0 || n >= d.inHeight) continue
            const a = e * h[0],
              i = t + n * c[1]
            for (let e = 0; e < d.outWidth; ++e) {
              const t = r + e * k.strides[2],
                n = e * d.strideWidth - x
              for (let e = 0; e < m; ++e) {
                const r = n + e * y
                if (r < 0 || r >= d.inWidth) continue
                const s = a + e * h[1],
                  o = i + r * d.inChannels
                let l = t,
                  u = s
                for (let e = 0; e < d.inChannels; ++e) {
                  const t = I[o + e]
                  for (let e = 0; e < v; ++e) S[l + e] += t * N[u + e]
                  ;(l += v), (u += v)
                }
              }
            }
          }
        }
      }
      return n.makeTensorInfo(k.shape, k.dtype, k.values)
    }
    const LN = { kernelName: ut, backendName: 'cpu', kernelFunc: MN },
      zN = {
        kernelName: ct,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s, dy: a } = t,
              {
                strides: i,
                dilations: o,
                pad: l,
                dimRoundingMode: u,
                filterShape: c,
              } = r
            Fk([s, a], 'depthwiseConv2dNativeBackpropFilter')
            const h = bo(s.shape, c, i, o, l, u, !0),
              {
                strideHeight: p,
                strideWidth: d,
                filterHeight: f,
                filterWidth: m,
              } = h,
              g = new ps(h.filterShape, 'float32'),
              y = h.padInfo.left,
              b = h.padInfo.top,
              x = h.outChannels / h.inChannels,
              w = n.data.get(s.dataId).values,
              v = new ps(s.shape, s.dtype, w),
              k = n.data.get(a.dataId).values,
              I = new ps(a.shape, a.dtype, k)
            for (let e = 0; e < f; ++e) {
              const t = Math.max(0, Math.ceil((b - e) / p)),
                n = Math.min(h.outHeight, (h.inHeight + b - e) / p)
              for (let r = 0; r < m; ++r) {
                const s = Math.max(0, Math.ceil((y - r) / d)),
                  a = Math.min(h.outWidth, (h.inWidth + y - r) / d)
                for (let i = 0; i < h.outChannels; ++i) {
                  const o = Math.trunc(i / x),
                    l = i % x
                  let u = 0
                  for (let l = 0; l < h.batchSize; ++l)
                    for (let c = t; c < n; ++c) {
                      const t = e + c * p - b
                      for (let e = s; e < a; ++e) {
                        const n = r + e * d - y
                        u += v.get(l, t, n, o) * I.get(l, c, e, i)
                      }
                    }
                  g.set(u, e, r, o, l)
                }
              }
            }
            return n.makeTensorInfo(g.shape, g.dtype, g.values)
          },
      },
      PN = {
        kernelName: ht,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { dy: s, filter: a } = t,
              {
                strides: i,
                dilations: o,
                pad: l,
                dimRoundingMode: u,
                inputShape: c,
              } = r
            Fk([s, a], 'depthwiseConv2DNativeBackpropInput')
            const h = se(s.shape),
              p = se(a.shape),
              d = bo(c, a.shape, i, o, l, u, !0),
              f = new ps(d.inShape, 'float32'),
              m = f.values,
              [g, y, b] = f.strides,
              x = n.data.get(s.dataId).values,
              [w, v, k] = h,
              I = n.data.get(a.dataId).values,
              [N, S, T] = p,
              {
                batchSize: C,
                filterHeight: $,
                filterWidth: E,
                inChannels: R,
                inHeight: A,
                inWidth: _,
                outChannels: F,
                outHeight: D,
                outWidth: O,
                strideHeight: M,
                strideWidth: L,
              } = d,
              z = $ - 1 - d.padInfo.top,
              P = E - 1 - d.padInfo.left,
              B = F / R
            for (let e = 0; e < C; ++e)
              for (let t = 0; t < R; ++t)
                for (let n = 0; n < A; ++n) {
                  const r = n - z,
                    s = Math.max(0, Math.ceil(r / M)),
                    a = Math.min(D, ($ + r) / M)
                  for (let i = 0; i < _; ++i) {
                    const o = i - P,
                      l = Math.max(0, Math.ceil(o / L)),
                      u = Math.min(O, (E + o) / L)
                    let c = 0
                    for (let n = s; n < a; ++n) {
                      const s = n * M - r
                      for (let r = l; r < u; ++r) {
                        const a = w * e + v * n + k * r,
                          i =
                            N * ($ - 1 - s) + S * (E - 1 - (r * L - o)) + T * t
                        for (let e = 0; e < B; ++e)
                          c += x[a + (t * B + e)] * I[i + e]
                      }
                    }
                    m[g * e + y * n + b * i + t] = c
                  }
                }
            return n.makeTensorInfo(f.shape, f.dtype, f.values)
          },
      },
      BN = {
        kernelName: pt,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n } = e,
              { x: r } = t,
              s = P(r.shape),
              a = n.data.get(r.dataId).values,
              i = qa([s, s], r.dtype),
              o = i.values
            for (let e = 0; e < a.length; e++) o[e * s + e] = a[e]
            const l = [...r.shape, ...r.shape]
            return n.makeTensorInfo(l, i.dtype, i.values)
          },
      },
      WN = {
        kernelName: dt,
        backendName: 'cpu',
        kernelFunc: ({ inputs: e, backend: t, attrs: n }) => {
          const { x: r, filter: s } = e,
            { strides: a, pad: i, dilations: o } = n,
            l = t,
            u = l.data.get(r.dataId).values,
            c = r.shape.length,
            h = l.data.get(s.dataId).values,
            p = s.shape.length,
            {
              batchSize: d,
              inHeight: f,
              inWidth: m,
              inChannels: g,
              outHeight: y,
              outWidth: b,
              padInfo: x,
              strideHeight: w,
              strideWidth: v,
              filterHeight: k,
              filterWidth: I,
              dilationHeight: N,
              dilationWidth: S,
              outShape: T,
            } = mo(r.shape, s.shape, a, i, 'NHWC', o),
            C = P(T),
            $ = T.length,
            E = X(r.dtype, C)
          for (let e = 0; e < d; ++e)
            for (let t = 0; t < y; ++t) {
              const n = t * w - x.top
              for (let a = 0; a < b; ++a) {
                const i = a * v - x.left
                for (let o = 0; o < g; ++o) {
                  let l = Number.MIN_SAFE_INTEGER
                  for (let t = 0; t < k; ++t) {
                    const a = n + t * N
                    if (a >= 0 && a < f)
                      for (let n = 0; n < I; ++n) {
                        const d = i + n * S
                        if (d >= 0 && d < m) {
                          const i = he([e, a, d, o], c, se(r.shape)),
                            f = he([t, n, o], p, se(s.shape)),
                            m = u[i] + h[f]
                          m > l && (l = m)
                        }
                      }
                  }
                  E[he([e, t, a, o], $, se(T))] = l
                }
              }
            }
          return {
            dataId: l.write(es(E, r.dtype), T, r.dtype),
            shape: T,
            dtype: r.dtype,
          }
        },
      },
      VN = {
        kernelName: mt,
        backendName: 'cpu',
        kernelFunc: ({ inputs: e, backend: t, attrs: n }) => {
          const { x: r, filter: s, dy: a } = e,
            { strides: i, pad: o, dilations: l } = n,
            u = t,
            c = ie(r.shape, u.data.get(r.dataId).values),
            h = ie(s.shape, u.data.get(s.dataId).values),
            {
              batchSize: p,
              inHeight: d,
              inWidth: f,
              inChannels: m,
              outHeight: g,
              outWidth: y,
              padInfo: b,
              strideHeight: x,
              strideWidth: w,
              filterHeight: v,
              filterWidth: k,
              dilationHeight: I,
              dilationWidth: N,
              outShape: S,
            } = mo(r.shape, s.shape, i, o, 'NHWC', l)
          O(
            a.rank === S.length,
            () =>
              `Error in ${mt}, dy must have the same rank as output ${S.length}, but got ${a.rank}`,
          )
          const T = ie(S, u.data.get(a.dataId).values),
            C = ue(s.shape, s.dtype)
          for (let e = 0; e < p; ++e)
            for (let t = 0; t < g; ++t) {
              const n = t * x - b.top
              for (let r = 0; r < y; ++r) {
                const s = r * w - b.left
                for (let a = 0; a < m; ++a) {
                  let i = Number.MIN_SAFE_INTEGER,
                    o = 0,
                    l = 0
                  for (let t = 0; t < v; ++t) {
                    const r = n + t * I
                    if (r >= 0 && r < d)
                      for (let n = 0; n < k; ++n) {
                        const u = s + n * N
                        if (u >= 0 && u < f) {
                          const s = c[e][r][u][a] + h[t][n][a]
                          s > i && ((i = s), (o = t), (l = n))
                        }
                      }
                  }
                  C[o][l][a] += T[e][t][r][a]
                }
              }
            }
          return {
            dataId: u.write(es(C, r.dtype), s.shape, s.dtype),
            shape: s.shape,
            dtype: s.dtype,
          }
        },
      },
      UN = {
        kernelName: ft,
        backendName: 'cpu',
        kernelFunc: ({ inputs: e, backend: t, attrs: n }) => {
          const { x: r, filter: s, dy: a } = e,
            { strides: i, pad: o, dilations: l } = n,
            u = t,
            c = ie(r.shape, u.data.get(r.dataId).values),
            h = ie(s.shape, u.data.get(s.dataId).values),
            {
              batchSize: p,
              inHeight: d,
              inWidth: f,
              inChannels: m,
              outHeight: g,
              outWidth: y,
              padInfo: b,
              strideHeight: x,
              strideWidth: w,
              filterHeight: v,
              filterWidth: k,
              dilationHeight: I,
              dilationWidth: N,
              outShape: S,
            } = mo(r.shape, s.shape, i, o, 'NHWC', l)
          O(
            a.rank === S.length,
            () =>
              `Error in ${ft}, dy must have the same rank as output ${S.length}, but got ${a.rank}`,
          )
          const T = ie(S, u.data.get(a.dataId).values),
            C = ue(r.shape, r.dtype)
          for (let e = 0; e < p; ++e)
            for (let t = 0; t < g; ++t) {
              const n = t * x - b.top
              for (let r = 0; r < y; ++r) {
                const s = r * w - b.left
                for (let a = 0; a < m; ++a) {
                  let i = Number.MIN_SAFE_INTEGER,
                    o = n < 0 ? 0 : n,
                    l = s < 0 ? 0 : s
                  for (let t = 0; t < v; ++t) {
                    const r = n + t * I
                    if (r >= 0 && r < d)
                      for (let n = 0; n < k; ++n) {
                        const u = s + n * N
                        if (u >= 0 && u < f) {
                          const s = c[e][r][u][a] + h[t][n][a]
                          s > i && ((i = s), (o = r), (l = u))
                        }
                      }
                  }
                  C[e][o][l][a] += T[e][t][r][a]
                }
              }
            }
          return {
            dataId: u.write(es(C, r.dtype), r.shape, r.dtype),
            shape: r.shape,
            dtype: r.dtype,
          }
        },
      },
      GN = Gk((e, t) => e * t),
      HN = pI((e, t, n, r) => ({ real: e * n - t * r, imag: e * r + t * n })),
      jN = hI(pn, GN, HN),
      qN = { kernelName: pn, backendName: 'cpu', kernelFunc: jN }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function KN(e) {
      const { inputs: t, backend: n, attrs: r } = e,
        { x: s } = t,
        { axis: a, keepDims: i } = r
      let o
      Fk(s, 'sum'),
        (o =
          'bool' === s.dtype
            ? uI({ inputs: { x: s }, backend: n, attrs: { dtype: 'int32' } })
            : Bk({ inputs: { x: s }, backend: n }))
      const l = o.shape.length,
        u = j(a, o.shape),
        c = Al(u, l)
      let h = u,
        p = o
      null != c &&
        ((p = RI({ inputs: { x: o }, backend: n, attrs: { perm: c } })),
        (h = Fl(h.length, l))),
        Rl('sum', h, p.shape.length)
      const [d, f] = $l(p.shape, h)
      let m = aI(n, d, Ss(p.dtype, 'int32'))
      const g = P(f),
        y = n.data.get(m.dataId).values,
        b = n.data.get(p.dataId).values
      for (let e = 0; e < y.length; ++e) {
        const t = e * g
        let n = 0
        for (let e = 0; e < g; ++e) n += b[t + e]
        y[e] = n
      }
      if (i) {
        const e = m
        ;(m = yI({
          inputs: { x: m },
          backend: n,
          attrs: { shape: El(m.shape, u) },
        })),
          n.disposeIntermediateTensorInfo(e)
      }
      return (
        n.disposeIntermediateTensorInfo(o),
        null != c && n.disposeIntermediateTensorInfo(p),
        m
      )
    }
    const XN = { kernelName: Zn, backendName: 'cpu', kernelFunc: KN },
      YN = {
        kernelName: yt,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2021 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { equation: s } = r,
              a = t,
              { allDims: i, summedDims: o, idDims: l } = md(s, a.length)
            yd(i.length, l, a)
            const { path: u, steps: c } = bd(o, l),
              h = c.length
            let p = null,
              d = i.length
            const f = []
            for (let e = 0; e < h; ++e) {
              for (const t of c[e]) {
                const { permutationIndices: e, expandDims: r } = gd(d, l[t])
                let s
                xd(e)
                  ? (s = a[t])
                  : ((s = RI({
                      inputs: { x: a[t] },
                      backend: n,
                      attrs: { perm: e },
                    })),
                    f.push(s))
                const i = s.shape.slice()
                for (let e = 0; e < r.length; ++e) i.splice(r[e], 0, 1)
                B(s.shape, i) ||
                  ((s = yI({
                    inputs: { x: s },
                    backend: n,
                    attrs: { shape: i },
                  })),
                  f.push(s)),
                  null === p
                    ? (p = s)
                    : ((p = jN({ inputs: { a: s, b: p }, backend: n })),
                      f.push(p))
              }
              e < h - 1 &&
                (u[e] >= 0 &&
                  ((p = KN({
                    inputs: { x: p },
                    backend: n,
                    attrs: { axis: u[e] - (i.length - d), keepDims: !1 },
                  })),
                  f.push(p)),
                d--)
            }
            for (const e of f) e !== p && n.disposeIntermediateTensorInfo(e)
            return p
          },
      },
      ZN = {
        kernelName: xt,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n } = e,
              { dy: r, y: s } = t
            Fk([r, s], 'eluGrad')
            const a = new Float32Array(P(s.shape)),
              i = n.data.get(s.dataId).values,
              o = n.data.get(r.dataId).values
            for (let e = 0; e < i.length; ++e) {
              const t = i[e]
              a[e] = t >= 1 ? o[e] : o[e] * (t + 1)
            }
            return n.makeTensorInfo(s.shape, 'float32', a)
          },
      },
      JN = Gk((e, t) => (e === t ? 1 : 0)),
      QN = hI(vt, JN, null, 'bool'),
      eS = { kernelName: vt, backendName: 'cpu', kernelFunc: QN },
      tS = Zp,
      nS = Jp,
      rS = Qp,
      sS = ed,
      aS = td,
      iS = nd,
      oS = Mk(wt, (e) => {
        const t = Math.sign(e),
          n = Math.abs(e),
          r = 1 / (1 + tS * n)
        return (
          t *
          (1 -
            ((((iS * r + aS) * r + sS) * r + rS) * r + nS) *
              r *
              Math.exp(-n * n))
        )
      }),
      lS = { kernelName: wt, backendName: 'cpu', kernelFunc: oS },
      uS = Jk((e) => Math.exp(e)),
      cS = Lk(kt, uS, 'float32'),
      hS = { kernelName: kt, backendName: 'cpu', kernelFunc: cS }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function pS(e) {
      const { inputs: t, backend: n, attrs: r } = e,
        { input: s } = t,
        { dim: a } = r,
        i = s.shape.length,
        o = s.shape.slice()
      let l = a
      return (
        a < 0 &&
          (O(
            -(i + 1) <= a,
            () => `Axis must be in the interval [${-(i + 1)}, ${i}]`,
          ),
          (l = i + a + 1)),
        o.splice(l, 0, 1),
        yI({ inputs: { x: s }, backend: n, attrs: { shape: o } })
      )
    }
    const dS = { kernelName: It, backendName: 'cpu', kernelFunc: pS },
      fS = Jk((e) => Math.expm1(e)),
      mS = Lk(Nt, fS),
      gS = { kernelName: Nt, backendName: 'cpu', kernelFunc: mS },
      yS = Gk((e, t) => e / t),
      bS = hI(gt, yS),
      xS = { kernelName: gt, backendName: 'cpu', kernelFunc: bS },
      wS = Gk((e, t) => e - t),
      vS = pI((e, t, n, r) => ({ real: e - n, imag: t - r })),
      kS = hI(pr, wS, vS),
      IS = { kernelName: pr, backendName: 'cpu', kernelFunc: kS }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function NS(e, t, n) {
      const r = e.shape,
        s = r[0],
        a = r[1],
        i = n.data.get(e.dataId),
        o = i.complexTensorInfos.real,
        l = i.complexTensorInfos.imag,
        u = [s, a],
        c = P(u),
        h = K('float32', c),
        p = K('float32', c)
      for (let e = 0; e < s; e++) {
        const r = nN({
            inputs: { x: o },
            backend: n,
            attrs: { begin: [e, 0], size: [1, a] },
          }),
          s = nN({
            inputs: { x: l },
            backend: n,
            attrs: { begin: [e, 0], size: [1, a] },
          }),
          i = rI({ inputs: { real: r, imag: s }, backend: n }),
          { real: u, imag: c } = SS(i, t, n),
          d = rd(u, c)
        for (let t = 0; t < a; t++) {
          const n = od(d, t)
          ;(h[e * a + t] = n.real), (p[e * a + t] = n.imag)
        }
        n.disposeIntermediateTensorInfo(r),
          n.disposeIntermediateTensorInfo(s),
          n.disposeIntermediateTensorInfo(i)
      }
      const d = n.makeTensorInfo(u, 'float32', h),
        f = n.makeTensorInfo(u, 'float32', p),
        m = rI({ inputs: { real: d, imag: f }, backend: n })
      return (
        n.disposeIntermediateTensorInfo(d),
        n.disposeIntermediateTensorInfo(f),
        m
      )
    }
    function SS(e, t, n) {
      const r = P(e.shape),
        s = n.data.get(e.dataId),
        a = n.data.get(s.complexTensorInfos.real.dataId).values,
        i = n.data.get(s.complexTensorInfos.imag.dataId).values
      if ((o = r) & (o - 1)) {
        const e = (function (e, t, n) {
          const r = new Float32Array(2 * t)
          for (let s = 0; s < t; s++) {
            let a = 0,
              i = 0
            for (let r = 0; r < t; r++) {
              const o = cd(s * r, t, n),
                l = od(e, r)
              ;(a += l.real * o.real - l.imag * o.imag),
                (i += l.real * o.imag + l.imag * o.real)
            }
            n && ((a /= t), (i /= t)), ld(r, a, i, s)
          }
          return r
        })(rd(a, i), r, t)
        return sd(e)
      }
      {
        const s = TS(a, i, r, t, n),
          o = [e.shape[0], e.shape[1]]
        if (t) {
          const e = n.makeTensorInfo(o, 'float32', s.real),
            t = n.makeTensorInfo(o, 'float32', s.imag),
            a = n.makeTensorInfo([], 'float32', Qr(r, 'float32')),
            i = Bk({ inputs: { x: a }, backend: n }),
            l = xS.kernelFunc({ inputs: { a: e, b: a }, backend: n }),
            u = xS.kernelFunc({ inputs: { a: t, b: i }, backend: n }),
            c = n.data.get(l.dataId).values,
            h = n.data.get(u.dataId).values
          return (
            n.disposeIntermediateTensorInfo(e),
            n.disposeIntermediateTensorInfo(t),
            n.disposeIntermediateTensorInfo(a),
            n.disposeIntermediateTensorInfo(i),
            n.disposeIntermediateTensorInfo(l),
            n.disposeIntermediateTensorInfo(u),
            { real: c, imag: h }
          )
        }
        return s
      }
      var o
    }
    function TS(e, t, n, r, s) {
      if (1 === n) return { real: e, imag: t }
      const a = rd(e, t),
        i = n / 2,
        o = ad(a),
        l = o.real,
        u = o.imag,
        c = [l.length],
        h = s.makeTensorInfo(c, 'float32', l),
        p = s.makeTensorInfo(c, 'float32', u),
        d = rI({ inputs: { real: h, imag: p }, backend: s }),
        f = id(a),
        m = f.real,
        g = f.imag,
        y = [m.length],
        b = s.makeTensorInfo(y, 'float32', m),
        x = s.makeTensorInfo(y, 'float32', g),
        w = rI({ inputs: { real: b, imag: x }, backend: s }),
        v = TS(l, u, i, r, s),
        k = v.real,
        I = v.imag,
        N = [k.length],
        S = s.makeTensorInfo(N, 'float32', k),
        T = s.makeTensorInfo(N, 'float32', I),
        C = rI({ inputs: { real: S, imag: T }, backend: s }),
        $ = TS(m, g, i, r, s),
        E = $.real,
        R = $.imag,
        A = [E.length],
        _ = s.makeTensorInfo(A, 'float32', E),
        F = s.makeTensorInfo(A, 'float32', R),
        D = rI({ inputs: { real: _, imag: F }, backend: s }),
        O = ud(n, r),
        M = [O.real.length],
        L = s.makeTensorInfo(M, 'float32', O.real),
        z = s.makeTensorInfo(M, 'float32', O.imag),
        P = rI({ inputs: { real: L, imag: z }, backend: s }),
        B = jN({ inputs: { a: P, b: D }, backend: s }),
        W = mI({ inputs: { a: C, b: B }, backend: s }),
        V = kS({ inputs: { a: C, b: B }, backend: s }),
        U = iI({ inputs: { input: W }, backend: s }),
        G = iI({ inputs: { input: V }, backend: s }),
        H = gN({ inputs: { input: W }, backend: s }),
        j = gN({ inputs: { input: V }, backend: s }),
        q = bN({ inputs: [U, G], backend: s, attrs: { axis: 0 } }),
        K = bN({ inputs: [H, j], backend: s, attrs: { axis: 0 } }),
        X = s.data.get(q.dataId).values,
        Y = s.data.get(K.dataId).values
      return (
        s.disposeIntermediateTensorInfo(h),
        s.disposeIntermediateTensorInfo(p),
        s.disposeIntermediateTensorInfo(d),
        s.disposeIntermediateTensorInfo(b),
        s.disposeIntermediateTensorInfo(x),
        s.disposeIntermediateTensorInfo(w),
        s.disposeIntermediateTensorInfo(S),
        s.disposeIntermediateTensorInfo(T),
        s.disposeIntermediateTensorInfo(C),
        s.disposeIntermediateTensorInfo(_),
        s.disposeIntermediateTensorInfo(F),
        s.disposeIntermediateTensorInfo(D),
        s.disposeIntermediateTensorInfo(L),
        s.disposeIntermediateTensorInfo(z),
        s.disposeIntermediateTensorInfo(P),
        s.disposeIntermediateTensorInfo(B),
        s.disposeIntermediateTensorInfo(W),
        s.disposeIntermediateTensorInfo(V),
        s.disposeIntermediateTensorInfo(U),
        s.disposeIntermediateTensorInfo(H),
        s.disposeIntermediateTensorInfo(G),
        s.disposeIntermediateTensorInfo(j),
        s.disposeIntermediateTensorInfo(q),
        s.disposeIntermediateTensorInfo(K),
        { real: X, imag: Y }
      )
    }
    const CS = {
      kernelName: St,
      backendName: 'cpu',
      kernelFunc:
        /**
         * @license
         * Copyright 2020 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (e) {
          const { inputs: t, backend: n } = e,
            { input: r } = t,
            s = P(r.shape),
            a = r.shape[r.shape.length - 1],
            i = yI({
              inputs: { x: r },
              backend: n,
              attrs: { shape: [s / a, a] },
            }),
            o = NS(i, !1, n),
            l = yI({ inputs: { x: o }, backend: n, attrs: { shape: r.shape } })
          return (
            n.disposeIntermediateTensorInfo(i),
            n.disposeIntermediateTensorInfo(o),
            l
          )
        },
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function $S(e) {
      const { backend: t, attrs: n } = e,
        { shape: r, value: s, dtype: a } = n,
        i = a || te(s),
        o = X(i, P(r))
      return (
        (function (e, t) {
          e.fill(t)
        })(o, s),
        t.makeTensorInfo(r, i, o)
      )
    }
    const ES = { kernelName: Tt, backendName: 'cpu', kernelFunc: $S },
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */ RS = {
        kernelName: Ct,
        backendName: 'cpu',
        kernelFunc: ({ inputs: e, attrs: t, backend: n }) => {
          const { image: r } = e,
            s = n,
            a = K(r.dtype, P(r.shape)),
            [i, o, l, u] = r.shape,
            c = s.data.get(r.dataId).values
          for (let e = 0; e < i; e++) {
            const t = e * l * o * u
            for (let e = 0; e < o; e++) {
              const n = e * (l * u)
              for (let e = 0; e < l; e++) {
                const r = e * u
                for (let s = 0; s < u; s++) {
                  const i = Math.round(l - e - 1),
                    o = t + n + r + s
                  let h = c[o]
                  i >= 0 && i < l && (h = c[t + n + i * u + s]), (a[o] = h)
                }
              }
            }
          }
          return {
            dataId: s.write(a, r.shape, r.dtype),
            shape: r.shape,
            dtype: r.dtype,
          }
        },
      },
      AS = Jk((e) => Math.floor(e)),
      _S = Lk($t, AS),
      FS = { kernelName: $t, backendName: 'cpu', kernelFunc: _S },
      DS = Gk((e, t) => Math.floor(e / t)),
      OS = hI(Et, DS, null, 'int32'),
      MS = { kernelName: Et, backendName: 'cpu', kernelFunc: OS },
      LS = {
        kernelName: Cr,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s, filter: a, bias: i, preluActivationWeights: o } = t,
              {
                strides: l,
                pad: u,
                dataFormat: c,
                dilations: h,
                dimRoundingMode: p,
                activation: d,
                leakyreluAlpha: f,
              } = r
            let m = wN({
              inputs: { x: s, filter: a },
              backend: n,
              attrs: {
                strides: l,
                pad: u,
                dataFormat: c,
                dilations: h,
                dimRoundingMode: p,
              },
            })
            if (i) {
              const e = m
              if ('NCHW' === c && 1 === i.shape.length && 1 !== i.shape[0]) {
                const e = yI({
                  inputs: { x: i },
                  backend: n,
                  attrs: { shape: [i.shape[0], 1, 1] },
                })
                ;(m = mI({ inputs: { a: m, b: e }, backend: n })),
                  n.disposeIntermediateTensorInfo(e)
              } else m = mI({ inputs: { a: m, b: i }, backend: n })
              n.disposeIntermediateTensorInfo(e)
            }
            if (d) {
              const e = m
              if (
                'NCHW' === c &&
                'prelu' === d &&
                1 === o.shape.length &&
                1 !== o.shape[0]
              ) {
                const e = yI({
                  inputs: { x: o },
                  backend: n,
                  attrs: { shape: [o.shape[0], 1, 1] },
                })
                ;(m = nI(n, m, d, e, f)), n.disposeIntermediateTensorInfo(e)
              } else m = nI(n, m, d, o, f)
              n.disposeIntermediateTensorInfo(e)
            }
            return m
          },
      },
      zS = {
        kernelName: $r,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s, filter: a, bias: i, preluActivationWeights: o } = t,
              {
                strides: l,
                pad: u,
                dataFormat: c,
                dilations: h,
                dimRoundingMode: p,
                activation: d,
                leakyreluAlpha: f,
              } = r
            let m = MN({
              inputs: { x: s, filter: a },
              backend: n,
              attrs: {
                strides: l,
                pad: u,
                dataFormat: c,
                dilations: h,
                dimRoundingMode: p,
              },
            })
            if (i) {
              const e = m
              ;(m = mI({ inputs: { a: m, b: i }, backend: n })),
                n.disposeIntermediateTensorInfo(e)
            }
            if (d) {
              const e = m
              ;(m = nI(n, m, d, o, f)), n.disposeIntermediateTensorInfo(e)
            }
            return m
          },
      }
    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function PS(e, t, n, r, s, a, i, o, l) {
      const u = qa([r, a], n)
      for (let n = 0; n < r; n++) {
        const r = []
        let c = 0
        for (let t = 0; t < s; t++) {
          const a = e[n * s + t]
          ;(c += a * i[t]), r.push(a)
        }
        if (c < 0 || c >= l / a)
          throw new Error(`Invalid indices: ${r} does not index into ${o}`)
        for (let e = 0; e < a; e++)
          u.values[n * a + e] = t.get(...t.indexToLoc(c * a + e))
      }
      return u
    }
    const BS = {
      kernelName: _t,
      backendName: 'cpu',
      kernelFunc:
        /**
         * @license
         * Copyright 2020 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (e) {
          const { inputs: t, backend: n } = e,
            { params: r, indices: s } = t,
            a = P(r.shape),
            i = s.shape,
            o = i[i.length - 1],
            [l, u, c, h] = Kp(r, s)
          if (0 === u) return n.makeTensorInfo(l, r.dtype, [])
          const p = PS(
            n.data.get(s.dataId).values,
            n.bufferSync(r),
            r.dtype,
            u,
            o,
            c,
            h,
            r.shape,
            a,
          )
          return n.makeTensorInfo(l, r.dtype, p.values)
        },
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function WS(e, t, n) {
      const r = qa(n, e.dtype)
      for (let n = 0; n < r.size; ++n) {
        const s = r.indexToLoc(n).slice(),
          a = s[0],
          i = s[2],
          o = t.locToIndex([a, i])
        s[2] = t.values[o]
        const l = e.locToIndex(s)
        0 <= l && l < e.values.length && (r.values[n] = e.values[l])
      }
      return r
    }
    const VS = {
        kernelName: At,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s, indices: a } = t,
              { axis: i, batchDims: o } = r
            Fk([s, a], 'gatherV2')
            const l = j(i, s.shape)[0],
              u = n.data.get(a.dataId).values,
              c = s.shape[l]
            for (let e = 0; e < u.length; ++e) {
              const t = u[e]
              O(
                t <= c - 1 && t >= 0,
                () => `GatherV2: the index value ${t} is not in [0, ${c - 1}]`,
              )
            }
            let h = o
            null == o && (h = 0)
            const p = P(a.shape),
              d = Md(s, a, l, h),
              f = yI({
                inputs: { x: s },
                backend: n,
                attrs: {
                  shape: [d.batchSize, d.outerSize, d.dimSize, d.sliceSize],
                },
              }),
              m = yI({
                inputs: { x: a },
                backend: n,
                attrs: { shape: [d.batchSize, p / d.batchSize] },
              }),
              g = [d.batchSize, d.outerSize, p / d.batchSize, d.sliceSize],
              y = n.bufferSync(m),
              b = WS(n.bufferSync(f), y, g)
            return (
              n.disposeIntermediateTensorInfo(f),
              n.disposeIntermediateTensorInfo(m),
              n.makeTensorInfo(d.outputShape, b.dtype, b.values)
            )
          },
      },
      US = Gk((e, t) => (e > t ? 1 : 0)),
      GS = hI(Ft, US, null, 'bool'),
      HS = { kernelName: Ft, backendName: 'cpu', kernelFunc: GS },
      jS = Gk((e, t) => (e >= t ? 1 : 0)),
      qS = hI(Dt, jS, null, 'bool'),
      KS = { kernelName: Dt, backendName: 'cpu', kernelFunc: qS },
      XS = {
        kernelName: Mt,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n } = e,
              { input: r } = t,
              s = P(r.shape),
              a = r.shape[r.shape.length - 1],
              i = yI({
                inputs: { x: r },
                backend: n,
                attrs: { shape: [s / a, a] },
              }),
              o = NS(i, !0, n),
              l = yI({
                inputs: { x: o },
                backend: n,
                attrs: { shape: r.shape },
              })
            return (
              n.disposeIntermediateTensorInfo(i),
              n.disposeIntermediateTensorInfo(o),
              l
            )
          },
      },
      YS = Mk(zt, (e) => (Number.isFinite(e) ? 1 : 0), 'bool'),
      ZS = { kernelName: zt, backendName: 'cpu', kernelFunc: YS },
      JS = Mk(Pt, (e) => (Math.abs(e) === 1 / 0 ? 1 : 0), 'bool'),
      QS = { kernelName: Pt, backendName: 'cpu', kernelFunc: JS },
      eT = Mk(Bt, (e) => (Number.isNaN(e) ? 1 : 0), 'bool'),
      tT = { kernelName: Bt, backendName: 'cpu', kernelFunc: eT },
      nT = Gk((e, t) => (e < t ? 1 : 0)),
      rT = hI(Vt, nT, null, 'bool'),
      sT = { kernelName: Vt, backendName: 'cpu', kernelFunc: rT },
      aT = Gk((e, t) => (e <= t ? 1 : 0)),
      iT = hI(Ut, aT, null, 'bool'),
      oT = { kernelName: Ut, backendName: 'cpu', kernelFunc: iT }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function lT(e, t, n) {
      const r = (t - e) / (n - 1),
        s = le(n, 'float32')
      s[0] = e
      for (let e = 1; e < s.length; e++) s[e] = s[e - 1] + r
      return s
    }
    const uT = {
        kernelName: Gt,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { backend: t, attrs: n } = e,
              { start: r, stop: s, num: a } = n,
              i = lT(r, s, a)
            return t.makeTensorInfo([i.length], 'float32', i)
          },
      },
      cT = Jk((e) => Math.log(e)),
      hT = Lk(Ht, cT),
      pT = { kernelName: Ht, backendName: 'cpu', kernelFunc: hT },
      dT = Mk(jt, (e) => Math.log1p(e)),
      fT = { kernelName: jt, backendName: 'cpu', kernelFunc: dT },
      mT = Gk((e, t) => e && t),
      gT = hI(qt, mT, null, 'bool'),
      yT = { kernelName: qt, backendName: 'cpu', kernelFunc: gT },
      bT = Mk(Kt, (e) => (e ? 0 : 1), 'bool'),
      xT = { kernelName: Kt, backendName: 'cpu', kernelFunc: bT },
      wT = Gk((e, t) => e || t),
      vT = hI(Xt, wT, null, 'bool'),
      kT = { kernelName: Xt, backendName: 'cpu', kernelFunc: vT },
      IT = {
        kernelName: Yt,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s } = t,
              { depthRadius: a, bias: i, alpha: o, beta: l } = r
            Fk(s, 'LRN')
            const u = s.shape[3],
              c = u - 1,
              h = n.data.get(s.dataId).values,
              p = P(s.shape),
              d = new Float32Array(p)
            function f(e) {
              const t = e % u
              let n = e - t + Math.max(0, t - a)
              const r = e - t + Math.min(t + a, c)
              let s = 0
              for (; n <= r; n++) {
                const e = h[n]
                s += e * e
              }
              return s
            }
            for (let e = 0; e < p; e++) {
              const t = f(e),
                n = h[e] * Math.pow(i + o * t, -l)
              d[e] = n
            }
            return n.makeTensorInfo(s.shape, s.dtype, d)
          },
      },
      NT = {
        kernelName: Zt,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s, y: a, dy: i } = t,
              { depthRadius: o, bias: l, alpha: u, beta: c } = r
            Fk(i, 'LRNGrad')
            const h = P(i.shape),
              p = i.shape[3],
              d = n.data.get(i.dataId).values,
              f = n.data.get(s.dataId).values,
              m = n.data.get(a.dataId).values,
              g = new Float32Array(h),
              y = h
            for (let e = 0; e < y; e++) {
              const t = e % p,
                n = e - t + Math.max(0, t - o),
                r = e - t + Math.min(p, t + o + 1)
              let s = 0
              for (let e = n; e < r; e++) s += Math.pow(f[e], 2)
              s = u * s + l
              for (let t = n; t < r; t++) {
                let n = (-2 * u * c * f[t] * m[e]) / s
                e === t && (n += Math.pow(s, -c)), (n *= d[e]), (g[t] += n)
              }
            }
            return n.makeTensorInfo(i.shape, s.dtype, g)
          },
      }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function ST(e, t, n, r) {
      const s = K(r, P(n))
      for (let n = 0; n < s.length; ++n) {
        const r = n * t
        let a = e[r]
        for (let n = 0; n < t; ++n) {
          const t = e[r + n]
          ;(Number.isNaN(t) || t > a) && (a = t)
        }
        s[n] = a
      }
      return s
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function TT(e) {
      const { inputs: t, backend: n, attrs: r } = e,
        { x: s } = t,
        { reductionIndices: a, keepDims: i } = r,
        o = n
      let l = s.shape
      const u = l.length,
        c = j(a, l)
      let h = c
      const p = Al(h, u)
      let d = o.data.get(s.dataId).values
      if (null != p) {
        const e = new Array(u)
        for (let t = 0; t < e.length; t++) e[t] = l[p[t]]
        ;(d = EI(d, l, s.dtype, p, e)), (h = Fl(h.length, u)), (l = e)
      }
      Fk(s, 'max'), Rl('max', h, u)
      const [f, m] = $l(l, h),
        g = ST(d, P(m), f, s.dtype),
        y = o.write(g, f, s.dtype)
      let b = f
      return i && (b = El(f, c)), { dataId: y, shape: b, dtype: s.dtype }
    }
    const CT = { kernelName: Jt, backendName: 'cpu', kernelFunc: TT },
      $T = Gk((e, t) => Math.max(e, t)),
      ET = hI(Qt, $T),
      RT = { kernelName: Qt, backendName: 'cpu', kernelFunc: ET },
      AT = {
        kernelName: en,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s } = t
            Fk(s, 'maxPool')
            const { filterSize: a, strides: i, pad: o, dimRoundingMode: l } = r
            O(
              To(i, 1),
              () =>
                `Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`,
            )
            const u = go(s.shape, a, i, 1, o, l)
            let c
            if (
              1 === u.filterWidth &&
              1 === u.filterHeight &&
              B(u.inShape, u.outShape)
            )
              c = Bk({ inputs: { x: s }, backend: n })
            else {
              const e = n.data.get(s.dataId).values,
                t = se(s.shape),
                r = qI(e, s.shape, s.dtype, t, u, 'max')
              c = n.makeTensorInfo(u.outShape, s.dtype, r.values)
            }
            return c
          },
      },
      _T = {
        kernelName: nn,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s } = t,
              {
                filterSize: a,
                strides: i,
                pad: o,
                dimRoundingMode: l,
                dataFormat: u,
              } = r
            Fk(s, 'maxPool3d')
            const c = yo(s.shape, a, i, 1, o, l, u),
              h = XI(
                n.data.get(s.dataId).values,
                s.shape,
                s.dtype,
                se(s.shape),
                c,
                'max',
              )
            return n.makeTensorInfo(h.shape, 'float32', h.values)
          },
      },
      FT = {
        kernelName: rn,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { dy: s, input: a } = t,
              { filterSize: i, strides: o, pad: l, dimRoundingMode: u } = r
            Fk([s, a], 'maxPool3DGrad')
            const c = yo(a.shape, i, o, 1, l, u),
              h = (function (e, t) {
                const n = qa(t.outShape, 'int32'),
                  r = t.strideDepth,
                  s = t.strideHeight,
                  a = t.strideWidth,
                  i = t.dilationDepth,
                  o = t.dilationHeight,
                  l = t.dilationWidth,
                  u = t.effectiveFilterDepth,
                  c = t.effectiveFilterHeight,
                  h = t.effectiveFilterWidth,
                  p = t.padInfo.front,
                  d = t.padInfo.top,
                  f = t.padInfo.left
                for (let m = 0; m < t.batchSize; ++m)
                  for (let g = 0; g < t.inChannels; ++g)
                    for (let y = 0; y < t.outDepth; ++y) {
                      const b = y * r - p
                      let x = b
                      for (; x < 0; ) x += i
                      const w = Math.min(t.inDepth, u + b)
                      for (let r = 0; r < t.outHeight; ++r) {
                        const u = r * s - d
                        let p = u
                        for (; p < 0; ) p += o
                        const v = Math.min(t.inHeight, c + u)
                        for (let s = 0; s < t.outWidth; ++s) {
                          const d = s * a - f
                          let k = d
                          for (; k < 0; ) k += l
                          const I = Math.min(t.inWidth, h + d)
                          let N = Number.NEGATIVE_INFINITY,
                            S = -1
                          for (let t = x; t < w; t += i) {
                            const n = t - b
                            for (let r = p; r < v; r += o) {
                              const s = r - u
                              for (let a = k; a < I; a += l) {
                                const i = a - d,
                                  o = e.get(m, t, r, a, g)
                                o >= N && ((N = o), (S = n * c * h + s * c + i))
                              }
                            }
                          }
                          n.set(S, m, y, r, s, g)
                        }
                      }
                    }
                return n
              })(n.bufferSync(a), c),
              p = c.strideDepth,
              d = c.strideHeight,
              f = c.strideWidth,
              m = c.dilationDepth,
              g = c.dilationHeight,
              y = c.dilationWidth,
              b = c.effectiveFilterDepth,
              x = c.effectiveFilterHeight,
              w = c.effectiveFilterWidth,
              v = b - 1 - c.padInfo.front,
              k = w - 1 - c.padInfo.left,
              I = x - 1 - c.padInfo.top,
              N = qa(a.shape, 'float32'),
              S = n.bufferSync(s)
            for (let e = 0; e < c.batchSize; ++e)
              for (let t = 0; t < c.inChannels; ++t)
                for (let n = 0; n < c.inDepth; ++n)
                  for (let r = 0; r < c.inHeight; ++r)
                    for (let s = 0; s < c.inWidth; ++s) {
                      const a = n - v,
                        i = r - I,
                        o = s - k
                      let l = 0
                      for (let n = 0; n < b; n += m) {
                        const r = (a + n) / p
                        if (!(r < 0 || r >= c.outDepth || Math.floor(r) !== r))
                          for (let s = 0; s < x; s += g) {
                            const a = (i + s) / d
                            if (
                              !(
                                a < 0 ||
                                a >= c.outHeight ||
                                Math.floor(a) !== a
                              )
                            )
                              for (let i = 0; i < w; i += y) {
                                const u = (o + i) / f
                                if (
                                  u < 0 ||
                                  u >= c.outWidth ||
                                  Math.floor(u) !== u
                                )
                                  continue
                                const p =
                                  b * x * w - 1 - h.get(e, r, a, u, t) ===
                                  n * x * w + s * w + i
                                    ? 1
                                    : 0
                                0 !== p && (l += S.get(e, r, a, u, t) * p)
                              }
                          }
                      }
                      N.set(l, e, n, r, s, t)
                    }
            return n.makeTensorInfo(N.shape, N.dtype, N.values)
          },
      },
      DT = {
        kernelName: tn,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { dy: s, input: a, output: i } = t,
              o = a
            Fk([a, i], 'maxPoolGrad')
            const { filterSize: l, strides: u, pad: c, dimRoundingMode: h } = r,
              p = go(o.shape, l, u, 1, c, h),
              d = n.data.get(o.dataId).values,
              f = qa(p.outShape, o.dtype, KI(d, o.shape, o.dtype, p).values),
              m = p.strideHeight,
              g = p.strideWidth,
              y = p.dilationHeight,
              b = p.dilationWidth,
              x = p.effectiveFilterHeight,
              w = p.effectiveFilterWidth,
              v = w - 1 - p.padInfo.left,
              k = x - 1 - p.padInfo.top,
              I = qa(o.shape, 'float32'),
              N = n.data.get(s.dataId).values,
              S = qa(s.shape, 'float32', N)
            for (let e = 0; e < p.batchSize; ++e)
              for (let t = 0; t < p.inChannels; ++t)
                for (let n = 0; n < p.inHeight; ++n)
                  for (let r = 0; r < p.inWidth; ++r) {
                    const s = n - k,
                      a = r - v
                    let i = 0
                    for (let n = 0; n < x; n += y) {
                      const r = (s + n) / m
                      if (!(r < 0 || r >= p.outHeight || Math.floor(r) !== r))
                        for (let s = 0; s < w; s += b) {
                          const o = (a + s) / g
                          if (o < 0 || o >= p.outWidth || Math.floor(o) !== o)
                            continue
                          const l =
                            x * w - 1 - f.get(e, r, o, t) === n * w + s ? 1 : 0
                          0 !== l && (i += S.get(e, r, o, t) * l)
                        }
                    }
                    I.set(i, e, n, r, t)
                  }
            return n.makeTensorInfo(I.shape, I.dtype, I.values)
          },
      },
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */ OT = {
        kernelName: sn,
        backendName: 'cpu',
        kernelFunc: ({ inputs: e, attrs: t, backend: n }) => {
          const { x: r } = e,
            { filterSize: s, strides: a, pad: i, includeBatchInIndex: o } = t,
            l = n
          Fk(r, 'MaxPoolWithArgmax')
          const u = l.data.get(r.dataId).values,
            c = go(r.shape, s, a, [1, 1], i),
            [h, p] =
              /**
               * @license
               * Copyright 2020 Google LLC. All Rights Reserved.
               * Licensed under the Apache License, Version 2.0 (the "License");
               * you may not use this file except in compliance with the License.
               * You may obtain a copy of the License at
               *
               * http://www.apache.org/licenses/LICENSE-2.0
               *
               * Unless required by applicable law or agreed to in writing, software
               * distributed under the License is distributed on an "AS IS" BASIS,
               * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
               * See the License for the specific language governing permissions and
               * limitations under the License.
               * =============================================================================
               */
              (function (e, t, n, r, s) {
                const a = qI(e, 0, n, se(t), s, 'max'),
                  i = KI(e, t, n, s, !0, r)
                return [a.values, i.values]
              })(u, r.shape, r.dtype, o, c),
            d = l.write(h, c.outShape, r.dtype),
            f = l.write(p, c.outShape, r.dtype)
          return [
            { dataId: d, shape: c.outShape, dtype: r.dtype },
            { dataId: f, shape: c.outShape, dtype: 'int32' },
          ]
        },
      },
      MT = {
        kernelName: an,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s } = t,
              { axis: a, keepDims: i } = r,
              o = j(a, s.shape),
              l = P($l(s.shape, o)[1]),
              u = [],
              c = n.makeTensorInfo([], 'float32', new Float32Array([l]))
            u.push(c)
            const h = uI({
              inputs: { x: s },
              backend: n,
              attrs: { dtype: 'float32' },
            })
            u.push(h)
            const p = bS({ inputs: { a: h, b: c }, backend: n })
            u.push(p)
            const d = KN({
              inputs: { x: p },
              backend: n,
              attrs: { axis: a, keepDims: i },
            })
            return u.forEach((e) => n.disposeIntermediateTensorInfo(e)), d
          },
      },
      LT = {
        kernelName: on,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s } = t,
              { axis: a, keepDims: i } = r
            Fk(s, 'min')
            const o = j(a, s.shape)
            let l = o
            const u = Al(l, s.shape.length)
            let c = s
            null != u &&
              ((c = RI({ inputs: { x: s }, backend: n, attrs: { perm: u } })),
              (l = Fl(l.length, s.shape.length))),
              Rl('min', l, c.shape.length)
            const [h, p] = $l(c.shape, l),
              d = P(p),
              f = le(P(h), c.dtype),
              m = n.data.get(c.dataId).values
            for (let e = 0; e < f.length; ++e) {
              const t = e * d
              let n = m[t]
              for (let e = 0; e < d; ++e) {
                const r = m[t + e]
                ;(Number.isNaN(r) || r < n) && (n = r)
              }
              f[e] = n
            }
            null != u && n.disposeIntermediateTensorInfo(c)
            const g = n.makeTensorInfo(h, c.dtype, f)
            if (i) {
              const e = yI({
                inputs: { x: g },
                backend: n,
                attrs: { shape: El(h, o) },
              })
              return n.disposeIntermediateTensorInfo(g), e
            }
            return g
          },
      },
      zT = Gk((e, t) => Math.min(e, t)),
      PT = hI(ln, zT),
      BT = { kernelName: ln, backendName: 'cpu', kernelFunc: PT },
      WT = {
        kernelName: un,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s } = t,
              { paddings: a, mode: i } = r
            Fk(s, 'mirrorPad')
            const o = a.map((e, t) => e[0] + s.shape[t] + e[1]),
              l = a.map((e) => e[0]),
              u = a.map((e, t) => e[0] + s.shape[t]),
              c = 'reflect' === i ? 0 : 1,
              h = n.data.get(s.dataId).values,
              p = s.shape.length,
              d = se(s.shape),
              f = P(o),
              m = o.length,
              g = se(o),
              y = K(s.dtype, f)
            for (let e = 0; e < f; e++) {
              let t = pe(e, m, g)
              for (let e = 0; e < m; e++)
                t[e] < l[e]
                  ? (t[e] = 2 * l[e] - t[e] - c)
                  : t[e] >= u[e] && (t[e] = 2 * (u[e] - 1) - t[e] + c)
              t = t.map((e, t) => e - l[t])
              const n = he(t, p, d)
              y[e] = h[n]
            }
            return { dataId: n.write(y, o, s.dtype), shape: o, dtype: s.dtype }
          },
      },
      VT = Gk((e, t) => {
        const n = e % t
        return (e < 0 && t < 0) || (e >= 0 && t >= 0) ? n : (n + t) % t
      }),
      UT = hI(cn, VT),
      GT = { kernelName: cn, backendName: 'cpu', kernelFunc: UT }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function HT(e) {
      const { inputs: t, backend: n, attrs: r } = e,
        { logits: s } = t,
        { dim: a } = r,
        i = s.shape.length
      let o = a
      if ((-1 === o && (o = i - 1), o !== i - 1))
        throw Error(
          `Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${o}`,
        )
      const l = j([o], s.shape),
        u = TT({
          inputs: { x: s },
          backend: n,
          attrs: { reductionIndices: l, keepDims: !1 },
        }),
        c = El(u.shape, l),
        h = yI({ inputs: { x: u }, backend: n, attrs: { shape: c } }),
        p = kS({ inputs: { a: s, b: h }, backend: n }),
        d = cS({ inputs: { x: p }, backend: n }),
        f = KN({
          inputs: { x: d },
          backend: n,
          attrs: { axis: l, keepDims: !1 },
        }),
        m = yI({ inputs: { x: f }, backend: n, attrs: { shape: c } }),
        g = bS({ inputs: { a: d, b: m }, backend: n })
      return (
        n.disposeIntermediateTensorInfo(u),
        n.disposeIntermediateTensorInfo(h),
        n.disposeIntermediateTensorInfo(p),
        n.disposeIntermediateTensorInfo(d),
        n.disposeIntermediateTensorInfo(f),
        n.disposeIntermediateTensorInfo(m),
        g
      )
    }
    const jT = { kernelName: er, backendName: 'cpu', kernelFunc: HT },
      qT = {
        kernelName: hn,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { logits: s } = t,
              { numSamples: a, seed: i, normalized: o } = r
            Fk(s, 'multinomial')
            const l = o
                ? s
                : HT({ inputs: { logits: s }, backend: n, attrs: { dim: -1 } }),
              u = l.shape[0],
              c = l.shape[1],
              h = n.data.get(l.dataId).values,
              p = [u, a],
              d = le(P(p), 'int32')
            for (let e = 0; e < u; ++e) {
              const t = e * c,
                n = new Float32Array(c - 1)
              n[0] = h[t]
              for (let e = 1; e < n.length; ++e) n[e] = n[e - 1] + h[t + e]
              const r = Ju.alea(i.toString()),
                s = e * a
              for (let e = 0; e < a; ++e) {
                const t = r()
                d[s + e] = n.length
                for (let r = 0; r < n.length; r++)
                  if (t < n[r]) {
                    d[s + e] = r
                    break
                  }
              }
            }
            return (
              o || n.disposeIntermediateTensorInfo(l),
              n.makeTensorInfo(p, 'int32', d)
            )
          },
      }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function KT(e, t, n) {
      const r = Qr(-1, n)
      return GN([], t, r, e, n)
    }
    const XT = {
        kernelName: dn,
        backendName: 'cpu',
        kernelFunc: function (e) {
          const { inputs: t, backend: n } = e,
            { x: r } = t
          Fk(r, 'neg')
          const s = n.data.get(r.dataId).values,
            [a, i] = KT(s, r.shape, r.dtype)
          return n.makeTensorInfo(i, r.dtype, a)
        },
      },
      YT = Oh,
      ZT = {
        kernelName: mn,
        backendName: 'cpu',
        kernelFunc: function (e) {
          const { inputs: t, backend: n, attrs: r } = e,
            { boxes: s, scores: a } = t,
            { maxOutputSize: i, iouThreshold: o, scoreThreshold: l } = r
          Fk(s, 'NonMaxSuppression')
          const u = n.data.get(s.dataId).values,
            c = n.data.get(a.dataId).values,
            { selectedIndices: h } = YT(u, c, i, o, l)
          return n.makeTensorInfo([h.length], 'int32', new Int32Array(h))
        },
      },
      JT = Mh,
      QT = {
        kernelName: gn,
        backendName: 'cpu',
        kernelFunc: function (e) {
          const { inputs: t, backend: n, attrs: r } = e,
            { boxes: s, scores: a } = t,
            {
              maxOutputSize: i,
              iouThreshold: o,
              scoreThreshold: l,
              padToMaxOutputSize: u,
            } = r
          Fk(s, 'NonMaxSuppressionPadded')
          const c = n.data.get(s.dataId).values,
            h = n.data.get(a.dataId).values,
            { selectedIndices: p, validOutputs: d } = JT(c, h, i, o, l, u)
          return [
            n.makeTensorInfo([p.length], 'int32', new Int32Array(p)),
            n.makeTensorInfo([], 'int32', new Int32Array([d])),
          ]
        },
      },
      eC = Lh,
      tC = {
        kernelName: yn,
        backendName: 'cpu',
        kernelFunc: function (e) {
          const { inputs: t, backend: n, attrs: r } = e,
            { boxes: s, scores: a } = t,
            {
              maxOutputSize: i,
              iouThreshold: o,
              scoreThreshold: l,
              softNmsSigma: u,
            } = r
          Fk(s, 'NonMaxSuppressionWithScore')
          const c = n.data.get(s.dataId).values,
            h = n.data.get(a.dataId).values,
            p = i,
            d = o,
            f = l,
            m = u,
            { selectedIndices: g, selectedScores: y } = eC(c, h, p, d, f, m)
          return [
            n.makeTensorInfo([g.length], 'int32', new Int32Array(g)),
            n.makeTensorInfo([y.length], 'float32', new Float32Array(y)),
          ]
        },
      },
      nC = Gk((e, t) => (e !== t ? 1 : 0)),
      rC = hI(fn, nC, null, 'bool'),
      sC = { kernelName: fn, backendName: 'cpu', kernelFunc: rC },
      aC = {
        kernelName: xn,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { indices: s } = t,
              { dtype: a, depth: i, onValue: o, offValue: l } = r
            Fk(s, 'oneHot')
            const u = P(s.shape),
              c = new Float32Array(u * i)
            c.fill(l)
            const h = n.data.get(s.dataId).values
            for (let e = 0; e < u; ++e)
              h[e] >= 0 && h[e] < i && (c[e * i + h[e]] = o)
            return n.makeTensorInfo([...s.shape, i], a, c)
          },
      }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function iC(e) {
      const { inputs: t, backend: n } = e,
        { x: r } = t
      if ('string' === r.dtype)
        throw new Error('zerosLike is not supported for string tensors')
      if ('complex64' === r.dtype) {
        const e = iI({ inputs: { input: r }, backend: n }),
          t = iC({ inputs: { x: e }, backend: n }),
          s = gN({ inputs: { input: r }, backend: n }),
          a = iC({ inputs: { x: s }, backend: n }),
          i = rI({ inputs: { real: t, imag: a }, backend: n })
        return (
          n.disposeIntermediateTensorInfo(e),
          n.disposeIntermediateTensorInfo(t),
          n.disposeIntermediateTensorInfo(s),
          n.disposeIntermediateTensorInfo(a),
          i
        )
      }
      return $S({
        backend: n,
        attrs: { shape: r.shape, value: 0, dtype: r.dtype },
      })
    }
    const oC = { kernelName: kr, backendName: 'cpu', kernelFunc: iC },
      lC = {
        kernelName: bn,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function e(t) {
            const { inputs: n, backend: r } = t,
              { x: s } = n
            if ('string' === s.dtype)
              throw new Error('onesLike is not supported for string tensors')
            if ('complex64' === s.dtype) {
              const t = iI({ inputs: { input: s }, backend: r }),
                n = e({ inputs: { x: t }, backend: r }),
                a = gN({ inputs: { input: s }, backend: r }),
                i = iC({ inputs: { x: a }, backend: r }),
                o = rI({ inputs: { real: n, imag: i }, backend: r })
              return (
                r.disposeIntermediateTensorInfo(t),
                r.disposeIntermediateTensorInfo(n),
                r.disposeIntermediateTensorInfo(a),
                r.disposeIntermediateTensorInfo(i),
                o
              )
            }
            return $S({
              backend: r,
              attrs: { shape: s.shape, value: 1, dtype: s.dtype },
            })
          },
      }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function uC(e) {
      const { inputs: t, backend: n, attrs: r } = e,
        { axis: s } = r
      if (1 === t.length)
        return pS({ inputs: { input: t[0] }, backend: n, attrs: { dim: s } })
      const a = t[0].shape,
        i = t[0].dtype
      t.forEach((e) => {
        M(a, e.shape, 'All tensors passed to stack must have matching shapes'),
          O(
            i === e.dtype,
            () => 'All tensors passed to stack must have matching dtypes',
          )
      })
      const o = [],
        l = bN({
          inputs: t.map((e) => {
            const t = pS({
              inputs: { input: e },
              backend: n,
              attrs: { dim: s },
            })
            return o.push(t), t
          }),
          backend: n,
          attrs: { axis: s },
        })
      return o.forEach((e) => n.disposeIntermediateTensorInfo(e)), l
    }
    const cC = { kernelName: wn, backendName: 'cpu', kernelFunc: uC },
      hC = {
        kernelName: vn,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s } = t,
              { paddings: a, constantValue: i } = r
            Fk(s, 'pad')
            const o = a.map((e, t) => e[0] + s.shape[t] + e[1]),
              l = a.map((e) => e[0]),
              u = n.data.get(s.dataId).values,
              c = P(s.shape),
              h = s.shape.length,
              p = se(s.shape),
              d = P(o),
              f = o.length,
              m = se(o),
              g = K(s.dtype, d)
            0 !== i && g.fill(i)
            for (let e = 0; e < c; e++)
              g[
                he(
                  pe(e, h, p).map((e, t) => e + l[t]),
                  f,
                  m,
                )
              ] = u[e]
            return { dataId: n.write(g, o, s.dtype), shape: o, dtype: s.dtype }
          },
      },
      pC = Gk((e, t) => Math.pow(e, t)),
      dC = hI(kn, pC),
      fC = { kernelName: kn, backendName: 'cpu', kernelFunc: dC }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function mC(e, t, n, r) {
      const [s, a] = $l(e, r),
        i = Ss(t, 'int32'),
        o = le(P(s), i),
        l = P(a)
      for (let e = 0; e < o.length; ++e) {
        const t = e * l
        let r = 1
        for (let e = 0; e < l; ++e) r *= n[t + e]
        o[e] = r
      }
      return { outVals: o, outShape: s, outDtype: i }
    }
    const gC = {
      kernelName: Nn,
      backendName: 'cpu',
      kernelFunc: function (e) {
        const { inputs: t, backend: n, attrs: r } = e,
          { x: s } = t,
          { axis: a, keepDims: i } = r
        Fk(s, 'prod')
        const o = s.shape.length,
          l = j(a, s.shape),
          u = Al(l, o)
        let c = l,
          h = s
        const p = []
        null != u &&
          ((h = RI({ inputs: { x: s }, backend: n, attrs: { perm: u } })),
          p.push(h),
          (c = Fl(c.length, o)))
        const d = n.data.get(h.dataId).values,
          { outVals: f, outShape: m, outDtype: g } = mC(h.shape, h.dtype, d, c)
        let y = m
        return (
          i && (y = El(m, l)),
          p.forEach((e) => n.disposeIntermediateTensorInfo(e)),
          n.makeTensorInfo(y, g, f)
        )
      },
    }
    function yC(e, t) {
      const n = e.slice(0, t)
      for (; n.length < t; ) n.push(1)
      for (let r = t; r < e.length; r++) n[t - 1] *= e[r]
      return n
    }
    function bC(e, t, n, r, s, a, i, o) {
      if (0 === e.length)
        throw new Error('paramsNestedSplits must be non empty')
      if (0 === t[0].length)
        throw new Error('Split tensors must not be scalars')
      if (
        /**
         * @license
         * Copyright 2022 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        /**
         * @license
         * Copyright 2022 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        ((function (e, t, n) {
          e.forEach((e, r) => {
            if (e < 0 || e >= n) {
              const s = pe(r, t.length, se(t)).join(',')
              throw new Error(`indices[${s}] = ${e} is not in [0, ${n})`)
            }
          })
        })(a, i, t[0][0] - 1),
        0 === r.length)
      )
        throw new Error('params.rank must be nonzero')
      const l = r[0],
        {
          outSplits: u,
          valueSlices: c,
          numValues: h,
        } = (function (e, t, n, r) {
          const s = []
          let a = 0
          const i = t.length - 1 + n.length,
            o = new Array(i).fill(null).map(() => [0])
          !(function (e, t) {
            for (let n = 0; n < e.length; ++n) {
              const r = e[n],
                s = n === e.length - 1 ? t : e[n + 1].length
              if (0 === r.length)
                throw new Error('Ragged splits may not be empty')
              if (r[0] < 0)
                throw new Error('Ragged splits must be non-negative')
              if (r[r.length - 1] > s)
                throw new Error('Ragged splits must not point past values')
              for (let e = 1; e < r.length; ++e)
                if (r[e - 1] > r[e])
                  throw new Error(
                    'Ragged splits must be sorted in ascending order',
                  )
            }
          })(n, r)
          let l = 1
          for (let e = 0; e < t.length - 1; ++e) {
            l *= t[e]
            const n = t[e + 1]
            for (let t = 1; t < l + 1; ++t) o[e].push(t * n)
          }
          for (let r = 0; r < e.length; ++r) {
            let i = e[r],
              l = e[r] + 1
            for (let e = 0; e < n.length; ++e) {
              const r = n[e],
                s = e + t.length - 1
              if (s >= 0) {
                const e = o[s],
                  t = e[e.length - 1] - r[i]
                for (let e = i; e < l; ++e) o[s].push(r[e + 1] + t)
              }
              ;(i = r[i]), (l = r[l])
            }
            l !== i && (s.push([i, l]), (a += l - i))
          }
          return { outSplits: o, valueSlices: s, numValues: a }
        })(a, i, e, l),
        p = (function (e) {
          const t = []
          for (let n = 0; n < e.length; ++n) {
            const r = X('int32', e[n].length)
            t.push(r), e[n].forEach((e, t) => (r[t] = e))
          }
          return t
        })(u),
        d = (function (e, t, n, r, s) {
          const a = t.slice()
          a[0] = s
          const i = X(n, P(a)),
            o = e.length
          return (
            (function (e, t, n, r, s, a) {
              const i = yC(t, 2)[1],
                o = yC(a, 2)[1]
              let l = 0
              for (const t of n)
                for (let n = t[0]; n < t[1]; ++n) {
                  for (let t = 0; t < r; ++t) s[l * o + t] = e[n * i + t]
                  ++l
                }
            })(e, t, r, 0 === o ? 0 : o / t[0], i, a),
            [i, a]
          )
        })(n, r, s, c, h)
      return [p, d[0], d[1]]
    }
    const xC = {
      kernelName: Sn,
      backendName: 'cpu',
      kernelFunc:
        /**
         * @license
         * Copyright 2022 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (e) {
          const { inputs: t, backend: n, attrs: r } = e,
            { paramsNestedSplits: s, paramsDenseValues: a, indices: i } = t,
            { outputRaggedRank: o } = r,
            l = s.map((e) => n.data.get(e.dataId).values),
            u = s.map((e) => e.shape),
            c = n.data.get(a.dataId).values,
            h = n.data.get(i.dataId).values,
            [p, d, f] = bC(l, u, c, a.shape, a.dtype, h, i.shape),
            m = p.map((e) => n.makeTensorInfo([e.length], 'int32', e)),
            g = n.makeTensorInfo(f, a.dtype, d)
          return m.concat([g])
        },
    }
    /**
     * @license
     * Copyright 2022 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ var wC = Op
    class vC {
      constructor(e, t, n, r, s, a, i, o, l, u) {
        ;(this.shape = e),
          (this.shapeShape = t),
          (this.values = n),
          (this.valuesShape = r),
          (this.valuesDType = s),
          (this.defaultValue = a),
          (this.defaultValueShape = i),
          (this.rowPartitionValues = o),
          (this.rowPartitionValuesShapes = l),
          (this.rowPartitionTypes = Lp(u)),
          (this.raggedRank = zp(this.rowPartitionTypes))
      }
      getRowPartitionTypeByDimension(e) {
        return this.rowPartitionTypes[0] === wC.FIRST_DIM_SIZE
          ? this.rowPartitionTypes[e + 1]
          : this.rowPartitionTypes[e]
      }
      getRowPartitionTensor(e) {
        return this.rowPartitionTypes[0] === wC.FIRST_DIM_SIZE
          ? this.rowPartitionValues[e + 1]
          : this.rowPartitionValues[e]
      }
      getMaxWidth(e) {
        const t = this.getRowPartitionTensor(e - 1)
        switch (this.getRowPartitionTypeByDimension(e - 1)) {
          case wC.VALUE_ROWIDS:
            return vC.getMaxWidthValueRowID(t)
          case wC.ROW_SPLITS:
            return vC.getMaxWidthRowSplit(t)
          default:
            throw new Error(
              `Cannot handle partition type ${wC[this.getRowPartitionTypeByDimension(e - 1)]}`,
            )
        }
      }
      static getMaxWidthRowSplit(e) {
        const t = e.length
        if (0 === t || 1 === t) return 0
        let n = 0
        for (let r = 0; r < t - 1; ++r) {
          const t = e[r + 1] - e[r]
          t > n && (n = t)
        }
        return n
      }
      static getMaxWidthValueRowID(e) {
        const t = e.length
        if (0 === t) return 0
        let n = 0,
          r = e[0],
          s = 0
        for (let a = 1; a < t; ++a) {
          const t = e[a]
          t !== r && ((r = t), (s = Math.max(a - n, s)), (n = a))
        }
        return Math.max(t - n, s)
      }
      tensorShapeFromTensor(e, t, n = !0) {
        if (0 === t.length) {
          if (-1 === e[0]) return []
          throw new Error(
            'The only valid scalar shape tensor is the fully unknown shape specified as -1.',
          )
        }
        return IC(e, n)
      }
      calculateOutputSize(e) {
        const t = this.valuesShape
        Pp(this.defaultValueShape, t)
        const n = this.tensorShapeFromTensor(this.shape, this.shapeShape),
          r = Mp(this.raggedRank, n, t)
        r[0] < 0 && (r[0] = e)
        for (let e = 1; e <= this.raggedRank; ++e)
          r[e] < 0 && (r[e] = this.getMaxWidth(e))
        return r
      }
      calculateFirstParentOutputIndex(e, t, n) {
        const r = Math.min(e, n),
          s = []
        let a = 0
        for (let e = 0; e < r; ++e, a += t) s.push(a)
        for (let t = r; t < e; ++t) s.push(-1)
        return (
          O(
            s.length === e,
            () => 'Final length of result must be equal to firstDimension.',
          ),
          s
        )
      }
      calculateOutputIndexRowSplit(e, t, n, r) {
        const s = e.length,
          a = []
        for (let i = 0; i < s - 1; ++i) {
          const s = e[i + 1] - e[i]
          let o = Math.min(r, s),
            l = t[i]
          ;-1 === l && (o = 0)
          for (let e = 0; e < o; ++e) a.push(l), (l += n)
          for (let e = 0; e < s - o; ++e) a.push(-1)
        }
        if (s > 0 && a.length !== e[s - 1])
          throw new Error('Invalid row split size.')
        return a
      }
      calculateOutputIndexValueRowID(e, t, n, r) {
        const s = e.length,
          a = []
        if (0 === s) return []
        let i = 0,
          o = e[0]
        if (o >= t.length)
          throw new Error(
            `Got currentValueRowId=${o}, which is not less than ${t.length}`,
          )
        let l = t[o]
        a.push(l)
        for (let u = 1; u < s; ++u) {
          const s = e[u]
          if (s === o) l >= 0 && (++i, i < r ? (l += n) : (l = -1))
          else {
            if (((i = 0), (o = s), s >= t.length))
              throw new Error(
                `Got nextValueRowId=${s} which is not less than ${t.length}`,
              )
            l = t[s]
          }
          a.push(l)
        }
        if (a.length !== e.length) throw new Error('Invalid row ids.')
        return a
      }
      calculateOutputIndex(e, t, n, r) {
        const s = this.getRowPartitionTensor(e),
          a = this.getRowPartitionTypeByDimension(e)
        switch (a) {
          case wC.VALUE_ROWIDS:
            return this.calculateOutputIndexValueRowID(s, t, n, r)
          case wC.ROW_SPLITS:
            if (s.length - 1 > t.length)
              throw new Error(
                `Row partition size is greater than output size: ${s.length - 1} > ${t.length}`,
              )
            return this.calculateOutputIndexRowSplit(s, t, n, r)
          default:
            throw new Error(`Unsupported partition type: ${wC[a]}`)
        }
      }
      getFirstDimensionSize() {
        const e = this.rowPartitionValues[0]
        if (0 === this.rowPartitionTypes.length)
          throw new Error('No row_partition_types given.')
        const t = this.rowPartitionTypes[0]
        switch (t) {
          case wC.FIRST_DIM_SIZE:
            return e[0]
          case wC.VALUE_ROWIDS:
            throw new Error('Cannot handle VALUE_ROWIDS in first dimension.')
          case wC.ROW_SPLITS:
            return this.rowPartitionValuesShapes[0][0] - 1
          default:
            throw new Error(`Cannot handle type ${wC[t]}`)
        }
      }
      compute() {
        if (this.rowPartitionValues[0].length <= 0)
          throw new Error(
            'Invalid first partition input. Tensor requires at least one element.',
          )
        const e = this.getFirstDimensionSize(),
          t = this.calculateOutputSize(e),
          n = new Array(this.raggedRank + 1)
        n[n.length - 1] = 1
        for (let e = n.length - 2; e >= 0; --e) n[e] = n[e + 1] * t[e + 1]
        const r = IC(t, !1),
          s = X(this.valuesDType, P(r))
        if (n[0] * t[0] > 0) {
          let a = this.calculateFirstParentOutputIndex(e, n[0], t[0])
          for (let e = 1; e <= this.raggedRank; ++e)
            a = this.calculateOutputIndex(e - 1, a, n[e], t[e])
          this.setOutput(this.raggedRank, a, s, r)
        }
        return [r, s]
      }
      setOutput(e, t, n, r) {
        if (0 === n.length) return
        const s = this.values,
          a = n
        let i = r.slice()
        i = i.slice(e + 1)
        const o = P(i),
          l = t.length
        let u = this.defaultValue
        if (u.length !== o && 1 !== u.length) {
          const e = this.defaultValueShape
          qi(() => {
            const t = Eo(u, e),
              n = jo(t, i)
            u = n.dataSync()
          })
        }
        let c = 0,
          h = 0,
          p = 0
        for (let e = 0; e <= l; ++e) {
          let r = e < l ? t[e] : -1
          if (r !== p) {
            if (h < p) {
              const e = s.subarray(c * o)
              kC(a.subarray(h * o), e, (p - h) * o)
            }
            if (e >= l) {
              const e = n.length
              r = Math.floor(e / o)
            }
            if (r > p)
              if (1 === this.defaultValue.length)
                a.subarray(p * o, r * o).fill(this.defaultValue[0]), (p = r)
              else for (; r > p; ) kC(a.slice(p * o), u, o), ++p
            r < 0 ? ((c = e + 1), (h = p)) : ((c = e), (h = p), (p = h + 1))
          } else ++p
        }
      }
    }
    function kC(e, t, n) {
      for (let r = 0; r < n; r++) e[r] = t[r]
    }
    function IC(e, t) {
      const n = []
      for (let r of e) {
        if (r < 0) {
          if (!t) throw new Error(`Dimension ${r} must be >= 0`)
          if (r < -1) throw new Error(`Dimension ${r} must be >= -1`)
          r = -1
        }
        n.push(r)
      }
      return n
    }
    function NC(e, t, n, r, s, a, i, o, l, u) {
      return new vC(e, t, n, r, s, a, i, o, l, u).compute()
    }
    const SC = {
      kernelName: Tn,
      backendName: 'cpu',
      kernelFunc:
        /**
         * @license
         * Copyright 2022 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (e) {
          const { inputs: t, backend: n, attrs: r } = e,
            {
              shape: s,
              values: a,
              defaultValue: i,
              rowPartitionTensors: o,
            } = t,
            { rowPartitionTypes: l } = r,
            u = n.data.get(s.dataId).values,
            c = n.data.get(a.dataId).values,
            h = n.data.get(i.dataId).values,
            p = o.map((e) => n.data.get(e.dataId).values),
            d = o.map((e) => e.shape),
            [f, m] = NC(u, s.shape, c, a.shape, a.dtype, h, i.shape, p, d, l)
          return n.makeTensorInfo(f, a.dtype, m)
        },
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function TC(e, t, n, r) {
      if (e === t || (e < t && n < 0) || (t < e && n > 1)) return le(0, r)
      const s = le(Math.abs(Math.ceil((t - e) / n)), r)
      t < e && 1 === n && (n = -1), (s[0] = e)
      for (let e = 1; e < s.length; e++) s[e] = s[e - 1] + n
      return s
    }
    const CC = {
        kernelName: Cn,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { backend: t, attrs: n } = e,
              { start: r, stop: s, dtype: a, step: i } = n,
              o = TC(r, s, i, a)
            return t.makeTensorInfo([o.length], a, o)
          },
      },
      $C = Mk(En, (e) => 1 / e),
      EC = { kernelName: En, backendName: 'cpu', kernelFunc: $C },
      RC = {
        kernelName: Dn,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { images: s } = t,
              { alignCorners: a, halfPixelCenters: i, size: o } = r
            Fk(s, 'resizeBilinear')
            const l = se(s.shape),
              [u, c] = o,
              [h, p, d, f] = s.shape,
              m = n.data.get(s.dataId).values,
              g = new Float32Array(P([h, u, c, f])),
              y = [a && u > 1 ? p - 1 : p, a && c > 1 ? d - 1 : d],
              b = [a && u > 1 ? u - 1 : u, a && c > 1 ? c - 1 : c]
            let x = 0
            const w = y[0] / b[0],
              v = y[1] / b[1]
            for (let e = 0; e < h; e++)
              for (let t = 0; t < u; t++) {
                let n
                n = i ? w * (t + 0.5) - 0.5 : w * t
                const r = Math.max(0, Math.floor(n)),
                  s = n - r,
                  a = Math.min(p - 1, Math.ceil(n)),
                  o = e * l[0] + r * l[1],
                  u = e * l[0] + a * l[1]
                for (let e = 0; e < c; e++) {
                  let t
                  t = i ? v * (e + 0.5) - 0.5 : v * e
                  const n = Math.max(0, Math.floor(t)),
                    r = t - n,
                    a = Math.min(d - 1, Math.ceil(t)),
                    c = o + n * l[2],
                    h = u + n * l[2],
                    p = o + a * l[2],
                    y = u + a * l[2]
                  for (let e = 0; e < f; e++) {
                    const t = m[c + e],
                      n = m[h + e],
                      a = t + (m[p + e] - t) * r,
                      i = a + (n + (m[y + e] - n) * r - a) * s
                    g[x++] = i
                  }
                }
              }
            return n.makeTensorInfo([h, u, c, f], 'float32', g)
          },
      },
      AC = {
        kernelName: On,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { images: s, dy: a } = t,
              { alignCorners: i } = r
            Fk([a, s], 'resizeBilinearGrad')
            const o = se(s.shape),
              [l, u, c, h] = s.shape,
              [, p, d] = a.shape,
              f = new Float32Array(l * u * c * h),
              m = [i && p > 1 ? u - 1 : u, i && d > 1 ? c - 1 : c],
              g = [i && p > 1 ? p - 1 : p, i && d > 1 ? d - 1 : d],
              y = m[0] / g[0],
              b = m[1] / g[1],
              x = n.data.get(a.dataId).values
            let w = 0
            for (let e = 0; e < l; e++) {
              const t = e * o[0]
              for (let e = 0; e < p; e++) {
                const n = e * y,
                  r = Math.floor(n),
                  s = Math.min(Math.ceil(n), u - 1),
                  a = t + r * o[1],
                  i = t + s * o[1],
                  l = n - r,
                  p = 1 - l
                for (let e = 0; e < d; e++) {
                  const t = e * b,
                    n = Math.floor(t),
                    r = Math.min(Math.ceil(t), c - 1),
                    s = t - n,
                    u = 1 - s,
                    d = a + n * o[2],
                    m = a + r * o[2],
                    g = i + n * o[2],
                    y = i + r * o[2],
                    v = p * u,
                    k = p * s,
                    I = l * u,
                    N = l * s
                  for (let e = 0; e < h; e++) {
                    const t = x[w++]
                    ;(f[d + e] += t * v),
                      (f[m + e] += t * k),
                      (f[g + e] += t * I),
                      (f[y + e] += t * N)
                  }
                }
              }
            }
            return n.makeTensorInfo([l, c, u, h], 'float32', f)
          },
      },
      _C = {
        kernelName: _n,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { images: s } = t,
              { alignCorners: a, halfPixelCenters: i, size: o } = r
            Fk(s, 'resizeNearestNeighbor')
            const l = se(s.shape),
              [u, c] = o,
              [h, p, d, f] = s.shape,
              m = n.data.get(s.dataId).values,
              g = new Float32Array(h * u * c * f),
              y = [a && u > 1 ? p - 1 : p, a && c > 1 ? d - 1 : d],
              b = [a && u > 1 ? u - 1 : u, a && c > 1 ? c - 1 : c],
              x = y[0] / b[0],
              w = y[1] / b[1]
            let v = 0
            for (let e = 0; e < h; e++) {
              const t = e * l[0]
              for (let e = 0; e < u; e++) {
                const n = i ? x * (e + 0.5) : x * e
                let r = Math.min(p - 1, a ? Math.round(n) : Math.floor(n))
                i && (r = Math.max(0, r))
                const s = t + r * l[1]
                for (let e = 0; e < c; e++) {
                  const t = i ? w * (e + 0.5) : w * e
                  let n = Math.min(d - 1, a ? Math.round(t) : Math.floor(t))
                  i && (n = Math.max(0, n))
                  const r = s + n * l[2]
                  for (let e = 0; e < f; e++) {
                    const t = m[r + e]
                    g[v++] = t
                  }
                }
              }
            }
            return n.makeTensorInfo([h, u, c, f], s.dtype, g)
          },
      },
      FC = {
        kernelName: Fn,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { images: s, dy: a } = t,
              { alignCorners: i } = r
            Fk([a, s], 'resizeNearestNeighborGrad')
            const o = se(s.shape),
              l = se(a.shape),
              [u, c, h, p] = s.shape,
              [, d, f] = a.shape,
              m = new Float32Array(u * c * h * p),
              g = n.data.get(a.dataId).values,
              y = [i && d > 1 ? c - 1 : c, i && f > 1 ? h - 1 : h],
              b = [i && d > 1 ? d - 1 : d, i && f > 1 ? f - 1 : f],
              x = y[0] / b[0],
              w = y[1] / b[1],
              v = 1 / x,
              k = 1 / w,
              I = 2 * Math.ceil(v) + 2,
              N = 2 * Math.ceil(k) + 2
            for (let e = 0; e < u; e++) {
              const t = e * o[0]
              for (let e = 0; e < c; e++) {
                const n = t + e * o[1],
                  r = Math.floor(e * v),
                  s = Math.floor(r - I / 2)
                for (let r = 0; r < h; r++) {
                  const a = n + r * o[2],
                    u = Math.floor(r * k),
                    y = Math.floor(u - N / 2)
                  for (let n = 0; n < p; n++) {
                    let o = 0
                    for (let a = 0; a < I; a++) {
                      const u = a + s
                      if (u < 0 || u >= d) continue
                      const p = t + u * l[1],
                        m = u * x
                      if (
                        e === Math.min(c - 1, i ? Math.round(m) : Math.floor(m))
                      )
                        for (let e = 0; e < N; e++) {
                          const t = e + y
                          if (t < 0 || t >= f) continue
                          const s = p + t * l[2],
                            a = t * w
                          r ===
                            Math.min(
                              h - 1,
                              i ? Math.round(a) : Math.floor(a),
                            ) && (o += g[s + n])
                        }
                    }
                    m[a + n] = o
                  }
                }
              }
            }
            return n.makeTensorInfo(s.shape, s.dtype, m)
          },
      },
      DC = {
        kernelName: Ln,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s } = t,
              { dims: a } = r
            Fk(s, 'reverse')
            const i = s.shape.length,
              o = j(a, s.shape)
            if (0 === i) return Bk({ inputs: { x: s }, backend: n })
            const l = new ps(s.shape, s.dtype),
              u = n.bufferSync(s)
            for (let e = 0; e < l.size; e++) {
              const t = l.indexToLoc(e),
                n = t.slice()
              o.forEach((e) => (n[e] = s.shape[e] - 1 - n[e])),
                l.set(u.get(...n), ...t)
            }
            return n.makeTensorInfo(l.shape, l.dtype, l.values)
          },
      },
      OC = {
        kernelName: Sr,
        backendName: 'cpu',
        kernelFunc: ({ inputs: e, attrs: t, backend: n }) => {
          const { image: r } = e,
            { radians: s, fillValue: a, center: i } = t,
            o = n,
            l = K(r.dtype, P(r.shape)),
            [u, c, h, p] = r.shape,
            [d, f] = Vp(i, c, h),
            m = Math.sin(s),
            g = Math.cos(s),
            y = o.data.get(r.dataId).values
          for (let e = 0; e < u; e++) {
            const t = e * h * c * p
            for (let e = 0; e < c; e++) {
              const n = e * (h * p)
              for (let r = 0; r < h; r++) {
                const s = r * p
                for (let i = 0; i < p; i++) {
                  const o = [u, e, r, i],
                    b = o[2],
                    x = o[1]
                  let w = (b - d) * g - (x - f) * m,
                    v = (b - d) * m + (x - f) * g
                  ;(w = Math.round(w + d)), (v = Math.round(v + f))
                  let k = a
                  'number' != typeof a && (k = 3 === i ? 255 : a[i]),
                    w >= 0 &&
                      w < h &&
                      v >= 0 &&
                      v < c &&
                      (k = y[t + v * (h * p) + w * p + i]),
                    (l[t + n + s + i] = k)
                }
              }
            }
          }
          return {
            dataId: o.write(l, r.shape, r.dtype),
            shape: r.shape,
            dtype: r.dtype,
          }
        },
      },
      MC = Mk(zn, (e) => {
        const t = Math.floor(e)
        return e - t < 0.5
          ? Math.floor(e)
          : e - t > 0.5
            ? Math.ceil(e)
            : t % 2 == 0
              ? t
              : t + 1
      }),
      LC = { kernelName: zn, backendName: 'cpu', kernelFunc: MC },
      zC = Jk((e) => 1 / Math.sqrt(e)),
      PC = Lk(Pn, zC),
      BC = { kernelName: Pn, backendName: 'cpu', kernelFunc: PC }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function WC(e, t, n, r, s, a, i, o, l, u) {
      const c = [r / s, s],
        h = e.values,
        p = t.values
      if (0 === r) return qa(n, t.dtype)
      const d = qa(c, t.dtype)
      'string' == typeof l || 'number' == typeof l
        ? d.values.fill(l)
        : 'boolean' == typeof l && d.values.fill(+l)
      for (let e = 0; e < a; e++) {
        const a = []
        let l = 0
        for (let t = 0; t < i; t++) {
          const n = h[e * i + t]
          a.push(n), (l += n * o[t])
        }
        if (l < 0 || l >= r / s)
          throw new Error(`Invalid indices: ${a} does not index into ${n}`)
        for (let n = 0; n < s; n++)
          u
            ? (d.values[l * s + n] += p[e * s + n])
            : (d.values[l * s + n] = 0 === t.rank ? p[0] : p[e * s + n])
      }
      return d
    }
    const VC = {
      kernelName: Bn,
      backendName: 'cpu',
      kernelFunc:
        /**
         * @license
         * Copyright 2020 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (e) {
          const { inputs: t, backend: n, attrs: r } = e,
            { indices: s, updates: a } = t,
            { shape: i } = r,
            {
              sliceRank: o,
              numUpdates: l,
              sliceSize: u,
              strides: c,
              outputSize: h,
            } = ah(0, s, i),
            p = WC(n.bufferSync(s), n.bufferSync(a), i, h, u, l, o, c, 0, !0)
          return n.makeTensorInfo(i, p.dtype, p.values)
        },
    }
    /**
     * @license
     * Copyright 2022 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function UC(e, t) {
      let n = 0,
        r = e.length,
        s = 0
      for (; n < r; )
        (s = Math.floor((n + r) / 2)), e[s] < t ? (n = s + 1) : (r = s)
      return r
    }
    function GC(e, t) {
      let n = 0,
        r = e.length,
        s = 0
      for (; n < r; )
        (s = Math.floor((n + r) / 2)), e[s] <= t ? (n = s + 1) : (r = s)
      return r
    }
    const HC = {
        kernelName: Wn,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2022 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { sortedSequence: s, values: a } = t,
              { side: i } = r,
              o = (function (e, t, n, r, s, a) {
                const i = X('int32', n * s)
                for (let o = 0; o < n; ++o) {
                  const n = e.slice(o * r, (o + 1) * r),
                    l = o * s
                  for (let e = 0; e < s; ++e)
                    i[l + e] = 'left' === a ? UC(n, t[e + l]) : GC(n, t[e + l])
                }
                return i
              })(
                n.data.get(s.dataId).values,
                n.data.get(a.dataId).values,
                s.shape[0],
                s.shape[1],
                a.shape[1],
                i,
              )
            return n.makeTensorInfo(a.shape, 'int32', o)
          },
      },
      jC = {
        kernelName: Vn,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n } = e,
              { condition: r, t: s, e: a } = t
            Fk([r, s, a], 'select')
            const i = r.shape.length,
              o = n.data.get(r.dataId).values,
              l = n.data.get(s.dataId).values,
              u = n.data.get(a.dataId).values,
              c = Ss(s.dtype, a.dtype),
              h = le(P(s.shape), c)
            let p = 0
            const d =
              0 === i || i > 1 || 1 === s.shape.length ? 1 : P(s.shape.slice(1))
            for (let e = 0; e < o.length; e++)
              for (let t = 0; t < d; t++)
                1 === o[e] ? (h[p++] = l[e]) : (h[p++] = u[e])
            return n.makeTensorInfo(s.shape, c, h)
          },
      },
      qC = Xp,
      KC = Yp,
      XC = Mk(Un, (e) => (e >= 0 ? KC * e : qC * (Math.exp(e) - 1))),
      YC = { kernelName: Un, backendName: 'cpu', kernelFunc: XC },
      ZC = Mk(qn, (e) => (e < 0 ? -1 : e > 0 ? 1 : 0)),
      JC = { kernelName: qn, backendName: 'cpu', kernelFunc: ZC },
      QC = Mk(Hn, (e) => Math.sin(e)),
      e$ = { kernelName: Hn, backendName: 'cpu', kernelFunc: QC },
      t$ = Mk(jn, (e) => Math.sinh(e)),
      n$ = { kernelName: jn, backendName: 'cpu', kernelFunc: t$ },
      r$ = Math.log(1.1920928955078125e-7) + 2,
      s$ = Mk(Xn, (e) => {
        const t = e > -r$,
          n = e < r$,
          r = Math.exp(e)
        let s
        return (s = n ? r : t ? e : Math.log(1 + r)), s
      }),
      a$ = { kernelName: Xn, backendName: 'cpu', kernelFunc: s$ },
      i$ = {
        kernelName: Jn,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s } = t,
              { blockShape: a, paddings: i } = r
            Fk([s], 'spaceToBatchND')
            const o = P(a),
              l = [[0, 0]]
            l.push(...i)
            for (let e = 1 + a.length; e < s.shape.length; ++e) l.push([0, 0])
            const u = hC.kernelFunc({
                inputs: { x: s },
                backend: n,
                attrs: { paddings: l, constantValue: 0 },
              }),
              c = Up(u.shape, a, o, !1),
              h = Gp(c.length, a.length, !1),
              p = Hp(u.shape, a, o, !1),
              d = yI({ inputs: { x: u }, backend: n, attrs: { shape: c } }),
              f = RI({ inputs: { x: d }, backend: n, attrs: { perm: h } }),
              m = yI({ inputs: { x: f }, backend: n, attrs: { shape: p } })
            return (
              n.disposeIntermediateTensorInfo(u),
              n.disposeIntermediateTensorInfo(d),
              n.disposeIntermediateTensorInfo(f),
              m
            )
          },
      }
    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function o$(e, t, n, r, s, a, i) {
      const o = t[0],
        l = a[0],
        u = new Array(l),
        c = new Array(o),
        h = t[1]
      if (0 === l) {
        if (0 !== o) throw new Error(kd(o))
        return [X(n, 0), [0, h], X(s, 0), u, c]
      }
      let p = !0,
        d = 0
      const f = new Array(l).fill(0)
      for (let t = 0; t < o; ++t) {
        const n = e[t * h]
        if (n < 0) throw new Error(Id(t, n))
        if (n >= l) throw new Error(Nd(t, n, l))
        ++f[n], (p = p && n >= d), (d = n)
      }
      let m = !0
      for (let e = 0; e < l; ++e) {
        const t = 0 === f[e]
        ;(u[e] = t),
          (m = m && !t),
          (f[e] = Math.max(f[e], 1)),
          e > 0 && (f[e] += f[e - 1])
      }
      if (m && p) {
        const t = e,
          n = r
        for (let e = 0; e < o; ++e) c[e] = e
        return [t, [o, h], n, u, c]
      }
      {
        const t = f[l - 1],
          a = X(n, t * h),
          p = X(s, t),
          d = new Array(l).fill(0)
        for (let t = 0; t < o; ++t) {
          const n = e[t * h],
            s = d[n],
            i = (0 === n ? 0 : f[n - 1]) + s
          d[n]++
          for (let n = 0; n < h; ++n) a[i * h + n] = e[t * h + n]
          ;(p[i] = r[t]), (c[t] = i)
        }
        for (let e = 0; e < l; ++e)
          if (0 === d[e]) {
            const t = 0 === e ? 0 : f[e - 1]
            a[t * h + 0] = e
            for (let e = 1; e < h; ++e) a[t * h + e] = 0
            p[t] = i
          }
        return [a, [t, h], p, u, c]
      }
    }
    const l$ = {
      kernelName: tr,
      backendName: 'cpu',
      kernelFunc:
        /**
         * @license
         * Copyright 2021 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (e) {
          const { inputs: t, backend: n } = e,
            { indices: r, values: s, denseShape: a, defaultValue: i } = t
          if (1 !== a.shape.length)
            throw new Error(
              `Dense shape must be a vector, saw:\n        ${a.shape}`,
            )
          if (2 !== r.shape.length)
            throw new Error(
              `Indices must be a matrix, saw:\n        ${r.shape}`,
            )
          if (1 !== s.shape.length)
            throw new Error(`Values must be a vector, saw:\n        ${s.shape}`)
          if (0 !== i.shape.length)
            throw new Error(
              `Default value must be a scalar, saw:\n        ${i.shape}`,
            )
          const o = n.data.get(r.dataId).values,
            l = n.data.get(s.dataId).values,
            u = n.data.get(a.dataId).values,
            c = n.data.get(i.dataId).values[0],
            [h, p, d, f, m] = o$(o, r.shape, r.dtype, l, s.dtype, u, c)
          return [
            n.makeTensorInfo(p, r.dtype, h),
            n.makeTensorInfo([p[0]], s.dtype, d),
            n.makeTensorInfo(
              [f.length],
              'bool',
              new Uint8Array(f.map((e) => Number(e))),
            ),
            n.makeTensorInfo([m.length], r.dtype, new Int32Array(m)),
          ]
        },
    }
    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function u$(e, t, n, r, s) {
      const a = P(r),
        i = t[0],
        o = s.length,
        l = []
      let u = 1,
        c = -1
      for (let e = 0; e < o; ++e) {
        const t = s[e]
        if (-1 === t) {
          if (-1 !== c) throw new Error(Sd(c, e))
          ;(c = e), l.push(1)
        } else {
          if (t < 0) throw new Error(Td(e, t))
          ;(u *= t), l.push(t)
        }
      }
      if (-1 !== c) {
        if (u <= 0)
          throw new Error(
            'reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero',
          )
        const e = Math.trunc(a / u)
        if (u * e !== a) throw new Error($d(r, l))
        l[c] = e
      }
      if (P(l) !== a) throw new Error(Ed(r, l))
      const h = r.length,
        p = []
      if (h > 0) {
        p[h - 1] = 1
        for (let e = h - 2; e >= 0; --e) p[e] = p[e + 1] * r[e + 1]
      }
      const d = []
      if (o > 0) {
        d[o - 1] = 1
        for (let e = o - 2; e >= 0; --e) d[e] = d[e + 1] * l[e + 1]
      }
      const f = X(n, i * o)
      for (let t = 0; t < i; ++t) {
        let n = 0
        for (let r = 0; r < h; ++r) n += e[t * h + r] * p[r]
        for (let e = 0; e < o; ++e)
          (f[t * o + e] = Math.trunc(n / d[e])), (n %= d[e])
      }
      return [f, [i, o], l]
    }
    const c$ = {
      kernelName: nr,
      backendName: 'cpu',
      kernelFunc:
        /**
         * @license
         * Copyright 2021 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (e) {
          const { inputs: t, backend: n } = e,
            { inputIndices: r, inputShape: s, newShape: a } = t
          if (2 !== r.shape.length)
            throw new Error(
              `Input indices should be a matrix but received shape\n        ${r.shape}`,
            )
          if (1 !== s.shape.length)
            throw new Error(
              `Input shape should be a vector but received shape\n        ${s.shape}`,
            )
          if (1 !== a.shape.length)
            throw new Error(
              `Target shape should be a vector but received shape ${a.shape}`,
            )
          const i = Array.from(n.data.get(s.dataId).values),
            o = n.data.get(r.dataId).values,
            l = Array.from(n.data.get(a.dataId).values),
            [u, c, h] = u$(o, r.shape, r.dtype, i, l)
          return [
            n.makeTensorInfo(c, r.dtype, u),
            n.makeTensorInfo([h.length], a.dtype, new Int32Array(h)),
          ]
        },
    }
    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function h$(e, t, n, r, s, a = !1, i = 0) {
      const o = r.length,
        l = [t[0], e.length / t[0]],
        u = l[1],
        c = o > 0 ? s[o - 1] + 1 : 0
      if (c < 0) throw new Error('segment ids must be >= 0')
      const h = t.slice()
      h[0] = c
      const p = X(
        n,
        h.reduce((e, t) => e * t, 1),
      )
      if (0 === o) return c > 0 && p.fill(i), [p, h]
      if (c <= 0) throw new Error('segment ids must be >= 0')
      let d = 0,
        f = 1,
        m = 0,
        g = s[d]
      for (;;) {
        let t = 0
        if (f < o) {
          if (((t = s[f]), g === t)) {
            ++f
            continue
          }
          if (g >= t) throw new Error('segment ids are not increasing')
        }
        if (g < 0 || g >= c) throw new Error(_d(g, c))
        g > m && p.fill(i, m * u, g * u)
        for (let t = d; t < f; ++t) {
          const n = r[t]
          if (n < 0 || n >= l[0]) throw new Error(Fd(t, r[t], l[0]))
          for (let t = 0; t < u; t++) p[g * u + t] += e[n * u + t]
        }
        if (a) for (let e = 0; e < u; e++) p[g * u + e] /= f - d
        if (((d = f), ++f, (m = g + 1), (g = t), f > o)) break
      }
      return m < c && p.fill(i, m * u, c * u), [p, h]
    }
    const p$ = {
        kernelName: rr,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2021 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n } = e,
              { data: r, indices: s, segmentIds: a } = t
            if (r.shape.length < 1)
              throw new Error(
                'Data should be at least 1 dimensional but received scalar',
              )
            if (1 !== s.shape.length)
              throw new Error(
                `Indices should be a vector but received shape\n          ${s.shape}`,
              )
            if (1 !== a.shape.length)
              throw new Error(
                `Segment ids should be a vector but received shape\n          ${a.shape}`,
              )
            if (s.shape[0] !== a.shape[0])
              throw new Error('segmentIds and indices should have same size.')
            const i = n.data.get(r.dataId).values,
              o = n.data.get(s.dataId).values,
              l = n.data.get(a.dataId).values,
              [u, c] = h$(i, r.shape, r.dtype, o, l, !0)
            return n.makeTensorInfo(c, r.dtype, u)
          },
      },
      d$ = {
        kernelName: sr,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2021 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n } = e,
              { data: r, indices: s, segmentIds: a } = t
            if (r.shape.length < 1)
              throw new Error(
                'Data should be at least 1 dimensional but received scalar',
              )
            if (1 !== s.shape.length)
              throw new Error(
                `Indices should be a vector but received shape\n         ${s.shape}`,
              )
            if (1 !== a.shape.length)
              throw new Error(
                `Segment ids should be a vector but received shape\n         ${a.shape}`,
              )
            if (s.shape[0] !== a.shape[0])
              throw new Error('segmentIds and indices should have same size.')
            const i = n.data.get(r.dataId).values,
              o = n.data.get(s.dataId).values,
              l = n.data.get(a.dataId).values,
              [u, c] = h$(i, r.shape, r.dtype, o, l)
            return n.makeTensorInfo(c, r.dtype, u)
          },
      },
      f$ = {
        kernelName: ar,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { sparseIndices: s, sparseValues: a, defaultValue: i } = t,
              { outputShape: o } = r,
              {
                sliceRank: l,
                numUpdates: u,
                sliceSize: c,
                strides: h,
                outputSize: p,
              } = ah(0, s, o),
              d = !1,
              f = n.bufferSync(s)
            let m
            switch (a.dtype) {
              case 'bool':
                m = WC(
                  f,
                  n.bufferSync(a),
                  o,
                  p,
                  c,
                  u,
                  l,
                  h,
                  Boolean(n.data.get(i.dataId).values[0]),
                  d,
                )
                break
              case 'float32':
              case 'int32':
                m = WC(
                  f,
                  n.bufferSync(a),
                  o,
                  p,
                  c,
                  u,
                  l,
                  h,
                  n.data.get(i.dataId).values[0],
                  d,
                )
                break
              case 'string':
                m = WC(
                  f,
                  n.bufferSync(a),
                  o,
                  p,
                  c,
                  u,
                  l,
                  h,
                  rs(n.data.get(i.dataId).values[0]),
                  d,
                )
                break
              default:
                throw new Error(`Unsupported type ${a.dtype}`)
            }
            return n.makeTensorInfo(o, m.dtype, m.values)
          },
      },
      m$ = {
        kernelName: Qn,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s } = t,
              { numOrSizeSplits: a, axis: i } = r,
              o = j(i, s.shape)[0],
              l = vd(s, a, o),
              u = new Array(s.shape.length).fill(0),
              c = s.shape.slice()
            return l.map((e) => {
              const t = [...c]
              t[o] = e
              const r = nN({
                inputs: { x: s },
                backend: n,
                attrs: { begin: u, size: t },
              })
              return (u[o] += e), r
            })
          },
      },
      g$ = Jk((e) => Math.sqrt(e)),
      y$ = Mk(Yn, (e) => Math.sqrt(e)),
      b$ = { kernelName: Yn, backendName: 'cpu', kernelFunc: y$ },
      x$ = {
        kernelName: or,
        backendName: 'cpu',
        kernelFunc: ({ inputs: e, backend: t }) => {
          const { x: n } = e,
            r = t
          Fk(n, 'square')
          const s = r.data.get(n.dataId).values,
            a = new Float32Array(s.length)
          for (let e = 0; e < s.length; ++e) {
            const t = s[e]
            a[e] = t * t
          }
          return {
            dataId: r.write(a, n.shape, n.dtype),
            shape: n.shape,
            dtype: n.dtype,
          }
        },
      },
      w$ = Gk((e, t) => {
        const n = e - t
        return n * n
      }),
      v$ = hI(ir, w$),
      k$ = { kernelName: ir, backendName: 'cpu', kernelFunc: v$ },
      I$ = Mk(Ir, (e, t) => {
        const n = t
        return isNaN(e) ? NaN : e > 0 ? 1 : n.alpha
      }),
      N$ = { kernelName: Ir, backendName: 'cpu', kernelFunc: I$ }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function S$(e, t, n, r) {
      const s = qa(e, t.dtype)
      for (let e = 0; e < s.size; e++) {
        const a = s.indexToLoc(e),
          i = new Array(a.length)
        for (let e = 0; e < i.length; e++) i[e] = a[e] * n[e] + r[e]
        s.set(t.get(...i), ...a)
      }
      return s
    }
    const T$ = {
      kernelName: lr,
      backendName: 'cpu',
      kernelFunc:
        /**
         * @license
         * Copyright 2020 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (e) {
          const { inputs: t, backend: n, attrs: r } = e,
            { x: s } = t,
            {
              begin: a,
              end: i,
              strides: o,
              beginMask: l,
              endMask: u,
              ellipsisMask: c,
              newAxisMask: h,
              shrinkAxisMask: p,
            } = r
          Fk(s, 'stridedSlice')
          const {
            finalShapeSparse: d,
            finalShape: f,
            isIdentity: m,
            sliceDim0: g,
            isSimpleSlice: y,
            begin: b,
            end: x,
            strides: w,
          } = Bi(s.shape, a, i, o, l, u, c, h, p)
          let v
          if (m) v = yI({ inputs: { x: s }, backend: n, attrs: { shape: f } })
          else if (g || y) {
            O(
              s.shape.length >= 1,
              () => `Input must have rank at least 1, got: ${s.shape.length}`,
            )
            const e = Ci(b, x, w),
              t = nN({
                inputs: { x: s },
                backend: n,
                attrs: { begin: b, size: e },
              })
            ;(v = yI({ inputs: { x: t }, backend: n, attrs: { shape: f } })),
              n.disposeIntermediateTensorInfo(t)
          } else {
            const e = S$(d, n.bufferSync(s), w, b)
            v = n.makeTensorInfo(f, e.dtype, e.values)
          }
          return v
        },
    }
    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class C$ {
      constructor(e, t, n, r, s, a) {
        ;(this.separator = ns(e)),
          (this.nGramWidths = t),
          (this.leftPad = ns(n)),
          (this.rightPad = ns(r)),
          (this.padWidth = s),
          (this.preserveShort = a)
      }
      getPadWidth(e) {
        return Math.min(this.padWidth < 0 ? e - 1 : this.padWidth, e - 1)
      }
      getNumNGrams(e, t) {
        const n = this.getPadWidth(t)
        return Math.max(0, e + 2 * n - t + 1)
      }
      createNGrams(e, t, n, r, s, a) {
        for (let i = 0; i < s; ++i) {
          const o = this.getPadWidth(a),
            l = Math.max(0, o - i),
            u = Math.max(0, o - (s - (i + 1))),
            c = a - (l + u),
            h = t + (l > 0 ? 0 : i - o)
          let p = 0
          p += l * this.leftPad.length
          for (let t = 0; t < c; ++t) p += e[h + t].length
          ;(p += u * this.rightPad.length),
            (p += (l + u + c - 1) * this.separator.length),
            (n[r + i] = new Uint8Array(p))
          const d = n[r + i]
          let f = 0
          const m = (e) => e.forEach((e) => (d[f++] = e))
          for (let e = 0; e < l; ++e) m(this.leftPad), m(this.separator)
          for (let t = 0; t < c - 1; ++t) m(e[h + t]), m(this.separator)
          if (c > 0) {
            m(e[h + c - 1])
            for (let e = 0; e < u; ++e) m(this.separator), m(this.rightPad)
          } else {
            for (let e = 0; e < u - 1; ++e) m(this.rightPad), m(this.separator)
            m(this.rightPad)
          }
        }
      }
      compute(e, t) {
        const n = e.length,
          r = t.length
        if (r > 0) {
          let e = t[0]
          if (0 !== e) throw new Error(`First split value must be 0, got ${e}`)
          for (let s = 1; s < r; ++s) {
            let r = t[s] >= e
            if (((r = r && t[s] <= n), !r))
              throw new Error(
                `Invalid split value ${t[s]}, must be in [${e}, ${n}]`,
              )
            e = t[s]
          }
          if (e !== n)
            throw new Error(
              `Last split value must be data size. Expected ${n}, got ${e}`,
            )
        }
        const s = r - 1,
          a = X('int32', r)
        if (0 === n || 0 === r) {
          const e = new Array(n)
          for (let e = 0; e <= s; ++e) a[e] = 0
          return [e, a]
        }
        a[0] = 0
        for (let e = 1; e <= s; ++e) {
          const n = t[e] - t[e - 1]
          let r = 0
          this.nGramWidths.forEach((e) => {
            r += this.getNumNGrams(n, e)
          }),
            this.preserveShort && n > 0 && 0 === r && (r = 1),
            (a[e] = a[e - 1] + r)
        }
        const i = new Array(a[s])
        for (let n = 0; n < s; ++n) {
          const r = t[n]
          let s = a[n]
          if (
            (this.nGramWidths.forEach((a) => {
              const o = t[n + 1] - t[n],
                l = this.getNumNGrams(o, a)
              this.createNGrams(e, r, i, s, l, a), (s += l)
            }),
            this.preserveShort && s === a[n])
          ) {
            const a = t[n + 1] - t[n]
            if (0 === a) continue
            const o = a + 2 * this.padWidth,
              l = 1
            this.createNGrams(e, r, i, s, l, o)
          }
        }
        return [i, a]
      }
    }
    function $$(e, t, n, r, s, a, i, o) {
      return new C$(n, r, s, a, i, o).compute(e, t)
    }
    const E$ = {
      kernelName: ur,
      backendName: 'cpu',
      kernelFunc:
        /**
         * @license
         * Copyright 2021 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (e) {
          const { inputs: t, backend: n, attrs: r } = e,
            {
              separator: s,
              nGramWidths: a,
              leftPad: i,
              rightPad: o,
              padWidth: l,
              preserveShortSequences: u,
            } = r,
            { data: c, dataSplits: h } = t,
            p = n.data.get(c.dataId).values,
            d = n.data.get(h.dataId).values,
            [f, m] = $$(p, d, s, a, i, o, l, u)
          return [
            n.makeTensorInfo([f.length], 'string', f),
            n.makeTensorInfo(h.shape, 'int32', m),
          ]
        },
    }
    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function R$(e, t, n, r) {
      if (!e.length) return
      if (0 === t.length) {
        for (let t = 0; t < e.length; ++t) r.push(e.subarray(t, t + 1))
        return
      }
      if (1 === t.length) {
        const s = t[0]
        let a = e.indexOf(s)
        for (; -1 !== a; ) {
          const t = e.subarray(0, a)
          ;(n && 0 === t.length) || r.push(t),
            (a = (e = e.subarray(a + 1)).indexOf(s))
        }
        return void ((n && 0 === e.length) || r.push(e))
      }
      let s = 0
      for (let a = 0; a < e.length + 1; a++)
        if (a === e.length || -1 !== t.indexOf(e[a])) {
          const t = e.subarray(s, a)
          ;(n && 0 === t.length) || r.push(t), (s = a + 1)
        }
    }
    function A$(e, t, n) {
      const r = e.length,
        s = []
      let a = 0,
        i = 0
      const o = new Array(r)
      for (let l = 0; l < r; ++l) {
        const r = s.length
        R$(e[l], t, n, s)
        const u = s.length - r
        ;(o[l] = u), (a += u), (i = Math.max(i, u))
      }
      const l = X('int32', 2 * a),
        u = new Array(a),
        c = [r, i]
      let h = 0
      for (let e = 0; e < r; ++e)
        for (let t = 0; t < o[e]; ++t)
          (l[2 * h] = e), (l[2 * h + 1] = t), (u[h] = s[h]), ++h
      return [l, u, c]
    }
    const _$ = {
      kernelName: cr,
      backendName: 'cpu',
      kernelFunc:
        /**
         * @license
         * Copyright 2021 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (e) {
          const { inputs: t, backend: n, attrs: r } = e,
            { skipEmpty: s } = r,
            { input: a, delimiter: i } = t
          if ('string' !== a.dtype)
            throw new Error('Input must be of datatype string')
          if (1 !== a.shape.length)
            throw new Error(`Input must be a vector, got shape: ${a.shape}`)
          if (0 !== i.shape.length)
            throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`)
          const o = n.data.get(a.dataId).values,
            l = n.data.get(i.dataId).values[0],
            [u, c, h] = A$(o, l, s),
            p = c.length
          return [
            n.makeTensorInfo([p, 2], 'int32', u),
            n.makeTensorInfo([p], 'string', c),
            n.makeTensorInfo([2], 'int32', new Int32Array(h)),
          ]
        },
    }
    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function F$(e, t) {
      const n = X('int32', e.length)
      for (let r = 0; r < e.length; ++r)
        n[r] = Jr(e[r]).modulo(t).getLowBitsUnsigned()
      return n
    }
    const D$ = {
        kernelName: hr,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2021 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { numBuckets: s } = r,
              { input: a } = t
            if ('string' !== a.dtype)
              throw new Error('Input must be of datatype string')
            if (s <= 0) throw new Error('Number of buckets must be at least 1')
            const i = F$(n.data.get(a.dataId).values, s)
            return n.makeTensorInfo(a.shape, 'int32', i)
          },
      },
      O$ = Mk(dr, (e) => Math.tan(e)),
      M$ = { kernelName: dr, backendName: 'cpu', kernelFunc: O$ },
      L$ = Mk(fr, (e) => Math.tanh(e))
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function z$(e, t) {
      const n = new Array(e.rank)
      for (let r = 0; r < n.length; r++) n[r] = e.shape[r] * t[r]
      const r = qa(n, e.dtype)
      for (let t = 0; t < r.values.length; ++t) {
        const n = r.indexToLoc(t),
          s = new Array(e.rank)
        for (let t = 0; t < s.length; t++) s[t] = n[t] % e.shape[t]
        const a = e.locToIndex(s)
        r.values[t] = e.values[a]
      }
      return r
    }
    const P$ = {
        kernelName: mr,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s } = t,
              { reps: a } = r
            Fk(s, 'tile')
            const i = z$(n.bufferSync(s), a)
            return n.makeTensorInfo(i.shape, i.dtype, i.values)
          },
      },
      B$ = (e, t) => {
        const n = t.value - e.value
        return 0 === n ? e.index - t.index : n
      }
    function W$(e, t, n = 0, r = e.length - 1) {
      for (; r > n; ) {
        if (r - n > 600) {
          const s = r - n + 1,
            a = t - n + 1,
            i = Math.log(s),
            o = 0.5 * Math.exp((2 * i) / 3),
            l = 0.5 * Math.sqrt((i * o * (s - o)) / s) * Math.sign(a - s / 2)
          W$(
            e,
            t,
            Math.max(n, Math.floor(t - (a * o) / s + l)),
            Math.min(r, Math.floor(t + ((s - a) * o) / s + l)),
          )
        }
        const s = e[t]
        let a = n,
          i = r
        for (D(e, n, t), B$(e[r], s) > 0 && D(e, n, r); a < i; ) {
          for (D(e, a, i), a++, i--; B$(e[a], s) < 0; ) a += 1
          for (; B$(e[i], s) > 0; ) i -= 1
        }
        0 === B$(e[n], s) ? D(e, n, i) : ((i += 1), D(e, i, r)),
          i <= t && (n = i + 1),
          t <= i && (r = i - 1)
      }
    }
    function V$(e, t, n, r, s) {
      const a = t[t.length - 1],
        [i, o] = [e.length / a, a],
        l = K(n, i * r),
        u = K('int32', i * r)
      for (let t = 0; t < i; t++) {
        const n = t * o,
          a = e.subarray(n, n + o)
        let i = new Array(a.length)
        a.forEach((e, t) => (i[t] = { value: e, index: t })),
          r < i.length && (W$(i, r), (i = i.slice(0, r))),
          s && i.sort(B$)
        const c = t * r,
          h = l.subarray(c, c + r),
          p = u.subarray(c, c + r)
        for (let e = 0; e < r; e++) (h[e] = i[e].value), (p[e] = i[e].index)
      }
      const c = t.slice()
      return (c[c.length - 1] = r), [qa(c, n, l), qa(c, 'int32', u)]
    }
    const U$ = {
        kernelName: gr,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s } = t,
              { k: a, sorted: i } = r
            Fk(s, 'topk')
            const o = n.data.get(s.dataId).values,
              [l, u] = V$(o, s.shape, s.dtype, a, i)
            return [
              n.makeTensorInfo(l.shape, l.dtype, l.values),
              n.makeTensorInfo(u.shape, u.dtype, u.values),
            ]
          },
      },
      G$ = {
        kernelName: yr,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2021 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, attrs: n, backend: r } = e,
              { image: s, transforms: a } = t,
              {
                interpolation: i,
                fillMode: o,
                fillValue: l,
                outputShape: u,
              } = n,
              [c, h, p, d] = s.shape,
              [f, m] = null != u ? u : [h, p],
              g = [c, f, m, d],
              y = se(s.shape),
              b = y[0],
              x = y[1],
              w = y[2],
              v = se(g),
              k = v[0],
              I = v[1],
              N = v[2],
              S = K(s.dtype, P(g))
            S.fill(l)
            const T = r.data.get(s.dataId).values,
              C = r.data.get(a.dataId).values
            for (let e = 0; e < c; ++e) {
              const t = 1 === a.shape[0] ? C : C.subarray(8 * e, 8 * e + 8)
              for (let n = 0; n < f; ++n)
                for (let r = 0; r < m; ++r)
                  for (let s = 0; s < d; ++s) {
                    let a
                    const u = t[6] * r + t[7] * n + 1
                    if (0 === u) continue
                    const c = (t[0] * r + t[1] * n + t[2]) / u,
                      d = (t[3] * r + t[4] * n + t[5]) / u,
                      f = H$(c, p, o),
                      m = H$(d, h, o)
                    switch (i) {
                      case 'nearest':
                        a = q$(T, h, p, b, x, w, e, m, f, s, l)
                        break
                      case 'bilinear':
                        a = K$(T, h, p, b, x, w, e, m, f, s, l)
                        break
                      default:
                        throw new Error(
                          `Error in Transform: Expect 'nearest' or 'bilinear', but got ${i}`,
                        )
                    }
                    S[e * k + n * I + r * N + s] = a
                  }
              return r.makeTensorInfo(g, s.dtype, S)
            }
            return {
              dataId: r.write(S, g, s.dtype),
              shape: s.shape,
              dtype: s.dtype,
            }
          },
      }
    function H$(e, t, n) {
      switch (n) {
        case 'reflect':
          return (function (e, t) {
            let n = e
            if (n < 0)
              if (t <= 1) n = 0
              else {
                const e = 2 * t
                n < e && (n = e * Math.trunc(-n / e) + n),
                  (n = n < -t ? n + e : -n - 1)
              }
            else if (n > t - 1)
              if (t <= 1) n = 0
              else {
                const e = 2 * t
                ;(n -= e * Math.trunc(n / e)), n >= t && (n = e - n - 1)
              }
            return _(0, n, t - 1)
          })(e, t)
        case 'wrap':
          return (function (e, t) {
            let n = e
            if (n < 0)
              if (t <= 1) n = 0
              else {
                const e = t - 1
                n += t * (Math.trunc(-n / e) + 1)
              }
            else if (n > t - 1)
              if (t <= 1) n = 0
              else {
                const e = t - 1
                n -= t * Math.trunc(n / e)
              }
            return _(0, n, t - 1)
          })(e, t)
        case 'nearest':
          return (function (e, t) {
            return _(0, e, t - 1)
          })(e, t)
        default:
          return e
      }
    }
    function j$(e, t, n, r, s, a, i, o, l, u, c) {
      return 0 <= o && o < t && 0 <= l && l < n
        ? e[i * r + o * s + l * a + u]
        : c
    }
    function q$(e, t, n, r, s, a, i, o, l, u, c) {
      return j$(e, t, n, r, s, a, i, Math.round(o), Math.round(l), u, c)
    }
    function K$(e, t, n, r, s, a, i, o, l, u, c) {
      const h = Math.floor(o),
        p = Math.floor(l),
        d = h + 1,
        f = p + 1
      return (
        (d - o) *
          ((f - l) * j$(e, t, n, r, s, a, i, h, p, u, c) +
            (l - p) * j$(e, t, n, r, s, a, i, h, f, u, c)) +
        (o - h) *
          ((f - l) * j$(e, t, n, r, s, a, i, d, p, u, c) +
            (l - p) * j$(e, t, n, r, s, a, i, d, f, u, c))
      )
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function X$(e, t, n, r) {
      const s = j(t, n)[0],
        a = [1, n[0], 1]
      for (let e = 0; e < s; e++) a[0] *= n[e]
      a[1] = n[s]
      for (let e = s + 1; e < n.length; e++) a[2] *= n[e]
      const i = {},
        o = new Int32Array(n[s]),
        l = new ps(a, r, e),
        u = [],
        c = 1 === a[0] && 1 === a[2]
      for (let t = 0; t < n[s]; t++) {
        let n
        if (c) n = e[t].toString()
        else {
          const e = []
          for (let n = 0; n < a[0]; n++)
            for (let r = 0; r < a[2]; r++) e.push(l.get(n, t, r))
          n = e.join(',')
        }
        if (void 0 !== i[n]) o[t] = i[n]
        else {
          const e = Object.keys(i).length
          ;(i[n] = e), (o[t] = e), u.push(t)
        }
      }
      const h = a.slice()
      h[1] = Object.keys(i).length
      const p = new ps(h, r)
      u.forEach((e, t) => {
        for (let n = 0; n < a[0]; n++)
          for (let r = 0; r < a[2]; r++) p.set(l.get(n, e, r), n, t, r)
      })
      const d = n.slice()
      return (
        (d[s] = h[1]), { outputValues: p.values, outputShape: d, indices: o }
      )
    }
    const Y$ = {
        kernelName: xr,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the License);
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an AS IS BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, attrs: n, backend: r } = e,
              { axis: s } = n,
              { x: a } = t
            Fk(a, 'unique')
            const i = r.data.get(a.dataId).values,
              {
                outputValues: o,
                outputShape: l,
                indices: u,
              } = X$(i, s, a.shape, a.dtype)
            return [
              r.makeTensorInfo(l, a.dtype, o),
              r.makeTensorInfo([u.length], 'int32', u),
            ]
          },
      },
      Z$ = {
        kernelName: wr,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { value: s } = t
            let { axis: a } = r
            a < 0 && (a += s.shape.length)
            const i = s.shape.length,
              o = s.shape[a],
              l = new Array(i - 1)
            let u = 0
            for (let e = 0; e < i; e++) e !== a && (l[u++] = s.shape[e])
            const c = new Array(i).fill(0),
              h = s.shape.slice()
            h[a] = 1
            const p = new Array(o)
            for (let e = 0; e < p.length; e++) {
              c[a] = e
              const t = nN({
                inputs: { x: s },
                backend: n,
                attrs: { begin: c, size: h },
              })
              ;(p[e] = yI({
                inputs: { x: t },
                backend: n,
                attrs: { shape: l },
              })),
                n.disposeIntermediateTensorInfo(t)
            }
            return p
          },
      },
      J$ = {
        kernelName: vr,
        backendName: 'cpu',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s, segmentIds: a } = t,
              { numSegments: i } = r
            Fk(s, 'unsortedSegmentSum')
            const o = [],
              l = [],
              u = s.shape.length - a.shape.length
            let c = a
            for (let e = 0; e < u; ++e) {
              const t = pS({
                inputs: { input: c },
                backend: n,
                attrs: { dim: e + 1 },
              })
              ;(c = t), l.push(t)
            }
            for (let e = 0; e < i; ++e) {
              const t = Qr(e, 'int32'),
                r = n.makeTensorInfo([], 'int32', t),
                a = QN({ inputs: { a: r, b: c }, backend: n }),
                i = uI({
                  inputs: { x: a },
                  backend: n,
                  attrs: { dtype: 'float32' },
                }),
                u = jN({ inputs: { a: i, b: s }, backend: n }),
                h = KN({
                  inputs: { x: u },
                  backend: n,
                  attrs: { axis: 0, keepDims: !1 },
                })
              o.push(h), l.push(r), l.push(a), l.push(i), l.push(u), l.push(h)
            }
            const h = uC({ inputs: o, backend: n, attrs: { axis: 0 } })
            return l.forEach((e) => n.disposeIntermediateTensorInfo(e)), h
          },
      },
      Q$ = [
        vI,
        II,
        SI,
        CI,
        gI,
        $I,
        _I,
        FI,
        DI,
        OI,
        LI,
        PI,
        WI,
        GI,
        jI,
        YI,
        ZI,
        JI,
        QI,
        wI,
        eN,
        sN,
        oN,
        lN,
        cI,
        hN,
        dN,
        sI,
        fN,
        xN,
        vN,
        kN,
        IN,
        NN,
        SN,
        TN,
        $N,
        RN,
        AN,
        _N,
        FN,
        DN,
        ON,
        LN,
        zN,
        PN,
        BN,
        WN,
        VN,
        UN,
        YN,
        Pk,
        ZN,
        eS,
        lS,
        hS,
        dS,
        gS,
        CS,
        ES,
        RS,
        FS,
        MS,
        LS,
        zS,
        BS,
        VS,
        HS,
        KS,
        Wk,
        XS,
        yN,
        ZS,
        QS,
        tT,
        Uk,
        sT,
        oT,
        uT,
        pT,
        fT,
        yT,
        xT,
        kT,
        IT,
        NT,
        CT,
        RT,
        AT,
        _T,
        FT,
        DT,
        OT,
        MT,
        LT,
        BT,
        WT,
        GT,
        qT,
        qN,
        XT,
        ZT,
        QT,
        tC,
        sC,
        aC,
        lC,
        cC,
        hC,
        fC,
        qk,
        gC,
        xC,
        SC,
        CC,
        oI,
        xS,
        EC,
        Xk,
        Zk,
        bI,
        RC,
        AC,
        _C,
        FC,
        DC,
        OC,
        LC,
        BC,
        VC,
        HC,
        jC,
        YC,
        tI,
        JC,
        e$,
        n$,
        rN,
        jT,
        a$,
        i$,
        l$,
        c$,
        p$,
        d$,
        f$,
        m$,
        b$,
        x$,
        k$,
        N$,
        T$,
        E$,
        _$,
        D$,
        IS,
        XN,
        M$,
        { kernelName: fr, backendName: 'cpu', kernelFunc: L$ },
        P$,
        U$,
        G$,
        AI,
        Y$,
        Z$,
        J$,
        oC,
      ]
    for (const e of Q$)
      Mr(e)
      /**
       * @license
       * Copyright 2018 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
    const eE = {},
      tE = {
        alpha: !1,
        antialias: !1,
        premultipliedAlpha: !1,
        preserveDrawingBuffer: !1,
        depth: !1,
        stencil: !1,
        failIfMajorPerformanceCaveat: !0,
      }
    function nE(e, t) {
      if (!(e in eE) || null != t) {
        const n = (function (e, t) {
          if (1 !== e && 2 !== e)
            throw new Error(
              'Cannot get WebGL rendering context, WebGL is disabled.',
            )
          const n =
            null == t
              ? (function (e) {
                  if ('undefined' != typeof OffscreenCanvas && 2 === e)
                    return new OffscreenCanvas(300, 150)
                  if ('undefined' != typeof document)
                    return document.createElement('canvas')
                  throw new Error('Cannot create a canvas in this context')
                })(e)
              : t
          return (
            n.addEventListener(
              'webglcontextlost',
              (t) => {
                t.preventDefault(), delete eE[e]
              },
              !1,
            ),
            ye().getBool('SOFTWARE_WEBGL_ENABLED') &&
              (tE.failIfMajorPerformanceCaveat = !1),
            1 === e
              ? n.getContext('webgl', tE) ||
                n.getContext('experimental-webgl', tE)
              : n.getContext('webgl2', tE)
          )
        })(e, t)
        if (null === n)
          return console.log('Could not get context for WebGL version', e), null
        eE[e] = n
      }
      const n = eE[e]
      return null == n || n.isContextLost()
        ? (delete eE[e], nE(e))
        : (n.disable(n.DEPTH_TEST),
          n.disable(n.STENCIL_TEST),
          n.disable(n.BLEND),
          n.disable(n.DITHER),
          n.disable(n.POLYGON_OFFSET_FILL),
          n.disable(n.SAMPLE_COVERAGE),
          n.enable(n.SCISSOR_TEST),
          n.enable(n.CULL_FACE),
          n.cullFace(n.BACK),
          eE[e])
    }
    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ var rE, sE, aE
    function iE(e, t) {
      return [t, e]
    }
    function oE(e) {
      const t = P(e)
      return V(Math.ceil(t / 4))
    }
    function lE(e, t) {
      return [Math.max(1, Math.ceil(t / 2)), Math.max(1, Math.ceil(e / 2))]
    }
    function uE(e, t) {
      const n = e
      let r, s, a, i, o, l, u, c, h, p
      return (
        2 === ye().getNumber('WEBGL_VERSION')
          ? ((r = n.R32F),
            (s = n.R16F),
            (a = n.RGBA16F),
            (i = n.RGBA32F),
            (o = n.RED),
            (u = 4),
            (c = 1),
            (h = n.HALF_FLOAT),
            (p = n.FLOAT),
            (l = n.RGBA8))
          : ((r = e.RGBA),
            (s = e.RGBA),
            (a = e.RGBA),
            (i = n.RGBA),
            (o = e.RGBA),
            (u = 4),
            (c = 4),
            (h = null != t ? t.HALF_FLOAT_OES : null),
            (p = e.FLOAT),
            (l = e.RGBA)),
        {
          internalFormatFloat: r,
          internalFormatHalfFloat: s,
          internalFormatPackedHalfFloat: a,
          internalFormatPackedFloat: i,
          textureFormatFloat: o,
          downloadTextureFormat: l,
          downloadUnpackNumChannels: u,
          defaultNumChannels: c,
          textureTypeHalfFloat: h,
          textureTypeFloat: p,
        }
      )
    }
    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function cE(e, t) {
      const n = t()
      return (
        ye().getBool('DEBUG') &&
          (function (e) {
            const t = e.getError()
            if (t !== e.NO_ERROR)
              throw new Error(
                'WebGL Error: ' +
                  (function (e, t) {
                    switch (t) {
                      case e.NO_ERROR:
                        return 'NO_ERROR'
                      case e.INVALID_ENUM:
                        return 'INVALID_ENUM'
                      case e.INVALID_VALUE:
                        return 'INVALID_VALUE'
                      case e.INVALID_OPERATION:
                        return 'INVALID_OPERATION'
                      case e.INVALID_FRAMEBUFFER_OPERATION:
                        return 'INVALID_FRAMEBUFFER_OPERATION'
                      case e.OUT_OF_MEMORY:
                        return 'OUT_OF_MEMORY'
                      case e.CONTEXT_LOST_WEBGL:
                        return 'CONTEXT_LOST_WEBGL'
                      default:
                        return `Unknown error code ${t}`
                    }
                  })(e, t),
              )
          })(e),
        n
      )
    }
    function hE(e) {
      return !!(
        ye().getBool('WEBGL_RENDER_FLOAT32_ENABLED') ||
        0 === e ||
        (5.96e-8 < Math.abs(e) && Math.abs(e) < 65504)
      )
    }
    function pE(e, t) {
      return vE(
        e,
        () => e.getExtension(t),
        'Extension "' + t + '" not supported on this browser.',
      )
    }
    !(function (e) {
      ;(e[(e.DENSE = 0)] = 'DENSE'), (e[(e.SHARED_BATCH = 1)] = 'SHARED_BATCH')
    })(rE || (rE = {})),
      (function (e) {
        ;(e[(e.RENDER = 0)] = 'RENDER'),
          (e[(e.UPLOAD = 1)] = 'UPLOAD'),
          (e[(e.PIXELS = 2)] = 'PIXELS'),
          (e[(e.DOWNLOAD = 3)] = 'DOWNLOAD')
      })(sE || (sE = {})),
      (function (e) {
        ;(e[(e.UNPACKED_FLOAT16 = 0)] = 'UNPACKED_FLOAT16'),
          (e[(e.UNPACKED_FLOAT32 = 1)] = 'UNPACKED_FLOAT32'),
          (e[(e.PACKED_4X1_UNSIGNED_BYTE = 2)] = 'PACKED_4X1_UNSIGNED_BYTE'),
          (e[(e.PACKED_2X2_FLOAT32 = 3)] = 'PACKED_2X2_FLOAT32'),
          (e[(e.PACKED_2X2_FLOAT16 = 4)] = 'PACKED_2X2_FLOAT16')
      })(aE || (aE = {}))
    const dE = /ERROR: [0-9]+:([0-9]+):/g
    function fE(e, t) {
      const n = dE.exec(t)
      if (null == n)
        return (
          console.log(`Couldn't parse line number in error: ${t}`),
          void console.log(e)
        )
      const r = +n[1],
        s = e.split('\n'),
        a = s.length.toString().length + 2,
        i = s.map((e, t) => U((t + 1).toString(), a) + e)
      let o = 0
      for (let e = 0; e < i.length; e++) o = Math.max(i[e].length, o)
      const l = i.slice(0, r - 1),
        u = i.slice(r - 1, r),
        c = i.slice(r)
      console.log(l.join('\n')),
        console.log(t.split('\n')[0]),
        console.log(
          `%c ${U(u[0], o)}`,
          'border:1px solid red; background-color:#e3d2d2; color:#a61717',
        ),
        console.log(c.join('\n'))
    }
    function mE(e, t) {
      if (
        (cE(e, () => e.validateProgram(t)),
        !1 === e.getProgramParameter(t, e.VALIDATE_STATUS))
      )
        throw (
          (console.log(e.getProgramInfoLog(t)),
          new Error('Shader program validation failed.'))
        )
    }
    function gE(e, t, n, r, s, a, i) {
      const o = e.getAttribLocation(t, n)
      return (
        -1 !== o &&
        (cE(e, () => e.bindBuffer(e.ARRAY_BUFFER, r)),
        cE(e, () => e.vertexAttribPointer(o, s, e.FLOAT, !1, a, i)),
        cE(e, () => e.enableVertexAttribArray(o)),
        !0)
      )
    }
    function yE(e, t, n, r) {
      cE(e, () =>
        (function (e, t, n) {
          ;(function (e, t) {
            const n = e.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1,
              r = t + e.TEXTURE0
            if (r < e.TEXTURE0 || r > n)
              throw new Error(
                `textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${n}].`,
              )
          })(e, n),
            cE(e, () => e.activeTexture(e.TEXTURE0 + n)),
            cE(e, () => e.bindTexture(e.TEXTURE_2D, t))
        })(e, t, r),
      ),
        cE(e, () => e.uniform1i(n, r))
    }
    function bE(e, t, n) {
      cE(e, () => e.bindFramebuffer(e.FRAMEBUFFER, n)),
        cE(e, () =>
          e.framebufferTexture2D(
            e.FRAMEBUFFER,
            e.COLOR_ATTACHMENT0,
            e.TEXTURE_2D,
            t,
            0,
          ),
        )
    }
    function xE(e, t) {
      cE(e, () => e.bindFramebuffer(e.FRAMEBUFFER, t)),
        cE(e, () =>
          e.framebufferTexture2D(
            e.FRAMEBUFFER,
            e.COLOR_ATTACHMENT0,
            e.TEXTURE_2D,
            null,
            0,
          ),
        )
    }
    function wE(e) {
      const t = e.checkFramebufferStatus(e.FRAMEBUFFER)
      if (t !== e.FRAMEBUFFER_COMPLETE)
        throw new Error(
          'Error binding framebuffer: ' +
            (function (e, t) {
              switch (t) {
                case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
                  return 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT'
                case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
                  return 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT'
                case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
                  return 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS'
                case e.FRAMEBUFFER_UNSUPPORTED:
                  return 'FRAMEBUFFER_UNSUPPORTED'
                default:
                  return `unknown error ${t}`
              }
            })(e, t),
        )
    }
    function vE(e, t, n) {
      const r = cE(e, () => t())
      if (null == r) throw new Error(n)
      return r
    }
    function kE(e, t = 2) {
      return P(e.slice(0, e.length - t))
    }
    function IE(e) {
      if (0 === e.length)
        throw Error('Cannot get rows and columns of an empty shape array.')
      return [e.length > 1 ? e[e.length - 2] : 1, e[e.length - 1]]
    }
    function NE(e) {
      let t = [1, 1, 1]
      return (
        0 === e.length ||
          (1 === e.length && 1 === e[0]) ||
          (t = [kE(e), ...IE(e)]),
        t
      )
    }
    function SE(e) {
      return e % 2 == 0
    }
    function TE(e, t) {
      if (B((e = e.slice(-2)), (t = t.slice(-2)))) return !0
      if (!e.length || !t.length) return !0
      if (0 === e[0] || 0 === e[1] || 0 === t[0] || 0 === t[1]) return !0
      if (e.length !== t.length) {
        const n = e.slice(-1)[0],
          r = t.slice(-1)[0]
        if (n === r) return !0
        if (SE(n) && SE(r) && (1 === e[0] || 1 === t[0])) return !0
      }
      return e[1] === t[1] && SE(e[0]) && SE(t[0])
    }
    let CE, $E
    function EE(e, t) {
      return null != e.getExtension(t)
    }
    function RE(e) {
      try {
        if (null != nE(e)) return !0
      } catch (e) {
        return console.log('Error when getting WebGL context: ', e), !1
      }
      return !1
    }
    function AE(e) {
      const t = uE(e),
        n = e.createTexture()
      e.bindTexture(e.TEXTURE_2D, n),
        e.texImage2D(
          e.TEXTURE_2D,
          0,
          t.internalFormatFloat,
          1,
          1,
          0,
          t.textureFormatFloat,
          t.textureTypeFloat,
          null,
        )
      const r = e.createFramebuffer()
      e.bindFramebuffer(e.FRAMEBUFFER, r),
        e.framebufferTexture2D(
          e.FRAMEBUFFER,
          e.COLOR_ATTACHMENT0,
          e.TEXTURE_2D,
          n,
          0,
        )
      const s =
        e.checkFramebufferStatus(e.FRAMEBUFFER) === e.FRAMEBUFFER_COMPLETE
      return (
        e.bindTexture(e.TEXTURE_2D, null),
        e.bindFramebuffer(e.FRAMEBUFFER, null),
        e.deleteTexture(n),
        e.deleteFramebuffer(r),
        s
      )
    }
    function _E(e, t) {
      Array.isArray(e) || (e = [e]),
        e.forEach((e) => {
          null != e &&
            O(
              'complex64' !== e.dtype,
              () =>
                `${t} does not support complex64 tensors in the WebGL backend.`,
            )
        })
    }
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const FE = ye()
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function DE() {
      let e, t, n, r, s, a, i, o, l, u
      return (
        2 === ye().getNumber('WEBGL_VERSION')
          ? ((e = '#version 300 es'),
            (t = 'in'),
            (n = 'out'),
            (r = 'in'),
            (s = 'texture'),
            (a = 'outputColor'),
            (i = 'out vec4 outputColor;'),
            (o = ye().getBool('WEBGL2_ISNAN_CUSTOM')
              ? '\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    '
              : ''),
            (l = ''),
            (u =
              '\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    '))
          : ((e = ''),
            (t = 'attribute'),
            (n = 'varying'),
            (r = 'varying'),
            (s = 'texture2D'),
            (a = 'gl_FragColor'),
            (i = ''),
            (o =
              '\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    '),
            (l =
              '\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    '),
            (u =
              '\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    ')),
        {
          version: e,
          attribute: t,
          varyingVs: n,
          varyingFs: r,
          texture2D: s,
          output: a,
          defineOutput: i,
          defineSpecialNaN: o,
          defineSpecialInf: l,
          defineRound: u,
        }
      )
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function OE(e, t, n = 'index') {
      const r = se(t)
      return r
        .map(
          (t, s) =>
            `int ${e[s]} = ${n} / ${t}; ${s === r.length - 1 ? `int ${e[s + 1]} = ${n} - ${e[s]} * ${t}` : `index -= ${e[s]} * ${t}`};`,
        )
        .join('')
    }
    function ME(e, t, n = 'index') {
      const r = se(t)
      return r
        .map(
          (t, s) =>
            `int ${e[s]} = ${n} / outShapeStrides[${s}]; ${s === r.length - 1 ? `int ${e[s + 1]} = ${n} - ${e[s]} * outShapeStrides[${s}]` : `index -= ${e[s]} * outShapeStrides[${s}]`};`,
        )
        .join('')
    }
    function LE(e) {
      const t = se(e).map((e) => e.toString())
      return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`
    }
    FE.registerFlag('HAS_WEBGL', () => FE.getNumber('WEBGL_VERSION') > 0),
      FE.registerFlag('WEBGL_VERSION', () => (RE(2) ? 2 : RE(1) ? 1 : 0)),
      FE.registerFlag('WEBGL_CHECK_NUMERICAL_PROBLEMS', () => !1),
      FE.registerFlag(
        'WEBGL_BUFFER_SUPPORTED',
        () => 2 === FE.get('WEBGL_VERSION'),
      ),
      FE.registerFlag('WEBGL_CPU_FORWARD', () => !0),
      FE.registerFlag('WEBGL_FORCE_F16_TEXTURES', () => !1),
      FE.registerFlag('WEBGL_PACK', () => FE.getBool('HAS_WEBGL')),
      FE.registerFlag('WEBGL_PACK_NORMALIZATION', () =>
        FE.getBool('WEBGL_PACK'),
      ),
      FE.registerFlag('WEBGL_PACK_CLIP', () => FE.getBool('WEBGL_PACK')),
      FE.registerFlag('WEBGL_PACK_DEPTHWISECONV', () =>
        FE.getBool('WEBGL_PACK'),
      ),
      FE.registerFlag('WEBGL_PACK_BINARY_OPERATIONS', () =>
        FE.getBool('WEBGL_PACK'),
      ),
      FE.registerFlag('WEBGL_PACK_UNARY_OPERATIONS', () =>
        FE.getBool('WEBGL_PACK'),
      ),
      FE.registerFlag('WEBGL_PACK_ARRAY_OPERATIONS', () =>
        FE.getBool('WEBGL_PACK'),
      ),
      FE.registerFlag('WEBGL_PACK_IMAGE_OPERATIONS', () =>
        FE.getBool('WEBGL_PACK'),
      ),
      FE.registerFlag('WEBGL_PACK_REDUCE', () => FE.getBool('WEBGL_PACK')),
      FE.registerFlag('WEBGL_LAZILY_UNPACK', () => FE.getBool('WEBGL_PACK')),
      FE.registerFlag('WEBGL_CONV_IM2COL', () => FE.getBool('WEBGL_PACK')),
      FE.registerFlag('WEBGL_MAX_TEXTURE_SIZE', () =>
        (function (e) {
          if (null == CE) {
            const t = nE(e)
            CE = t.getParameter(t.MAX_TEXTURE_SIZE)
          }
          return CE
        })(FE.getNumber('WEBGL_VERSION')),
      ),
      FE.registerFlag('WEBGL_MAX_TEXTURES_IN_SHADER', () =>
        (function (e) {
          if (null == $E) {
            const t = nE(e)
            $E = t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)
          }
          return Math.min(16, $E)
        })(FE.getNumber('WEBGL_VERSION')),
      ),
      FE.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', () => {
        const e = FE.getNumber('WEBGL_VERSION')
        return 0 === e
          ? 0
          : (function (e) {
              if (0 === e) return 0
              let t
              const n = nE(e)
              return (
                (t =
                  EE(n, 'EXT_disjoint_timer_query_webgl2') && 2 === e
                    ? 2
                    : EE(n, 'EXT_disjoint_timer_query')
                      ? 1
                      : 0),
                t
              )
            })(e)
      }),
      FE.registerFlag(
        'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE',
        () =>
          FE.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 &&
          !Ls(),
      ),
      FE.registerFlag('WEBGL_RENDER_FLOAT32_CAPABLE', () =>
        (function (e) {
          if (0 === e) return !1
          const t = nE(e)
          if (1 === e) {
            if (!EE(t, 'OES_texture_float')) return !1
          } else if (!EE(t, 'EXT_color_buffer_float')) return !1
          return AE(t)
        })(FE.getNumber('WEBGL_VERSION')),
      ),
      FE.registerFlag(
        'WEBGL_RENDER_FLOAT32_ENABLED',
        () =>
          !FE.getBool('WEBGL_FORCE_F16_TEXTURES') &&
          FE.getBool('WEBGL_RENDER_FLOAT32_CAPABLE'),
      ),
      FE.registerFlag('WEBGL_DOWNLOAD_FLOAT_ENABLED', () =>
        (function (e) {
          if (0 === e) return !1
          const t = nE(e)
          if (1 !== e) {
            if (EE(t, 'EXT_color_buffer_float')) return AE(t)
            const e = 'EXT_color_buffer_half_float'
            if (EE(t, e)) {
              const n = t.getExtension(e)
              return (function (e, t) {
                const n = uE(e, t),
                  r = e.createTexture()
                e.bindTexture(e.TEXTURE_2D, r),
                  e.texImage2D(
                    e.TEXTURE_2D,
                    0,
                    n.internalFormatHalfFloat,
                    1,
                    1,
                    0,
                    n.textureFormatFloat,
                    n.textureTypeHalfFloat,
                    null,
                  )
                const s = e.createFramebuffer()
                e.bindFramebuffer(e.FRAMEBUFFER, s),
                  e.framebufferTexture2D(
                    e.FRAMEBUFFER,
                    e.COLOR_ATTACHMENT0,
                    e.TEXTURE_2D,
                    r,
                    0,
                  )
                const a =
                  e.checkFramebufferStatus(e.FRAMEBUFFER) ===
                  e.FRAMEBUFFER_COMPLETE
                return (
                  e.bindTexture(e.TEXTURE_2D, null),
                  e.bindFramebuffer(e.FRAMEBUFFER, null),
                  e.deleteTexture(r),
                  e.deleteFramebuffer(s),
                  a
                )
              })(t, n)
            }
            return !1
          }
          return (
            !!EE(t, 'OES_texture_float') &&
            !!EE(t, 'WEBGL_color_buffer_float') &&
            AE(t)
          )
        })(FE.getNumber('WEBGL_VERSION')),
      ),
      FE.registerFlag('WEBGL_FENCE_API_ENABLED', () => {
        return (
          2 === (e = FE.getNumber('WEBGL_VERSION')) && null != nE(e).fenceSync
        )
        var e
      }),
      FE.registerFlag('WEBGL_SIZE_UPLOAD_UNIFORM', () =>
        FE.getBool('WEBGL_RENDER_FLOAT32_ENABLED') ? 4 : 0,
      ),
      FE.registerFlag(
        'WEBGL_DELETE_TEXTURE_THRESHOLD',
        () => -1,
        (e) => {
          if (e < 0 && -1 !== e)
            throw new Error(
              `WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`,
            )
        },
      ),
      FE.registerFlag(
        'WEBGL_FLUSH_THRESHOLD',
        () => (Ls() ? 1 : -1),
        (e) => {
          if (e < 0 && -1 !== e)
            throw new Error(
              `WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`,
            )
        },
      ),
      FE.registerFlag('CPU_HANDOFF_SIZE_THRESHOLD', () => 128),
      FE.registerFlag('WEBGL_USE_SHAPES_UNIFORMS', () => !1),
      FE.registerFlag('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD', () => 1e5),
      FE.registerFlag('TOPK_K_CPU_HANDOFF_THRESHOLD', () => 128),
      FE.registerFlag('WEBGL_EXP_CONV', () => !1),
      FE.registerFlag('SOFTWARE_WEBGL_ENABLED', () => FE.getBool('IS_TEST')),
      FE.registerFlag('WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE', () => 1 / 0),
      FE.registerFlag('WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE', () => !1),
      FE.registerFlag('WEBGL2_ISNAN_CUSTOM', () => !1)
    const zE =
        '\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n',
      { getBroadcastDims: PE } = i
    function BE(e, t, n) {
      const r = []
      if (
        (e.forEach((e) => {
          const t = P(e.shapeInfo.logicalShape)
          if (
            (e.shapeInfo.isUniform
              ? r.push(`uniform float ${e.name}${t > 1 ? `[${t}]` : ''};`)
              : (r.push(`uniform sampler2D ${e.name};`),
                r.push(`uniform int offset${e.name};`)),
            n.enableShapeUniforms)
          ) {
            const { uniformShape: t } = YE(
              n.packedInputs,
              e.shapeInfo.logicalShape,
              e.shapeInfo.texShape,
            )
            switch (t.length) {
              case 1:
                r.push(`uniform int ${e.name}Shape;`)
                break
              case 2:
                r.push(`uniform ivec2 ${e.name}Shape;`)
                break
              case 3:
                r.push(`uniform ivec3 ${e.name}Shape;`)
                break
              case 4:
                r.push(`uniform ivec4 ${e.name}Shape;`)
            }
            r.push(`uniform ivec2 ${e.name}TexShape;`)
          }
        }),
        n.enableShapeUniforms)
      ) {
        switch (t.logicalShape.length) {
          case 1:
            r.push('uniform int outShape;')
            break
          case 2:
            r.push('uniform ivec2 outShape;'),
              r.push('uniform int outShapeStrides;')
            break
          case 3:
            r.push('uniform ivec3 outShape;'),
              r.push('uniform ivec2 outShapeStrides;')
            break
          case 4:
            r.push('uniform ivec4 outShape;'),
              r.push('uniform ivec3 outShapeStrides;')
        }
        r.push('uniform ivec2 outTexShape;')
      }
      n.customUniforms &&
        n.customUniforms.forEach((e) => {
          r.push(
            `uniform ${e.type} ${e.name}${e.arrayIndex ? `[${e.arrayIndex}]` : ''};`,
          )
        })
      const s = r.join('\n'),
        a = e
          .map((e) =>
            (function (e, t, n = !1, r) {
              let s = ''
              s += n ? VE(e, r) : WE(e, r)
              const a = e.shapeInfo.logicalShape,
                i = t.logicalShape
              return (
                a.length <= i.length &&
                  (s += n
                    ? (function (e, t) {
                        const n = e.name,
                          r = n.charAt(0).toUpperCase() + n.slice(1),
                          s = 'get' + r + 'AtOutCoords',
                          a = e.shapeInfo.logicalShape.length,
                          i = t.logicalShape.length,
                          o = PE(e.shapeInfo.logicalShape, t.logicalShape),
                          l = XE(i),
                          u = i - a
                        let c
                        const h = ['x', 'y', 'z', 'w', 'u', 'v']
                        c =
                          0 === a
                            ? ''
                            : i < 2 && o.length >= 1
                              ? 'coords = 0;'
                              : o
                                  .map((e) => `coords.${h[e + u]} = 0;`)
                                  .join('\n')
                        let p = ''
                        p =
                          i < 2 && a > 0
                            ? 'coords'
                            : e.shapeInfo.logicalShape
                                .map((e, t) => `coords.${h[t + u]}`)
                                .join(', ')
                        let d = 'return outputValue;'
                        const f = 1 === P(e.shapeInfo.logicalShape),
                          m = 1 === P(t.logicalShape)
                        if (1 !== a || f || m) {
                          if (f && !m)
                            d =
                              1 === i
                                ? '\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      '
                                : '\n        return vec4(outputValue.x);\n      '
                          else if (o.length) {
                            const e = a - 2,
                              t = a - 1
                            o.indexOf(e) > -1 && o.indexOf(t) > -1
                              ? (d = 'return vec4(outputValue.x);')
                              : o.indexOf(e) > -1
                                ? (d =
                                    'return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);')
                                : o.indexOf(t) > -1 &&
                                  (d =
                                    'return vec4(outputValue.xx, outputValue.zz);')
                          }
                        } else
                          d =
                            '\n      return vec4(outputValue.xy, outputValue.xy);\n    '
                        return `\n    vec4 ${s}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${r}(${p});\n      ${d}\n    }\n  `
                      })(e, t)
                    : (function (e, t) {
                        const n = e.name,
                          r = n.charAt(0).toUpperCase() + n.slice(1),
                          s = 'get' + r + 'AtOutCoords',
                          a = t.texShape,
                          i = e.shapeInfo.texShape,
                          o = e.shapeInfo.logicalShape.length,
                          l = t.logicalShape.length
                        if (
                          !e.shapeInfo.isUniform &&
                          o === l &&
                          null == e.shapeInfo.flatOffset &&
                          B(i, a)
                        )
                          return `\n      float ${s}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `
                        const u = XE(l),
                          c = PE(e.shapeInfo.logicalShape, t.logicalShape),
                          h = l - o
                        let p
                        const d = ['x', 'y', 'z', 'w', 'u', 'v']
                        p =
                          0 === o
                            ? ''
                            : l < 2 && c.length >= 1
                              ? 'coords = 0;'
                              : c
                                  .map((e) => `coords.${d[e + h]} = 0;`)
                                  .join('\n')
                        let f = ''
                        return (
                          (f =
                            l < 2 && o > 0
                              ? 'coords'
                              : e.shapeInfo.logicalShape
                                  .map((e, t) => `coords.${d[t + h]}`)
                                  .join(', ')),
                          `\n    float ${s}() {\n      ${u} coords = getOutputCoords();\n      ${p}\n      return get${r}(${f});\n    }\n  `
                        )
                      })(e, t)),
                s
              )
            })(e, t, n.packedInputs, n.enableShapeUniforms),
          )
          .join('\n'),
        i = t.texShape,
        o = DE(),
        l = (function (e) {
          return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `
        })(o)
      let u,
        c,
        h = (function (e) {
          return `${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${UE}\n    ${GE}\n    ${HE}\n  `
        })(o)
      return (
        t.isPacked
          ? ((u = (function (e, t, n) {
              switch (e.length) {
                case 0:
                  return '\n    int getOutputCoords() {\n      return 0;\n    }\n  '
                case 1:
                  return (function (e, t, n) {
                    const r = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)]
                    return 1 === r[0]
                      ? n
                        ? '\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    '
                        : `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${r[1]}.0);\n      }\n    `
                      : 1 === r[1]
                        ? n
                          ? '\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    '
                          : `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${r[0]}.0);\n      }\n    `
                        : n
                          ? '\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  '
                          : `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      return 2 * (resTexRC.x * ${r[1]} + resTexRC.y);\n    }\n  `
                  })(0, t, n)
                case 2:
                  return (function (e, t, n) {
                    const r = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)]
                    if (B(e, t))
                      return n
                        ? '\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    '
                        : `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${r[0]}, ${r[1]}));\n      }\n    `
                    const s = Math.ceil(e[1] / 2)
                    return n
                      ? '\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  '
                      : `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec2(r, c);\n    }\n  `
                  })(e, t, n)
                case 3:
                  return (function (e, t, n) {
                    if (n)
                      return '\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  '
                    const r = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)],
                      s = Math.ceil(e[2] / 2),
                      a = s * Math.ceil(e[1] / 2)
                    return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `
                  })(e, t, n)
                default:
                  return (function (e, t, n) {
                    if (n)
                      return '\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  '
                    const r = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)],
                      s = Math.ceil(e[e.length - 1] / 2),
                      a = s * Math.ceil(e[e.length - 2] / 2)
                    let i = a,
                      o = '',
                      l = 'b, r, c'
                    for (let t = 2; t < e.length - 1; t++)
                      (i *= e[e.length - t - 1]),
                        (o =
                          `\n      int b${t} = index / ${i};\n      index -= b${t} * ${i};\n    ` +
                          o),
                        (l = `b${t}, ` + l)
                    return `\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n\n      ${o}\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec${e.length}(${l});\n    }\n  `
                  })(e, t, n)
              }
            })(t.logicalShape, i, n.enableShapeUniforms)),
            (c = (function (e) {
              return `\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `
            })(o)))
          : ((u = (function (e, t, n) {
              switch (e.length) {
                case 0:
                  return '\n    int getOutputCoords() {\n      return 0;\n    }\n  '
                case 1:
                  return (function (e, t, n) {
                    return 1 === t[0]
                      ? n
                        ? '\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    '
                        : `\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `
                      : 1 === t[1]
                        ? n
                          ? '\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    '
                          : `\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `
                        : n
                          ? '\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  '
                          : `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `
                  })(0, t, n)
                case 2:
                  return (function (e, t, n) {
                    return B(e, t)
                      ? n
                        ? '\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    '
                        : `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `
                      : 1 === e[1]
                        ? n
                          ? '\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    '
                          : `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `
                        : 1 === e[0]
                          ? n
                            ? '\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    '
                            : `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `
                          : n
                            ? '\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  '
                            : `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `
                  })(e, t, n)
                case 3:
                  return (function (e, t, n) {
                    if (n)
                      return `\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${ME(['r', 'c', 'd'], e)}\n    return ivec3(r, c, d);\n  }\n`
                    const r = OE(['r', 'c', 'd'], e)
                    return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${r}\n      return ivec3(r, c, d);\n    }\n  `
                  })(e, t, n)
                case 4:
                  return (function (e, t, n) {
                    if (n)
                      return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${ME(['r', 'c', 'd', 'd2'], e)}\n      return ivec4(r, c, d, d2);\n    }\n  `
                    const r = OE(['r', 'c', 'd', 'd2'], e)
                    return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${r}\n      return ivec4(r, c, d, d2);\n    }\n  `
                  })(e, t, n)
                case 5:
                  return (function (e, t) {
                    const n = OE(['r', 'c', 'd', 'd2', 'd3'], e)
                    return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `
                  })(e, t)
                case 6:
                  return (function (e, t) {
                    const n = OE(['r', 'c', 'd', 'd2', 'd3', 'd4'], e)
                    return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `
                  })(e, t)
                default:
                  throw new Error(
                    `${e.length}-D output sampling is not yet supported`,
                  )
              }
            })(t.logicalShape, i, n.enableShapeUniforms)),
            (c = (function (e) {
              return `\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `
            })(o))),
        n.packedInputs && (h += jE),
        [h, l, c, s, u, a, n.userCode].join('\n')
      )
    }
    function WE(e, t = !1) {
      const n = e.shapeInfo.logicalShape
      switch (n.length) {
        case 0:
          return (function (e, t) {
            const n = e.name,
              r = 'get' + n.charAt(0).toUpperCase() + n.slice(1)
            if (e.shapeInfo.isUniform) return `float ${r}() {return ${n};}`
            const [s, a] = e.shapeInfo.texShape
            if (1 === s && 1 === a)
              return `\n      float ${r}() {\n        return sampleTexture(${n}, halfCR);\n      }\n    `
            const i = qE(n)
            if (t)
              return `\n    float ${r}() {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `
            const [o, l] = e.shapeInfo.texShape
            return `\n    float ${r}() {\n      vec2 uv = uvFromFlat(${o}, ${l}, ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `
          })(e, t)
        case 1:
          return (function (e, t) {
            const n = e.name,
              r = 'get' + n.charAt(0).toUpperCase() + n.slice(1)
            if (e.shapeInfo.isUniform)
              return `\n      float ${r}(int index) {\n        ${KE(e)}\n      }\n    `
            const s = e.shapeInfo.texShape,
              a = s[0],
              i = s[1]
            if (1 === i && 1 === a)
              return `\n      float ${r}(int index) {\n        return sampleTexture(${n}, halfCR);\n      }\n    `
            const o = qE(n)
            return 1 === i
              ? t
                ? `\n      float ${r}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / float(${n}TexShape[0]));\n        return sampleTexture(${n}, uv);\n      }\n    `
                : `\n      float ${r}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / ${a}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `
              : 1 === a
                ? t
                  ? `\n      float ${r}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / float(${n}TexShape[1]), 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `
                  : `\n      float ${r}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / ${i}.0, 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `
                : t
                  ? `\n    float ${r}(int index) {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `
                  : `\n    float ${r}(int index) {\n      vec2 uv = uvFromFlat(${a}, ${i}, index + ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `
          })(e, t)
        case 2:
          return (function (e, t) {
            const n = e.shapeInfo.logicalShape,
              r = e.name,
              s = 'get' + r.charAt(0).toUpperCase() + r.slice(1),
              a = e.shapeInfo.texShape
            if (null != a && B(n, a)) {
              if (t)
                return `\n      float ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `
              const e = a[0]
              return `\n    float ${s}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${a[1]}.0, ${e}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `
            }
            const { newShape: i, keptDims: o } = q(n),
              l = i
            if (l.length < n.length) {
              const n = ['row', 'col']
              return `\n      ${WE(ZE(e, l), t)}\n      float ${s}(int row, int col) {\n        return ${s}(${JE(n, o)});\n      }\n    `
            }
            if (e.shapeInfo.isUniform)
              return `\n      float ${s}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));\n        ${KE(e)}\n      }\n    `
            const u = a[0],
              c = a[1],
              h = qE(r)
            return 1 === c
              ? t
                ? `\n      float ${s}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${r}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${r}TexShape[0]));\n        return sampleTexture(${r}, uv);\n      }\n    `
                : `\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `
              : 1 === u
                ? t
                  ? `\n      float ${s}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${r}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${r}TexShape[1]), 0.5);\n        return sampleTexture(${r}, uv);\n      }\n    `
                  : `\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${r}, uv);\n    }\n  `
                : t
                  ? `\n      float ${s}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${r}Shape[1] + col + ${h};\n        vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index);\n        return sampleTexture(${r}, uv);\n      }\n    `
                  : `\n  float ${s}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${n[1]} + col + ${h};\n    vec2 uv = uvFromFlat(${u}, ${c}, index);\n    return sampleTexture(${r}, uv);\n  }\n`
          })(e, t)
        case 3:
          return (function (e, t) {
            const n = e.shapeInfo.logicalShape,
              r = e.name,
              s = 'get' + r.charAt(0).toUpperCase() + r.slice(1),
              a = n[1] * n[2],
              i = n[2],
              { newShape: o, keptDims: l } = q(n),
              u = o
            if (u.length < n.length) {
              const n = ['row', 'col', 'depth']
              return `\n        ${WE(ZE(e, u), t)}\n        float ${s}(int row, int col, int depth) {\n          return ${s}(${JE(n, l)});\n        }\n      `
            }
            if (e.shapeInfo.isUniform)
              return `\n      float ${s}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${a}, ${i}, 1)));\n        ${KE(e)}\n      }\n    `
            const c = e.shapeInfo.texShape,
              h = c[0],
              p = c[1],
              d = e.shapeInfo.flatOffset
            if (p === a && null == d)
              return t
                ? `\n      float ${s}(int row, int col, int depth) {\n        int stride1 = ${r}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `
                : `\n        float ${s}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${i}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${p}.0, ${h}.0);\n          return sampleTexture(${r}, uv);\n        }\n      `
            if (p === i && null == d)
              return t
                ? `\n      float ${s}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${r}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `
                : `\n    float ${s}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${p}.0, ${h}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `
            const f = qE(r)
            return t
              ? `\n    float ${s}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${r}Shape[1] * ${r}Shape[2];\n      int stride1 = ${r}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${f};\n      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index);\n      return sampleTexture(${r}, uv);\n    }\n    `
              : `\n      float ${s}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${a} + col * ${i} + depth + ${f};\n        vec2 uv = uvFromFlat(${h}, ${p}, index);\n        return sampleTexture(${r}, uv);\n      }\n  `
          })(e, t)
        case 4:
          return (function (e, t) {
            const n = e.shapeInfo.logicalShape,
              r = e.name,
              s = 'get' + r.charAt(0).toUpperCase() + r.slice(1),
              a = n[3],
              i = n[2] * a,
              o = n[1] * i,
              { newShape: l, keptDims: u } = q(n)
            if (l.length < n.length) {
              const n = ['row', 'col', 'depth', 'depth2']
              return `\n      ${WE(ZE(e, l), t)}\n      float ${s}(int row, int col, int depth, int depth2) {\n        return ${s}(${JE(n, u)});\n      }\n    `
            }
            if (e.shapeInfo.isUniform)
              return `\n      float ${s}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${o}, ${i}, ${a}, 1)));\n        ${KE(e)}\n      }\n    `
            const c = e.shapeInfo.flatOffset,
              h = e.shapeInfo.texShape,
              p = h[0],
              d = h[1],
              f = `int stride2 = ${r}Shape[3];`,
              m = `int stride1 = ${r}Shape[2] * stride2;`,
              g = `int stride0 = ${r}Shape[1] * stride1;`
            if (d === o && null == c)
              return t
                ? `\n      float ${s}(int row, int col, int depth, int depth2) {\n        ${f}\n        ${m}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `
                : `\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${i}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${p}.0);\n        return sampleTexture(${r}, uv);\n      }\n    `
            if (d === a && null == c)
              return t
                ? `\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${r}Shape[1] * ${r}Shape[2], ${r}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `
                : `\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${n[1] * n[2]}, ${n[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${p}.0);\n        return sampleTexture(${r}, uv);\n      }\n    `
            const y = qE(r)
            return t
              ? `\n    float ${s}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${f}\n      ${m}\n      ${g}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index + ${y});\n      return sampleTexture(${r}, uv);\n    }\n  `
              : `\n    float ${s}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} +\n          depth * ${a} + depth2;\n      vec2 uv = uvFromFlat(${p}, ${d}, index + ${y});\n      return sampleTexture(${r}, uv);\n    }\n  `
          })(e, t)
        case 5:
          return (function (e) {
            const t = e.shapeInfo.logicalShape,
              n = e.name,
              r = 'get' + n.charAt(0).toUpperCase() + n.slice(1),
              s = t[4],
              a = t[3] * s,
              i = t[2] * a,
              o = t[1] * i,
              { newShape: l, keptDims: u } = q(t)
            if (l.length < t.length) {
              const t = ['row', 'col', 'depth', 'depth2', 'depth3']
              return `\n      ${WE(ZE(e, l))}\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        return ${r}(${JE(t, u)});\n      }\n    `
            }
            if (e.shapeInfo.isUniform)
              return `\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${o}, ${i}, ${a}, ${s})) +\n          depth3;\n        ${KE(e)}\n      }\n    `
            const c = e.shapeInfo.flatOffset,
              h = e.shapeInfo.texShape,
              p = h[0],
              d = h[1]
            if (d === o && null == c)
              return `\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${a}, ${s}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `
            if (d === s && null == c)
              return `\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1] * t[2] * t[3]},\n               ${t[2] * t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `
            return `\n    float ${r}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} + depth * ${a} +\n          depth2 * ${s} + depth3 + ${qE(n)};\n      vec2 uv = uvFromFlat(${p}, ${d}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `
          })(e)
        case 6:
          return (function (e) {
            const t = e.shapeInfo.logicalShape,
              n = e.name,
              r = 'get' + n.charAt(0).toUpperCase() + n.slice(1),
              { newShape: s, keptDims: a } = q(t)
            if (s.length < t.length) {
              const t = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4']
              return `\n      ${WE(ZE(e, s))}\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${r}(${JE(t, a)});\n      }\n    `
            }
            const i = t[5],
              o = t[4] * i,
              l = t[3] * o,
              u = t[2] * l,
              c = t[1] * u
            if (e.shapeInfo.isUniform)
              return `\n      float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${o})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${KE(e)}\n      }\n    `
            const h = e.shapeInfo.flatOffset,
              p = e.shapeInfo.texShape,
              d = p[0],
              f = p[1]
            if (f === c && null == h)
              return `\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${o}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `
            if (f === i && null == h)
              return `\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1] * t[2] * t[3] * t[4]},\n               ${t[2] * t[3] * t[4]},\n               ${t[3] * t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `
            return `\n    float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${o} + depth3 * ${i} + depth4 + ${qE(n)};\n      vec2 uv = uvFromFlat(${d}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `
          })(e)
        default:
          throw new Error(`${n.length}-D input sampling is not yet supported`)
      }
    }
    function VE(e, t) {
      switch (e.shapeInfo.logicalShape.length) {
        case 0:
          return (function (e) {
            const t = e.name
            return `\n    vec4 ${'get' + t.charAt(0).toUpperCase() + t.slice(1)}() {\n      return ${DE().texture2D}(${t}, halfCR);\n    }\n  `
          })(e)
        case 1:
          return (function (e, t) {
            const n = e.name,
              r = 'get' + n.charAt(0).toUpperCase() + n.slice(1),
              s = e.shapeInfo.texShape,
              a = DE()
            if (t)
              return `\n    vec4 ${r}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `
            const i = [Math.ceil(s[0] / 2), Math.ceil(s[1] / 2)]
            return `\n    vec4 ${r}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${i[0]}, ${i[1]}, index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `
          })(e, t)
        case 2:
          return (function (e, t) {
            const n = e.shapeInfo.logicalShape,
              r = e.name,
              s = 'get' + r.charAt(0).toUpperCase() + r.slice(1),
              a = e.shapeInfo.texShape,
              i = a[0],
              o = a[1],
              l = DE()
            if (null != a && B(n, a))
              return t
                ? `\n      vec4 ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n\n        return ${l.texture2D}(${r}, uv);\n      }\n    `
                : `\n      vec4 ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}.0, ${i}.0);\n\n        return ${l.texture2D}(${r}, uv);\n      }\n    `
            if (t)
              return `\n    vec4 ${s}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${r}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${l.texture2D}(${r}, uv);\n    }\n  `
            const u = [Math.ceil(a[0] / 2), Math.ceil(a[1] / 2)]
            return `\n    vec4 ${s}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${Math.ceil(n[1] / 2)}, ${u[0]}, ${u[1]}, row, col);\n      return ${l.texture2D}(${r}, uv);\n    }\n  `
          })(e, t)
        case 3:
          return (function (e, t) {
            const n = e.shapeInfo.logicalShape,
              r = e.name,
              s = 'get' + r.charAt(0).toUpperCase() + r.slice(1),
              a = e.shapeInfo.texShape,
              i = [Math.ceil(a[0] / 2), Math.ceil(a[1] / 2)]
            if (1 === n[0]) {
              const r = [1, 2],
                a = ['b', 'row', 'col']
              return `\n        ${VE(ZE(e, n.slice(1)), t)}\n        vec4 ${s}(int b, int row, int col) {\n          return ${s}(${JE(a, r)});\n        }\n      `
            }
            const o = DE()
            if (t)
              return `\n    vec4 ${s}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${r}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${r}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${o.texture2D}(${r}, uv);\n    }\n  `
            const l = i[0],
              u = i[1],
              c = Math.ceil(n[2] / 2)
            return `\n    vec4 ${s}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${l}, ${u}, ${c * Math.ceil(n[1] / 2)}, ${c}, b, row, col);\n      return ${o.texture2D}(${r}, uv);\n    }\n  `
          })(e, t)
        default:
          return (function (e, t) {
            const n = e.name,
              r = 'get' + n.charAt(0).toUpperCase() + n.slice(1),
              s = DE()
            if (t)
              return `\n    vec4 ${r}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${n}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${s.texture2D}(${n}, uv);\n    }\n  `
            const a = e.shapeInfo.logicalShape,
              i = a.length,
              o = e.shapeInfo.texShape,
              l = [Math.ceil(o[0] / 2), Math.ceil(o[1] / 2)],
              u = l[0],
              c = l[1],
              h = Math.ceil(a[i - 1] / 2)
            let p = h * Math.ceil(a[i - 2] / 2),
              d = 'int b, int row, int col',
              f = `b * ${p} + (row / 2) * ${h} + (col / 2)`
            for (let e = 2; e < i - 1; e++)
              (d = `int b${e}, ` + d),
                (p *= a[i - e - 1]),
                (f = `b${e} * ${p} + ` + f)
            return `\n    vec4 ${r}(${d}) {\n      int index = ${f};\n      int texR = index / ${c};\n      int texC = index - texR * ${c};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${u});\n      return ${s.texture2D}(${n}, uv);\n    }\n  `
          })(e, t)
      }
    }
    const UE =
        '\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n',
      GE =
        '\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n',
      HE =
        '\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n',
      jE =
        '\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n'
    function qE(e) {
      return `offset${e}`
    }
    function KE(e) {
      const t = e.name,
        n = P(e.shapeInfo.logicalShape)
      return n < 2
        ? `return ${t};`
        : `\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `
    }
    function XE(e) {
      if (e <= 1) return 'int'
      if (2 === e) return 'ivec2'
      if (3 === e) return 'ivec3'
      if (4 === e) return 'ivec4'
      if (5 === e) return 'ivec5'
      if (6 === e) return 'ivec6'
      throw Error(`GPU for rank ${e} is not yet supported`)
    }
    function YE(e, t, n) {
      const { newShape: r, keptDims: s } = q(t),
        a = t.length,
        i = e && 3 === a && 1 === t[0],
        o = i ? t.slice(1) : r,
        l = (!e && a > 1 && !B(t, n) && r.length < a) || i
      return { useSqueezeShape: l, uniformShape: l ? o : t, keptDims: s }
    }
    function ZE(e, t) {
      const n = JSON.parse(JSON.stringify(e))
      return (n.shapeInfo.logicalShape = t), n
    }
    function JE(e, t) {
      return t.map((t) => e[t]).join(', ')
    }
    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function QE(e, t, n) {
      const r = {},
        s = {},
        a = {},
        i = []
      let o,
        l,
        u,
        c = null,
        h = null
      ;(h = e.getUniformLocation(n, 'NAN', !1)),
        1 === ye().getNumber('WEBGL_VERSION') &&
          (c = e.getUniformLocation(n, 'INFINITY', !1))
      const p = !1
      for (let i = 0; i < t.variableNames.length; i++) {
        const o = t.variableNames[i]
        ;(r[o] = e.getUniformLocation(n, o, p)),
          (r[`offset${o}`] = e.getUniformLocation(n, `offset${o}`, p)),
          t.enableShapeUniforms &&
            ((s[`${o}Shape`] = e.getUniformLocation(n, `${o}Shape`, p)),
            (a[`${o}TexShape`] = e.getUniformLocation(n, `${o}TexShape`, p)))
      }
      return (
        t.enableShapeUniforms &&
          ((o = e.getUniformLocation(n, 'outShape', p)),
          (u = e.getUniformLocation(n, 'outShapeStrides', p)),
          (l = e.getUniformLocation(n, 'outTexShape', p))),
        t.customUniforms &&
          t.customUniforms.forEach((t, r) => {
            i[r] = e.getUniformLocation(n, t.name, p)
          }),
        {
          uniformLocations: r,
          customUniformLocations: i,
          infLoc: c,
          nanLoc: h,
          inShapesLocations: s,
          inTexShapesLocations: a,
          outShapeLocation: o,
          outShapeStridesLocation: u,
          outTexShapeLocation: l,
        }
      )
    }
    function eR(e, t) {
      if (e.length !== t.length)
        throw Error(
          `Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`,
        )
      e.forEach((e, n) => {
        const r = e.logicalShape,
          s = t[n],
          a = s.shape
        if (!B(r, a))
          throw Error(
            `Binary was compiled with different shapes than the current args. Shapes ${r} and ${a} must match`,
          )
        if (e.isUniform && s.isUniform) return
        const i = e.texShape,
          o = s.isUniform ? null : s.texData.texShape
        if (!B(i, o))
          throw Error(
            `Binary was compiled with different texture shapes than the current args. Shape ${i} and ${o} must match`,
          )
      })
    }
    function tR(e) {
      return ye().getBool('WEBGL_USE_SHAPES_UNIFORMS') && e <= 4
    }
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class nR {
      constructor(e) {
        ;(this.variableNames = ['A']),
          (this.packedInputs = !1),
          (this.packedOutput = !0),
          (this.outPackingScheme = rE.DENSE),
          (this.customUniforms = [{ name: 'texShape', type: 'ivec2' }])
        const t = DE()
        ;(this.outputShape = e),
          (this.enableShapeUniforms = tR(this.outputShape.length)),
          (this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms ? ME(['r', 'c', 'd'], e) : OE(['r', 'c', 'd'], e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${t.output} = result;\n      }\n    `)
      }
    }
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class rR {
      constructor(e) {
        ;(this.variableNames = ['A']),
          (this.packedInputs = !0),
          (this.packedOutput = !0),
          (this.outPackingScheme = rE.DENSE),
          (this.customUniforms = [{ name: 'texShape', type: 'ivec2' }])
        const t = DE()
        ;(this.outputShape = e),
          (this.enableShapeUniforms = tR(this.outputShape.length)),
          (this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms ? ME(['r', 'c', 'd'], e) : OE(['r', 'c', 'd'], e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${t.output} = result;\n      }\n    `)
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class sR {
      constructor(e) {
        ;(this.variableNames = ['A']), (this.outTexUsage = sE.DOWNLOAD)
        const t = DE()
        ;(this.outputShape = e),
          (this.userCode = `\n      ${zE}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `)
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class aR {
      constructor(e) {
        ;(this.variableNames = ['A']),
          (this.packedInputs = !0),
          (this.packedOutput = !1),
          (this.outTexUsage = sE.DOWNLOAD)
        const t = DE()
        ;(this.outputShape = e),
          (this.userCode = `\n      ${zE}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `)
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class iR {
      constructor(e, t = !1) {
        ;(this.variableNames = ['A']),
          (this.customUniforms = [{ name: 'texShape', type: 'ivec2' }])
        const n = DE()
        ;(this.outputShape = e),
          (this.enableShapeUniforms = tR(this.outputShape.length))
        let r = 'result'
        t && (r = 'floor(result * 255. + 0.5)'),
          (this.userCode = `\n      ${this.enableShapeUniforms ? '\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n' : LE(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / texShape[1];\n        int c = imod(flatIndex, texShape[1]);\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n        vec4 values = ${n.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${n.output} = vec4(${r}, 0., 0., 0.);\n      }\n    `)
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class oR {
      constructor(e, t = !1) {
        ;(this.variableNames = ['A']),
          (this.packedInputs = !1),
          (this.packedOutput = !0),
          (this.customUniforms = [{ name: 'texShape', type: 'ivec2' }])
        const n = DE()
        ;(this.outputShape = e),
          (this.enableShapeUniforms = tR(this.outputShape.length))
        let r = '',
          s = 'result'
        t && (s = 'floor(result * 255. + 0.5)')
        for (let t = 0; t <= 1; t++)
          for (let s = 0; s <= 1; s++) {
            const a = 2 * t + s
            r += `\n          localCoords = coords;\n          if(localCoords[2] + ${s} < ${this.enableShapeUniforms ? 'outShape[2]' : `${e[2]}`}) {\n          localCoords[2] += ${s};\n          if (localCoords[1] + ${t} < ${this.enableShapeUniforms ? 'outShape[1]' : `${e[1]}`}) {\n            localCoords[1] += ${t};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${n.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${a}] = values[0];\n            } else if (offset == 1) {\n              result[${a}] = values[1];\n            } else if (offset == 2) {\n              result[${a}] = values[2];\n            } else {\n              result[${a}] = values[3];\n            }\n          }\n        }\n        `
          }
        this.userCode = `\n        ${this.enableShapeUniforms ? '\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n' : LE(e)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${r}\n\n          ${n.output} = ${s};\n        }\n    `
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function lR(e, t, n, r, s, a) {
      !(function (e, t) {
        const n = ye().getNumber('WEBGL_MAX_TEXTURE_SIZE')
        if (e <= 0 || t <= 0)
          throw new Error(`Requested texture size [${e}x${t}] is invalid.`)
        if (e > n || t > n)
          throw new Error(
            `Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`,
          )
      })(t, n)
      const i = (function (e) {
          return vE(
            e,
            () => e.createTexture(),
            'Unable to create WebGLTexture.',
          )
        })(e),
        o = e.TEXTURE_2D
      return (
        cE(e, () => e.bindTexture(o, i)),
        cE(e, () => e.texParameteri(o, e.TEXTURE_WRAP_S, e.CLAMP_TO_EDGE)),
        cE(e, () => e.texParameteri(o, e.TEXTURE_WRAP_T, e.CLAMP_TO_EDGE)),
        cE(e, () => e.texParameteri(o, e.TEXTURE_MIN_FILTER, e.NEAREST)),
        cE(e, () => e.texParameteri(o, e.TEXTURE_MAG_FILTER, e.NEAREST)),
        1 === ye().getNumber('WEBGL_VERSION')
          ? cE(e, () => e.texImage2D(o, 0, r, t, n, 0, s, a, null))
          : cE(e, () => e.texStorage2D(o, 1, r, t, n)),
        cE(e, () => e.bindTexture(e.TEXTURE_2D, null)),
        { texture: i, texShape: [n, t] }
      )
    }
    function uR(e) {
      return e.internalFormatFloat
    }
    function cR(e) {
      return e.internalFormatHalfFloat
    }
    function hR(e) {
      return e.downloadTextureFormat
    }
    function pR(e) {
      return e.internalFormatPackedFloat
    }
    function dR(e) {
      return e.internalFormatPackedHalfFloat
    }
    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class fR {
      constructor(e) {
        ;(this.outputTexture = null),
          (this.program = null),
          (this.disposed = !1),
          (this.vertexAttrsAreBound = !1),
          (this.itemsToPoll = [])
        const t = ye().getNumber('WEBGL_VERSION')
        null != e
          ? ((this.gl = e),
            (function (e, t) {
              eE[e] = t
            })(t, e))
          : (this.gl = nE(t))
        let n = 'WEBGL_color_buffer_float'
        const r = 'EXT_color_buffer_half_float'
        if (
          ((this.parallelCompilationExtension = this.gl.getExtension(
            'KHR_parallel_shader_compile',
          )),
          1 === ye().getNumber('WEBGL_VERSION'))
        ) {
          const e = 'OES_texture_float',
            t = 'OES_texture_half_float'
          if (((this.textureFloatExtension = pE(this.gl, e)), EE(this.gl, t)))
            this.textureHalfFloatExtension = pE(this.gl, t)
          else if (ye().get('WEBGL_FORCE_F16_TEXTURES'))
            throw new Error(
              'GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.',
            )
          if (
            ((this.colorBufferFloatExtension = this.gl.getExtension(n)),
            EE(this.gl, r))
          )
            this.colorBufferHalfFloatExtension = pE(this.gl, r)
          else if (ye().get('WEBGL_FORCE_F16_TEXTURES'))
            throw new Error(
              'GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.',
            )
        } else if (((n = 'EXT_color_buffer_float'), EE(this.gl, n)))
          this.colorBufferFloatExtension = this.gl.getExtension(n)
        else {
          if (!EE(this.gl, r))
            throw new Error(
              'GL context does not support color renderable floats',
            )
          this.colorBufferHalfFloatExtension = this.gl.getExtension(r)
        }
        ;(this.vertexBuffer = (function (e) {
          return (function (e, t) {
            const n = vE(
              e,
              () => e.createBuffer(),
              'Unable to create WebGLBuffer',
            )
            return (
              cE(e, () => e.bindBuffer(e.ARRAY_BUFFER, n)),
              cE(e, () => e.bufferData(e.ARRAY_BUFFER, t, e.STATIC_DRAW)),
              n
            )
          })(
            e,
            new Float32Array([
              -1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0,
            ]),
          )
        })(this.gl)),
          (this.indexBuffer = (function (e) {
            return (function (e, t) {
              const n = vE(
                e,
                () => e.createBuffer(),
                'Unable to create WebGLBuffer',
              )
              return (
                cE(e, () => e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, n)),
                cE(e, () =>
                  e.bufferData(e.ELEMENT_ARRAY_BUFFER, t, e.STATIC_DRAW),
                ),
                n
              )
            })(e, new Uint16Array([0, 1, 2, 2, 1, 3]))
          })(this.gl)),
          (this.framebuffer = (function (e) {
            return vE(
              e,
              () => e.createFramebuffer(),
              'Unable to create WebGLFramebuffer.',
            )
          })(this.gl)),
          (this.textureConfig = uE(this.gl, this.textureHalfFloatExtension))
      }
      get debug() {
        return ye().getBool('DEBUG')
      }
      dispose() {
        if (this.disposed) return
        null != this.program &&
          console.warn(
            'Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing.',
          ),
          null != this.outputTexture &&
            console.warn(
              'Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.',
            )
        const e = this.gl
        cE(e, () => e.finish()),
          cE(e, () => e.bindFramebuffer(e.FRAMEBUFFER, null)),
          cE(e, () => e.deleteFramebuffer(this.framebuffer)),
          cE(e, () => e.bindBuffer(e.ARRAY_BUFFER, null)),
          cE(e, () => e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, null)),
          cE(e, () => e.deleteBuffer(this.indexBuffer)),
          (this.disposed = !0)
      }
      createFloat32MatrixTexture(e, t) {
        return (
          this.throwIfDisposed(),
          (function (e, t, n, r) {
            const [s, a] = iE(t, n)
            return lR(e, s, a, uR(r), r.textureFormatFloat, e.FLOAT)
          })(this.gl, e, t, this.textureConfig)
        )
      }
      createFloat16MatrixTexture(e, t) {
        return (
          this.throwIfDisposed(),
          (function (e, t, n, r) {
            const [s, a] = iE(t, n)
            return lR(
              e,
              s,
              a,
              cR(r),
              r.textureFormatFloat,
              r.textureTypeHalfFloat,
            )
          })(this.gl, e, t, this.textureConfig)
        )
      }
      createUnsignedBytesMatrixTexture(e, t) {
        return (
          this.throwIfDisposed(),
          (function (e, t, n, r) {
            const [s, a] = iE(t, n)
            return lR(e, s, a, hR(r), e.RGBA, e.UNSIGNED_BYTE)
          })(this.gl, e, t, this.textureConfig)
        )
      }
      uploadPixelDataToTexture(e, t) {
        this.throwIfDisposed(),
          (function (e, t, n) {
            cE(e, () => e.bindTexture(e.TEXTURE_2D, t)),
              n.data instanceof Uint8Array
                ? 2 === ye().getNumber('WEBGL_VERSION')
                  ? cE(e, () =>
                      e.texSubImage2D(
                        e.TEXTURE_2D,
                        0,
                        0,
                        0,
                        n.width,
                        n.height,
                        e.RGBA,
                        e.UNSIGNED_BYTE,
                        n.data,
                      ),
                    )
                  : cE(e, () =>
                      e.texImage2D(
                        e.TEXTURE_2D,
                        0,
                        e.RGBA,
                        n.width,
                        n.height,
                        0,
                        e.RGBA,
                        e.UNSIGNED_BYTE,
                        n.data,
                      ),
                    )
                : 2 === ye().getNumber('WEBGL_VERSION')
                  ? cE(e, () =>
                      e.texSubImage2D(
                        e.TEXTURE_2D,
                        0,
                        0,
                        0,
                        e.RGBA,
                        e.UNSIGNED_BYTE,
                        n,
                      ),
                    )
                  : cE(e, () =>
                      e.texImage2D(
                        e.TEXTURE_2D,
                        0,
                        e.RGBA,
                        e.RGBA,
                        e.UNSIGNED_BYTE,
                        n,
                      ),
                    ),
              cE(e, () => e.bindTexture(e.TEXTURE_2D, null))
          })(this.gl, e, t)
      }
      uploadDenseMatrixToTexture(e, t, n, r) {
        this.throwIfDisposed(),
          (function (e, t, n, r, s, a) {
            let i, o, l
            cE(e, () => e.bindTexture(e.TEXTURE_2D, t)),
              s instanceof Uint8Array
                ? ((i = new Uint8Array(n * r * 4)),
                  (o = e.UNSIGNED_BYTE),
                  (l = e.RGBA))
                : ((i = new Float32Array(n * r * 4)),
                  (o = e.FLOAT),
                  (l = a.internalFormatPackedFloat)),
              i.set(s),
              2 === ye().getNumber('WEBGL_VERSION')
                ? cE(e, () =>
                    e.texSubImage2D(e.TEXTURE_2D, 0, 0, 0, n, r, e.RGBA, o, i),
                  )
                : cE(e, () =>
                    e.texImage2D(e.TEXTURE_2D, 0, l, n, r, 0, e.RGBA, o, i),
                  ),
              cE(e, () => e.bindTexture(e.TEXTURE_2D, null))
          })(this.gl, e, t, n, r, this.textureConfig)
      }
      createFloat16PackedMatrixTexture(e, t) {
        return (
          this.throwIfDisposed(),
          (function (e, t, n, r) {
            const [s, a] = lE(t, n)
            return lR(e, s, a, dR(r), e.RGBA, r.textureTypeHalfFloat)
          })(this.gl, e, t, this.textureConfig)
        )
      }
      createPackedMatrixTexture(e, t) {
        return (
          this.throwIfDisposed(),
          (function (e, t, n, r) {
            const [s, a] = lE(t, n)
            return lR(e, s, a, pR(r), e.RGBA, e.FLOAT)
          })(this.gl, e, t, this.textureConfig)
        )
      }
      deleteMatrixTexture(e) {
        this.throwIfDisposed(),
          this.outputTexture === e &&
            (xE(this.gl, this.framebuffer), (this.outputTexture = null)),
          cE(this.gl, () => this.gl.deleteTexture(e))
      }
      downloadByteEncodedFloatMatrixFromOutputTexture(e, t, n) {
        return this.downloadMatrixDriver(e, () =>
          (function (e, t, n, r) {
            const [s, a] = iE(t, n),
              i = new Uint8Array(t * n * 4)
            return (
              cE(e, () =>
                e.readPixels(
                  0,
                  0,
                  s,
                  a,
                  r.downloadTextureFormat,
                  e.UNSIGNED_BYTE,
                  i,
                ),
              ),
              new Float32Array(i.buffer)
            )
          })(this.gl, t, n, this.textureConfig),
        )
      }
      downloadPackedMatrixFromBuffer(e, t, n, r, s, a) {
        return (function (e, t, n, r, s, a, i) {
          const o = e,
            l = new Float32Array(
              (function (e, t) {
                const [n, r] = lE(e, t)
                return n * r * 4
              })(a, i),
            )
          return (
            o.bindBuffer(o.PIXEL_PACK_BUFFER, t),
            o.getBufferSubData(o.PIXEL_PACK_BUFFER, 0, l),
            o.bindBuffer(o.PIXEL_PACK_BUFFER, null),
            l
          )
        })(this.gl, e, 0, 0, 0, s, a, this.textureConfig)
      }
      downloadFloat32MatrixFromBuffer(e, t) {
        return (function (e, t, n) {
          const r = e,
            s = new Float32Array(n)
          return (
            r.bindBuffer(r.PIXEL_PACK_BUFFER, t),
            r.getBufferSubData(r.PIXEL_PACK_BUFFER, 0, s),
            r.bindBuffer(r.PIXEL_PACK_BUFFER, null),
            s
          )
        })(this.gl, e, t)
      }
      createBufferFromTexture(e, t, n) {
        this.bindTextureToFrameBuffer(e)
        const r = (function (e, t, n) {
          const r = e.createBuffer()
          cE(e, () => e.bindBuffer(e.PIXEL_PACK_BUFFER, r))
          const s = 16 * t * n
          return (
            cE(e, () => e.bufferData(e.PIXEL_PACK_BUFFER, s, e.STREAM_READ)),
            cE(e, () => e.readPixels(0, 0, n, t, e.RGBA, e.FLOAT, 0)),
            cE(e, () => e.bindBuffer(e.PIXEL_PACK_BUFFER, null)),
            r
          )
        })(this.gl, t, n, this.textureConfig)
        return this.unbindTextureToFrameBuffer(), r
      }
      createAndWaitForFence() {
        const e = this.createFence(this.gl)
        return this.pollFence(e)
      }
      createFence(e) {
        let t, n
        if (ye().getBool('WEBGL_FENCE_API_ENABLED')) {
          const r = e,
            s = r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE, 0)
          e.flush(),
            (n = () => {
              const e = r.clientWaitSync(s, 0, 0)
              return e === r.ALREADY_SIGNALED || e === r.CONDITION_SATISFIED
            }),
            (t = s)
        } else
          ye().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0
            ? ((t = this.beginQuery()),
              this.endQuery(),
              (n = () =>
                this.isQueryAvailable(
                  t,
                  ye().getNumber(
                    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION',
                  ),
                )))
            : (n = () => !0)
        return { query: t, isFencePassed: n }
      }
      downloadMatrixFromPackedTexture(e, t, n) {
        return this.downloadMatrixDriver(e, () =>
          (function (e, t, n) {
            const r = new Float32Array(t * n * 4)
            return cE(e, () => e.readPixels(0, 0, n, t, e.RGBA, e.FLOAT, r)), r
          })(this.gl, t, n),
        )
      }
      createProgram(e) {
        this.throwIfDisposed()
        const t = this.gl
        null == this.vertexShader &&
          (this.vertexShader = (function (e) {
            const t = DE()
            return (function (e, t) {
              const n = vE(
                e,
                () => e.createShader(e.VERTEX_SHADER),
                'Unable to create vertex WebGLShader.',
              )
              if (
                (cE(e, () => e.shaderSource(n, t)),
                cE(e, () => e.compileShader(n)),
                !1 === e.getShaderParameter(n, e.COMPILE_STATUS))
              )
                throw (
                  (console.log(e.getShaderInfoLog(n)),
                  new Error('Failed to compile vertex shader.'))
                )
              return n
            })(
              e,
              `${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`,
            )
          })(t))
        const n = (function (e) {
          return vE(
            e,
            () => e.createProgram(),
            'Unable to create WebGLProgram.',
          )
        })(t)
        return (
          cE(t, () => t.attachShader(n, this.vertexShader)),
          cE(t, () => t.attachShader(n, e)),
          (function (e, t) {
            if (
              (cE(e, () => e.linkProgram(t)),
              !ye().get('ENGINE_COMPILE_ONLY') &&
                !1 === e.getProgramParameter(t, e.LINK_STATUS))
            )
              throw (
                (console.log(e.getProgramInfoLog(t)),
                new Error('Failed to link vertex and fragment shaders.'))
              )
          })(t, n),
          this.debug && mE(t, n),
          this.vertexAttrsAreBound ||
            (this.setProgram(n),
            (this.vertexAttrsAreBound = (function (e, t, n) {
              return (
                cE(e, () => e.bindBuffer(e.ARRAY_BUFFER, n)),
                gE(e, t, 'clipSpacePos', n, 3, 20, 0) &&
                  gE(e, t, 'uv', n, 2, 20, 12)
              )
            })(t, this.program, this.vertexBuffer))),
          n
        )
      }
      deleteProgram(e) {
        this.throwIfDisposed(),
          e === this.program && (this.program = null),
          null != e && cE(this.gl, () => this.gl.deleteProgram(e))
      }
      setProgram(e) {
        this.throwIfDisposed(),
          (this.program = e),
          null != this.program && this.debug && mE(this.gl, this.program),
          cE(this.gl, () => this.gl.useProgram(e))
      }
      getUniformLocation(e, t, n = !0) {
        return (
          this.throwIfDisposed(),
          n
            ? (function (e, t, n) {
                return vE(
                  e,
                  () => e.getUniformLocation(t, n),
                  'uniform "' + n + '" not present in program.',
                )
              })(this.gl, e, t)
            : (function (e, t, n) {
                return e.getUniformLocation(t, n)
              })(this.gl, e, t)
        )
      }
      getAttributeLocation(e, t) {
        return (
          this.throwIfDisposed(),
          cE(this.gl, () => this.gl.getAttribLocation(e, t))
        )
      }
      getUniformLocationNoThrow(e, t) {
        return this.throwIfDisposed(), this.gl.getUniformLocation(e, t)
      }
      setInputMatrixTexture(e, t, n) {
        this.throwIfDisposed(), this.throwIfNoProgram(), yE(this.gl, e, t, n)
      }
      setOutputMatrixTexture(e, t, n) {
        this.setOutputMatrixTextureDriver(e, n, t)
      }
      setOutputPackedMatrixTexture(e, t, n) {
        this.throwIfDisposed()
        const [r, s] = lE(t, n)
        this.setOutputMatrixTextureDriver(e, r, s)
      }
      setOutputMatrixWriteRegion(e, t, n, r) {
        this.setOutputMatrixWriteRegionDriver(n, e, r, t)
      }
      setOutputPackedMatrixWriteRegion(e, t, n, r) {
        throw new Error('setOutputPackedMatrixWriteRegion not implemented.')
      }
      debugValidate() {
        null != this.program && mE(this.gl, this.program), wE(this.gl)
      }
      executeProgram() {
        this.throwIfDisposed(), this.throwIfNoProgram()
        const e = this.gl
        this.debug && this.debugValidate(),
          cE(e, () => e.drawElements(e.TRIANGLES, 6, e.UNSIGNED_SHORT, 0))
      }
      blockUntilAllProgramsCompleted() {
        this.throwIfDisposed(), cE(this.gl, () => this.gl.finish())
      }
      getQueryTimerExtension() {
        return (
          null == this.disjointQueryTimerExtension &&
            (this.disjointQueryTimerExtension = pE(
              this.gl,
              2 ===
                ye().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')
                ? 'EXT_disjoint_timer_query_webgl2'
                : 'EXT_disjoint_timer_query',
            )),
          this.disjointQueryTimerExtension
        )
      }
      getQueryTimerExtensionWebGL2() {
        return this.getQueryTimerExtension()
      }
      getQueryTimerExtensionWebGL1() {
        return this.getQueryTimerExtension()
      }
      beginQuery() {
        if (
          2 === ye().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')
        ) {
          const e = this.gl,
            t = this.getQueryTimerExtensionWebGL2(),
            n = e.createQuery()
          return e.beginQuery(t.TIME_ELAPSED_EXT, n), n
        }
        const e = this.getQueryTimerExtensionWebGL1(),
          t = e.createQueryEXT()
        return e.beginQueryEXT(e.TIME_ELAPSED_EXT, t), t
      }
      endQuery() {
        if (
          2 === ye().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')
        ) {
          const e = this.gl,
            t = this.getQueryTimerExtensionWebGL2()
          return void e.endQuery(t.TIME_ELAPSED_EXT)
        }
        const e = this.getQueryTimerExtensionWebGL1()
        e.endQueryEXT(e.TIME_ELAPSED_EXT)
      }
      async waitForQueryAndGetTime(e) {
        return (
          await G(
            () =>
              this.disposed ||
              this.isQueryAvailable(
                e,
                ye().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'),
              ),
          ),
          this.getQueryTime(
            e,
            ye().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'),
          )
        )
      }
      getQueryTime(e, t) {
        if (0 === t) return null
        if (2 === t) {
          const t = this.gl
          return t.getQueryParameter(e, t.QUERY_RESULT) / 1e6
        }
        {
          const t = this.getQueryTimerExtensionWebGL1()
          return t.getQueryObjectEXT(e, t.QUERY_RESULT_EXT) / 1e6
        }
      }
      isQueryAvailable(e, t) {
        if (0 === t) return !0
        if (2 === t) {
          const t = this.gl,
            n = this.getQueryTimerExtensionWebGL2(),
            r = t.getQueryParameter(e, t.QUERY_RESULT_AVAILABLE)
          return (
            null == this.disjoint &&
              (this.disjoint = this.gl.getParameter(n.GPU_DISJOINT_EXT)),
            r && !this.disjoint
          )
        }
        {
          const t = this.getQueryTimerExtensionWebGL1(),
            n = t.getQueryObjectEXT(e, t.QUERY_RESULT_AVAILABLE_EXT)
          return (
            null == this.disjoint &&
              (this.disjoint = this.gl.getParameter(t.GPU_DISJOINT_EXT)),
            n && !this.disjoint
          )
        }
      }
      pollFence(e) {
        return new Promise((t) => {
          this.addItemToPoll(
            () => e.isFencePassed(),
            () => t(),
          )
        })
      }
      pollItems() {
        const e = (function (e) {
          let t = 0
          for (; t < e.length && e[t](); ++t);
          return t - 1
        })(this.itemsToPoll.map((e) => e.isDoneFn))
        for (let t = 0; t <= e; ++t) {
          const { resolveFn: e } = this.itemsToPoll[t]
          e()
        }
        this.itemsToPoll = this.itemsToPoll.slice(e + 1)
      }
      addItemToPoll(e, t) {
        if (
          (this.itemsToPoll.push({ isDoneFn: e, resolveFn: t }),
          this.itemsToPoll.length > 1)
        )
          return
        let n
        'setTimeoutCustom' in ye().platform &&
          (n = ye().platform.setTimeoutCustom.bind(ye().platform)),
          G(
            () => (this.pollItems(), 0 === this.itemsToPoll.length),
            () => 0,
            null,
            n,
          )
      }
      bindTextureToFrameBuffer(e) {
        this.throwIfDisposed(),
          bE(this.gl, e, this.framebuffer),
          this.debug && wE(this.gl)
      }
      unbindTextureToFrameBuffer() {
        null != this.outputTexture
          ? (bE(this.gl, this.outputTexture, this.framebuffer),
            this.debug && wE(this.gl))
          : xE(this.gl, this.framebuffer)
      }
      downloadMatrixDriver(e, t) {
        this.bindTextureToFrameBuffer(e)
        const n = t()
        return this.unbindTextureToFrameBuffer(), n
      }
      setOutputMatrixTextureDriver(e, t, n) {
        this.throwIfDisposed()
        const r = this.gl
        bE(r, e, this.framebuffer),
          this.debug && wE(r),
          (this.outputTexture = e),
          cE(r, () => r.viewport(0, 0, t, n)),
          cE(r, () => r.scissor(0, 0, t, n))
      }
      setOutputMatrixWriteRegionDriver(e, t, n, r) {
        this.throwIfDisposed(), cE(this.gl, () => this.gl.scissor(e, t, n, r))
      }
      throwIfDisposed() {
        if (this.disposed)
          throw new Error('Attempted to use disposed GPGPUContext.')
      }
      throwIfNoProgram() {
        if (null == this.program)
          throw new Error('No GPU program is currently set.')
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const {
      mx: mR,
      XI: gR,
      Nk: yR,
      ct: bR,
      YG: xR,
      hH: wR,
      z3: vR,
      sG: kR,
      uM: IR,
      vS: NR,
      qB: SR,
      GG: TR,
      rq: CR,
      lg: $R,
      WR: ER,
      cu: RR,
      GE: AR,
      px: _R,
      jC: FR,
      He: DR,
      hE: OR,
      BF: MR,
      Dk: LR,
      cl: zR,
      _B: PR,
      ub: BR,
      Ku: WR,
      qy: VR,
      Zy: UR,
      bu: GR,
      zv: HR,
      dH: jR,
      HS: qR,
      yH: KR,
      l3: XR,
      z9: YR,
      x6: ZR,
      eW: JR,
      GK: QR,
      SP: eA,
      f6: tA,
      dl: nA,
      Dw: rA,
      xT: sA,
      _X: aA,
      wz: iA,
    } = C
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function oA(e, t) {
      return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, t).map((t) => `${e}.${t}`)
    }
    function lA(e, t) {
      return 1 === t ? [e] : oA(e, t)
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class uA {
      constructor(e) {
        if (
          ((this.variableNames = ['A']),
          (this.packedInputs = !1),
          (this.packedOutput = !0),
          (this.outputShape = e),
          (this.rank = e.length),
          (this.enableShapeUniforms = tR(this.outputShape.length)),
          0 === this.rank)
        )
          this.userCode =
            '\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      '
        else {
          const e = lA('rc', this.rank),
            t = XE(this.rank),
            n = this.getOutOfBoundsCondition(e),
            r = this.getSetup(e),
            s = this.getOutput(e)
          this.userCode = `\n        void main() {\n          ${t} rc = getOutputCoords();\n\n          if(${n}) {\n            setOutput(vec4(0));\n          } else {\n            ${r}\n\n            setOutput(vec4(${s}));\n          }\n        }\n      `
        }
      }
      getSourceCoordsArr(e) {
        const t = []
        for (let n = 0; n <= 1; n++)
          for (let r = 0; r <= 1; r++) {
            let s = `${0 === n ? 'r' : 'rp1'}, ${0 === r ? 'c' : 'cp1'}`
            for (let t = 2; t < this.rank; t++)
              s = `${e[e.length - 1 - t]},` + s
            t.push(s)
          }
        return t
      }
      getOutOfBoundsCondition(e) {
        if (1 === this.rank)
          return `rc > ${this.enableShapeUniforms ? 'outShape' : this.outputShape[0]}`
        let t = ''
        for (let n = this.rank - 2; n < this.rank; n++)
          (t += `${e[n]} >= ${this.enableShapeUniforms ? `outShape[${n}]` : this.outputShape[n]}`),
            n < this.rank - 1 && (t += '||')
        return t
      }
      getSetup(e) {
        if (1 === this.rank) return ''
        const t = e.slice(-2),
          n = this.enableShapeUniforms
            ? `outShape[${this.rank} - 1]`
            : this.outputShape[this.rank - 1],
          r = this.enableShapeUniforms
            ? `outShape[${this.rank} - 2]`
            : this.outputShape[this.rank - 2]
        return `\n      int r = ${t[0]};\n      int c = ${t[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${n};\n      bool rEdge = rp1 >= ${r};\n    `
      }
      getOutput(e) {
        const t = this.getSourceCoordsArr(e)
        return 1 === this.rank
          ? `getA(rc), (rc + 1 >= ${this.enableShapeUniforms ? 'outShape' : this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`
          : `getA(${t[0]}),\n            cEdge ? 0. : getA(${t[1]}),\n            rEdge ? 0. : getA(${t[2]}),\n            rEdge || cEdge ? 0. : getA(${t[3]})`
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class cA {
      constructor(e, t) {
        ;(this.variableNames = ['A']),
          (this.packedInputs = !0),
          (this.packedOutput = !0),
          (this.customUniforms = [{ name: 'inputShape', type: 'ivec3' }]),
          (this.outputShape = e),
          (this.enableShapeUniforms = tR(this.outputShape.length))
        let n = ''
        for (let e = 0; e < 4; e++) {
          let t = 'thisRC = rc;'
          e % 2 == 1 && (t += 'thisRC.z += 1;'),
            e > 1 && (t += 'thisRC.y += 1;'),
            (n += `\n        ${t}\n        ${e > 0 ? 'if(thisRC.y < rows && thisRC.z < cols){' : ''}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e > 0 ? '}' : ''}\n      `)
        }
        var r, s
        this.userCode = `\n      ${
          ((r = t),
          (s = this.enableShapeUniforms),
          `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${
            s
              ? (function (e, t, n = 'index') {
                  const r = (function (e, t) {
                    const n = e.length,
                      r = e.map((e) => `${t}[${e}]`),
                      s = new Array(n - 1)
                    s[n - 2] = r[n - 1]
                    for (let e = n - 3; e >= 0; --e)
                      s[e] = `(${s[e + 1]} * ${r[e + 1]})`
                    return s
                  })(
                    e.map((e, t) => t),
                    t,
                  )
                  return r
                    .map(
                      (t, s) =>
                        `int ${e[s]} = ${n} / ${r[s]}; ${s === r.length - 1 ? `int ${e[s + 1]} = ${n} - ${e[s]} * ${r[s]}` : `index -= ${e[s]} * ${r[s]}`};`,
                    )
                    .join('')
                })(['r', 'c', 'd'], 'inputShape')
              : OE(['r', 'c', 'd'], r)
          }\n      return ivec3(r, c, d);\n    }\n  `)
        }\n      ${this.enableShapeUniforms ? '\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n' : LE(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms ? 'outShape[1]' : e[1]};\n        int cols = ${this.enableShapeUniforms ? 'outShape[2]' : e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class hA {
      constructor(e) {
        ;(this.gpgpu = e),
          (this.numUsedTextures = 0),
          (this.numFreeTextures = 0),
          (this._numBytesAllocated = 0),
          (this._numBytesFree = 0),
          (this.freeTextures = {}),
          (this.logEnabled = !1),
          (this.usedTextures = {})
      }
      acquireTexture(e, t, n) {
        const r = dA(t, n),
          s = fA(e, r, n)
        s in this.freeTextures || (this.freeTextures[s] = []),
          s in this.usedTextures || (this.usedTextures[s] = [])
        const a = pA(e, r, this.gpgpu.gl, this.gpgpu.textureConfig, n)
        if (this.freeTextures[s].length > 0) {
          this.numFreeTextures--,
            this.numUsedTextures++,
            (this._numBytesFree -= a),
            this.log()
          const e = this.freeTextures[s].shift()
          return this.usedTextures[s].push(e), e
        }
        let i
        return (
          r === aE.PACKED_2X2_FLOAT32
            ? (i = this.gpgpu.createPackedMatrixTexture(e[0], e[1]))
            : r === aE.PACKED_2X2_FLOAT16
              ? (i = this.gpgpu.createFloat16PackedMatrixTexture(e[0], e[1]))
              : r === aE.UNPACKED_FLOAT32
                ? (i = this.gpgpu.createFloat32MatrixTexture(e[0], e[1]))
                : r === aE.UNPACKED_FLOAT16
                  ? (i = this.gpgpu.createFloat16MatrixTexture(e[0], e[1]))
                  : r === aE.PACKED_4X1_UNSIGNED_BYTE &&
                    (i = this.gpgpu.createUnsignedBytesMatrixTexture(
                      e[0],
                      e[1],
                    )),
          this.usedTextures[s].push(i),
          this.numUsedTextures++,
          (this._numBytesAllocated += a),
          this.log(),
          i
        )
      }
      releaseTexture(e, t, n, r) {
        if (null == this.freeTextures) return
        const s = dA(n, r),
          a = fA(t, s, r)
        a in this.freeTextures || (this.freeTextures[a] = [])
        const i = pA(t, s, this.gpgpu.gl, this.gpgpu.textureConfig, r),
          o = ye().get('WEBGL_DELETE_TEXTURE_THRESHOLD')
        ;-1 !== o && this._numBytesAllocated > o
          ? (this.gpgpu.deleteMatrixTexture(e.texture),
            (this._numBytesAllocated -= i))
          : (this.freeTextures[a].push(e),
            this.numFreeTextures++,
            (this._numBytesFree += i)),
          this.numUsedTextures--
        const l = this.usedTextures[a],
          u = l.indexOf(e)
        if (u < 0)
          throw new Error(
            'Cannot release a texture that was never provided by this texture manager',
          )
        l.splice(u, 1), this.log()
      }
      log() {
        if (!this.logEnabled) return
        const e = this.numFreeTextures + this.numUsedTextures
        console.log(
          'Free/Used',
          `${this.numFreeTextures} / ${this.numUsedTextures}`,
          `(${e})`,
        )
        const t = this._numBytesFree / this._numBytesAllocated
        console.log(`Bytes allocated: ${this._numBytesAllocated}`),
          console.log(
            `Bytes unused: ${this._numBytesFree} (${Math.round(100 * t)}%)`,
          )
      }
      get numBytesAllocated() {
        return this._numBytesAllocated
      }
      get numBytesFree() {
        return this._numBytesFree
      }
      getNumUsedTextures() {
        return this.numUsedTextures
      }
      getNumFreeTextures() {
        return this.numFreeTextures
      }
      dispose() {
        if (null != this.freeTextures) {
          for (const e in this.freeTextures)
            this.freeTextures[e].forEach((e) => {
              this.gpgpu.deleteMatrixTexture(e.texture)
            })
          for (const e in this.usedTextures)
            this.usedTextures[e].forEach((e) => {
              this.gpgpu.deleteMatrixTexture(e.texture)
            })
          ;(this.freeTextures = null),
            (this.usedTextures = null),
            (this.numUsedTextures = 0),
            (this.numFreeTextures = 0),
            (this._numBytesAllocated = 0),
            (this._numBytesFree = 0)
        }
      }
    }
    function pA(e, t, n, r, s) {
      const a = (function (e, t) {
        switch (e) {
          case aE.PACKED_2X2_FLOAT32:
            return pR(t)
          case aE.PACKED_2X2_FLOAT16:
            return dR(t)
          case aE.UNPACKED_FLOAT32:
            return uR(t)
          case aE.UNPACKED_FLOAT16:
            return cR(t)
          case aE.PACKED_4X1_UNSIGNED_BYTE:
            return hR(t)
          default:
            throw new Error(`Unknown physical texture type ${e}`)
        }
      })(t, r)
      let i
      if (s) {
        const [t, n] = lE(e[0], e[1])
        i = t * n
      } else {
        const [t, n] = iE(e[0], e[1])
        i = t * n
      }
      const o = (function (e, t) {
        const n = e
        if (t === n.R32F) return 4
        if (t === n.R16F) return 2
        if (t === n.RGBA32F) return 16
        if (t === e.RGBA) return 16
        if (t === n.RGBA16F) return 8
        if (t === n.RGBA8) return 4
        throw new Error(`Unknown internal format ${t}`)
      })(n, a)
      return i * o
    }
    function dA(e, t) {
      if (e === sE.UPLOAD) return aE.PACKED_2X2_FLOAT32
      if (e === sE.RENDER || null == e)
        return (function (e) {
          return ye().getBool('WEBGL_RENDER_FLOAT32_ENABLED')
            ? e
              ? aE.PACKED_2X2_FLOAT32
              : aE.UNPACKED_FLOAT32
            : e
              ? aE.PACKED_2X2_FLOAT16
              : aE.UNPACKED_FLOAT16
        })(t)
      if (e === sE.DOWNLOAD || e === sE.PIXELS)
        return aE.PACKED_4X1_UNSIGNED_BYTE
      throw new Error(`Unknown logical texture type ${e}`)
    }
    function fA(e, t, n) {
      return `${e[0]}_${e[1]}_${t}_${n}`
      /**
       * @license
       * Copyright 2017 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */
    }
    class mA {
      constructor(e, t) {
        ;(this.variableNames = ['A']),
          (this.outputShape = e),
          (this.enableShapeUniforms = tR(this.outputShape.length)),
          (this.userCode = `\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `)
      }
    }
    const gA = 'if (isnan(x)) return x;',
      yA = 'return abs(x);',
      bA = gA + '\n  return (x < 0.0) ? 0.0 : x;\n',
      xA = gA + '\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n',
      wA = 'return x;'
    class vA {
      constructor(e, t) {
        ;(this.variableNames = ['A']),
          (this.packedInputs = !0),
          (this.packedOutput = !0),
          (this.outputShape = e),
          (this.enableShapeUniforms = tR(this.outputShape.length)),
          (this.userCode = `\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `)
        /**
         * @license
         * Copyright 2018 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
      }
    }
    class kA {
      constructor(e) {
        ;(this.variableNames = ['A']),
          (this.packedInputs = !0),
          (this.packedOutput = !1),
          (this.outputShape = e),
          (this.enableShapeUniforms = tR(this.outputShape.length))
        const t = e.length,
          n = lA('rc', t),
          r = XE(t),
          s = (function (e, t) {
            if (1 === e) return 'rc'
            let n = ''
            for (let r = 0; r < e; r++) (n += t[r]), r < e - 1 && (n += ',')
            return n
          })(t, n),
          a = n.slice(-2),
          i = t <= 1 ? 'rc' : `vec2(${a.join(',')})`
        this.userCode = `\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${s});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const IA = Jc,
      NA = {},
      SA = ye().getNumber('CPU_HANDOFF_SIZE_THRESHOLD')
    class TA extends E {
      constructor(e) {
        if (
          (super(),
          (this.pendingRead = new WeakMap()),
          (this.pendingDisposal = new WeakSet()),
          (this.dataRefCount = new WeakMap()),
          (this.numBytesInGPU = 0),
          (this.uploadWaitMs = 0),
          (this.downloadWaitMs = 0),
          (this.lastGlFlushTime = 0),
          (this.warnedAboutMemory = !1),
          (this.pendingDeletes = 0),
          (this.disposed = !1),
          !ye().getBool('HAS_WEBGL'))
        )
          throw new Error('WebGL is not supported on this device')
        let t
        if (null != e) {
          if (e instanceof fR) t = e
          else {
            const n = nE(ye().getNumber('WEBGL_VERSION'), e)
            t = new fR(n)
          }
          ;(this.binaryCache = {}), (this.gpgpuCreatedLocally = !1)
        } else {
          const e = nE(ye().getNumber('WEBGL_VERSION'))
          ;(t = new fR(e)),
            (this.binaryCache =
              ((n = ye().getNumber('WEBGL_VERSION')) in NA || (NA[n] = {}),
              NA[n])),
            (this.gpgpuCreatedLocally = !0)
        }
        var n
        ;(this.gpgpu = t),
          (this.canvas = this.gpgpu.gl.canvas),
          (this.textureManager = new hA(this.gpgpu)),
          (this.numMBBeforeWarning =
            null == ye().global.screen
              ? 1024
              : (ye().global.screen.height *
                  ye().global.screen.width *
                  window.devicePixelRatio *
                  600) /
                1024 /
                1024),
          (this.texData = new $(this, Hi()))
      }
      nextDataId() {
        return TA.nextDataId++
      }
      numDataIds() {
        return this.texData.numDataIds() - this.pendingDeletes
      }
      write(e, t, n) {
        if (
          ((ye().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') ||
            ye().getBool('DEBUG')) &&
            this.checkNumericalProblems(e),
          'complex64' === n && null != e)
        )
          throw new Error(
            'Cannot write to a complex64 dtype. Please use tf.complex(real, imag).',
          )
        const r = { id: this.nextDataId() }
        return (
          this.texData.set(r, {
            shape: t,
            dtype: n,
            values: e,
            usage: sE.UPLOAD,
            refCount: 1,
          }),
          r
        )
      }
      refCount(e) {
        return this.texData.has(e) ? this.texData.get(e).refCount : 0
      }
      incRef(e) {
        this.texData.get(e).refCount++
      }
      decRef(e) {
        this.texData.has(e) && this.texData.get(e).refCount--
      }
      move(e, t, n, r, s) {
        if (
          (ye().getBool('DEBUG') && this.checkNumericalProblems(t),
          'complex64' === r)
        )
          throw new Error(
            'Cannot write to a complex64 dtype. Please use tf.complex(real, imag).',
          )
        this.texData.set(e, {
          shape: n,
          dtype: r,
          values: t,
          usage: sE.UPLOAD,
          refCount: s,
        })
      }
      disposeIntermediateTensorInfo(e) {
        this.disposeData(e.dataId)
      }
      readSync(e) {
        const t = this.texData.get(e),
          {
            values: n,
            dtype: r,
            complexTensorInfos: s,
            slice: a,
            shape: i,
            isPacked: o,
          } = t
        if (null != a) {
          let t
          t = o ? new vA(i, wA) : new mA(i, wA)
          const n = this.runWebGLProgram(
              t,
              [{ dataId: e, shape: i, dtype: r }],
              r,
            ),
            s = this.readSync(n.dataId)
          return this.disposeIntermediateTensorInfo(n), s
        }
        if (null != n) return this.convertAndCacheOnCPU(e)
        if ('string' === r) return n
        const l = null != this.activeTimers
        let u, c
        return (
          l && (u = ts()),
          (c =
            'complex64' === r
              ? rd(this.readSync(s.real.dataId), this.readSync(s.imag.dataId))
              : this.getValuesFromTexture(e)),
          l && (this.downloadWaitMs += ts() - u),
          this.convertAndCacheOnCPU(e, c)
        )
      }
      async read(e) {
        if (this.pendingRead.has(e)) {
          const t = this.pendingRead.get(e)
          return new Promise((e) => t.push(e))
        }
        const t = this.texData.get(e),
          {
            values: n,
            shape: r,
            slice: s,
            dtype: a,
            complexTensorInfos: i,
            isPacked: o,
          } = t
        if (null != s) {
          let t
          t = o ? new vA(r, wA) : new mA(r, wA)
          const n = this.runWebGLProgram(
              t,
              [{ dataId: e, shape: r, dtype: a }],
              a,
            ),
            s = this.read(n.dataId)
          return this.disposeIntermediateTensorInfo(n), s
        }
        if (null != n) return this.convertAndCacheOnCPU(e)
        if (
          ye().getBool('DEBUG') &&
          !ye().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') &&
          2 === ye().getNumber('WEBGL_VERSION')
        )
          throw new Error(
            'tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.',
          )
        let l,
          u,
          c = null
        if ('complex64' !== a && ye().get('WEBGL_BUFFER_SUPPORTED')) {
          l = this.decode(e)
          const t = this.texData.get(l.dataId)
          c = this.gpgpu.createBufferFromTexture(t.texture.texture, ...oE(r))
        }
        if (
          (this.pendingRead.set(e, []),
          'complex64' !== a && (await this.gpgpu.createAndWaitForFence()),
          'complex64' === a)
        ) {
          const e = await Promise.all([
            this.read(i.real.dataId),
            this.read(i.imag.dataId),
          ])
          u = rd(e[0], e[1])
        } else if (null == c) u = this.getValuesFromTexture(e)
        else {
          const e = P(r)
          u = this.gpgpu.downloadFloat32MatrixFromBuffer(c, e)
        }
        if ((null != l && this.disposeIntermediateTensorInfo(l), null != c)) {
          const e = this.gpgpu.gl
          cE(e, () => e.deleteBuffer(c))
        }
        const h = this.convertAndCacheOnCPU(e, u),
          p = this.pendingRead.get(e)
        return (
          this.pendingRead.delete(e),
          p.forEach((e) => e(h)),
          this.pendingDisposal.has(e) &&
            (this.pendingDisposal.delete(e),
            this.disposeData(e) && Hi().removeDataId(e, this),
            this.pendingDeletes--),
          h
        )
      }
      readToGPU(e, t = {}) {
        const n = this.texData.get(e),
          {
            values: r,
            shape: s,
            slice: a,
            dtype: i,
            isPacked: o,
            texture: l,
          } = n
        if ('complex64' === i)
          throw new Error(
            'Does not support reading texture for complex64 dtype.',
          )
        if (null != a) {
          let n
          n = o ? new vA(s, wA) : new mA(s, wA)
          const r = this.runWebGLProgram(
              n,
              [{ dataId: e, shape: s, dtype: i }],
              i,
            ),
            a = this.readToGPU(r, t)
          return this.disposeIntermediateTensorInfo(r), a
        }
        if (null == l)
          throw null != r
            ? new Error('Data is not on GPU but on CPU.')
            : new Error('There is no data on GPU or CPU.')
        const u = this.decode(e, t.customTexShape),
          c = Hi().makeTensorFromTensorInfo(u),
          h = this.texData.get(u.dataId)
        return Object.assign({ tensorRef: c }, h.texture)
      }
      bufferSync(e) {
        const t = this.readSync(e.dataId)
        if ('string' === e.dtype)
          try {
            const n = t.map((e) => rs(e))
            return qa(e.shape, e.dtype, n)
          } catch (e) {
            throw new Error('Failed to decode encoded string bytes into utf-8')
          }
        return qa(e.shape, e.dtype, t)
      }
      checkNumericalProblems(e) {
        if (null != e)
          for (let t = 0; t < e.length; t++) {
            const n = e[t]
            if (!hE(n)) {
              if (ye().getBool('WEBGL_RENDER_FLOAT32_CAPABLE'))
                throw Error(
                  `The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`,
                )
              throw Error(
                `The value ${n} cannot be represented on this device.`,
              )
            }
          }
      }
      getValuesFromTexture(e) {
        const { shape: t, dtype: n, isPacked: r } = this.texData.get(e),
          s = P(t)
        if (ye().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {
          const n = this.decode(e),
            r = this.texData.get(n.dataId),
            a = this.gpgpu
              .downloadMatrixFromPackedTexture(r.texture.texture, ...oE(t))
              .subarray(0, s)
          return this.disposeIntermediateTensorInfo(n), a
        }
        const a = ye().getBool('WEBGL_PACK') && !0 === r,
          i = a ? NE(t) : t,
          o = a ? new aR(i) : new sR(i),
          l = this.runWebGLProgram(
            o,
            [{ shape: i, dtype: n, dataId: e }],
            'float32',
          ),
          u = this.texData.get(l.dataId),
          c = this.gpgpu
            .downloadByteEncodedFloatMatrixFromOutputTexture(
              u.texture.texture,
              u.texShape[0],
              u.texShape[1],
            )
            .subarray(0, s)
        return this.disposeIntermediateTensorInfo(l), c
      }
      timerAvailable() {
        return (
          ye().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0
        )
      }
      time(e) {
        const t = this.activeTimers,
          n = []
        let r = !1
        null == this.programTimersStack
          ? ((this.programTimersStack = n), (r = !0))
          : this.activeTimers.push(n),
          (this.activeTimers = n),
          e()
        const s = z(this.activeTimers.map((e) => e.query)).filter(
            (e) => null != e,
          ),
          a = z(this.activeTimers.map((e) => e.name)).filter((e) => null != e)
        ;(this.activeTimers = t), r && (this.programTimersStack = null)
        const i = {
          uploadWaitMs: this.uploadWaitMs,
          downloadWaitMs: this.downloadWaitMs,
          kernelMs: null,
          wallMs: null,
        }
        return (async () => {
          if (
            ye().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0
          ) {
            const e = await Promise.all(s)
            ;(i.kernelMs = (function (e) {
              let t = 0
              for (let n = 0; n < e.length; n++) t += e[n]
              return t
            })(e)),
              (i.getExtraProfileInfo = () =>
                e
                  .map((e, t) => ({ name: a[t], ms: e }))
                  .map((e) => `${e.name}: ${e.ms}`)
                  .join(', '))
          } else
            i.kernelMs = {
              error:
                'WebGL query timers are not supported in this environment.',
            }
          return (this.uploadWaitMs = 0), (this.downloadWaitMs = 0), i
        })()
      }
      memory() {
        return {
          unreliable: !1,
          numBytesInGPU: this.numBytesInGPU,
          numBytesInGPUAllocated: this.textureManager.numBytesAllocated,
          numBytesInGPUFree: this.textureManager.numBytesFree,
        }
      }
      startTimer() {
        return ye().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') >
          0
          ? this.gpgpu.beginQuery()
          : { startMs: ts(), endMs: null }
      }
      endTimer(e) {
        return ye().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') >
          0
          ? (this.gpgpu.endQuery(), e)
          : ((e.endMs = ts()), e)
      }
      async getQueryTime(e) {
        if (ye().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0)
          return this.gpgpu.waitForQueryAndGetTime(e)
        const t = e
        return t.endMs - t.startMs
      }
      disposeData(e, t = !1) {
        if (this.pendingDisposal.has(e)) return !1
        if (!this.texData.has(e)) return !0
        if (
          (t
            ? (this.texData.get(e).refCount = 0)
            : this.texData.get(e).refCount--,
          !t && this.texData.get(e).refCount > 0)
        )
          return !1
        if (this.pendingRead.has(e))
          return this.pendingDisposal.add(e), this.pendingDeletes++, !1
        this.releaseGPUData(e)
        const { complexTensorInfos: n } = this.texData.get(e)
        return (
          null != n &&
            (this.disposeData(n.real.dataId, t),
            this.disposeData(n.imag.dataId, t)),
          this.texData.delete(e),
          !0
        )
      }
      releaseGPUData(e) {
        const {
            texture: t,
            dtype: n,
            texShape: r,
            usage: s,
            isPacked: a,
            slice: i,
          } = this.texData.get(e),
          o = (i && i.origDataId) || e,
          l = this.dataRefCount.get(o)
        l > 1
          ? this.dataRefCount.set(o, l - 1)
          : (this.dataRefCount.delete(o),
            null != t &&
              ((this.numBytesInGPU -= this.computeBytes(r, n)),
              this.textureManager.releaseTexture(t, r, s, a)))
        const u = this.texData.get(e)
        ;(u.texture = null),
          (u.texShape = null),
          (u.isPacked = !1),
          (u.slice = null)
      }
      getTexture(e) {
        return this.uploadToGPU(e), this.texData.get(e).texture.texture
      }
      getDataInfo(e) {
        return this.texData.get(e)
      }
      shouldExecuteOnCPU(e, t = SA) {
        return (
          ye().getBool('WEBGL_CPU_FORWARD') &&
          e.every(
            (e) => null == this.texData.get(e.dataId).texture && P(e.shape) < t,
          )
        )
      }
      getGPGPUContext() {
        return this.gpgpu
      }
      where(e) {
        Er(
          'tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead',
        )
        const t = e.dataSync()
        return IA(e.shape, t)
      }
      packedUnaryOp(e, t, n) {
        const r = new vA(e.shape, t),
          s = this.compileAndRun(r, [e], n)
        return Hi().makeTensorFromTensorInfo(s)
      }
      abs(e) {
        if (this.shouldExecuteOnCPU([e]) && 'complex64' !== e.dtype) {
          const t = jR(this.texData.get(e.dataId).values)
          return this.makeOutput(e.shape, e.dtype, t)
        }
        if (ye().getBool('WEBGL_PACK_UNARY_OPERATIONS'))
          return this.packedUnaryOp(e, yA, e.dtype)
        const t = new mA(e.shape, yA),
          n = this.compileAndRun(t, [e])
        return Hi().makeTensorFromTensorInfo(n)
      }
      makeTensorInfo(e, t, n) {
        let r
        if ('string' === t && null != n && n.length > 0 && Q(n[0])) {
          const s = n.map((e) => ns(e))
          r = this.write(s, e, t)
        } else r = this.write(n, e, t)
        return (
          (this.texData.get(r).usage = null), { dataId: r, shape: e, dtype: t }
        )
      }
      makeOutput(e, t, n) {
        return Hi().makeTensorFromTensorInfo(this.makeTensorInfo(e, t, n), this)
      }
      unpackTensor(e) {
        const t = new kA(e.shape)
        return this.runWebGLProgram(t, [e], e.dtype)
      }
      packTensor(e) {
        const t = new uA(e.shape)
        return this.runWebGLProgram(t, [e], e.dtype, null, !0)
      }
      packedReshape(e, t) {
        const n = [kE(e.shape), ...IE(e.shape)],
          r = { dtype: e.dtype, shape: n, dataId: e.dataId },
          s = [kE(t), ...IE(t)],
          a = new cA(s, n),
          i = [n],
          o = this.runWebGLProgram(a, [r], e.dtype, i, !0)
        return { dataId: o.dataId, shape: t, dtype: o.dtype }
      }
      decode(e, t) {
        const n = this.texData.get(e),
          { isPacked: r, shape: s, dtype: a } = n
        null != t &&
          O(
            P(s) <= t[0] * t[1] * 4,
            () =>
              'customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.',
          )
        const i = NE(s)
        let o
        o = r ? new rR(i) : new nR(i)
        const l = [null != t ? t : oE(i)]
        return {
          dtype: a,
          shape: s,
          dataId: this.runWebGLProgram(
            o,
            [{ shape: i, dtype: a, dataId: e }],
            a,
            l,
            !0,
            t,
          ).dataId,
        }
      }
      runWebGLProgram(e, t, n, r, s = !1, a) {
        const i = this.makeTensorInfo(e.outputShape, n),
          o = this.texData.get(i.dataId)
        if (
          (e.packedOutput && (o.isPacked = !0), e.outPackingScheme === rE.DENSE)
        ) {
          const t = null != a ? a : oE(e.outputShape)
          o.texShape = t.map((e) => 2 * e)
        }
        if (
          (null != e.outTexUsage && (o.usage = e.outTexUsage), 0 === P(i.shape))
        )
          return (o.values = K(i.dtype, 0)), i
        const l = [],
          u = t.map((t) => {
            if ('complex64' === t.dtype)
              throw new Error(
                'GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.',
              )
            let n = this.texData.get(t.dataId)
            if (null == n.texture) {
              if (
                !e.packedInputs &&
                P(t.shape) <= ye().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')
              )
                return {
                  shape: t.shape,
                  texData: null,
                  isUniform: !0,
                  uniformValues: n.values,
                }
              e.packedInputs && ((n.isPacked = !0), (n.shape = t.shape))
            }
            if ((this.uploadToGPU(t.dataId), !!n.isPacked != !!e.packedInputs))
              (t = n.isPacked ? this.unpackTensor(t) : this.packTensor(t)),
                l.push(t),
                (n = this.texData.get(t.dataId))
            else if (n.isPacked && !TE(n.shape, t.shape)) {
              const e = t,
                r = t.shape
              ;(t.shape = n.shape),
                (t = this.packedReshape(t, r)),
                l.push(t),
                (n = this.texData.get(t.dataId)),
                (e.shape = r)
            }
            return { shape: t.shape, texData: n, isUniform: !1 }
          })
        this.uploadToGPU(i.dataId)
        const c = { shape: i.shape, texData: o, isUniform: !1 },
          h = (function (e, t, n) {
            let r = ''
            t.concat(n).forEach((t) => {
              const s =
                null != t.texData &&
                null != t.texData.slice &&
                t.texData.slice.flatOffset > 0
              if (e.enableShapeUniforms && !t.isUniform) {
                const a = t.texData.texShape,
                  {
                    useSqueezeShape: i,
                    uniformShape: o,
                    keptDims: l,
                  } = YE(e.packedInputs, t.shape, a)
                let u = '',
                  c = '',
                  h = ''
                if (1 === o.length && e.packedInputs) {
                  const e = [Math.ceil(a[0] / 2), Math.ceil(a[1] / 2)]
                  u = `${e[0] > 1}_${e[1] > 1}`
                } else if (2 !== o.length || e.packedInputs) {
                  if (o.length > 2 && !e.packedInputs) {
                    const e = se(o)
                    h = `${e[0] === a[1]}_${e[e.length - 1] === a[1]}`
                  }
                } else c = `${o[0] > 1}_${o[1] > 1}`
                const p = t.shape.length,
                  d = 2 === o.length && B(t.shape, a),
                  f = 1 === P(t.shape),
                  m = yi(t.shape, n.shape),
                  g =
                    !e.packedInputs &&
                    p === n.shape.length &&
                    B(a, n.texData.texShape),
                  y =
                    e.packedInputs || o.length > 2
                      ? ''
                      : `${a[0] > 1}_${a[1] > 1}`
                r += `${p}_${g}_${i ? l : ''}_${o.length}_${f}_${m}_${d}_${u}_${c}_${h}_${y}_${s}`
              } else {
                const e = t.isUniform ? 'uniform' : t.texData.texShape
                r += `${t.shape}_${e}_${s}`
              }
            })
            const s = e.userCode
            let a = e.constructor.name
            return (
              (a += '_' + r + '_' + s + `${ye().getNumber('WEBGL_VERSION')}`), a
            )
          })(e, u, c),
          p = this.getAndSaveBinary(h, () =>
            (function (e, t, n, r) {
              const s = n.map((e, n) => {
                  const r = {
                    logicalShape: e.shape,
                    texShape: e.isUniform ? null : e.texData.texShape,
                    isUniform: e.isUniform,
                    isPacked: !e.isUniform && e.texData.isPacked,
                    flatOffset: null,
                  }
                  return (
                    null != e.texData &&
                      null != e.texData.slice &&
                      e.texData.slice.flatOffset > 0 &&
                      (r.flatOffset = e.texData.slice.flatOffset),
                    { name: t.variableNames[n], shapeInfo: r }
                  )
                }),
                a = s.map((e) => e.shapeInfo),
                i = {
                  logicalShape: r.shape,
                  texShape: r.texData.texShape,
                  isUniform: !1,
                  isPacked: r.texData.isPacked,
                  flatOffset: null,
                },
                o = BE(s, i, t),
                l = (function (e, t) {
                  const n = vE(
                    e,
                    () => e.createShader(e.FRAGMENT_SHADER),
                    'Unable to create fragment WebGLShader.',
                  )
                  if (
                    (cE(e, () => e.shaderSource(n, t)),
                    cE(e, () => e.compileShader(n)),
                    ye().get('ENGINE_COMPILE_ONLY'))
                  )
                    return n
                  if (!1 === e.getShaderParameter(n, e.COMPILE_STATUS))
                    throw (
                      (fE(t, e.getShaderInfoLog(n)),
                      new Error('Failed to compile fragment shader.'))
                    )
                  return n
                })(e.gl, o),
                u = e.createProgram(l)
              return ye().get('ENGINE_COMPILE_ONLY')
                ? {
                    program: t,
                    fragmentShader: l,
                    source: o,
                    webGLProgram: u,
                    inShapeInfos: a,
                    outShapeInfo: i,
                    uniformLocations: null,
                    customUniformLocations: null,
                    infLoc: null,
                    nanLoc: null,
                    inShapesLocations: null,
                    inTexShapesLocations: null,
                    outShapeLocation: null,
                    outShapeStridesLocation: null,
                    outTexShapeLocation: null,
                  }
                : Object.assign(
                    {
                      program: t,
                      fragmentShader: l,
                      source: o,
                      webGLProgram: u,
                      inShapeInfos: a,
                      outShapeInfo: i,
                    },
                    QE(e, t, u),
                  )
            })(this.gpgpu, e, u, c),
          ),
          d = null != this.activeTimers
        let f
        d && (f = this.startTimer()),
          ye().get('ENGINE_COMPILE_ONLY') ||
            (function (e, t, n, r, s) {
              t.program.enableShapeUniforms ||
                (eR(t.inShapeInfos, n), eR([t.outShapeInfo], [r]))
              const a = r.texData.texture,
                i = r.texData.texShape
              r.texData.isPacked
                ? e.setOutputPackedMatrixTexture(a.texture, i[0], i[1])
                : e.setOutputMatrixTexture(a.texture, i[0], i[1]),
                e.setProgram(t.webGLProgram),
                1 === ye().getNumber('WEBGL_VERSION') &&
                  null !== t.infLoc &&
                  e.gl.uniform1f(t.infLoc, 1 / 0),
                null !== t.nanLoc && e.gl.uniform1f(t.nanLoc, NaN),
                n.forEach((n, r) => {
                  const s = t.program.variableNames[r],
                    a = t.uniformLocations[s],
                    i = t.uniformLocations[`offset${s}`],
                    o = t.inShapesLocations[`${s}Shape`],
                    l = t.inTexShapesLocations[`${s}TexShape`]
                  if (o) {
                    const { uniformShape: r } = YE(
                      t.program.packedInputs,
                      n.shape,
                      n.texData.texShape,
                    )
                    switch (r.length) {
                      case 1:
                        e.gl.uniform1iv(o, new Int32Array(r))
                        break
                      case 2:
                        e.gl.uniform2iv(o, new Int32Array(r))
                        break
                      case 3:
                        e.gl.uniform3iv(o, new Int32Array(r))
                        break
                      case 4:
                        e.gl.uniform4iv(o, new Int32Array(r))
                    }
                  }
                  if (
                    (l &&
                      e.gl.uniform2i(
                        l,
                        n.texData.texShape[0],
                        n.texData.texShape[1],
                      ),
                    null != a)
                  )
                    if (n.isUniform)
                      if (P(n.shape) < 2) e.gl.uniform1f(a, n.uniformValues[0])
                      else {
                        let t = n.uniformValues
                        t instanceof Float32Array || (t = new Float32Array(t)),
                          e.gl.uniform1fv(a, t)
                      }
                    else
                      null != n.texData.slice &&
                        null != i &&
                        e.gl.uniform1i(i, n.texData.slice.flatOffset),
                        e.setInputMatrixTexture(n.texData.texture.texture, a, r)
                })
              const o = t.outShapeLocation
              if (o)
                switch (r.shape.length) {
                  case 1:
                    e.gl.uniform1iv(o, new Int32Array(r.shape))
                    break
                  case 2:
                    e.gl.uniform2iv(o, new Int32Array(r.shape))
                    break
                  case 3:
                    e.gl.uniform3iv(o, new Int32Array(r.shape))
                    break
                  case 4:
                    e.gl.uniform4iv(o, new Int32Array(r.shape))
                }
              if (t.outShapeStridesLocation) {
                const n = se(r.shape)
                switch (r.shape.length) {
                  case 2:
                    e.gl.uniform1iv(
                      t.outShapeStridesLocation,
                      new Int32Array(n),
                    )
                    break
                  case 3:
                    e.gl.uniform2iv(
                      t.outShapeStridesLocation,
                      new Int32Array(n),
                    )
                    break
                  case 4:
                    e.gl.uniform3iv(
                      t.outShapeStridesLocation,
                      new Int32Array(n),
                    )
                }
              }
              t.outTexShapeLocation &&
                e.gl.uniform2i(
                  t.outTexShapeLocation,
                  r.texData.texShape[0],
                  r.texData.texShape[1],
                ),
                t.program.customUniforms &&
                  s &&
                  t.program.customUniforms.forEach((n, r) => {
                    const a = t.customUniformLocations[r],
                      i = s[r]
                    if ('float' === n.type) e.gl.uniform1fv(a, i)
                    else if ('vec2' === n.type) e.gl.uniform2fv(a, i)
                    else if ('vec3' === n.type) e.gl.uniform3fv(a, i)
                    else if ('vec4' === n.type) e.gl.uniform4fv(a, i)
                    else if ('int' === n.type) e.gl.uniform1iv(a, i)
                    else if ('ivec2' === n.type) e.gl.uniform2iv(a, i)
                    else if ('ivec3' === n.type) e.gl.uniform3iv(a, i)
                    else {
                      if ('ivec4' !== n.type)
                        throw Error(
                          `uniform type ${n.type} is not supported yet.`,
                        )
                      e.gl.uniform4iv(a, i)
                    }
                  }),
                e.executeProgram()
            })(this.gpgpu, p, u, c, r),
          l.forEach((e) => this.disposeIntermediateTensorInfo(e)),
          d &&
            ((f = this.endTimer(f)),
            this.activeTimers.push({
              name: e.constructor.name,
              query: this.getQueryTime(f),
            }))
        const m = ye().get('WEBGL_FLUSH_THRESHOLD')
        if (m > 0) {
          const e = ts()
          e - this.lastGlFlushTime > m &&
            (this.gpgpu.gl.flush(), (this.lastGlFlushTime = e))
        }
        if (!ye().getBool('WEBGL_LAZILY_UNPACK') && o.isPacked && !1 === s) {
          const e = this.unpackTensor(i)
          return this.disposeIntermediateTensorInfo(i), e
        }
        return i
      }
      compileAndRun(e, t, n, r, s = !1) {
        return (n = n || t[0].dtype), this.runWebGLProgram(e, t, n, r, s)
      }
      getAndSaveBinary(e, t) {
        return (
          e in this.binaryCache || (this.binaryCache[e] = t()),
          this.binaryCache[e]
        )
      }
      getTextureManager() {
        return this.textureManager
      }
      dispose() {
        this.disposed ||
          (ye().getBool('IS_TEST') ||
            Object.keys(this.binaryCache).forEach((e) => {
              this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),
                delete this.binaryCache[e]
            }),
          this.textureManager.dispose(),
          null != this.canvas &&
          'undefined' != typeof HTMLCanvasElement &&
          this.canvas instanceof HTMLCanvasElement
            ? this.canvas.remove()
            : (this.canvas = null),
          this.gpgpuCreatedLocally &&
            ((this.gpgpu.program = null), this.gpgpu.dispose()),
          (this.disposed = !0))
      }
      floatPrecision() {
        return (
          null == this.floatPrecisionValue &&
            (this.floatPrecisionValue = qi(() => {
              if (!ye().get('WEBGL_RENDER_FLOAT32_ENABLED')) {
                const e = ye().getBool('DEBUG')
                ye().set('DEBUG', !1)
                const t = this.abs(Ji(1e-8)).dataSync()[0]
                if ((ye().set('DEBUG', e), t > 0)) return 32
              }
              return 16
            })),
          this.floatPrecisionValue
        )
      }
      epsilon() {
        return 32 === this.floatPrecision() ? 1e-7 : 1e-4
      }
      uploadToGPU(e) {
        const t = this.texData.get(e),
          {
            shape: n,
            dtype: r,
            values: s,
            texture: a,
            usage: i,
            isPacked: o,
          } = t
        if (null != a) return
        const l = null != this.activeTimers
        let u
        l && (u = ts())
        let c = t.texShape
        if (
          (null == c &&
            ((c = (function (e, t = !1) {
              let n = ye().getNumber('WEBGL_MAX_TEXTURE_SIZE'),
                r = ye().getNumber('WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE')
              if (
                (r === 1 / 0 &&
                  ye().getBool('WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE') &&
                  (r = n / 2),
                t &&
                  ((n *= 2),
                  (r *= 2),
                  1 ===
                    (e = e.map((t, n) => (n >= e.length - 2 ? F(e[n]) : e[n])))
                      .length && (e = [2, e[0]])),
                2 !== e.length)
              ) {
                const t = q(e)
                e = t.newShape
              }
              let s = P(e),
                a = null
              e.length <= 1 && s <= n
                ? (a = [1, s])
                : 2 === e.length && e[0] <= n && e[1] <= n
                  ? (a = e)
                  : 3 === e.length && e[0] * e[1] <= n && e[2] <= n
                    ? (a = [e[0] * e[1], e[2]])
                    : 3 === e.length && e[0] <= n && e[1] * e[2] <= n
                      ? (a = [e[0], e[1] * e[2]])
                      : 4 === e.length && e[0] * e[1] * e[2] <= n && e[3] <= n
                        ? (a = [e[0] * e[1] * e[2], e[3]])
                        : 4 === e.length &&
                          e[0] <= n &&
                          e[1] * e[2] * e[3] <= n &&
                          (a = [e[0], e[1] * e[2] * e[3]])
              const i =
                null != a &&
                Math.max(...a) > r &&
                Math.min(...a) <= (t ? 2 : 1) &&
                Math.min(...a) > 0
              if (null == a || i)
                if (t) {
                  const t = kE(e)
                  let n = 2,
                    r = 2
                  e.length && ([n, r] = IE(e)),
                    (s = t * (n / 2) * (r / 2)),
                    (a = V(s).map((e) => 2 * e))
                } else a = V(s)
              return a
            })(n, o)),
            (t.texShape = c)),
          null != s)
        ) {
          const e = NE(n)
          let a,
            i = c[1],
            h = c[0]
          const p = s instanceof Uint8Array || s instanceof Uint8ClampedArray
          ;(!o && p) || ([i, h] = lE(c[0], c[1])),
            (a = o ? new oR(e, p) : new iR(e, p))
          const d = p ? [h, i] : c,
            f = this.makeTensorInfo(d, r),
            m = this.texData.get(f.dataId)
          ;(m.usage = p ? sE.PIXELS : sE.UPLOAD),
            (m.texShape = d),
            this.gpgpu.uploadDenseMatrixToTexture(
              this.getTexture(f.dataId),
              i,
              h,
              s,
            )
          const g = [[h, i]],
            y = !0,
            b = this.runWebGLProgram(a, [f], r, g, y),
            x = this.texData.get(b.dataId)
          ;(t.texShape = x.texShape),
            (t.isPacked = x.isPacked),
            (t.usage = x.usage),
            ye().get('ENGINE_COMPILE_ONLY')
              ? this.disposeData(b.dataId)
              : ((t.texture = x.texture),
                (t.values = null),
                this.texData.delete(b.dataId)),
            this.disposeIntermediateTensorInfo(f),
            l && (this.uploadWaitMs += ts() - u)
        } else {
          const e = this.acquireTexture(c, i, r, o)
          t.texture = e
        }
      }
      convertAndCacheOnCPU(e, t) {
        const n = this.texData.get(e),
          { dtype: r } = n
        return (
          this.releaseGPUData(e),
          null != t &&
            (n.values = (function (e, t) {
              if ('float32' === t || 'complex64' === t) return e
              if ('int32' === t || 'bool' === t) {
                const n =
                  'int32' === t
                    ? new Int32Array(e.length)
                    : new Uint8Array(e.length)
                for (let t = 0; t < n.length; ++t) n[t] = Math.round(e[t])
                return n
              }
              throw new Error(`Unknown dtype ${t}`)
            })(t, r)),
          n.values
        )
      }
      acquireTexture(e, t, n, r) {
        if (
          ((this.numBytesInGPU += this.computeBytes(e, n)),
          !this.warnedAboutMemory &&
            this.numBytesInGPU > 1024 * this.numMBBeforeWarning * 1024)
        ) {
          const e = (this.numBytesInGPU / 1024 / 1024).toFixed(2)
          ;(this.warnedAboutMemory = !0),
            console.warn(
              `High memory usage in GPU: ${e} MB, most likely due to a memory leak`,
            )
        }
        return this.textureManager.acquireTexture(e, t, r)
      }
      computeBytes(e, t) {
        return e[0] * e[1] * J(t)
      }
      checkCompileCompletion() {
        for (const [, e] of Object.entries(this.binaryCache))
          this.checkCompletion_(e)
      }
      async checkCompileCompletionAsync() {
        const e = []
        if (this.gpgpu.parallelCompilationExtension) {
          for (const [, t] of Object.entries(this.binaryCache))
            e.push(this.checkCompletionAsync_(t))
          return Promise.all(e)
        }
        for (const [, t] of Object.entries(this.binaryCache)) {
          const n = new Promise((e) => {
            try {
              this.checkCompletion_(t), e(!0)
            } catch (e) {
              throw e
            }
          })
          e.push(n)
        }
        return Promise.all(e)
      }
      async checkCompletionAsync_(e) {
        return this.gpgpu.gl.getProgramParameter(
          e.webGLProgram,
          this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR,
        )
          ? this.checkCompletion_(e)
          : (await _p(), this.checkCompletionAsync_(e))
      }
      checkCompletion_(e) {
        if (
          !1 ===
          this.gpgpu.gl.getProgramParameter(
            e.webGLProgram,
            this.gpgpu.gl.LINK_STATUS,
          )
        ) {
          if (
            (console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),
            !1 ===
              this.gpgpu.gl.getShaderParameter(
                e.fragmentShader,
                this.gpgpu.gl.COMPILE_STATUS,
              ))
          )
            throw (
              (fE(e.source, this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),
              new Error('Failed to compile fragment shader.'))
            )
          throw new Error('Failed to link vertex and fragment shaders.')
        }
        return !0
      }
      getUniformLocations() {
        for (const [, e] of Object.entries(this.binaryCache)) {
          const {
            uniformLocations: t,
            customUniformLocations: n,
            infLoc: r,
            nanLoc: s,
            inShapesLocations: a,
            inTexShapesLocations: i,
            outShapeLocation: o,
            outShapeStridesLocation: l,
            outTexShapeLocation: u,
          } = QE(this.gpgpu, e.program, e.webGLProgram)
          ;(e.uniformLocations = t),
            (e.customUniformLocations = n),
            (e.infLoc = r),
            (e.nanLoc = s),
            (e.inShapesLocations = a),
            (e.inTexShapesLocations = i),
            (e.outShapeLocation = o),
            (e.outShapeStridesLocation = l),
            (e.outTexShapeLocation = u)
        }
      }
    }
    ;(TA.nextDataId = 0),
      /**
       * @license
       * Copyright 2020 Google Inc. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */ zs() && Yi('webgl', () => new TA(), 2)
    const CA = '\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n'
    class $A {
      constructor(e, t, n) {
        ;(this.variableNames = ['A', 'B']),
          (this.outputShape = xi(t, n)),
          (this.enableShapeUniforms = tR(this.outputShape.length)),
          (this.userCode = `\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `)
        /**
         * @license
         * Copyright 2018 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
      }
    }
    const EA =
      '\n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n'
    class RA {
      constructor(e, t, n, r = !1) {
        ;(this.variableNames = ['A', 'B']),
          (this.supportsBroadcasting = !0),
          (this.packedInputs = !0),
          (this.packedOutput = !0),
          (this.outputShape = xi(t, n))
        const s = this.outputShape.length
        this.enableShapeUniforms = tR(s)
        let a = ''
        if (r)
          if (0 === s || 1 === P(this.outputShape))
            a =
              '\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        '
          else if (
            ((a = `\n          ${XE(s)} coords = getOutputCoords();\n        `),
            1 === s)
          )
            this.enableShapeUniforms
              ? (a +=
                  '\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ')
              : (a += `\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `)
          else {
            const e = lA('coords', s)
            this.enableShapeUniforms
              ? (a += `\n            bool nextRowOutOfBounds =\n              (${e[s - 2]} + 1) >= outShape[${s} - 2];\n            bool nextColOutOfBounds =\n              (${e[s - 1]} + 1) >= outShape[${s} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `)
              : (a += `\n            bool nextRowOutOfBounds =\n              (${e[s - 2]} + 1) >= ${this.outputShape[s - 2]};\n            bool nextColOutOfBounds =\n              (${e[s - 1]} + 1) >= ${this.outputShape[s - 1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `)
          }
        this.userCode = `\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function AA(e) {
      const { inputs: t, backend: n } = e,
        { x: r } = t
      return (
        n.incRef(r.dataId), { dataId: r.dataId, shape: r.shape, dtype: r.dtype }
      )
    }
    const _A = { kernelName: Ot, backendName: 'webgl', kernelFunc: AA }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function FA(e) {
      const { inputs: t, backend: n } = e,
        { real: r, imag: s } = t,
        a = n.makeTensorInfo(r.shape, 'complex64'),
        i = n.texData.get(a.dataId),
        o = AA({ inputs: { x: r }, backend: n }),
        l = AA({ inputs: { x: s }, backend: n })
      return (i.complexTensorInfos = { real: o, imag: l }), a
    }
    const DA = { kernelName: qe, backendName: 'webgl', kernelFunc: FA },
      OA = 'return (a < 0.) ? b * a : a;',
      MA =
        '\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n',
      LA = {
        kernelName: Wt,
        backendName: 'webgl',
        kernelFunc: function (e) {
          const { inputs: t, backend: n, attrs: r } = e,
            { x: s } = t,
            { alpha: a } = r,
            i = n.makeTensorInfo([], 'float32', Qr(a, 'float32')),
            o = ye().getBool('WEBGL_PACK_BINARY_OPERATIONS')
              ? new RA(MA, s.shape, i.shape)
              : new $A(OA, s.shape, i.shape),
            l = n.runWebGLProgram(o, [s, i], 'float32')
          return n.disposeIntermediateTensorInfo(i), l
        },
      },
      zA = 'return (a < 0.) ? b * a : a;',
      PA =
        '\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n',
      BA = {
        kernelName: In,
        backendName: 'webgl',
        kernelFunc: function (e) {
          const { inputs: t, backend: n } = e,
            { x: r, alpha: s } = t,
            a = ye().getBool('WEBGL_PACK_BINARY_OPERATIONS')
              ? new RA(PA, r.shape, s.shape)
              : new $A(zA, r.shape, s.shape)
          return n.runWebGLProgram(a, [r, s], 'float32')
        },
      },
      WA = 'if (isnan(x)) return x;'
    function VA({
      opSnippet: e,
      packedOpSnippet: t,
      cpuKernelImpl: n,
      dtype: r,
    }) {
      return ({ inputs: s, backend: a }) => {
        const { x: i } = s,
          o = a,
          l = r || i.dtype
        if (o.shouldExecuteOnCPU([i]) && null != n) {
          const e = o.texData.get(i.dataId),
            t = n(e.values, l)
          return o.makeTensorInfo(i.shape, l, t)
        }
        let u
        return (
          (u =
            ye().getBool('WEBGL_PACK_UNARY_OPERATIONS') && null != t
              ? new vA(i.shape, t)
              : new mA(i.shape, e)),
          o.runWebGLProgram(u, [i], l)
        )
      }
    }
    function UA({
      opSnippet: e,
      packedOpSnippet: t,
      checkOutOfBounds: n = !1,
      supportsComplex: r = !1,
      cpuKernelImpl: s,
      dtype: a,
    }) {
      return ({ inputs: i, backend: o }) => {
        const { a: l, b: u } = i,
          c = o
        if (r && 'complex64' === l.dtype) {
          const t = c.texData.get(l.dataId),
            n = c.texData.get(u.dataId),
            [r, s] = [
              [t.complexTensorInfos.real, n.complexTensorInfos.real],
              [t.complexTensorInfos.imag, n.complexTensorInfos.imag],
            ].map((t) => {
              const [n, r] = t,
                s = { dataId: n.dataId, dtype: n.dtype, shape: l.shape },
                a = { dataId: r.dataId, dtype: r.dtype, shape: u.shape },
                i = new $A(e, l.shape, u.shape)
              return c.runWebGLProgram(i, [s, a], Ss(n.dtype, r.dtype))
            }),
            a = FA({ inputs: { real: r, imag: s }, backend: c })
          return (
            c.disposeIntermediateTensorInfo(r),
            c.disposeIntermediateTensorInfo(s),
            a
          )
        }
        const h = a || Ss(l.dtype, u.dtype)
        if (
          ('string' === l.dtype ||
            'string' === u.dtype ||
            c.shouldExecuteOnCPU([l, u])) &&
          null != s
        ) {
          const e = c.texData.get(l.dataId).values,
            t = c.texData.get(u.dataId).values,
            n = 'string' === l.dtype ? Ld(e) : e,
            r = 'string' === l.dtype ? Ld(t) : t,
            [a, i] = s(l.shape, u.shape, n, r, h),
            o = c.makeTensorInfo(i, h)
          return (c.texData.get(o.dataId).values = a), o
        }
        let p
        return (
          (p =
            ye().getBool('WEBGL_PACK_BINARY_OPERATIONS') && null != t
              ? new RA(t, l.shape, u.shape, n)
              : new $A(e, l.shape, u.shape)),
          c.runWebGLProgram(p, [l, u], h)
        )
      }
    }
    function GA(e, t = !1) {
      if ('linear' === e) return 'return x;'
      if ('relu' === e)
        return t
          ? '\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n'
          : bA
      if ('elu' === e)
        return t
          ? '\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n'
          : 'return (x >= 0.0) ? x : (exp(x) - 1.0);'
      if ('relu6' === e)
        return t
          ? '\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n'
          : xA
      if ('prelu' === e) return t ? PA : zA
      if ('leakyrelu' === e) return t ? MA : OA
      if ('sigmoid' === e) return 'return 1.0 / (1.0 + exp(-1.0 * x));'
      throw new Error(
        `Activation ${e} has not been implemented for the WebGL backend.`,
      )
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class HA {
      constructor(e, t, n, r = !1, s = !1, a = !1, i = null, o = !1, l = !1) {
        ;(this.variableNames = ['matrixA', 'matrixB']),
          (this.packedInputs = !0),
          (this.packedOutput = !0),
          (this.outputShape = n),
          (this.enableShapeUniforms = tR(this.outputShape.length))
        const u = r ? e[1] : e[2],
          c = Math.ceil(u / 2),
          h = r ? 'i * 2, rc.y' : 'rc.y, i * 2',
          p = s ? 'rc.z, i * 2' : 'i * 2, rc.z',
          d = r ? ['a.xxyy', 'a.zzww'] : ['a.xxzz', 'a.yyww'],
          f = s ? ['b.xzxz', 'b.ywyw'] : ['b.xyxy', 'b.zwzw']
        let m = '',
          g = ''
        i &&
          ((m = o
            ? `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`
            : l
              ? `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${i}\n        }`
              : `vec4 activation(vec4 x) {\n          ${i}\n        }`),
          (g = 'result = activation(result);'))
        const y = a ? 'result += getBiasAtOutCoords();' : ''
        a && this.variableNames.push('bias'),
          o && this.variableNames.push('preluActivationWeights'),
          l && this.variableNames.push('leakyreluAlpha')
        let b = 'rc.x',
          x = 'rc.x'
        e[0] < t[0]
          ? (b = `int(min(float(rc.x), ${e[0] - 1}.))`)
          : t[0] < e[0] && (x = `int(min(float(rc.x), ${t[0] - 1}.))`),
          (this.userCode = `\n      ${m}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${c}; i++) {\n          int batchA = ${b};\n          int batchB = ${x};\n          vec4 a = getMatrixA(batchA, ${h});\n          vec4 b = getMatrixB(batchB, ${p});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${d[0]} * ${f[0]});\n          result += (${d[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${y}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `)
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class jA {
      constructor(e, t, n) {
        ;(this.variableNames = ['AReal', 'AImag', 'BReal', 'BImag']),
          (this.outputShape = xi(t, n)),
          (this.userCode = `\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `)
        /**
         * @license
         * Copyright 2020 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
      }
    }
    const qA = 'return a * b;'
    function KA(e) {
      const { inputs: t, backend: n } = e,
        { a: r, b: s } = t,
        a = Ss(r.dtype, s.dtype)
      if ('complex64' === r.dtype) {
        const e = n.texData.get(r.dataId),
          t = n.texData.get(s.dataId),
          a = new jA('return areal * breal - aimag * bimag;', r.shape, s.shape),
          i = new jA('return areal * bimag + aimag * breal;', r.shape, s.shape),
          o = [
            {
              dataId: e.complexTensorInfos.real.dataId,
              dtype: e.complexTensorInfos.real.dtype,
              shape: r.shape,
            },
            {
              dataId: e.complexTensorInfos.imag.dataId,
              dtype: e.complexTensorInfos.imag.dtype,
              shape: r.shape,
            },
            {
              dataId: t.complexTensorInfos.real.dataId,
              dtype: t.complexTensorInfos.real.dtype,
              shape: s.shape,
            },
            {
              dataId: t.complexTensorInfos.imag.dataId,
              dtype: t.complexTensorInfos.imag.dtype,
              shape: s.shape,
            },
          ],
          l = n.runWebGLProgram(a, o, 'float32'),
          u = n.runWebGLProgram(i, o, 'float32'),
          c = FA({ inputs: { real: l, imag: u }, backend: n })
        return (
          n.disposeIntermediateTensorInfo(l),
          n.disposeIntermediateTensorInfo(u),
          c
        )
      }
      if (n.shouldExecuteOnCPU([r, s])) {
        const e = n.texData.get(r.dataId),
          t = n.texData.get(s.dataId),
          [i, o] = MR(r.shape, s.shape, e.values, t.values, a),
          l = n.makeTensorInfo(o, a)
        return (n.texData.get(l.dataId).values = i), l
      }
      let i
      return (
        (i = ye().getBool('WEBGL_PACK_BINARY_OPERATIONS')
          ? new RA(qA, r.shape, s.shape)
          : new $A(qA, r.shape, s.shape)),
        n.runWebGLProgram(i, [r, s], a)
      )
    }
    const XA = { kernelName: pn, backendName: 'webgl', kernelFunc: KA }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function YA(e) {
      const { inputs: t, backend: n, attrs: r } = e,
        { x: s } = t,
        { shape: a } = r,
        i = n,
        o = P(s.shape),
        l = H(a, o),
        u = P(l)
      O(
        o === u,
        () =>
          `The new shape (${l}) has ${u} elements and the old shape (${s.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`,
      )
      const c = i.texData.get(s.dataId)
      return !c.isPacked ||
        TE(s.shape, l) ||
        (null !== c.texture && TE(c.shape, l))
        ? (i.incRef(s.dataId), { dataId: s.dataId, shape: l, dtype: s.dtype })
        : /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */ (function (e, t, n) {
            const r = [kE(e.shape), ...IE(e.shape)],
              s = { dtype: e.dtype, shape: r, dataId: e.dataId },
              a = [kE(t), ...IE(t)],
              i = new cA(a, r),
              o = [r],
              l = n.runWebGLProgram(i, [s], e.dtype, o, !0)
            return { dataId: l.dataId, shape: t, dtype: l.dtype }
          })(s, l, i)
    }
    const ZA = { kernelName: An, backendName: 'webgl', kernelFunc: YA }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class JA {
      constructor(e, t) {
        this.variableNames = ['x']
        const { windowSize: n, batchSize: r, inSize: s, outSize: a } = e
        this.outputShape = [r, a]
        const i = 4 * Math.floor(n / 4),
          o = n % 4
        let l = 'sumValue += dot(values, ones);'
        if (null != t) {
          const e = 1 / t
          l = `sumValue += dot(values * ${W(e) ? e.toPrecision(2) : e}, ones);`
        }
        let u = ''
        s % n > 0 &&
          (u = `\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return 0.0;\n        }\n      `),
          (this.userCode = `\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${u}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1 === o}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${l}\n        } else if (${2 === o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${l}\n        } else if (${3 === o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `)
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class QA {
      constructor(e, t) {
        this.variableNames = ['x']
        const { windowSize: n, batchSize: r, inSize: s, outSize: a } = e
        this.outputShape = [r, a]
        let i = '0.0',
          o = ''
        'prod' === t
          ? (i = '1.0')
          : 'min' === t
            ? ((i = '1.0 / 1e-20'), (o = 'min'))
            : 'max' === t && ((i = '-1.0 / 1e-20'), (o = 'max'))
        let l = `${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`
        'sum' === t
          ? (l = 'sumValue')
          : 'prod' === t
            ? (l = 'prodValue')
            : 'all' === t
              ? (l = 'allValue')
              : 'any' === t && (l = 'anyValue')
        const u = 4 * Math.floor(n / 4),
          c = n % 4
        let h = `\n      if (${'sum' === t}) {\n        sumValue += dot(values, ones);\n      } else if (${'prod' === t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n        if (${'min' === t} || ${'max' === t}) {\n          minMaxValue = ${o}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,
          p = 'vec4'
        'all' === t
          ? ((i = '1.0'),
            (h =
              '\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      '),
            (p = 'bvec4'))
          : 'any' === t &&
            ((i = '0.0'),
            (h =
              '\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      '),
            (p = 'bvec4'))
        let d = ''
        s % n > 0 &&
          (d = `\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `),
          (this.userCode = `\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${d}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${u}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${u};\n        if (${1 === c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2 === c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3 === c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${l});\n      }\n    `)
      }
    }
    function e_(e, t, n, r) {
      const s =
        /**
         * @license
         * Copyright 2020 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        (function (e) {
          const t = []
          for (; 0 === t.length || 1 !== t[t.length - 1].outSize; ) {
            const n = t.length ? t[t.length - 1].outSize : e[1],
              r = Wp(n)
            t.push({ inSize: n, windowSize: r, outSize: Math.ceil(n / r) })
          }
          return t
        })(e.shape)
      let a = e
      for (let i = 0; i < s.length; i++) {
        const { inSize: o, windowSize: l, outSize: u } = s[i]
        let c, h
        ;(c =
          'mean' === n
            ? 0 === i
              ? new JA(
                  {
                    windowSize: l,
                    inSize: o,
                    batchSize: e.shape[0],
                    outSize: u,
                  },
                  o,
                )
              : new JA({
                  windowSize: l,
                  inSize: o,
                  batchSize: e.shape[0],
                  outSize: u,
                })
            : new QA(
                { windowSize: l, inSize: o, batchSize: e.shape[0], outSize: u },
                n,
              )),
          (h = a),
          (a = r.runWebGLProgram(c, [a], t)),
          h.dataId !== e.dataId && r.disposeIntermediateTensorInfo(h)
      }
      return a
    }
    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class t_ {
      constructor(e, t) {
        this.variableNames = ['A']
        const n = new Array(e.length)
        for (let r = 0; r < n.length; r++) n[r] = e[t[r]]
        ;(this.outputShape = n), (this.rank = n.length)
        const r = XE(this.rank),
          s = (function (e) {
            const t = e.length
            if (t > 6)
              throw Error(`Transpose for rank ${t} is not yet supported`)
            const n = [
                'resRC.x',
                'resRC.y',
                'resRC.z',
                'resRC.w',
                'resRC.u',
                'resRC.v',
              ],
              r = new Array(t)
            for (let t = 0; t < e.length; t++) r[e[t]] = n[t]
            return r.join()
          })(t)
        this.userCode = `\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${s}));\n    }\n    `
      }
    }
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class n_ {
      constructor(e, t) {
        ;(this.variableNames = ['A']),
          (this.packedInputs = !0),
          (this.packedOutput = !0)
        const n = new Array(e.length)
        for (let r = 0; r < n.length; r++) n[r] = e[t[r]]
        if (((this.outputShape = n), (this.rank = n.length), this.rank > 6))
          throw Error(
            `Packed transpose for rank ${this.rank} is not yet supported.`,
          )
        const r = XE(this.rank),
          s = oA('rc', this.rank),
          a = new Array(this.rank)
        for (let e = 0; e < t.length; e++) a[t[e]] = s[e]
        const i = `vec2(${a.slice(-2).join()})`,
          o = `++${s[this.rank - 1]} < ${n[this.rank - 1]}`,
          l = `getChannel(getA(${a.join()}), ${i})`
        this.userCode = `\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${o}) {\n        result[1] = ${l};\n      }\n      --${s[this.rank - 1]};\n      if(++${s[this.rank - 2]} < ${n[this.rank - 2]}) {\n        result[2] = ${l};\n        if(${o}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function r_(e, t, n) {
      const r = ye().getBool('WEBGL_PACK_ARRAY_OPERATIONS')
        ? new n_(e.shape, t)
        : new t_(e.shape, t)
      return n.runWebGLProgram(r, [e], e.dtype)
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function s_(e) {
      const { inputs: t, backend: n, attrs: r } = e,
        { x: s } = t,
        { axis: a, keepDims: i } = r
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */ return (function (e, t, n, r) {
        const s = t,
          a = e.shape.length,
          i = j(s, e.shape)
        let o = i
        const l = Al(o, a),
          u = null != l
        let c = e
        u && ((c = r_(e, l, r)), (o = Fl(o.length, a))), Rl('sum', o, a)
        const [h, p] = $l(c.shape, o)
        let d = h
        n && (d = El(h, i))
        const f = P(p),
          m = YA({
            inputs: { x: c },
            attrs: { shape: [P(e.shape) / f, f] },
            backend: r,
          }),
          g = e_(m, Ts(e.dtype), 'sum', r),
          y = YA({ inputs: { x: g }, attrs: { shape: d }, backend: r })
        return (
          r.disposeIntermediateTensorInfo(m),
          r.disposeIntermediateTensorInfo(g),
          u && r.disposeIntermediateTensorInfo(c),
          y
        )
      })(s, a, i, n)
    }
    const a_ = { kernelName: Zn, backendName: 'webgl', kernelFunc: s_ }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function i_(e) {
      const { inputs: t, backend: n, attrs: r } = e,
        { x: s } = t,
        { perm: a } = r,
        i = n,
        o = s.shape.length,
        l = new Array(o)
      for (let e = 0; e < l.length; e++) l[e] = s.shape[a[e]]
      let u
      if (i.shouldExecuteOnCPU([s])) {
        const e = i.texData.get(s.dataId).values,
          t = aA(e, s.shape, s.dtype, a, l)
        ;(u = i.makeTensorInfo(l, s.dtype)),
          (i.texData.get(u.dataId).values = t)
      } else u = r_(s, a, i)
      return u
    }
    const o_ = { kernelName: br, backendName: 'webgl', kernelFunc: i_ }
    function l_({
      a: e,
      b: t,
      transposeA: n,
      transposeB: r,
      backend: s,
      bias: a = null,
      preluActivationWeights: i = null,
      leakyreluAlpha: o = 0,
      activation: l = null,
    }) {
      const u = e.shape.length,
        c = t.shape.length,
        h = n ? e.shape[u - 2] : e.shape[u - 1],
        p = r ? t.shape[c - 1] : t.shape[c - 2],
        d = n ? e.shape[u - 1] : e.shape[u - 2],
        f = r ? t.shape[c - 2] : t.shape[c - 1],
        m = e.shape.slice(0, -2),
        g = t.shape.slice(0, -2),
        y = P(m),
        b = P(g),
        x = xi(e.shape.slice(0, -2), t.shape.slice(0, -2)).concat([d, f])
      O(
        h === p,
        () =>
          `Error in matMul: inner shapes (${h}) and (${p}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${r} must match.`,
      )
      const w = n ? [y, h, d] : [y, d, h],
        v = r ? [b, f, p] : [b, p, f],
        k = YA({ inputs: { x: e }, backend: s, attrs: { shape: w } }),
        I = YA({ inputs: { x: t }, backend: s, attrs: { shape: v } }),
        N = [k, I],
        S = Math.max(y, b),
        T = n ? k.shape[1] : k.shape[2],
        C = null != a,
        $ = null != i,
        E = 'leakyrelu' === l,
        R = null != l ? GA(l, !0) : null
      let A
      if (
        (1 === d || 1 === f) &&
        T > 1e3 &&
        !1 === (C || $ || E || null != R)
      ) {
        let e = k,
          t = I
        n &&
          ((e = i_({
            inputs: { x: k },
            backend: s,
            attrs: { perm: [0, 2, 1] },
          })),
          N.push(e)),
          r &&
            ((t = i_({
              inputs: { x: I },
              backend: s,
              attrs: { perm: [0, 2, 1] },
            })),
            N.push(t))
        const a = 1 === f
        let i = e
        1 !== f &&
          ((i = YA({
            inputs: { x: e },
            backend: s,
            attrs: { shape: [S, T, 1] },
          })),
          N.push(i))
        const o = 1 === f ? 2 : 1
        let l = t
        a &&
          ((l = YA({
            inputs: { x: t },
            backend: s,
            attrs: { shape: [S, 1, T] },
          })),
          N.push(l))
        const u = KA({ inputs: { a: i, b: l }, backend: s })
        ;(A = s_({
          inputs: { x: u },
          backend: s,
          attrs: { axis: o, keepDims: !0 },
        })),
          N.push(u)
      } else {
        const l = Ss(e.dtype, t.dtype),
          u = new HA(w, v, [S, d, f], n, r, C, R, $, E),
          c = [k, I]
        if ((null != a && c.push(a), $ && c.push(i), E)) {
          const e = s.makeTensorInfo([], 'float32', Qr(o, 'float32'))
          c.push(e), N.push(e)
        }
        A = s.runWebGLProgram(u, c, l)
      }
      const _ = YA({ inputs: { x: A }, backend: s, attrs: { shape: x } })
      N.push(A)
      for (const e of N) s.disposeIntermediateTensorInfo(e)
      return _
    }
    const u_ = {
        kernelName: Tr,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the License);
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an AS IS BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { a: s, b: a, bias: i, preluActivationWeights: o } = t,
              {
                transposeA: l,
                transposeB: u,
                activation: c,
                leakyreluAlpha: h,
              } = r
            return l_({
              a: s,
              b: a,
              transposeA: l,
              transposeB: u,
              backend: n,
              bias: i,
              preluActivationWeights: o,
              leakyreluAlpha: h,
              activation: c,
            })
          },
      },
      c_ = 'return abs(x);',
      h_ = {
        kernelName: ke,
        backendName: 'webgl',
        kernelFunc: function (e) {
          const { inputs: t, backend: n } = e,
            { x: r } = t
          if (n.shouldExecuteOnCPU([r]) && 'complex64' !== r.dtype) {
            const e = n.texData.get(r.dataId),
              t = jR(e.values)
            return n.makeTensorInfo(r.shape, r.dtype, t)
          }
          let s
          return (
            (s = ye().getBool('WEBGL_PACK_UNARY_OPERATIONS')
              ? new vA(r.shape, c_)
              : new mA(r.shape, c_)),
            n.runWebGLProgram(s, [r], r.dtype)
          )
        },
      },
      p_ = VA({
        opSnippet:
          gA +
          '\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n',
      }),
      d_ = { kernelName: Ie, backendName: 'webgl', kernelFunc: p_ },
      f_ = VA({
        opSnippet:
          gA +
          '\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));',
      }),
      m_ = { kernelName: Ne, backendName: 'webgl', kernelFunc: f_ },
      g_ = 'return a + b;',
      y_ = UA({
        opSnippet: g_,
        packedOpSnippet: g_,
        supportsComplex: !0,
        cpuKernelImpl: mR,
      }),
      b_ = { kernelName: Se, backendName: 'webgl', kernelFunc: y_ }
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class x_ {
      constructor(e, t) {
        ;(this.outputShape = []),
          (this.outputShape = e),
          (this.variableNames = t.map((e, t) => `T${t}`))
        const n = []
        this.variableNames.forEach((e) => {
          n.push(`float v${e} = get${e}AtOutCoords();`)
        })
        const r = this.variableNames.map((e) => `v${e}`).join(' + ')
        this.userCode = `\n      void main() {\n        ${n.join('\n        ')}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `
      }
    }
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class w_ {
      constructor(e, t) {
        ;(this.outputShape = []),
          (this.packedInputs = !0),
          (this.packedOutput = !0),
          (this.outputShape = e),
          (this.variableNames = t.map((e, t) => `T${t}`))
        const n = []
        this.variableNames.forEach((e) => {
          n.push(`vec4 v${e} = get${e}AtOutCoords();`)
        })
        const r = this.variableNames.map((e) => `v${e}`).join(' + ')
        this.userCode = `\n      void main() {\n        ${n.join('\n        ')}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `
      }
    }
    const v_ = {
        kernelName: Te,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function e(t) {
            const { inputs: n, backend: r } = t,
              s = n
            if (1 === s.length) return AA({ inputs: { x: s[0] }, backend: r })
            if (s.length > ye().get('WEBGL_MAX_TEXTURES_IN_SHADER')) {
              const t = Math.floor(s.length / 2),
                n = e({ inputs: s.slice(0, t), backend: r }),
                a = e({ inputs: s.slice(t), backend: r })
              return e({ inputs: [n, a], backend: r })
            }
            const a = s.map((e) => e.dtype).reduce((e, t) => Ss(e, t)),
              i = s.map((e) => e.shape),
              o = ye().getBool('WEBGL_PACK')
                ? new w_(s[0].shape, i)
                : new x_(s[0].shape, i)
            return r.runWebGLProgram(o, s, a)
          },
      },
      k_ = {
        kernelName: Ce,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s } = t,
              { axis: a, keepDims: i } = r,
              o = s.shape.length,
              l = j(a, s.shape)
            let u = l
            const c = Al(u, o)
            let h = s
            null != c &&
              ((h = i_({ inputs: { x: s }, backend: n, attrs: { perm: c } })),
              (u = Fl(u.length, o))),
              Rl('all', u, o)
            const [p, d] = $l(h.shape, u),
              f = YA({
                inputs: { x: h },
                backend: n,
                attrs: { shape: [-1, P(d)] },
              }),
              m = e_(f, f.dtype, 'all', n)
            let g
            return (
              (g = YA(
                i
                  ? { inputs: { x: m }, backend: n, attrs: { shape: El(p, l) } }
                  : { inputs: { x: m }, backend: n, attrs: { shape: p } },
              )),
              n.disposeIntermediateTensorInfo(f),
              n.disposeIntermediateTensorInfo(m),
              null != c && n.disposeIntermediateTensorInfo(h),
              g
            )
          },
      },
      I_ = {
        kernelName: $e,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s } = t,
              { axis: a, keepDims: i } = r,
              o = s.shape.length,
              l = j(a, s.shape)
            let u = l
            const c = Al(u, o)
            let h = s
            null != c &&
              ((h = i_({ inputs: { x: s }, backend: n, attrs: { perm: c } })),
              (u = Fl(u.length, o))),
              Rl('any', u, o)
            const [p, d] = $l(h.shape, u),
              f = YA({
                inputs: { x: h },
                backend: n,
                attrs: { shape: [-1, P(d)] },
              }),
              m = e_(f, f.dtype, 'any', n)
            let g
            return (
              (g = YA(
                i
                  ? { inputs: { x: m }, backend: n, attrs: { shape: El(p, l) } }
                  : { inputs: { x: m }, backend: n, attrs: { shape: p } },
              )),
              n.disposeIntermediateTensorInfo(f),
              n.disposeIntermediateTensorInfo(m),
              null != c && n.disposeIntermediateTensorInfo(h),
              g
            )
          },
      }
    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class N_ {
      constructor(e, t, n) {
        this.variableNames = ['A']
        const { windowSize: r, batchSize: s, outSize: a } = e
        n || this.variableNames.push('bestIndicesA'),
          (this.outputShape = [s, a])
        const i = 'max' === t ? '>' : '<',
          o = n
            ? 'inOffset + i;'
            : 'round(getBestIndicesA(batch, inOffset + i));'
        this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${o};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${i} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `
      }
    }
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class S_ {
      constructor(e, t, n, r) {
        ;(this.variableNames = ['A']),
          (this.packedInputs = !0),
          (this.packedOutput = !0),
          O(
            e.length > 2,
            () =>
              `Packed arg${n.charAt(0).toUpperCase() + n.slice(1)} supports only inputs with rank above 2.`,
          )
        const s = e[e.length - 1],
          a = Math.ceil(s / t)
        ;(this.outputShape = e.slice(0, -1)),
          a > 1 && this.outputShape.push(a),
          r || this.variableNames.push('bestIndicesA')
        const i = this.outputShape,
          o = i.length,
          l = XE(o),
          u = lA('coords', o)
        let c, h
        if (1 === a) {
          h = o + 1
          const e = XE(h)
          c = `\n        ${e} sourceLocR = ${e}(${u.join()}, 0);\n        ++${u[o - 1]};\n        ${e} sourceLocG = ${e}(${u.join()}, 0);\n        ++${u[o - 2]};\n        ${e} sourceLocA = ${e}(${u.join()}, 0);\n        --${u[o - 1]};\n        ${e} sourceLocB = ${e}(${u.join()}, 0);\n        --${u[o - 2]};`
        } else
          (h = o),
            (c = `\n        ${l} sourceLocR = coords;\n        ++${u[o - 1]};\n        ${l} sourceLocG = coords;\n        ++${u[o - 2]};\n        ${l} sourceLocA = coords;\n        --${u[o - 1]};\n        ${l} sourceLocB = coords;\n        --${u[o - 2]};`)
        const p = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, h),
          d = '.' + p[h - 1],
          f = p.map((e) => 'int ' + e),
          m = lA('sourceLocR', h - 1).concat('inIdx.r'),
          g = lA('sourceLocG', h - 1).concat('inIdx.g'),
          y = lA('sourceLocB', h - 1).concat('inIdx.b'),
          b = lA('sourceLocA', h - 1).concat('inIdx.a'),
          x = 'max' === n ? 'greaterThan' : 'lessThan',
          w = r
            ? ''
            : `\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,
          v = `vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${y.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,
          k = r
            ? ''
            : `\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${p.join()}),\n                                          vec2(${p.slice(-2).join()}));\n      }`
        this.userCode = `\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${p.join()}),\n                               vec2(${p.slice(-2).join()}));\n      }\n      ${k}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${u[o - 1]} < ${i[o - 1] - 1};\n        bool hasNextRow = ${u[o - 2]} < ${i[o - 2] - 1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${d}, sourceLocG${d},\n          sourceLocB${d}, sourceLocA${d}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${v};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${v};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function T_(e, t, n, r = null) {
      let s = t.shape[0],
        a = t.shape[1]
      null != r && ((s = r.shape[0]), (a = r.shape[1]))
      const i = Wp(a),
        o = {
          windowSize: i,
          inSize: a,
          batchSize: s,
          outSize: Math.ceil(a / i),
        },
        l = new N_(o, n, null == r),
        u = [t]
      null != r && u.push(r)
      const c = e.runWebGLProgram(l, u, 'int32')
      if (1 === c.shape[1]) return c
      const h = T_(e, t, n, c)
      return e.disposeIntermediateTensorInfo(c), h
    }
    function C_(e, t, n, r = null) {
      const s = null != r ? r.shape : t.shape,
        a = Wp(s[s.length - 1]),
        i = new S_(s, a, n, null == r),
        o = null == r ? [t] : [t, r],
        l = e.runWebGLProgram(i, o, 'int32')
      if (l.shape.length === t.shape.length) {
        const r = C_(e, t, n, l)
        return e.disposeIntermediateTensorInfo(l), r
      }
      return l
    }
    function $_(e, t, n, r) {
      const s = [n]
      if (
        (Rl('arg' + r.charAt(0).toUpperCase() + r.slice(1), s, t.shape.length),
        !ye().getBool('WEBGL_PACK_REDUCE') || t.shape.length <= 2)
      ) {
        const n = [],
          a = e.texData.get(t.dataId)
        let i = t
        null !== a && a.isPacked && ((i = e.unpackTensor(t)), n.push(i))
        const [o, l] = $l(i.shape, s),
          u = P(l),
          c = YA({ inputs: { x: i }, backend: e, attrs: { shape: [-1, u] } })
        n.push(c)
        const h = T_(e, c, r)
        n.push(h)
        const p = YA({ inputs: { x: h }, backend: e, attrs: { shape: o } })
        return n.forEach((t) => e.disposeIntermediateTensorInfo(t)), p
      }
      return C_(e, t, r)
    }
    const E_ = {
        kernelName: Ee,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s } = t,
              { axis: a } = r
            let i = j(a, s.shape)
            const o = Al(i, s.shape.length)
            let l = s
            const u = []
            null != o &&
              ((l = i_({ inputs: { x: s }, backend: n, attrs: { perm: o } })),
              u.push(l),
              (i = Fl(i.length, l.shape.length))),
              Rl('argMax', [i[0]], l.shape.length)
            const c = $_(n, l, i[0], 'max')
            return u.forEach((e) => n.disposeIntermediateTensorInfo(e)), c
          },
      },
      R_ = {
        kernelName: Re,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s } = t,
              { axis: a } = r
            let i = j(a, s.shape)
            const o = Al(i, s.shape.length)
            let l = s
            const u = []
            null != o &&
              ((l = i_({ inputs: { x: s }, backend: n, attrs: { perm: o } })),
              u.push(l),
              (i = Fl(i.length, l.shape.length))),
              Rl('argMin', [i[0]], l.shape.length)
            const c = $_(n, l, i[0], 'min')
            return u.forEach((e) => n.disposeIntermediateTensorInfo(e)), c
          },
      },
      A_ = VA({
        opSnippet:
          gA +
          '\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n',
      }),
      __ = { kernelName: Ae, backendName: 'webgl', kernelFunc: A_ },
      F_ = VA({ opSnippet: gA + 'return log(x + sqrt(x * x + 1.0));' }),
      D_ = { kernelName: _e, backendName: 'webgl', kernelFunc: F_ },
      O_ = VA({ opSnippet: gA + '\n  return atan(x);\n' }),
      M_ = { kernelName: Fe, backendName: 'webgl', kernelFunc: O_ },
      L_ = UA({
        opSnippet: CA + '\n  return atan(a, b);\n',
        packedOpSnippet:
          '\n  vec4 result = atan(a, b);\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  ' +
          EA +
          '\n  return result;\n',
      }),
      z_ = { kernelName: Oe, backendName: 'webgl', kernelFunc: L_ },
      P_ = VA({
        opSnippet:
          gA +
          '\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;',
      }),
      B_ = { kernelName: De, backendName: 'webgl', kernelFunc: P_ }
    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class W_ {
      constructor(e, t, n, r = !1, s = !1) {
        if (((this.variableNames = ['x']), 'avg' === t && n))
          throw new Error('Cannot compute positions for average pool.')
        const a = e.filterWidth,
          i = e.strideHeight,
          o = e.strideWidth,
          l = e.dilationHeight,
          u = e.dilationWidth,
          c = e.effectiveFilterHeight,
          h = e.effectiveFilterWidth,
          p = e.padInfo.top,
          d = e.padInfo.left
        this.outputShape = e.outShape
        const f = 'avg' === t,
          m = `((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,
          g = `(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`
        let y = '0.0'
        if ((f || (y = '-1.0 / 1e-20'), n)) {
          const t = '>='
          return void (this.userCode = `\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${p}, ${d});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${u}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r ? (s ? m : g) : `wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)
        }
        let b = `${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`
        'avg' === t && (b = 'avgValue / count')
        const x = 4 * Math.floor(a / 4),
          w = a % 4,
          v = `\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `
        this.userCode = `\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${p}, ${d});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${u};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              getValue(batch, xR, xC + 3 * ${u}, d)\n            );\n\n            ${v}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1 === w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${2 === w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${3 === w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              initializationValue\n            );\n\n            ${v}\n          }\n        }\n        setOutput(${b});\n      }\n    `
      }
    }
    class V_ {
      constructor(e, t, n, r = !1, s = !1) {
        if (((this.variableNames = ['x']), 'avg' === t && n))
          throw new Error('Cannot compute positions for average pool.')
        const a = e.filterWidth,
          i = e.strideDepth,
          o = e.strideHeight,
          l = e.strideWidth,
          u = e.dilationDepth,
          c = e.dilationHeight,
          h = e.dilationWidth,
          p = e.effectiveFilterDepth,
          d = e.effectiveFilterHeight,
          f = e.effectiveFilterWidth,
          m = e.padInfo.front,
          g = e.padInfo.top,
          y = e.padInfo.left
        this.outputShape = e.outShape
        const b = 'avg' === t
        let x = '0.0'
        if ((b || (x = '-1.0 / 1e-20'), n)) {
          const t = '>='
          return void (this.userCode = `\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${l});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${u}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${d};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r ? (s ? `(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch` : `((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`) : `wD * ${d} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)
        }
        let w = `${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`
        'avg' === t && (w = 'avgValue / count')
        const v = 4 * Math.floor(a / 4),
          k = a % 4,
          I = `\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `
        this.userCode = `\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${l});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${u}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${v}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${I}\n            }\n\n            int xC = xCCorner + ${v};\n            if (${1 === k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${2 === k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${3 === k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${I}\n            }\n          }\n          setOutput(${w});\n        }\n      }\n    `
      }
    }
    const U_ = {
        kernelName: Me,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s } = t
            _E(s, 'avgPool')
            const { filterSize: a, strides: i, pad: o, dimRoundingMode: l } = r
            O(
              To(i, 1),
              () =>
                `Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`,
            )
            const u = go(s.shape, a, i, 1, o, l)
            if (
              1 === u.filterWidth &&
              1 === u.filterHeight &&
              B(u.inShape, u.outShape)
            )
              return AA({ inputs: { x: s }, backend: n })
            const c = new W_(u, 'avg', !1)
            return n.runWebGLProgram(c, [s], 'float32')
          },
      },
      G_ = {
        kernelName: ze,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s } = t,
              {
                filterSize: a,
                strides: i,
                pad: o,
                dimRoundingMode: l,
                dataFormat: u,
              } = r,
              c = yo(s.shape, a, i, [1, 1, 1], o, l, u),
              h = new V_(c, 'avg', !1)
            return n.runWebGLProgram(h, [s], 'float32')
          },
      }
    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class H_ {
      constructor(e) {
        ;(this.variableNames = ['dy']), (this.outputShape = e.inShape)
        const t = e.filterHeight,
          n = e.filterWidth,
          r = e.strideHeight,
          s = e.strideWidth,
          a = e.dilationHeight,
          i = e.dilationWidth,
          o = e.effectiveFilterHeight,
          l = e.effectiveFilterWidth,
          u = o - 1 - e.padInfo.top,
          c = l - 1 - e.padInfo.left,
          h = 1 / (t * n)
        this.userCode = `\n      const ivec2 pads = ivec2(${u}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n            wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${l};\n            wC+= ${i}) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `
      }
    }
    class j_ {
      constructor(e) {
        ;(this.variableNames = ['dy']), (this.outputShape = e.inShape)
        const t = e.filterDepth,
          n = e.filterHeight,
          r = e.filterWidth,
          s = e.strideDepth,
          a = e.strideHeight,
          i = e.strideWidth,
          o = e.dilationDepth,
          l = e.dilationHeight,
          u = e.dilationWidth,
          c = e.effectiveFilterDepth,
          h = e.effectiveFilterHeight,
          p = e.effectiveFilterWidth,
          d = c - 1 - e.padInfo.front,
          f = h - 1 - e.padInfo.top,
          m = p - 1 - e.padInfo.left,
          g = 1 / (t * n * r)
        this.userCode = `\n      const ivec3 pads = ivec3(${d}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${s}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${l}) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${u}) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `
      }
    }
    const q_ = {
        kernelName: Pe,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { dy: s, input: a } = t,
              i = a,
              { filterSize: o, strides: l, pad: u, dimRoundingMode: c } = r,
              h = yo(i.shape, o, l, [1, 1, 1], u, c),
              p = new j_(h)
            return n.runWebGLProgram(p, [s], i.dtype)
          },
      },
      K_ = {
        kernelName: Le,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { dy: s, input: a } = t,
              i = a
            _E([s, a], 'avgPoolGrad')
            const { filterSize: o, strides: l, pad: u } = r,
              c = go(i.shape, o, l, 1, u),
              h = new H_(c)
            return n.runWebGLProgram(h, [s], i.dtype)
          },
      },
      X_ = {
        kernelName: Be,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { a: s, b: a } = t,
              { transposeA: i, transposeB: o } = r
            return l_({ a: s, b: a, transposeA: i, transposeB: o, backend: n })
          },
      }
    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Y_ {
      constructor(e, t, n, r, s, a) {
        ;(this.outputShape = []),
          (this.variableNames = ['x', 'mean', 'variance']),
          xi(e, t),
          xi(e, n)
        let i = '0.0'
        null != r &&
          (xi(e, r),
          this.variableNames.push('offset'),
          (i = 'getOffsetAtOutCoords()'))
        let o = '1.0'
        null != s &&
          (xi(e, s),
          this.variableNames.push('scale'),
          (o = 'getScaleAtOutCoords()')),
          (this.outputShape = e),
          (this.userCode = `\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `)
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Z_ {
      constructor(e, t, n, r, s, a) {
        ;(this.packedInputs = !0),
          (this.packedOutput = !0),
          (this.variableNames = ['x', 'mean', 'variance']),
          xi(e, t),
          xi(e, n)
        let i = 'vec4(0.0)'
        null != r &&
          (xi(e, r),
          this.variableNames.push('offset'),
          (i = 'getOffsetAtOutCoords()'))
        let o = 'vec4(1.0)'
        null != s &&
          (xi(e, s),
          this.variableNames.push('scale'),
          (o = 'getScaleAtOutCoords()')),
          (this.outputShape = e),
          (this.userCode = `\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `)
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const J_ = {
      kernelName: Rt,
      backendName: 'webgl',
      kernelFunc: ({ inputs: e, backend: t, attrs: n }) => {
        const { x: r, mean: s, variance: a, offset: i, scale: o } = e
        O(
          s.shape.length === a.shape.length,
          () =>
            'Batch normalization gradient requires mean and variance to have equal ranks.',
        ),
          O(
            null == i || s.shape.length === i.shape.length,
            () =>
              'Batch normalization gradient requires mean and offset to have equal ranks.',
          ),
          O(
            null == o || s.shape.length === o.shape.length,
            () =>
              'Batch normalization gradient requires mean and scale to have equal ranks.',
          )
        let { varianceEpsilon: l } = n
        null == l && (l = 0.001)
        const u = [r, s, a]
        let c = null
        null != i && ((c = i.shape), u.push(i))
        let h = null
        null != o && ((h = o.shape), u.push(o))
        const p = ye().getBool('WEBGL_PACK_NORMALIZATION')
          ? new Z_(r.shape, s.shape, a.shape, c, h, l)
          : new Y_(r.shape, s.shape, a.shape, c, h, l)
        return t.runWebGLProgram(p, u, u[0].dtype)
      },
    }
    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class Q_ {
      constructor(e) {
        ;(this.variableNames = ['source']),
          (this.outputShape = e),
          (this.rank = e.length)
        const t = XE(this.rank)
        this.customUniforms = [
          { name: 'start', arrayIndex: this.rank, type: 'int' },
        ]
        const n = (function (e) {
          if (1 === e) return 'sourceLoc'
          if (e <= 6)
            return eF
              .slice(0, e)
              .map((e) => 'sourceLoc.' + e)
              .join(',')
          throw Error(`Slicing for rank ${e} is not yet supported`)
        })(this.rank)
        let r
        ;(r = `\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map((e, t) => `sourceLoc.${eF[t]} = start[${t}] + coords.${eF[t]};`).join('\n')}\n      `),
          (this.userCode = `\n      void main() {\n        ${r}\n        setOutput(getSource(${n}));\n      }\n    `)
      }
    }
    const eF = ['x', 'y', 'z', 'w', 'u', 'v']
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class tF {
      constructor(e) {
        ;(this.variableNames = ['source']),
          (this.packedInputs = !0),
          (this.packedOutput = !0),
          (this.outputShape = e),
          (this.rank = e.length),
          (this.customUniforms = [
            { name: 'start', arrayIndex: this.rank, type: 'int' },
          ])
        const t = XE(this.rank),
          n = lA('coords', this.rank),
          r = lA('sourceLoc', this.rank),
          s = 1 === this.rank ? 'sourceLoc' : `vec2(${r.slice(-2).join()})`,
          a = `getChannel(getSource(${r.join()}), ${s})`,
          i = `\n      result.x = ${a};\n      if (++${n[this.rank - 1]} < ${e[this.rank - 1]}) {\n        ++${r[this.rank - 1]};\n        result.y = ${a};\n        --${r[this.rank - 1]};\n      }\n    `,
          o =
            1 === this.rank
              ? ''
              : `\n      --${n[this.rank - 1]};\n      if (++${n[this.rank - 2]} < ${e[this.rank - 2]}) {\n        ++${r[this.rank - 2]};\n        result.z = ${a};\n        if (++${n[this.rank - 1]} < ${e[this.rank - 1]}) {\n          ++${r[this.rank - 1]};\n          result.w = ${a};\n        }\n      }\n    `,
          l =
            this.rank <= 4
              ? `sourceLoc = coords +\n            ${t}(${e.map((e, t) => `start[${t}]`).join()});`
              : e.map((e, t) => `${r[t]} = ${n[t]} + start[${t}];`).join('\n')
        this.userCode = `\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `
      }
    }
    function nF(e) {
      const { inputs: t, backend: n, attrs: r } = e,
        { x: s } = t,
        { begin: a, size: i } = r,
        [o, l] = Pi(s, a, i)
      if ((Si(s, o, l), 0 === P(l))) return n.makeTensorInfo(l, s.dtype, [])
      if (n.shouldExecuteOnCPU([s]) || 'string' === s.dtype) {
        const e = n.texData.get(s.dataId),
          t = qR(e.values, o, l, s.shape, s.dtype)
        return n.makeTensorInfo(l, s.dtype, t)
      }
      const { isPacked: u } = n.texData.get(s.dataId),
        c = Li(s.shape, o, l)
      if (u || !c) {
        const e = ye().getBool('WEBGL_PACK_ARRAY_OPERATIONS')
            ? new tF(l)
            : new Q_(l),
          t = [o]
        return n.runWebGLProgram(e, [s], s.dtype, t)
      }
      return (
        n.uploadToGPU(s.dataId),
        /**
         * @license
         * Copyright 2020 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        (function (e, t, n, r) {
          const s = r.texData.get(e.dataId),
            a = r.makeTensorInfo(n, e.dtype),
            i = r.texData.get(a.dataId)
          Object.assign(i, s),
            (i.refCount = 1),
            (i.shape = n),
            (i.dtype = e.dtype)
          let o = zi(t, se(e.shape))
          s.slice && (o += s.slice.flatOffset),
            (i.slice = {
              flatOffset: o,
              origDataId: (s.slice && s.slice.origDataId) || e.dataId,
            })
          const l = r.dataRefCount.get(i.slice.origDataId) || 1
          return r.dataRefCount.set(i.slice.origDataId, l + 1), a
        })(s, o, l, n)
      )
    }
    const rF = { kernelName: Gn, backendName: 'webgl', kernelFunc: nF },
      sF = {
        kernelName: We,
        backendName: 'webgl',
        kernelFunc: (e) => {
          const { inputs: t, backend: n, attrs: r } = e,
            { x: s } = t,
            { blockShape: a, crops: i } = r
          O(
            s.shape.length <= 4,
            () =>
              'batchToSpaceND for rank > 4 with a WebGL backend not implemented yet',
          )
          const o = a.reduce((e, t) => e * t),
            l = Up(s.shape, a, o),
            u = Gp(l.length, a.length),
            c = Hp(s.shape, a, o),
            h = jp(i, a.length),
            p = qp(c, i, a.length),
            d = [],
            f = YA({ inputs: { x: s }, backend: n, attrs: { shape: l } }),
            m = i_({ inputs: { x: f }, backend: n, attrs: { perm: u } }),
            g = YA({ inputs: { x: m }, backend: n, attrs: { shape: c } }),
            y = nF({
              inputs: { x: g },
              backend: n,
              attrs: { begin: h, size: p },
            })
          return (
            d.push(f),
            d.push(m),
            d.push(g),
            d.forEach((e) => n.disposeIntermediateTensorInfo(e)),
            y
          )
        },
      },
      aF = {
        kernelName: Ve,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s, weights: a } = t,
              { size: i } = r,
              o = n.readSync(s.dataId),
              l = n.readSync(a.dataId),
              u = gR(o, l, a.dtype, a.shape, i)
            return n.makeTensorInfo([i], a.dtype, u)
          },
      },
      iF = {
        kernelName: Ue,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2021 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n } = e,
              { s0: r, s1: s } = t,
              a = n.readSync(r.dataId),
              i = n.readSync(s.dataId),
              o = xi(Array.from(a), Array.from(i))
            return n.makeTensorInfo([o.length], 'int32', Int32Array.from(o))
          },
      },
      oF = UA({
        opSnippet: 'return float(a != b);',
        cpuKernelImpl: zR,
        dtype: 'bool',
      }),
      lF = { kernelName: fn, backendName: 'webgl', kernelFunc: oF }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function uF(e) {
      const { inputs: t, backend: n } = e,
        { input: r } = t
      return AA({
        inputs: { x: n.texData.get(r.dataId).complexTensorInfos.real },
        backend: n,
      })
    }
    const cF = { kernelName: $n, backendName: 'webgl', kernelFunc: uF },
      hF = {
        kernelName: Ge,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function e(t) {
            const { inputs: n, backend: r, attrs: s } = t,
              { x: a } = n,
              { dtype: i } = s
            if ('complex64' === i) {
              if ('complex64' === a.dtype)
                return AA({ inputs: { x: a }, backend: r })
              const t = Cu(a.shape),
                n = e({
                  inputs: { x: a },
                  backend: r,
                  attrs: { dtype: 'float32' },
                }),
                s = FA({ inputs: { real: n, imag: t }, backend: r })
              return t.dispose(), r.disposeIntermediateTensorInfo(n), s
            }
            if ('complex64' === a.dtype) {
              const t = uF({ inputs: { input: a }, backend: r }),
                n = e({ inputs: { x: t }, backend: r, attrs: { dtype: i } })
              return r.disposeIntermediateTensorInfo(t), n
            }
            if (!Y(a.dtype, i)) {
              const e = AA({ inputs: { x: a }, backend: r })
              return { dataId: e.dataId, shape: e.shape, dtype: i }
            }
            if (r.shouldExecuteOnCPU([a])) {
              const e = r.texData.get(a.dataId).values,
                [t, n, s] = bR(e, a.shape, a.dtype, i)
              return r.makeTensorInfo(t, n, s)
            }
            if ('int32' === i)
              return (function (e, t) {
                const n = new mA(e.shape, 'return float(int(x));'),
                  r = t.runWebGLProgram(n, [e], 'int32')
                return { dataId: r.dataId, shape: r.shape, dtype: r.dtype }
              })(a, r)
            if ('bool' === i) {
              const e = r.makeTensorInfo([], 'bool', K('bool', 1)),
                t = oF({ inputs: { a: a, b: e }, backend: r })
              return r.disposeIntermediateTensorInfo(e), t
            }
            throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${i}`)
          },
      },
      pF = 'return ceil(x);',
      dF = VA({ opSnippet: pF, packedOpSnippet: pF, cpuKernelImpl: xR }),
      fF = { kernelName: He, backendName: 'webgl', kernelFunc: dF }
    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class mF {
      constructor(e) {
        ;(this.variableNames = ['A']),
          (this.customUniforms = [
            { name: 'minVal', type: 'float' },
            { name: 'maxVal', type: 'float' },
          ]),
          (this.outputShape = e),
          (this.userCode =
            '\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    ')
        /**
         * @license
         * Copyright 2018 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
      }
    }
    class gF {
      constructor(e) {
        ;(this.variableNames = ['A']),
          (this.packedInputs = !0),
          (this.packedOutput = !0),
          (this.customUniforms = [
            { name: 'minVal', type: 'float' },
            { name: 'maxVal', type: 'float' },
          ]),
          (this.outputShape = e),
          (this.userCode =
            '\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    ')
      }
    }
    const yF = {
      kernelName: je,
      backendName: 'webgl',
      kernelFunc:
        /**
         * @license
         * Copyright 2020 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (e) {
          const { inputs: t, backend: n, attrs: r } = e,
            { x: s } = t,
            { clipValueMin: a, clipValueMax: i } = r
          let o
          o = ye().getBool('WEBGL_PACK_CLIP')
            ? new gF(s.shape)
            : new mF(s.shape)
          const l = [[a], [i]]
          return n.runWebGLProgram(o, [s], s.dtype, l)
        },
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class bF {
      constructor(e) {
        ;(this.variableNames = ['real', 'imag']),
          (this.outputShape = e),
          (this.userCode =
            '\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    ')
        /**
         * @license
         * Copyright 2020 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
      }
    }
    function xF(e, t) {
      return { dataId: t.dataId, dtype: t.dtype, shape: e.shape }
    }
    const wF = {
      kernelName: Ke,
      backendName: 'webgl',
      kernelFunc: function (e) {
        const { inputs: t, backend: n } = e,
          { x: r } = t,
          s = n.texData.get(r.dataId),
          a = new bF(r.shape),
          i = [
            xF(r, s.complexTensorInfos.real),
            xF(r, s.complexTensorInfos.imag),
          ]
        return n.runWebGLProgram(a, i, i[0].dtype)
      },
    }
    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class vF {
      constructor(e) {
        ;(this.outputShape = []),
          (this.outputShape = Dp(e, 1)),
          (this.variableNames = e.map((e, t) => `T${t}`))
        const t = new Array(e.length - 1)
        t[0] = e[0][1]
        for (let n = 1; n < t.length; n++) t[n] = t[n - 1] + e[n][1]
        const n = [`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`]
        for (let e = 1; e < t.length; e++) {
          const r = t[e - 1]
          n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${r}));`)
        }
        const r = t.length,
          s = t[t.length - 1]
        n.push(`else setOutput(getT${r}(yR, yC-${s}));`),
          (this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join('\n        ')}\n      }\n    `)
      }
    }
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class kF {
      constructor(e, t) {
        ;(this.packedInputs = !0),
          (this.packedOutput = !0),
          (this.outputShape = []),
          (this.outputShape = Dp(e, t))
        const n = this.outputShape,
          r = n.length,
          s = XE(r),
          a = lA('coords', r),
          i = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, r)
        this.variableNames = e.map((e, t) => `T${t}`)
        const o = new Array(e.length - 1)
        o[0] = e[0][t]
        for (let n = 1; n < o.length; n++) o[n] = o[n - 1] + e[n][t]
        const l = i[t],
          u = i.slice(-2),
          c = i.join()
        let h = `if (${l} < ${o[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${u.join()}));\n        }`
        for (let e = 1; e < o.length; e++) {
          const t = o[e - 1]
          h += `\n        if (${l} < ${o[e]}  && ${l} >= ${o[e - 1]}) {\n          return getChannel(\n            getT${e}(${IF(i, l, t)}),\n            vec2(${IF(u, l, t)}));\n        }`
        }
        const p = o.length,
          d = o[o.length - 1]
        ;(h += `\n        return getChannel(\n          getT${p}(${IF(i, l, d)}),\n          vec2(${IF(u, l, d)}));`),
          (this.userCode = `\n      float getValue(${i.map((e) => 'int ' + e)}) {\n        ${h}\n      }\n\n      void main() {\n        ${s} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[r - 1]} = ${a[r - 1]} + 1;\n        if (${a[r - 1]} < ${n[r - 1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[r - 2]} = ${a[r - 2]} + 1;\n        if (${a[r - 2]} < ${n[r - 2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[r - 1]} = ${a[r - 1]} - 1;\n        if (${a[r - 2]} < ${n[r - 2]} &&\n            ${a[r - 1]} < ${n[r - 1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `)
      }
    }
    function IF(e, t, n) {
      const r = e.indexOf(t)
      return e.map((e, t) => (t === r ? `${e} - ${n}` : e)).join()
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function NF(e) {
      const { inputs: t, backend: n } = e,
        { input: r } = t
      return AA({
        inputs: { x: n.texData.get(r.dataId).complexTensorInfos.imag },
        backend: n,
      })
    }
    const SF = { kernelName: Lt, backendName: 'webgl', kernelFunc: NF }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function TF(e, t, n) {
      const r = e[0].dtype
      if ('complex64' === r) {
        const r = e.map((e) => uF({ inputs: { input: e }, backend: n })),
          s = e.map((e) => NF({ inputs: { input: e }, backend: n })),
          a = TF(r, t, n),
          i = TF(s, t, n),
          o = FA({ inputs: { real: a, imag: i }, backend: n })
        return (
          r.forEach((e) => n.disposeIntermediateTensorInfo(e)),
          s.forEach((e) => n.disposeIntermediateTensorInfo(e)),
          n.disposeIntermediateTensorInfo(a),
          n.disposeIntermediateTensorInfo(i),
          o
        )
      }
      let s = n.shouldExecuteOnCPU(e)
      if (('string' === r && (s = !0), s)) {
        const s = e.map((e) => {
            const r = P(e.shape.slice(t))
            return YA({
              inputs: { x: e },
              backend: n,
              attrs: { shape: [-1, r] },
            })
          }),
          a = s.map((e) => ({ vals: n.readSync(e.dataId), shape: e.shape })),
          i = Dp(
            s.map((e) => e.shape),
            1,
          ),
          o = 1 === s[0].shape[0],
          l = wR(a, i, r, o),
          u = Dp(
            e.map((e) => e.shape),
            t,
          ),
          c = n.makeTensorInfo(u, r, l)
        return s.forEach((e) => n.disposeIntermediateTensorInfo(e)), c
      }
      const a = ye().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER')
      if (e.length > a) {
        const r = []
        for (let s = 0; s < e.length; s += a) {
          const i = e.slice(s, s + a)
          r.push(TF(i, t, n))
        }
        const s = TF(r, t, n)
        for (const e of r) n.disposeIntermediateTensorInfo(e)
        return s
      }
      if (
        ye().getBool('WEBGL_PACK_ARRAY_OPERATIONS') &&
        e[0].shape.length > 1
      ) {
        const s = new kF(
          e.map((e) => e.shape),
          t,
        )
        return n.runWebGLProgram(s, e, r)
      }
      const { tensors2D: i, outShape: o } = (function (e, t, n) {
          const r = Dp(
              e.map((e) => e.shape),
              t,
            ),
            s = e.map((e) =>
              YA({
                inputs: { x: e },
                attrs: { shape: [-1, P(e.shape.slice(t))] },
                backend: n,
              }),
            )
          return { tensors2D: s, outShape: r }
        })(e, t, n),
        l = new vF(i.map((e) => e.shape)),
        u = n.runWebGLProgram(l, i, r)
      i.forEach((e) => n.disposeIntermediateTensorInfo(e))
      const c = YA({ inputs: { x: u }, attrs: { shape: o }, backend: n })
      return n.disposeIntermediateTensorInfo(u), c
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function CF(e) {
      const { inputs: t, backend: n, attrs: r } = e,
        { axis: s } = r,
        a = j(s, t[0].shape)[0]
      Fp(
        t.map((e) => e.shape),
        a,
      )
      const i = Dp(
        t.map((e) => e.shape),
        a,
      )
      if (0 === P(i)) return n.makeTensorInfo(i, t[0].dtype, [])
      const o = t.filter((e) => P(e.shape) > 0)
      return 1 === o.length
        ? AA({ inputs: { x: o[0] }, backend: n })
        : TF(o, a, n)
    }
    const $F = { kernelName: Xe, backendName: 'webgl', kernelFunc: CF }
    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class EF {
      constructor(e, t = !1, n = null, r = !1, s = !1) {
        ;(this.variableNames = ['x', 'W']), (this.outputShape = e.outShape)
        const a = e.padInfo.top,
          i = e.padInfo.left,
          o = e.strideHeight,
          l = e.strideWidth,
          u = e.dilationHeight,
          c = e.dilationWidth,
          h = e.filterHeight,
          p = e.filterWidth,
          d = 4 * Math.floor(e.inChannels / 4),
          f = e.inChannels % 4,
          m = 'channelsLast' === e.dataFormat,
          g = m ? 1 : 2,
          y = m ? 2 : 3,
          b = m ? 3 : 1
        let x = '',
          w = ''
        n &&
          ((x = r
            ? `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`
            : s
              ? `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`
              : `\n          float activation(float x) {\n            ${n}\n          }\n        `),
          (w = 'result = activation(result);'))
        const v = t ? 'result += getBiasAtOutCoords();' : ''
        t && this.variableNames.push('bias'),
          r && this.variableNames.push('preluActivationWeights'),
          s && this.variableNames.push('leakyreluAlpha'),
          (this.userCode = `\n      ${x}\n\n      const ivec2 strides = ivec2(${o}, ${l});\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${h}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${d}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1 === f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${d}) *\n                    getW(wR, wC, ${d}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${d}, xR, xC) *\n                    getW(wR, wC, ${d}, d2);\n              }\n\n            } else if (${2 === f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3 === f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2),\n                getW(wR, wC, ${d} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1),\n                  getX(batch, xR, xC, ${d} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC),\n                  getX(batch, ${d} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${v}\n        ${w}\n        setOutput(result);\n      }\n    `)
      }
    }
    class RF {
      constructor(e) {
        ;(this.variableNames = ['x', 'W']), (this.outputShape = e.outShape)
        const t = e.padInfo.front,
          n = e.padInfo.top,
          r = e.padInfo.left,
          s = e.strideDepth,
          a = e.strideHeight,
          i = e.strideWidth,
          o = e.dilationDepth,
          l = e.dilationHeight,
          u = e.dilationWidth,
          c = e.filterDepth,
          h = e.filterHeight,
          p = e.filterWidth,
          d = 4 * Math.floor(e.inChannels / 4),
          f = e.inChannels % 4
        this.userCode = `\n      const ivec3 strides = ivec3(${s}, ${a}, ${i});\n      const ivec3 pads = ivec3(${t}, ${n}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${u};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${d}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1 === f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${d}) *\n                  getW(wF, wR, wC, ${d}, d2);\n              } else if (${2 === f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3 === f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1),\n                  getX(batch, xF, xR, xC, ${d} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2),\n                  getW(wF, wR, wC, ${d} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `
      }
    }
    /**
     * @license
     * Copyright 2022 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class AF {
      constructor(e, t = !1, n = null, r = !1, s = !1) {
        ;(this.variableNames = ['x', 'W']),
          (this.packedInputs = !0),
          (this.packedOutput = !0),
          (this.customUniforms = [
            { name: 'pads', type: 'ivec2' },
            { name: 'strides', type: 'ivec2' },
            { name: 'dilations', type: 'ivec2' },
            { name: 'inDims', type: 'ivec2' },
          ]),
          (this.outputShape = e.outShape),
          (this.enableShapeUniforms = tR(this.outputShape.length))
        const a = e.padInfo.left,
          i = e.strideWidth,
          o = e.dilationWidth,
          l = e.filterHeight,
          u = e.filterWidth,
          c = u
        let h =
          '\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;'
        for (let e = 0; e < u; e++)
          h += `\n           vec4 xTexelC${2 * e};\n           int xTexelC${2 * e}Ready;\n           vec4 xTexelC${2 * e + 1};\n           int xTexelC${2 * e + 1}Ready;\n           vec4 xC${e};`
        h += `\n     for (int r = 0; r < ${l}; r++) {\n      for (int d1 = 0; d1 < ${e.inChannels}; d1 += 2) {\n       `
        for (let e = 0; e < u; e++)
          h += `\n           xTexelC${2 * e} = vec4(0.0);\n           xTexelC${2 * e}Ready = 0;\n           xTexelC${2 * e + 1} = vec4(0.0);\n           xTexelC${2 * e + 1}Ready = 0;\n           xC${e} = vec4(0.0);`
        h +=
          '\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       '
        for (let t = 0; t < (c + 1) / 2; t++) {
          const n = 2 * t
          if (
            ((h += `\n           xC = xCCorner + ${n * o};\n           `),
            1 === i)
          ) {
            if (
              n < u &&
              (a % 2 == 1
                ? ((h += `\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n               `),
                  (h +=
                    1 === o && n > 0
                      ? `\n                 xC${n} = vec4(xTexelC${n - 2}.zw, xTexelC${n}.xy);\n                 `
                      : `\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${n} = vec4(previous.zw, xTexelC${n}.xy);\n                   } else {\n                     xC${n} = vec4(0.0, 0.0, xTexelC${n}.xy);\n                   }\n                   `))
                : (h += `\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 xC${n} = xTexelC${n};\n                 `),
              n + 1 < u)
            ) {
              const e = a % 2 == 0 ? F(o) : o
              ;(o % 2 == 0 && a % 2 == 1) || (o % 2 != 0 && a % 2 != 1)
                ? ((h += `\n                   xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n + 1}Ready == 0) {\n                     xTexelC${n + 1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${n + 1}.zw = vec2(0.0);\n                     }\n                     xTexelC${n + 1}Ready = 1;\n                   }\n                   `),
                  (h +=
                    o > 1
                      ? `\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${n + 1} = vec4(previous.zw, xTexelC${n + 1}.xy);\n                     } else {\n                      xC${n + 1} = vec4(0.0, 0.0, xTexelC${n + 1}.xy);\n                     }\n                     `
                      : `\n                     xC${n + 1} = vec4(xTexelC${n}.zw, xTexelC${n + 1}.xy);\n                     `))
                : (h +=
                    1 === e
                      ? `\n                     xC${n + 1} = xTexelC${n};\n                     `
                      : `\n                     xCOffset = xC + ${e};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n + 1}Ready == 0) {\n                       xTexelC${n + 1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${n + 1}.zw = vec2(0.0);\n                       }\n                       xTexelC${n + 1}Ready = 1;\n                     }\n\n                     xC${n + 1} = xTexelC${n + 1};\n                     `)
            }
          } else
            n < u &&
              (a % 2 == 1
                ? ((h += `\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${n + 1}Ready == 0) {\n                   xTexelC${n + 1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${n + 1}.zw = vec2(0.0);\n                   }\n                   xTexelC${n + 1}Ready = 1;\n                 }\n\n                 xC${n} = vec4(xTexelC${n}.zw, xTexelC${n + 1}.zw);\n               `),
                  n + 1 < u &&
                    (h += `\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${n + 1} = vec4(xTexelC${n + 1}.xy, final.xy);\n                 `))
                : ((h += `\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n + 1}Ready == 0) {\n                   xTexelC${n + 1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n + 1}.zw = vec2(0.);\n                   }\n                   xTexelC${n + 1}Ready = 1;\n                 }\n\n                 xC${n} = vec4(\n                   xTexelC${n}.xy, xTexelC${n + 1}.xy);\n               `),
                  n + 1 < u &&
                    (h += `\n                   xC${n + 1} = vec4(xTexelC${n}.zw, xTexelC${n + 1}.zw);\n                 `)))
          n < u &&
            ((h += `\n             wTexel = getW(r, ${n}, d1, d2);\n             dotProd += xC${n}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${e.inChannels}) {\n               dotProd += xC${n}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `),
            n + 1 < u &&
              (h += `\n               wTexel = getW(r, ${n + 1}, d1, d2);\n               dotProd += xC${n + 1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${e.inChannels}) {\n                 dotProd += xC${n + 1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `))
        }
        ;(h += '\n     }\n   '), (h += '\n     }\n   '), (h += '\n     }\n   ')
        let p = '',
          d = ''
        n &&
          ((p = r
            ? `vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${n}\n         }`
            : s
              ? `vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${n}\n         }`
              : `vec4 activation(vec4 x) {\n           ${n}\n         }`),
          (d = 'result = activation(result);'))
        const f = t ? 'result += getBiasAtOutCoords();' : ''
        t && this.variableNames.push('bias'),
          r && this.variableNames.push('preluActivationWeights'),
          s && this.variableNames.push('leakyreluAlpha'),
          (this.userCode = `\n       ${p}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${h}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${f}\n         ${d}\n         setOutput(result);\n       }\n     `)
      }
    }
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class _F {
      constructor(e, t) {
        ;(this.variableNames = ['A']),
          (this.packedInputs = !0),
          (this.packedOutput = !0),
          (this.customUniforms = [
            { name: 'inputShape', type: 'ivec4' },
            { name: 'pad', type: 'ivec2' },
            { name: 'stride', type: 'ivec2' },
            { name: 'dilation', type: 'ivec2' },
            { name: 'inChannels', type: 'int' },
            { name: 'itemsPerBlockRow', type: 'int' },
            { name: 'outWidth', type: 'int' },
          ]),
          (this.outputShape = e),
          (this.enableShapeUniforms = tR(this.outputShape.length))
        const { dataFormat: n } = t,
          r = DE(),
          s = 'channelsLast' === n,
          a = s ? 1 : 2,
          i = s ? 2 : 3,
          o = this.enableShapeUniforms
            ? 'if(blockIndex < outShape[2] && pos < outShape[1]) {'
            : `if(blockIndex < ${e[2]} && pos < ${e[1]}) {`
        let l = ''
        for (let e = 0; e <= 1; e++)
          for (let t = 0; t <= 1; t++)
            l += `\n          blockIndex = rc.z + ${t};\n          pos = rc.y + ${e};\n\n          ${o}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${a}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${i}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${s}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2 * e + t}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2 * e + t}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `
        this.userCode = `\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${l}\n\n        ${r.output} = result;\n      }\n    `
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function FF(e, t) {
      const n = e.length
      return n >= 3
        ? t
          ? [...e.slice(0, -3), e[n - 3] * e[n - 2], e[n - 1]]
          : [...e.slice(0, -3), e[n - 3], e[n - 2] * e[n - 1]]
        : !t && 1 === n && e[0] > 1
          ? [e[0], 1]
          : null
    }
    function DF({
      x: e,
      filter: t,
      convInfo: n,
      backend: r,
      bias: s = null,
      preluActivationWeights: a = null,
      leakyreluAlpha: i = 0,
      activation: o = null,
    }) {
      const l = e.shape,
        u = r.texData.get(e.dataId),
        c = n.inChannels,
        h = l[0] * l[1] * l[2],
        p = n.outChannels,
        d = 'channelsLast' === n.dataFormat,
        f = !1
      let m
      const g = []
      if (null != a) {
        const e = FF(a.shape, d)
        null != e &&
          ((a = YA({ inputs: { x: a }, backend: r, attrs: { shape: e } })),
          g.push(a))
      }
      if (null != s) {
        const e = FF(s.shape, d)
        null != e &&
          ((s = YA({ inputs: { x: s }, backend: r, attrs: { shape: e } })),
          g.push(s))
      }
      if (
        ((1 !== h && 1 !== p) || !(c > 1e3)) &&
        u.isPacked &&
        d &&
        null != u.texture &&
        l[2] % 2 != 0 &&
        B(u.shape.slice(-3), l.slice(-3))
      ) {
        const c = l[0] * l[1] * (l[2] + 1),
          h = { dataId: e.dataId, shape: [1, c, n.inChannels], dtype: e.dtype },
          p = u.shape
        ;(u.shape = u.shape.slice()),
          u.shape[u.shape.length - 2]++,
          O(
            TE(u.shape, h.shape),
            () => `packed reshape ${u.shape} to ${h.shape} isn't free`,
          )
        const d = YA({
          inputs: { x: t },
          backend: r,
          attrs: { shape: [1, n.inChannels, n.outChannels] },
        })
        g.push(d)
        const y = l_({
            a: h,
            b: d,
            backend: r,
            transposeA: !1,
            transposeB: f,
            bias: s,
            activation: o,
            preluActivationWeights: a,
            leakyreluAlpha: i,
          }),
          b = r.texData.get(y.dataId)
        O(b.isPacked, () => 'batchMatMul result is expected to be packed'),
          (u.shape = p),
          (b.shape = n.outShape),
          (m = AA({ inputs: { x: y }, backend: r })),
          (m.shape = n.outShape),
          g.push(y)
      } else {
        const l = n.outHeight * n.outWidth,
          u = YA({
            inputs: { x: e },
            backend: r,
            attrs: {
              shape: d
                ? [n.batchSize, l, n.inChannels]
                : [n.batchSize, n.inChannels, l],
            },
          }),
          c = YA({
            inputs: { x: t },
            backend: r,
            attrs: { shape: [1, n.inChannels, n.outChannels] },
          }),
          h = l_({
            a: d ? u : c,
            b: d ? c : u,
            transposeA: !d,
            transposeB: f,
            backend: r,
            bias: s,
            activation: o,
            preluActivationWeights: a,
            leakyreluAlpha: i,
          })
        ;(m = YA({
          inputs: { x: h },
          backend: r,
          attrs: { shape: n.outShape },
        })),
          g.push(u),
          g.push(c),
          g.push(h)
      }
      for (const e of g) r.disposeIntermediateTensorInfo(e)
      return m
    }
    function OF({
      x: e,
      filter: t,
      convInfo: n,
      backend: r,
      bias: s = null,
      preluActivationWeights: a = null,
      leakyreluAlpha: i = 0,
      activation: o = null,
    }) {
      const {
          filterWidth: l,
          filterHeight: u,
          inChannels: c,
          outWidth: h,
          outHeight: p,
          dataFormat: d,
        } = n,
        f = 'channelsLast' === d,
        m = l * u * c,
        g = p * h,
        y = [n.batchSize, m, g],
        b = []
      if (null != a) {
        const e = FF(a.shape, f)
        null != e &&
          ((a = YA({ inputs: { x: a }, backend: r, attrs: { shape: e } })),
          b.push(a))
      }
      if (null != s) {
        const e = FF(s.shape, f)
        null != e &&
          ((s = YA({ inputs: { x: s }, backend: r, attrs: { shape: e } })),
          b.push(s))
      }
      const x = YA({
        inputs: { x: t },
        backend: r,
        attrs: { shape: [1, m, P(t.shape) / m] },
      })
      b.push(x)
      const w = new _F(y, n),
        v = [
          e.shape,
          [n.padInfo.top, n.padInfo.left],
          [n.strideHeight, n.strideWidth],
          [n.dilationHeight, n.dilationWidth],
          [n.inChannels],
          [n.filterWidth * n.inChannels],
          [n.outWidth],
        ],
        k = r.runWebGLProgram(w, [e], 'float32', v),
        I = YA({ inputs: { x: k }, backend: r, attrs: { shape: y } })
      b.push(k), b.push(I)
      const N = null != s,
        S = null != a,
        T = 'leakyrelu' === o,
        C = o ? GA(o, !0) : null,
        $ = new HA(
          f ? I.shape : x.shape,
          f ? x.shape : I.shape,
          f ? [n.batchSize, g, n.outChannels] : [n.batchSize, n.outChannels, g],
          !0,
          !1,
          N,
          C,
          S,
          T,
        ),
        E = f ? [I, x] : [x, I]
      if ((s && E.push(s), S && E.push(a), T)) {
        const e = r.makeTensorInfo([], 'float32', Qr(i, 'float32'))
        E.push(e), b.push(e)
      }
      const R = r.runWebGLProgram($, E, 'float32'),
        A = YA({ inputs: { x: R }, backend: r, attrs: { shape: n.outShape } })
      b.push(R)
      for (const e of b) r.disposeIntermediateTensorInfo(e)
      return A
    }
    const MF = {
      kernelName: Ye,
      backendName: 'webgl',
      kernelFunc:
        /**
         * @license
         * Copyright 2020 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (e) {
          const { inputs: t, backend: n, attrs: r } = e,
            { x: s, filter: a } = t,
            {
              strides: i,
              pad: o,
              dataFormat: l,
              dilations: u,
              dimRoundingMode: c,
            } = r,
            h = Co(l),
            p = bo(s.shape, a.shape, i, u, o, c, !1, h)
          let d
          if (
            1 !== p.filterHeight ||
            1 !== p.filterWidth ||
            1 !== p.dilationHeight ||
            1 !== p.dilationWidth ||
            1 !== p.strideHeight ||
            1 !== p.strideWidth ||
            ('SAME' !== p.padInfo.type && 'VALID' !== p.padInfo.type)
          )
            if (
              p.strideWidth <= 2 &&
              'channelsLast' === h &&
              ye().getBool('WEBGL_EXP_CONV')
            ) {
              const e = new AF(p),
                t = [
                  [p.padInfo.top, p.padInfo.left],
                  [p.strideHeight, p.strideWidth],
                  [p.dilationHeight, p.dilationWidth],
                  [p.inHeight, p.inWidth],
                ]
              d = n.runWebGLProgram(e, [s, a], 'float32', t)
            } else if (ye().getBool('WEBGL_CONV_IM2COL'))
              d = OF({ x: s, filter: a, convInfo: p, backend: n })
            else {
              const e = new EF(p)
              d = n.runWebGLProgram(e, [s, a], 'float32')
            }
          else d = DF({ x: s, filter: a, convInfo: p, backend: n })
          const f = YA({
            inputs: { x: d },
            backend: n,
            attrs: { shape: p.outShape },
          })
          return n.disposeIntermediateTensorInfo(d), f
        },
    }
    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class LF {
      constructor(e) {
        ;(this.variableNames = ['x', 'dy']), (this.outputShape = e.filterShape)
        const t = e.strideHeight,
          n = e.strideWidth,
          r = e.padInfo.top,
          s = e.padInfo.left,
          a = 'channelsLast' === e.dataFormat
        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${a}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `
      }
    }
    class zF {
      constructor(e) {
        ;(this.variableNames = ['dy', 'W']), (this.outputShape = e.inShape)
        const t = e.filterHeight,
          n = e.filterWidth,
          r = e.strideHeight,
          s = e.strideWidth,
          a = 'channelsLast' === e.dataFormat,
          i = t - 1 - e.padInfo.top,
          o = n - 1 - e.padInfo.left,
          l = a ? 1 : 2,
          u = a ? 2 : 3,
          c = a ? 3 : 1
        this.userCode = `\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${l}], coords[${u}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `
      }
    }
    class PF {
      constructor(e) {
        ;(this.variableNames = ['x', 'dy']), (this.outputShape = e.filterShape)
        const t = e.strideDepth,
          n = e.strideHeight,
          r = e.strideWidth,
          s = e.padInfo.front,
          a = e.padInfo.top,
          i = e.padInfo.left
        this.userCode = `\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${s};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${a};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${r} - ${i};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `
      }
    }
    class BF {
      constructor(e) {
        ;(this.variableNames = ['dy', 'W']), (this.outputShape = e.inShape)
        const t = e.filterDepth,
          n = e.filterHeight,
          r = e.filterWidth,
          s = e.strideDepth,
          a = e.strideHeight,
          i = e.strideWidth,
          o = t - 1 - e.padInfo.front,
          l = n - 1 - e.padInfo.top,
          u = r - 1 - e.padInfo.left
        this.userCode = `\n      const ivec3 pads = ivec3(${o}, ${l}, ${u});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${s}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `
      }
    }
    const WF = {
        kernelName: Ze,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s, dy: a } = t,
              {
                strides: i,
                pad: o,
                dataFormat: l,
                dimRoundingMode: u,
                filterShape: c,
              } = r,
              h = Co(l),
              p = bo(s.shape, c, i, 1, o, u, !1, h),
              d = new LF(p)
            return n.runWebGLProgram(d, [s, a], 'float32')
          },
      },
      VF = {
        kernelName: Je,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { dy: s, filter: a } = t,
              {
                inputShape: i,
                strides: o,
                pad: l,
                dataFormat: u,
                dimRoundingMode: c,
              } = r,
              h = Co(u),
              p = bo(i, a.shape, o, 1, l, c, !1, h),
              d = new zF(p)
            return n.runWebGLProgram(d, [s, a], 'float32')
          },
      },
      UF = {
        kernelName: Qe,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s, filter: a } = t,
              { strides: i, pad: o, dilations: l } = r,
              u = xo(s.shape, a.shape, i, l, o),
              c = new RF(u)
            return n.runWebGLProgram(c, [s, a], 'float32')
          },
      },
      GF = {
        kernelName: et,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s, dy: a } = t,
              { strides: i, pad: o, filterShape: l } = r,
              u = xo(s.shape, l, i, 1, o),
              c = new PF(u)
            return n.runWebGLProgram(c, [s, a], 'float32')
          },
      },
      HF = {
        kernelName: tt,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { dy: s, filter: a } = t,
              { pad: i, strides: o, inputShape: l } = r,
              u = xo(l, a.shape, o, 1, i),
              c = new BF(u)
            return n.runWebGLProgram(c, [s, a], 'float32')
          },
      },
      jF = VA({ opSnippet: WA + '\n  return cos(x);\n' }),
      qF = { kernelName: nt, backendName: 'webgl', kernelFunc: jF },
      KF = VA({
        opSnippet:
          '\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n',
      }),
      XF = { kernelName: rt, backendName: 'webgl', kernelFunc: KF }
    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class YF {
      constructor(e, t, n, r, s) {
        ;(this.variableNames = ['Image', 'Boxes', 'BoxInd']),
          (this.outputShape = [])
        const [a, i, o, l] = e,
          [u] = t,
          [c, h] = n
        this.outputShape = [u, c, h, l]
        const p = 'bilinear' === r ? 1 : 0,
          [d, f] = [i - 1 + '.0', o - 1 + '.0'],
          [m, g, y] =
            c > 1
              ? [
                  '' + (i - 1) / (c - 1),
                  '(y2-y1) * height_ratio',
                  `y1*${d} + float(y)*(height_scale)`,
                ]
              : ['0.0', '0.0', `0.5 * (y1+y2) * ${d}`],
          [b, x, w] =
            h > 1
              ? [
                  '' + (o - 1) / (h - 1),
                  '(x2-x1) * width_ratio',
                  `x1*${f} + float(x)*(width_scale)`,
                ]
              : ['0.0', '0.0', `0.5 * (x1+x2) * ${f}`]
        this.userCode = `\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${d} ) {\n          setOutput(float(${s}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${s}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const ZF = {
      kernelName: it,
      backendName: 'webgl',
      kernelFunc: (e) => {
        const { inputs: t, backend: n, attrs: r } = e,
          { image: s, boxes: a, boxInd: i } = t,
          { cropSize: o, method: l, extrapolationValue: u } = r,
          c = new YF(s.shape, a.shape, o, l, u)
        return n.runWebGLProgram(c, [s, a, i], 'float32')
      },
    }
    var JF
    !(function (e) {
      ;(e.Prod = '*'), (e.Sum = '+')
    })(JF || (JF = {}))
    class QF {
      constructor(e, t, n, r) {
        ;(this.op = e),
          (this.outputShape = t),
          (this.variableNames = ['x']),
          (this.customUniforms = [{ name: 'index', type: 'float' }])
        const s = this.outputShape.length,
          a = this.op === JF.Prod ? '1.0' : '0.0',
          i = n ? a : `getX(${eD(s, 'coords', this.op)})`,
          o = this.outputShape[this.outputShape.length - 1]
        let l = '',
          u = ''
        n
          ? ((l = r ? 'end != ' + (o - 1) : 'end != 0'),
            (u = r ? 'end + 1' : 'end - 1'))
          : ((l = r ? `end + pow2 < ${o}` : 'end >= pow2'),
            (u = r ? 'end + pow2' : 'end - pow2')),
          (this.userCode = `\n      void main() {\n        ${XE(s)} coords = getOutputCoords();\n        int end = ${tD(s, 'coords', this.op)};\n        float val = ${i};\n        int pow2 = int(pow(2.0, index));\n        if (${l}) {\n          int idx = ${u};\n          ${tD(s, 'coords', this.op)} = idx;\n          val ${this.op}= getX(${eD(s, 'coords', this.op)});\n        }\n        setOutput(val);\n      }\n    `)
      }
    }
    function eD(e, t, n) {
      if (1 === e) return `${t}`
      if (2 === e) return `${t}.x, ${t}.y`
      if (3 === e) return `${t}.x, ${t}.y, ${t}.z`
      if (4 === e) return `${t}.x, ${t}.y, ${t}.z, ${t}.w`
      throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)
    }
    function tD(e, t, n) {
      if (1 === e) return `${t}`
      if (2 === e) return `${t}.y`
      if (3 === e) return `${t}.z`
      if (4 === e) return `${t}.w`
      throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)
    }
    /**
     * @license
     * Copyright 2022 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function nD(e, t, n, r, s, a) {
      const i = t.shape.length,
        o = Al([r], i)
      let l = t
      null != o &&
        (l = i_({ inputs: { x: t }, backend: n, attrs: { perm: o } }))
      const u = Fl(1, i)[0]
      if (u !== i - 1)
        throw new Error(
          `WebGL cumprod shader expects an inner-most axis=${t.shape.length - 1} but got axis=${r}`,
        )
      const c = l.shape[u]
      let h = AA({ inputs: { x: l }, backend: n })
      for (let t = 0; t <= Math.ceil(Math.log2(c)) - 1; t++) {
        const r = new QF(e, l.shape, !1, a),
          s = [[t]],
          i = h
        ;(h = n.runWebGLProgram(r, [h], h.dtype, s)),
          n.disposeIntermediateTensorInfo(i)
      }
      if (s) {
        const t = new QF(e, l.shape, s, a),
          r = h
        ;(h = n.runWebGLProgram(t, [h], h.dtype)),
          n.disposeIntermediateTensorInfo(r)
      }
      if (null != o) {
        const e = i_({ inputs: { x: h }, backend: n, attrs: { perm: _l(o) } })
        return (
          n.disposeIntermediateTensorInfo(h),
          n.disposeIntermediateTensorInfo(l),
          e
        )
      }
      return h
    }
    const rD = {
        kernelName: st,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2022 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s } = t,
              { axis: a, exclusive: i, reverse: o } = r
            return nD(JF.Prod, s, n, a, i, o)
          },
      },
      sD = {
        kernelName: at,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2022 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s } = t,
              { axis: a, exclusive: i, reverse: o } = r
            return nD(JF.Sum, s, n, a, i, o)
          },
      },
      aD = {
        kernelName: ot,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s, weights: a } = t,
              { size: i, binaryOutput: o } = r
            if (1 === s.shape.length) {
              const e = n.readSync(s.dataId),
                t = n.readSync(a.dataId),
                r = gR(e, t, a.dtype, a.shape, i)
              return n.makeTensorInfo([i], a.dtype, r)
            }
            if (2 === s.shape.length) {
              const e = n.bufferSync(s),
                t = n.bufferSync(a),
                r = yR(e, t, i, o)
              return n.makeTensorInfo(r.shape, a.dtype, r.values)
            }
            throw new Error(
              `Error in denseBincount: input must be at most rank 2, but got rank${s.shape.length}.`,
            )
          },
      }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class iD {
      constructor(e, t, n) {
        ;(this.variableNames = ['x']),
          (this.outputShape = []),
          (this.outputShape = e),
          (this.blockSize = t),
          (this.dataFormat = n),
          (this.userCode = `\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `)
      }
      getHeightCoordString() {
        return 'NHWC' === this.dataFormat ? 'coords[1]' : 'coords[2]'
      }
      getWidthCoordString() {
        return 'NHWC' === this.dataFormat ? 'coords[2]' : 'coords[3]'
      }
      getDepthCoordString() {
        return 'NHWC' === this.dataFormat ? 'coords[3]' : 'coords[1]'
      }
      getOutputDepthSize() {
        return 'NHWC' === this.dataFormat
          ? this.outputShape[3]
          : this.outputShape[1]
      }
      getInputSamplingString() {
        return 'NHWC' === this.dataFormat
          ? 'getX(b, in_h, in_w, in_d)'
          : 'getX(b, in_d, in_h, in_w)'
      }
    }
    const oD = {
      kernelName: lt,
      backendName: 'webgl',
      kernelFunc:
        /**
         * @license
         * Copyright 2020 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (e) {
          const { inputs: t, backend: n, attrs: r } = e,
            { x: s } = t,
            { blockSize: a, dataFormat: i } = r,
            o = s.shape[0],
            l = ('NHWC' === i ? s.shape[1] : s.shape[2]) * a,
            u = ('NHWC' === i ? s.shape[2] : s.shape[3]) * a,
            c = ('NHWC' === i ? s.shape[3] : s.shape[1]) / (a * a),
            h = new iD('NHWC' === i ? [o, l, u, c] : [o, c, l, u], a, i)
          return n.runWebGLProgram(h, [s], s.dtype)
        },
    }
    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class lD {
      constructor(e, t = !1, n = null, r = !1, s = !1) {
        ;(this.variableNames = ['x', 'W']),
          (this.customUniforms = [
            { name: 'pads', type: 'ivec2' },
            { name: 'strides', type: 'ivec2' },
            { name: 'dilations', type: 'ivec2' },
            { name: 'inDims', type: 'ivec2' },
          ]),
          (this.outputShape = e.outShape),
          (this.enableShapeUniforms = tR(this.outputShape.length))
        const a = e.filterHeight,
          i = e.filterWidth,
          o = e.outChannels / e.inChannels
        let l = '',
          u = ''
        n &&
          ((l = r
            ? `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`
            : s
              ? `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`
              : `\n          float activation(float x) {\n            ${n}\n          }\n        `),
          (u = 'result = activation(result);'))
        const c = t ? 'result += getBiasAtOutCoords();' : ''
        t && this.variableNames.push('bias'),
          r && this.variableNames.push('preluActivationWeights'),
          s && this.variableNames.push('leakyreluAlpha'),
          (this.userCode = `\n      ${l}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${o};\n        int q = d2 - d1 * ${o};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${a}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${i}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${c}\n        ${u}\n        setOutput(result);\n      }\n    `)
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class uD {
      constructor(e, t = !1, n = null, r = !1, s = !1) {
        ;(this.variableNames = ['x', 'W']),
          (this.packedInputs = !0),
          (this.packedOutput = !0),
          (this.customUniforms = [
            { name: 'pads', type: 'ivec2' },
            { name: 'strides', type: 'ivec2' },
            { name: 'dilations', type: 'ivec2' },
            { name: 'inDims', type: 'ivec2' },
          ]),
          (this.outputShape = e.outShape),
          (this.enableShapeUniforms = tR(this.outputShape.length))
        const a = e.outChannels / e.inChannels,
          i = e.padInfo.left,
          o = e.strideWidth,
          l = e.dilationWidth,
          u = e.filterHeight,
          c = e.filterWidth,
          h = c
        let p =
          '\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;'
        for (let e = 0; e < c; e++)
          p += `\n          vec4 xTexelC${2 * e};\n          int xTexelC${2 * e}Ready;\n          vec4 xTexelC${2 * e + 1};\n          int xTexelC${2 * e + 1}Ready;\n          vec4 xC${e};`
        p += `\n    for (int r = 0; r < ${u}; r++) {\n      `
        for (let e = 0; e < c; e++)
          p += `\n          xTexelC${2 * e} = vec4(0.0);\n          xTexelC${2 * e}Ready = 0;\n          xTexelC${2 * e + 1} = vec4(0.0);\n          xTexelC${2 * e + 1}Ready = 0;\n          xC${e} = vec4(0.0);`
        p +=
          '\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      '
        for (let e = 0; e < (h + 1) / 2; e++) {
          const t = 2 * e
          if (
            ((p += `\n          xC = xCCorner + ${t * l};\n          `),
            1 === o)
          ) {
            if (
              t < c &&
              (i % 2 == 1
                ? ((p += `\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n              `),
                  (p +=
                    1 === l && t > 0
                      ? `\n                xC${t} = vec4(xTexelC${t - 2}.zw, xTexelC${t}.xy);\n                `
                      : `\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${t} = vec4(previous.zw, xTexelC${t}.xy);\n                  } else {\n                    xC${t} = vec4(0.0, 0.0, xTexelC${t}.xy);\n                  }\n                  `))
                : (p += `\n                if (xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xC${t} = xTexelC${t};\n                `),
              t + 1 < c)
            ) {
              const e = i % 2 == 0 ? F(l) : l
              ;(l % 2 == 0 && i % 2 == 1) || (l % 2 != 0 && i % 2 != 1)
                ? ((p += `\n                  xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t + 1}Ready == 0) {\n                    xTexelC${t + 1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${t + 1}.zw = vec2(0.0);\n                    }\n                    xTexelC${t + 1}Ready = 1;\n                  }\n                  `),
                  (p +=
                    l > 1
                      ? `\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${t + 1} = vec4(previous.zw, xTexelC${t + 1}.xy);\n                    } else {\n                     xC${t + 1} = vec4(0.0, 0.0, xTexelC${t + 1}.xy);\n                    }\n                    `
                      : `\n                    xC${t + 1} = vec4(xTexelC${t}.zw, xTexelC${t + 1}.xy);\n                    `))
                : (p +=
                    1 === e
                      ? `\n                    xC${t + 1} = xTexelC${t};\n                    `
                      : `\n                    xCOffset = xC + ${e};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t + 1}Ready == 0) {\n                      xTexelC${t + 1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${t + 1}.zw = vec2(0.0);\n                      }\n                      xTexelC${t + 1}Ready = 1;\n                    }\n\n                    xC${t + 1} = xTexelC${t + 1};\n                    `)
            }
          } else
            t < c &&
              (i % 2 == 1
                ? ((p += `\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${t + 1}Ready == 0) {\n                  xTexelC${t + 1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${t + 1}.zw = vec2(0.0);\n                  }\n                  xTexelC${t + 1}Ready = 1;\n                }\n\n                xC${t} = vec4(xTexelC${t}.zw, xTexelC${t + 1}.zw);\n              `),
                  t + 1 < c &&
                    (p += `\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${t + 1} = vec4(xTexelC${t + 1}.xy, final.xy);\n                `))
                : ((p += `\n                if(xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t + 1}Ready == 0) {\n                  xTexelC${t + 1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t + 1}.zw = vec2(0.);\n                  }\n                  xTexelC${t + 1}Ready = 1;\n                }\n\n                xC${t} = vec4(\n                  xTexelC${t}.xy, xTexelC${t + 1}.xy);\n              `),
                  t + 1 < c &&
                    (p += `\n                  xC${t + 1} = vec4(xTexelC${t}.zw, xTexelC${t + 1}.zw);\n                `)))
          t < c &&
            ((p += `\n            wTexel = getW(r, ${t}, d1, q);\n            dotProd += xC${t} * vec4(wTexel.xz, wTexel.xz);\n          `),
            t + 1 < c &&
              (p += `\n              wTexel = getW(r, ${t + 1}, d1, q);\n              dotProd += xC${t + 1} * vec4(wTexel.xz, wTexel.xz);\n            `))
        }
        ;(p += '\n    }\n  '), (p += '\n      }\n    ')
        let d = '',
          f = ''
        n &&
          ((d = r
            ? `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`
            : s
              ? `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`
              : `vec4 activation(vec4 x) {\n          ${n}\n        }`),
          (f = 'result = activation(result);'))
        const m = t ? 'result += getBiasAtOutCoords();' : ''
        t && this.variableNames.push('bias'),
          r && this.variableNames.push('preluActivationWeights'),
          s && this.variableNames.push('leakyreluAlpha'),
          (this.userCode = `\n      ${d}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${a};\n        int q = d2 - d1 * ${a};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${p}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${m}\n        ${f}\n        setOutput(result);\n      }\n    `)
      }
    }
    const cD = {
      kernelName: ut,
      backendName: 'webgl',
      kernelFunc:
        /**
         * @license
         * Copyright 2020 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (e) {
          const { inputs: t, backend: n, attrs: r } = e,
            { x: s, filter: a } = t,
            { strides: i, pad: o, dilations: l, dimRoundingMode: u } = r
          let c = l
          null == c && (c = [1, 1]),
            O(
              To(i, c),
              () =>
                `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`,
            )
          const h = bo(s.shape, a.shape, i, c, o, u, !0)
          let p
          p =
            ye().getBool('WEBGL_PACK_DEPTHWISECONV') &&
            h.strideWidth <= 2 &&
            h.outChannels / h.inChannels == 1
              ? new uD(h)
              : new lD(h)
          const d = [
            [h.padInfo.top, h.padInfo.left],
            [h.strideHeight, h.strideWidth],
            [h.dilationHeight, h.dilationWidth],
            [h.inHeight, h.inWidth],
          ]
          return n.runWebGLProgram(p, [s, a], 'float32', d)
        },
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class hD {
      constructor(e) {
        ;(this.variableNames = ['x', 'dy']), (this.outputShape = e.filterShape)
        const t = e.strideHeight,
          n = e.strideWidth,
          r = e.padInfo.top,
          s = e.padInfo.left,
          a = e.outChannels / e.inChannels
        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${a} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `
      }
    }
    class pD {
      constructor(e) {
        ;(this.variableNames = ['dy', 'W']), (this.outputShape = e.inShape)
        const t = e.filterHeight,
          n = e.filterWidth,
          r = e.strideHeight,
          s = e.strideWidth,
          a = t - 1 - e.padInfo.top,
          i = n - 1 - e.padInfo.left,
          o = e.outChannels / e.inChannels
        this.userCode = `\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${o}; dm++) {\n              int d2 = d1 * ${o} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `
      }
    }
    const dD = {
        kernelName: ct,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s, dy: a } = t,
              {
                strides: i,
                dilations: o,
                pad: l,
                dimRoundingMode: u,
                filterShape: c,
              } = r,
              h = bo(s.shape, c, i, o, l, u, !0),
              p = new hD(h)
            return n.runWebGLProgram(p, [s, a], 'float32')
          },
      },
      fD = {
        kernelName: ht,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { dy: s, filter: a } = t,
              {
                strides: i,
                dilations: o,
                pad: l,
                dimRoundingMode: u,
                inputShape: c,
              } = r,
              h = bo(c, a.shape, i, o, l, u, !0),
              p = new pD(h)
            return n.runWebGLProgram(p, [s, a], 'float32')
          },
      }
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class mD {
      constructor(e) {
        ;(this.variableNames = ['X']),
          (this.outputShape = [e, e]),
          (this.userCode =
            '\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    ')
      }
    }
    const gD = {
      kernelName: pt,
      backendName: 'webgl',
      kernelFunc:
        /**
         * @license
         * Copyright 2020 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (e) {
          const { inputs: t, backend: n } = e,
            { x: r } = t,
            s = [...r.shape, ...r.shape],
            a = P(r.shape),
            i = YA({ inputs: { x: r }, backend: n, attrs: { shape: [a] } }),
            o = new mD(a),
            l = n.runWebGLProgram(o, [i], i.dtype),
            u = YA({ inputs: { x: l }, backend: n, attrs: { shape: s } })
          return (
            n.disposeIntermediateTensorInfo(i),
            n.disposeIntermediateTensorInfo(l),
            u
          )
        },
    }
    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class yD {
      constructor(e) {
        ;(this.variableNames = ['x', 'W']), (this.outputShape = e.outShape)
        const {
            inHeight: t,
            inWidth: n,
            padInfo: r,
            strideHeight: s,
            strideWidth: a,
            filterHeight: i,
            filterWidth: o,
            dilationHeight: l,
            dilationWidth: u,
          } = e,
          { top: c, left: h } = r
        this.userCode = `\n      const ivec2 strides = ivec2(${s}, ${a});\n      const ivec2 pads = ivec2(${c}, ${h});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${i}; h++) {\n          int hIn = hBeg + h * ${l};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${o}; w++) {\n              int wIn = wBeg + w * ${u};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `
      }
    }
    const bD = {
        kernelName: dt,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s, filter: a } = t,
              { strides: i, pad: o, dilations: l } = r,
              u = mo(s.shape, a.shape, i, o, 'NHWC', l)
            let c
            const h = new yD(u)
            c = n.runWebGLProgram(h, [s, a], 'float32')
            const p = YA({
              inputs: { x: c },
              backend: n,
              attrs: { shape: u.outShape },
            })
            return n.disposeIntermediateTensorInfo(c), p
          },
      },
      xD = {
        kernelName: yt,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2021 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { equation: s } = r,
              a = t,
              { allDims: i, summedDims: o, idDims: l } = md(s, a.length)
            yd(i.length, l, a)
            const { path: u, steps: c } = bd(o, l),
              h = c.length
            let p = null,
              d = i.length
            const f = []
            for (let e = 0; e < h; ++e) {
              for (const t of c[e]) {
                const { permutationIndices: e, expandDims: r } = gd(d, l[t])
                let s
                xd(e)
                  ? (s = a[t])
                  : ((s = i_({
                      inputs: { x: a[t] },
                      backend: n,
                      attrs: { perm: e },
                    })),
                    f.push(s))
                const i = s.shape.slice()
                for (let e = 0; e < r.length; ++e) i.splice(r[e], 0, 1)
                B(s.shape, i) ||
                  ((s = YA({
                    inputs: { x: s },
                    backend: n,
                    attrs: { shape: i },
                  })),
                  f.push(s)),
                  null === p
                    ? (p = s)
                    : ((p = KA({ inputs: { a: s, b: p }, backend: n })),
                      f.push(p))
              }
              e < h - 1 &&
                (u[e] >= 0 &&
                  ((p = s_({
                    inputs: { x: p },
                    backend: n,
                    attrs: { axis: u[e] - (i.length - d), keepDims: !1 },
                  })),
                  f.push(p)),
                d--)
            }
            for (const e of f) e !== p && n.disposeIntermediateTensorInfo(e)
            return p
          },
      },
      wD = VA({
        opSnippet: 'return (x >= 0.0) ? x : (exp(x) - 1.0);',
        packedOpSnippet:
          '\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n',
      }),
      vD = { kernelName: bt, backendName: 'webgl', kernelFunc: wD },
      kD = {
        kernelName: xt,
        backendName: 'webgl',
        kernelFunc: (e) => {
          const { inputs: t, backend: n } = e,
            { dy: r, y: s } = t,
            a = ye().getBool('WEBGL_PACK_BINARY_OPERATIONS')
              ? new RA(
                  '\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n',
                  r.shape,
                  s.shape,
                )
              : new $A(
                  'return (b >= 1.0) ? a : a * (b + 1.0);',
                  r.shape,
                  s.shape,
                )
          return n.runWebGLProgram(a, [r, s], r.dtype)
        },
      },
      ID = UA({
        opSnippet: 'return float(a == b);',
        packedOpSnippet: '\n  return vec4(equal(a, b));\n',
        dtype: 'bool',
        cpuKernelImpl: vR,
      }),
      ND = { kernelName: vt, backendName: 'webgl', kernelFunc: ID },
      SD = VA({
        opSnippet: `\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${Zp};\n  float a1 = ${Jp};\n  float a2 = ${Qp};\n  float a3 = ${ed};\n  float a4 = ${td};\n  float a5 = ${nd};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`,
      }),
      TD = { kernelName: wt, backendName: 'webgl', kernelFunc: SD },
      CD = VA({
        opSnippet: WA + '\n  return exp(x);\n',
        packedOpSnippet:
          '\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n',
        cpuKernelImpl: kR,
        dtype: 'float32',
      }),
      $D = { kernelName: kt, backendName: 'webgl', kernelFunc: CD }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function ED(e) {
      const { inputs: t, attrs: n, backend: r } = e,
        { dim: s } = n,
        { input: a } = t,
        i = a.shape.length,
        o = a.shape.slice()
      let l = s
      return (
        s < 0 &&
          (O(
            -(i + 1) <= s,
            () => `Axis must be in the interval [${-(i + 1)}, ${i}]`,
          ),
          (l = i + s + 1)),
        o.splice(l, 0, 1),
        YA({ inputs: { x: a }, backend: r, attrs: { shape: o } })
      )
    }
    const RD = { kernelName: It, backendName: 'webgl', kernelFunc: ED },
      AD = 'return exp(x) - 1.0;',
      _D = VA({ opSnippet: AD, packedOpSnippet: AD, cpuKernelImpl: IR }),
      FD = { kernelName: Nt, backendName: 'webgl', kernelFunc: _D }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class DD {
      constructor(e, t, n) {
        this.variableNames = ['real', 'imag']
        const r = t[1]
        this.outputShape = t
        const s = n ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`,
          a = n ? `${r}.0` : '1.0'
        let i
        if ('real' === e) i = 'return real * expR - imag * expI;'
        else {
          if ('imag' !== e)
            throw new Error(
              `FFT component must be either "real" or "imag", got ${e}.`,
            )
          i = 'return real * expI + imag * expR;'
        }
        this.userCode = `\n      const float exponentMultiplier = ${s};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function OD(e, t, n) {
      const r = n.texData.get(e.dataId),
        s = P(e.shape),
        a = e.shape[e.shape.length - 1],
        i = YA({ inputs: { x: e }, backend: n, attrs: { shape: [s / a, a] } }),
        o = i.shape,
        l = new DD('real', o, t),
        u = new DD('imag', o, t),
        c = [
          {
            dataId: r.complexTensorInfos.real.dataId,
            dtype: r.complexTensorInfos.real.dtype,
            shape: o,
          },
          {
            dataId: r.complexTensorInfos.imag.dataId,
            dtype: r.complexTensorInfos.imag.dtype,
            shape: o,
          },
        ],
        h = n.runWebGLProgram(l, c, 'float32'),
        p = n.runWebGLProgram(u, c, 'float32'),
        d = FA({ inputs: { real: h, imag: p }, backend: n })
      n.disposeIntermediateTensorInfo(h), n.disposeIntermediateTensorInfo(p)
      const f = YA({ inputs: { x: d }, backend: n, attrs: { shape: e.shape } })
      return (
        n.disposeIntermediateTensorInfo(i),
        n.disposeIntermediateTensorInfo(d),
        f
      )
    }
    const MD = {
      kernelName: St,
      backendName: 'webgl',
      kernelFunc:
        /**
         * @license
         * Copyright 2020 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (e) {
          const { inputs: t, backend: n } = e,
            { input: r } = t
          return OD(r, !1, n)
        },
    }
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class LD {
      constructor(e, t) {
        ;(this.outputShape = []),
          (this.customUniforms = [{ name: 'value', type: 'float' }]),
          (this.variableNames = ['x']),
          (this.outputShape = e),
          (this.userCode =
            '\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    ')
        /**
         * @license
         * Copyright 2020 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
      }
    }
    function zD(e) {
      const { backend: t, attrs: n } = e,
        { shape: r, value: s } = n
      let { dtype: a } = n
      if (((a = a || te(s)), 'string' === a)) {
        const e = X(a, P(r))
        return e.fill(s), t.makeTensorInfo(r, a, e)
      }
      {
        const e = new LD(r, s),
          n = [[s]]
        return t.runWebGLProgram(e, [], a, n)
      }
    }
    const PD = { kernelName: Tt, backendName: 'webgl', kernelFunc: zD }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class BD {
      constructor(e) {
        ;(this.variableNames = ['Image']), (this.outputShape = [])
        const t = e[2]
        ;(this.outputShape = e),
          (this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `)
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const WD = {
        kernelName: Ct,
        backendName: 'webgl',
        kernelFunc: ({ inputs: e, backend: t }) => {
          const { image: n } = e,
            r = t,
            s = new BD(n.shape)
          return r.runWebGLProgram(s, [n], n.dtype)
        },
      },
      VD = 'return floor(x);',
      UD = VA({ opSnippet: VD, packedOpSnippet: VD, cpuKernelImpl: NR }),
      GD = { kernelName: $t, backendName: 'webgl', kernelFunc: UD },
      HD = UA({
        opSnippet:
          '\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n',
        packedOpSnippet:
          '\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n',
        dtype: 'int32',
      }),
      jD = { kernelName: Et, backendName: 'webgl', kernelFunc: HD }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class qD {
      constructor(e) {
        this.variableNames = ['A']
        const t = DE(),
          [n, r] = e
        ;(this.outputShape = e),
          (this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `)
      }
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class KD {
      constructor(e) {
        ;(this.variableNames = ['A']),
          (this.packedInputs = !1),
          (this.packedOutput = !0)
        const t = DE(),
          [n, r] = e
        ;(this.outputShape = e),
          (this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `)
      }
    }
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const XD = {
      kernelName: Nr,
      backendName: 'webgl',
      kernelFunc: function (e) {
        const { inputs: t, backend: n, attrs: r } = e
        let { pixels: s } = t
        const { numChannels: a } = r,
          i =
            'undefined' != typeof HTMLVideoElement &&
            s instanceof HTMLVideoElement,
          o =
            'undefined' != typeof HTMLImageElement &&
            s instanceof HTMLImageElement,
          [l, u] = i ? [s.videoWidth, s.videoHeight] : [s.width, s.height],
          c = [u, l],
          h = [u, l, a]
        if (o || i) {
          const e = ye().getBool('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU')
          ;(null != YD && e === ZD) ||
            ((ZD = e),
            (YD = document
              .createElement('canvas')
              .getContext('2d', { willReadFrequently: ZD }))),
            (YD.canvas.width = l),
            (YD.canvas.height = u),
            YD.drawImage(s, 0, 0, l, u),
            (s = YD.canvas)
        }
        const p = n.makeTensorInfo(c, 'int32')
        ;(n.texData.get(p.dataId).usage = sE.PIXELS),
          n.gpgpu.uploadPixelDataToTexture(n.getTexture(p.dataId), s)
        const d = ye().getBool('WEBGL_PACK') ? new KD(h) : new qD(h),
          f = n.runWebGLProgram(d, [p], 'int32')
        return n.disposeData(p.dataId), f
      },
    }
    let YD,
      ZD = ye().getBool('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU')
    const JD = {
        kernelName: Cr,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s, filter: a, bias: i, preluActivationWeights: o } = t,
              {
                strides: l,
                pad: u,
                dataFormat: c,
                dilations: h,
                dimRoundingMode: p,
                activation: d,
                leakyreluAlpha: f,
              } = r,
              m = Co(c),
              g = bo(s.shape, a.shape, l, h, u, p, !1, m)
            let y
            const b = [],
              x = null != i,
              w = null != o,
              v = 'leakyrelu' === d,
              k = () => {
                const e = [s, a],
                  t = (e, t) => {
                    if (
                      'NCHW' === t &&
                      1 === e.shape.length &&
                      1 !== e.shape[0]
                    ) {
                      const t = YA({
                        inputs: { x: e },
                        backend: n,
                        attrs: { shape: [e.shape[0], 1, 1] },
                      })
                      return b.push(t), t
                    }
                    return e
                  }
                if ((x && e.push(t(i, c)), w && e.push(t(o, c)), v)) {
                  const t = n.makeTensorInfo([], 'float32', Qr(f, 'float32'))
                  e.push(t), b.push(t)
                }
                return e
              }
            if (
              1 !== g.filterHeight ||
              1 !== g.filterWidth ||
              1 !== g.dilationHeight ||
              1 !== g.dilationWidth ||
              1 !== g.strideHeight ||
              1 !== g.strideWidth ||
              ('SAME' !== g.padInfo.type && 'VALID' !== g.padInfo.type)
            )
              if (
                g.strideWidth <= 2 &&
                'channelsLast' === m &&
                ye().getBool('WEBGL_EXP_CONV')
              ) {
                const e = d ? GA(d, !0) : null,
                  t = new AF(g, x, e, w, v),
                  r = [
                    [g.padInfo.top, g.padInfo.left],
                    [g.strideHeight, g.strideWidth],
                    [g.dilationHeight, g.dilationWidth],
                    [g.inHeight, g.inWidth],
                  ],
                  s = k()
                y = n.runWebGLProgram(t, s, 'float32', r)
              } else if (ye().getBool('WEBGL_CONV_IM2COL'))
                y = OF({
                  x: s,
                  filter: a,
                  convInfo: g,
                  backend: n,
                  bias: i,
                  activation: d,
                  preluActivationWeights: o,
                  leakyreluAlpha: f,
                })
              else {
                const e = d ? GA(d, !1) : null,
                  t = new EF(g, x, e, w, v),
                  r = k()
                y = n.runWebGLProgram(t, r, 'float32')
              }
            else
              y = DF({
                x: s,
                filter: a,
                convInfo: g,
                backend: n,
                bias: i,
                activation: d,
                preluActivationWeights: o,
                leakyreluAlpha: f,
              })
            const I = YA({
              inputs: { x: y },
              backend: n,
              attrs: { shape: g.outShape },
            })
            return (
              b.push(y), b.forEach((e) => n.disposeIntermediateTensorInfo(e)), I
            )
          },
      },
      QD = {
        kernelName: $r,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s, filter: a, bias: i, preluActivationWeights: o } = t,
              {
                strides: l,
                pad: u,
                dilations: c,
                dimRoundingMode: h,
                activation: p,
                leakyreluAlpha: d,
              } = r,
              f = []
            let m = c
            null == m && (m = [1, 1]),
              O(
                To(l, m),
                () =>
                  `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${m}'`,
              )
            const g = bo(s.shape, a.shape, l, m, u, h, !0),
              y =
                ye().getBool('WEBGL_PACK_DEPTHWISECONV') &&
                g.strideWidth <= 2 &&
                g.outChannels / g.inChannels == 1,
              b = p ? GA(p, y) : null,
              x = [s, a],
              w = null != i,
              v = null != o,
              k = 'leakyrelu' === p
            if ((w && x.push(i), v && x.push(o), k)) {
              const e = n.makeTensorInfo([], 'float32', Qr(d, 'float32'))
              x.push(e), f.push(e)
            }
            let I
            I = y ? new uD(g, w, b, v, k) : new lD(g, w, b, v, k)
            const N = [
                [g.padInfo.top, g.padInfo.left],
                [g.strideHeight, g.strideWidth],
                [g.dilationHeight, g.dilationWidth],
                [g.inHeight, g.inWidth],
              ],
              S = n.runWebGLProgram(I, x, 'float32', N)
            return f.forEach((e) => n.disposeIntermediateTensorInfo(e)), S
          },
      }
    class eO {
      constructor(e, t, n, r) {
        ;(this.sliceDim = e),
          (this.strides = t),
          (this.paramsShape = r),
          (this.variableNames = ['x', 'indices']),
          (this.outputShape = n)
        const s = XE(n.length)
        let a = '\n    int index;'
        for (let e = 0; e < this.sliceDim; e++)
          a += `\n          index = round(getIndices(coords[0], ${e}));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[e]};\n          flattenIndex += index * ${this.strides[e]};`
        this.userCode = `\n         void main() {\n          ${s} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ${a}\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `
      }
    }
    const tO = {
      kernelName: _t,
      backendName: 'webgl',
      kernelFunc:
        /**
         * @license
         * Copyright 2020 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (e) {
          const { inputs: t, backend: n } = e,
            { params: r, indices: s } = t,
            a = s.shape,
            i = a[a.length - 1],
            o = P(r.shape),
            [l, u, c, h] = Kp(r, s),
            p = YA({ inputs: { x: s }, backend: n, attrs: { shape: [u, i] } }),
            d = YA({
              inputs: { x: r },
              backend: n,
              attrs: { shape: [P(r.shape) / c, c] },
            })
          if (n.shouldExecuteOnCPU([r, s]) || 'string' === r.dtype) {
            const e = n.readSync(s.dataId),
              t = n.bufferSync(r),
              a = SR(e, t, r.dtype, u, i, c, h, r.shape, o)
            return n.makeTensorInfo(l, r.dtype, a.values)
          }
          const f = new eO(i, h, [u, c], r.shape),
            m = n.runWebGLProgram(f, [d, p], d.dtype),
            g = YA({ inputs: { x: m }, backend: n, attrs: { shape: l } })
          return (
            n.disposeIntermediateTensorInfo(p),
            n.disposeIntermediateTensorInfo(d),
            n.disposeIntermediateTensorInfo(m),
            g
          )
        },
    }
    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class nO {
      constructor(e, t) {
        ;(this.variableNames = ['A', 'indices']),
          (this.outputShape = t),
          (this.rank = t.length)
        const n = XE(this.rank),
          r = (function (e) {
            const t = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'],
              n = []
            for (let r = 0; r < e.length; r++)
              2 === r ? n.push('index') : n.push(`${t[r]}`)
            return n.join()
          })(e)
        this.userCode = `\n      void main() {\n        ${n} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${r}));\n      }\n    `
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function rO(e) {
      const { inputs: t, backend: n, attrs: r } = e,
        { x: s, indices: a } = t,
        { axis: i, batchDims: o } = r,
        l = j(i, s.shape)[0]
      if (ye().get('DEBUG')) {
        const e = n.readSync(a.dataId),
          t = s.shape[l]
        for (let n = 0; n < e.length; ++n) {
          const r = e[n]
          O(
            r <= t - 1 && r >= 0,
            () => `GatherV2: the index value ${r} is not in [0, ${t - 1}]`,
          )
        }
      }
      const u = Md(s, a, l, o),
        c = P(a.shape),
        h = [],
        p = YA({
          inputs: { x: s },
          backend: n,
          attrs: { shape: [u.batchSize, u.outerSize, u.dimSize, u.sliceSize] },
        }),
        d = YA({
          inputs: { x: a },
          backend: n,
          attrs: { shape: [u.batchSize, c / u.batchSize] },
        })
      h.push(p), h.push(d)
      const f = [u.batchSize, u.outerSize, c / u.batchSize, u.sliceSize]
      if (n.shouldExecuteOnCPU([s, a]) || 'string' === s.dtype) {
        const e = n.bufferSync(d),
          t = n.bufferSync(p),
          r = TR(t, e, f)
        return (
          h.forEach((e) => n.disposeIntermediateTensorInfo(e)),
          n.makeTensorInfo(u.outputShape, r.dtype, r.values)
        )
      }
      const m = new nO(p.shape, f),
        g = n.runWebGLProgram(m, [p, d], p.dtype)
      h.push(g)
      const y = YA({
        inputs: { x: g },
        backend: n,
        attrs: { shape: u.outputShape },
      })
      return h.forEach((e) => n.disposeIntermediateTensorInfo(e)), y
    }
    const sO = { kernelName: At, backendName: 'webgl', kernelFunc: rO },
      aO = UA({
        opSnippet: 'return float(a > b);',
        packedOpSnippet: '\n  return vec4(greaterThan(a, b));\n',
        cpuKernelImpl: CR,
        dtype: 'bool',
      }),
      iO = { kernelName: Ft, backendName: 'webgl', kernelFunc: aO },
      oO = UA({
        opSnippet: 'return float(a >= b);',
        packedOpSnippet: '\n  return vec4(greaterThanEqual(a, b));\n',
        dtype: 'bool',
        cpuKernelImpl: $R,
      }),
      lO = { kernelName: Dt, backendName: 'webgl', kernelFunc: oO },
      uO = {
        kernelName: Mt,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n } = e,
              { input: r } = t
            return OD(r, !0, n)
          },
      },
      cO = VA({
        opSnippet: 'return float(!isnan(x) && !isinf(x));',
        dtype: 'bool',
      }),
      hO = { kernelName: zt, backendName: 'webgl', kernelFunc: cO },
      pO = VA({ opSnippet: 'return float(isinf(x));', dtype: 'bool' }),
      dO = { kernelName: Pt, backendName: 'webgl', kernelFunc: pO },
      fO = VA({ opSnippet: 'return float(isnan(x));', dtype: 'bool' }),
      mO = { kernelName: Bt, backendName: 'webgl', kernelFunc: fO },
      gO = UA({
        opSnippet: 'return float(a < b);',
        packedOpSnippet: '\n  return vec4(lessThan(a, b));\n',
        cpuKernelImpl: ER,
        dtype: 'bool',
      }),
      yO = { kernelName: Vt, backendName: 'webgl', kernelFunc: gO },
      bO = UA({
        opSnippet: 'return float(a <= b);',
        packedOpSnippet: '\n  return vec4(lessThanEqual(a, b));\n',
        cpuKernelImpl: RR,
        dtype: 'bool',
      }),
      xO = { kernelName: Ut, backendName: 'webgl', kernelFunc: bO },
      wO = {
        kernelName: Gt,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { backend: t, attrs: n } = e,
              { start: r, stop: s, num: a } = n,
              i = AR(r, s, a)
            return t.makeTensorInfo([i.length], 'float32', i)
          },
      },
      vO = VA({
        opSnippet: WA + '\n  return x < 0.0 ? 0./0. : log(x);\n',
        packedOpSnippet:
          '\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n',
        cpuKernelImpl: _R,
      }),
      kO = { kernelName: Ht, backendName: 'webgl', kernelFunc: vO },
      IO = VA({ opSnippet: WA + '\n  return log(1.0 + x);\n' }),
      NO = { kernelName: jt, backendName: 'webgl', kernelFunc: IO },
      SO = UA({
        opSnippet: 'return float(a >= 1.0 && b >= 1.0);',
        packedOpSnippet:
          '\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n',
        dtype: 'bool',
      }),
      TO = { kernelName: qt, backendName: 'webgl', kernelFunc: SO },
      CO = VA({ opSnippet: 'return float(!(x >= 1.0));' }),
      $O = { kernelName: Kt, backendName: 'webgl', kernelFunc: CO },
      EO = UA({
        opSnippet: 'return float(a >= 1.0 || b >= 1.0);',
        packedOpSnippet:
          '\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n',
        dtype: 'bool',
      }),
      RO = { kernelName: Xt, backendName: 'webgl', kernelFunc: EO }
    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class AO {
      constructor(e, t, n, r, s) {
        ;(this.variableNames = ['x']), (this.outputShape = [])
        const a = t,
          i = e[3] - 1
        let o
        this.outputShape = e
        const l = `float(${n}) + float(${r}) * sum`
        ;(o =
          0.5 === s
            ? `inversesqrt(${l})`
            : 1 === s
              ? `1.0/(${l})`
              : `exp(log(${l}) * float(-${s}));`),
          (this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `)
      }
    }
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class _O {
      constructor(e, t, n, r, s) {
        ;(this.variableNames = ['x']),
          (this.outputShape = []),
          (this.packedInputs = !0),
          (this.packedOutput = !0)
        const a = t,
          i = e[3] - 1
        let o
        this.outputShape = e
        const l = `float(${n}) + float(${r}) * sum`
        ;(o =
          0.5 === s
            ? `inversesqrt(${l})`
            : 1 === s
              ? `1.0/(${l})`
              : `exp(log(${l}) * float(-${s}));`),
          (this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `)
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const FO = {
      kernelName: Yt,
      backendName: 'webgl',
      kernelFunc: (e) => {
        const { inputs: t, backend: n, attrs: r } = e,
          { x: s } = t,
          { depthRadius: a, bias: i, alpha: o, beta: l } = r,
          u = ye().getBool('WEBGL_PACK_NORMALIZATION')
            ? new _O(s.shape, a, i, o, l)
            : new AO(s.shape, a, i, o, l)
        return n.runWebGLProgram(u, [s], s.dtype)
      },
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class DO {
      constructor(e, t, n, r, s) {
        ;(this.variableNames = ['inputImage', 'outputImage', 'dy']),
          (this.outputShape = []),
          (this.outputShape = e),
          (this.depth = e[3]),
          (this.depthRadius = t),
          (this.bias = n),
          (this.alpha = r),
          (this.beta = s),
          (this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${s})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${s});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `)
        /**
         * @license
         * Copyright 2020 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
      }
    }
    const OO = {
      kernelName: Zt,
      backendName: 'webgl',
      kernelFunc: (e) => {
        const { inputs: t, backend: n, attrs: r } = e,
          { x: s, y: a, dy: i } = t,
          { depthRadius: o, bias: l, alpha: u, beta: c } = r,
          h = new DO(s.shape, o, l, u, c)
        return n.runWebGLProgram(h, [s, a, i], s.dtype)
      },
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function MO(e) {
      const { inputs: t, backend: n, attrs: r } = e,
        { x: s } = t,
        { reductionIndices: a, keepDims: i } = r,
        o = s.shape.length,
        l = j(a, s.shape)
      let u = l
      const c = Al(u, o),
        h = null != c,
        p = n.shouldExecuteOnCPU([s])
      let d = s
      if (h) {
        if (p) {
          const e = n.texData.get(d.dataId).values,
            t = new Array(o)
          for (let e = 0; e < t.length; e++) t[e] = s.shape[c[e]]
          const r = aA(e, s.shape, s.dtype, c, t)
          ;(d = n.makeTensorInfo(t, s.dtype)),
            (n.texData.get(d.dataId).values = r)
        } else d = r_(s, c, n)
        u = Fl(u.length, o)
      }
      Rl('max', u, o)
      const [f, m] = $l(d.shape, u)
      let g,
        y = f
      if ((i && (y = El(f, l)), p)) {
        const e = n.texData.get(d.dataId).values,
          t = FR(e, P(m), y, s.dtype)
        ;(g = n.makeTensorInfo(y, s.dtype)),
          (n.texData.get(g.dataId).values = t)
      } else
        g =
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          (function (e, t, n, r) {
            const s = P(t),
              a = YA({
                inputs: { x: e },
                attrs: { shape: [P(e.shape) / s, s] },
                backend: r,
              }),
              i = e_(a, e.dtype, 'max', r),
              o = YA({ inputs: { x: i }, attrs: { shape: n }, backend: r })
            return (
              r.disposeIntermediateTensorInfo(a),
              r.disposeIntermediateTensorInfo(i),
              o
            )
          })(d, m, y, n)
      return h && n.disposeIntermediateTensorInfo(d), g
    }
    const LO = { kernelName: Jt, backendName: 'webgl', kernelFunc: MO },
      zO = UA({
        opSnippet: CA + '\n  return max(a, b);\n',
        packedOpSnippet:
          '\n  vec4 result = vec4(max(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  ' +
          EA +
          '\n  return result;\n',
        cpuKernelImpl: DR,
      }),
      PO = { kernelName: Qt, backendName: 'webgl', kernelFunc: zO },
      BO = {
        kernelName: en,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s } = t
            _E(s, 'maxPool')
            const { filterSize: a, strides: i, pad: o, dimRoundingMode: l } = r
            O(
              To(i, 1),
              () =>
                `Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`,
            )
            const u = go(s.shape, a, i, 1, o, l)
            if (
              1 === u.filterWidth &&
              1 === u.filterHeight &&
              B(u.inShape, u.outShape)
            )
              return AA({ inputs: { x: s }, backend: n })
            const c = new W_(u, 'max', !1)
            return n.runWebGLProgram(c, [s], s.dtype)
          },
      },
      WO = {
        kernelName: nn,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s } = t,
              {
                filterSize: a,
                strides: i,
                pad: o,
                dataFormat: l,
                dimRoundingMode: u,
              } = r,
              c = yo(s.shape, a, i, [1, 1, 1], o, u, l),
              h = new V_(c, 'max', !1)
            return n.runWebGLProgram(h, [s], s.dtype)
          },
      }
    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class VO {
      constructor(e) {
        ;(this.variableNames = ['dy', 'maxPos']), (this.outputShape = e.inShape)
        const t = e.strideHeight,
          n = e.strideWidth,
          r = e.dilationHeight,
          s = e.effectiveFilterHeight,
          a = e.effectiveFilterWidth,
          i = s - 1 - e.padInfo.top,
          o = a - 1 - e.padInfo.left,
          l = s * a - 1
        this.userCode = `\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${s};\n          wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${l} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `
      }
    }
    class UO {
      constructor(e) {
        ;(this.variableNames = ['dy', 'maxPos']), (this.outputShape = e.inShape)
        const t = e.strideDepth,
          n = e.strideHeight,
          r = e.strideWidth,
          s = e.dilationDepth,
          a = e.dilationHeight,
          i = e.dilationWidth,
          o = e.effectiveFilterDepth,
          l = e.effectiveFilterHeight,
          u = e.effectiveFilterWidth,
          c = o - 1 - e.padInfo.front,
          h = l - 1 - e.padInfo.top,
          p = u - 1 - e.padInfo.left,
          d = o * l * u - 1
        this.userCode = `\n      const ivec3 pads = ivec3(${c}, ${h}, ${p});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${o};\n           wD += ${s}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${l};\n              wR += ${a}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${u};\n                wC += ${i}) {\n              float dyC = float(dyCCorner + wC) / ${r}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${d} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${l} * ${u} +\n                  wR * ${u} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `
      }
    }
    const GO = {
        kernelName: rn,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { dy: s, input: a } = t,
              i = a,
              { filterSize: o, strides: l, pad: u, dimRoundingMode: c } = r,
              h = yo(i.shape, o, l, [1, 1, 1], u, c),
              p = new V_(h, 'max', !0),
              d = n.runWebGLProgram(p, [i], i.dtype),
              f = new UO(h),
              m = n.runWebGLProgram(f, [s, d], i.dtype)
            return n.disposeIntermediateTensorInfo(d), m
          },
      },
      HO = {
        kernelName: tn,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { dy: s, input: a, output: i } = t,
              o = a
            _E([a, i], 'maxPoolGrad')
            const { filterSize: l, strides: u, pad: c, dimRoundingMode: h } = r,
              p = go(o.shape, l, u, 1, c, h),
              d = new W_(p, 'max', !0),
              f = n.runWebGLProgram(d, [o], o.dtype),
              m = new VO(p),
              g = n.runWebGLProgram(m, [s, f], o.dtype)
            return n.disposeIntermediateTensorInfo(f), g
          },
      },
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */ jO = {
        kernelName: sn,
        backendName: 'webgl',
        kernelFunc: ({ inputs: e, attrs: t, backend: n }) => {
          const { x: r } = e,
            { filterSize: s, strides: a, pad: i, includeBatchInIndex: o } = t,
            l = n
          O(
            4 === r.shape.length,
            () =>
              `Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`,
          )
          const u = [1, 1]
          O(
            To(a, u),
            () =>
              `Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`,
          )
          const c = go(r.shape, s, a, u, i),
            [h, p] =
              /**
               * @license
               * Copyright 2020 Google LLC. All Rights Reserved.
               * Licensed under the Apache License, Version 2.0 (the "License");
               * you may not use this file except in compliance with the License.
               * You may obtain a copy of the License at
               *
               * http://www.apache.org/licenses/LICENSE-2.0
               *
               * Unless required by applicable law or agreed to in writing, software
               * distributed under the License is distributed on an "AS IS" BASIS,
               * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
               * See the License for the specific language governing permissions and
               * limitations under the License.
               * =============================================================================
               */
              (function (e, t, n, r) {
                let s = new W_(n, 'max', !1)
                const a = r.runWebGLProgram(s, [e], 'float32')
                return (
                  (s = new W_(n, 'max', !0, !0, t)),
                  [a, r.runWebGLProgram(s, [e], 'float32')]
                )
              })(r, o, c, l)
          return [h, p]
        },
      },
      /**
       * @license
       * Copyright 2020 Google LLC. All Rights Reserved.
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       * =============================================================================
       */ qO = {
        kernelName: an,
        backendName: 'webgl',
        kernelFunc: ({ inputs: e, attrs: t, backend: n }) => {
          const { x: r } = e,
            { keepDims: s, axis: a } = t,
            i = n,
            o = r.shape.length,
            l = j(a, r.shape)
          let u = l
          const c = Al(u, o),
            h = null != c,
            p = i.shouldExecuteOnCPU([r]),
            d = []
          let f = r
          if (h) {
            if (p) {
              const e = i.texData.get(f.dataId).values,
                t = new Array(o)
              for (let e = 0; e < t.length; e++) t[e] = r.shape[c[e]]
              const n = aA(e, r.shape, r.dtype, c, t)
              ;(f = i.makeTensorInfo(t, r.dtype)),
                (i.texData.get(f.dataId).values = n)
            } else f = r_(r, c, i)
            d.push(f), (u = Fl(u.length, o))
          }
          Rl('sum', u, o)
          const [m, g] = $l(f.shape, u)
          let y = m
          s && (y = El(m, l))
          const b =
            /**
             * @license
             * Copyright 2020 Google LLC. All Rights Reserved.
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             * http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             * =============================================================================
             */
            (function (e, t, n, r) {
              const s = P(t),
                a = YA({
                  inputs: { x: e },
                  attrs: { shape: [P(e.shape) / s, s] },
                  backend: r,
                }),
                i = e_(a, 'float32', 'mean', r),
                o = YA({ inputs: { x: i }, attrs: { shape: n }, backend: r })
              return (
                r.disposeIntermediateTensorInfo(a),
                r.disposeIntermediateTensorInfo(i),
                o
              )
            })(f, g, y, i)
          for (const e of d) i.disposeIntermediateTensorInfo(e)
          return b
        },
      },
      KO = {
        kernelName: on,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s } = t,
              { axis: a, keepDims: i } = r,
              o = s.shape.length,
              l = j(a, s.shape)
            let u = l
            const c = Al(u, o)
            let h = s
            null != c &&
              ((h = i_({ inputs: { x: s }, backend: n, attrs: { perm: c } })),
              (u = Fl(u.length, s.shape.length))),
              Rl('min', u, o)
            const [p, d] = $l(h.shape, u),
              f = YA({
                inputs: { x: h },
                backend: n,
                attrs: { shape: [-1, P(d)] },
              }),
              m = e_(f, f.dtype, 'min', n)
            let g
            return (
              (g = YA(
                i
                  ? { inputs: { x: m }, backend: n, attrs: { shape: El(p, l) } }
                  : { inputs: { x: m }, backend: n, attrs: { shape: p } },
              )),
              n.disposeIntermediateTensorInfo(f),
              n.disposeIntermediateTensorInfo(m),
              null != c && n.disposeIntermediateTensorInfo(h),
              g
            )
          },
      },
      XO = UA({
        opSnippet: CA + '\n  return min(a, b);\n',
        packedOpSnippet:
          '\n  vec4 result = vec4(min(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  ' +
          EA +
          '\n  return result;\n',
        cpuKernelImpl: OR,
      }),
      YO = { kernelName: ln, backendName: 'webgl', kernelFunc: XO }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class ZO {
      constructor(e, t, n) {
        ;(this.variableNames = ['x']),
          (this.outputShape = t.map((t, n) => t[0] + e[n] + t[1]))
        const r = e.length,
          s = XE(r),
          a = t.map((e) => e[0]).join(','),
          i = t.map((t, n) => t[0] + e[n]).join(','),
          o = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, r),
          l = 'reflect' === n ? 0 : 1
        this.userCode =
          1 !== r
            ? `\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        for (int i = 0; i < ${r}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${l};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};\n          }\n        }\n        ${s} coords = outC - start;\n        setOutput(getX(${o}));\n      }\n    `
            : `\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${l};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${l};\n          }\n          setOutput(getX(outC - start));\n        }\n      `
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class JO {
      constructor(e, t, n) {
        ;(this.variableNames = ['x']),
          (this.packedInputs = !0),
          (this.packedOutput = !0),
          (this.outputShape = t.map((t, n) => t[0] + e[n] + t[1]))
        const r = e.length,
          s = XE(r),
          a = t.map((e) => e[0]).join(','),
          i = t.map((t, n) => t[0] + e[n]).join(','),
          o = lA('rc', r),
          l = lA('source', r),
          u = `${o[r - 1]} < ${this.outputShape[r - 1]}`,
          c = 1 === r ? 'source' : `vec2(${l.slice(-2).join()})`,
          h = 'reflect' === n ? 0 : 1
        let p = ''
        if (1 === r) {
          const e = `\n        ${s} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${h};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${h};\n        }\n        source -= start;\n      `
          p = `\n        ${s} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[r - 1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n      `
        } else {
          const e = `\n        ${s} source = rc;\n        ${s} lt = ${s}(lessThan(source, start));\n        ${s} gte = ${s}(greaterThanEqual(source, end));\n        ${s} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${h}) +\n                gte * ((end - 1) * 2 - source + ${h});\n        source -= start;\n      `
          p = `\n        ${s} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[r - 1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${o[r - 2]} += 1;\n        if(${o[r - 2]} < ${this.outputShape[r - 2]}) {\n          ${e}\n          result[2] = getChannel(getX(${l.join()}), ${c});\n          ${o[r - 1]} += 1;\n          if(${u}) {\n            ${e}\n            result[3] = getChannel(getX(${l.join()}), ${c});\n          }\n        }\n      `
        }
        this.userCode = `\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const QO = {
        kernelName: un,
        backendName: 'webgl',
        kernelFunc: ({ inputs: e, backend: t, attrs: n }) => {
          const { x: r } = e,
            { paddings: s, mode: a } = n,
            i = ye().getBool('WEBGL_PACK_ARRAY_OPERATIONS')
              ? new JO(r.shape, s, a)
              : new ZO(r.shape, s, a)
          return t.runWebGLProgram(i, [r], r.dtype)
        },
      },
      eM = UA({
        opSnippet: 'if (b == 0.0) return NAN;\n  return mod(a, b);',
        packedOpSnippet:
          '\n  vec4 result = mod(a, b);\n  bvec4 isNaN = equal(b, vec4(0.0));\n  ' +
          EA +
          '\n  return result;\n',
      }),
      tM = { kernelName: cn, backendName: 'webgl', kernelFunc: eM }
    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class nM {
      constructor(e, t, n) {
        ;(this.variableNames = ['probs']),
          (this.customUniforms = [{ name: 'seed', type: 'float' }]),
          (this.outputShape = [e, n]),
          (this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t - 1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t - 1}));\n      }\n    `)
        /**
         * @license
         * Copyright 2020 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
      }
    }
    const rM = UA({
        opSnippet: '\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;',
        packedOpSnippet:
          '\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n',
        checkOutOfBounds: !0,
      }),
      sM = { kernelName: gt, backendName: 'webgl', kernelFunc: rM },
      aM = 'return a - b;',
      iM = UA({
        opSnippet: aM,
        packedOpSnippet: aM,
        supportsComplex: !0,
        cpuKernelImpl: nA,
      }),
      oM = { kernelName: pr, backendName: 'webgl', kernelFunc: iM }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function lM(e) {
      const { inputs: t, backend: n, attrs: r } = e,
        { logits: s } = t,
        { dim: a } = r,
        i = j([a], s.shape),
        o = MO({
          inputs: { x: s },
          backend: n,
          attrs: { reductionIndices: i, keepDims: !1 },
        }),
        l = El(o.shape, i),
        u = YA({ inputs: { x: o }, backend: n, attrs: { shape: l } }),
        c = iM({ inputs: { a: s, b: u }, backend: n }),
        h = CD({ inputs: { x: c }, backend: n }),
        p = s_({
          inputs: { x: h },
          backend: n,
          attrs: { axis: i, keepDims: !1 },
        }),
        d = YA({ inputs: { x: p }, backend: n, attrs: { shape: l } }),
        f = rM({ inputs: { a: h, b: d }, backend: n })
      return (
        n.disposeIntermediateTensorInfo(o),
        n.disposeIntermediateTensorInfo(u),
        n.disposeIntermediateTensorInfo(c),
        n.disposeIntermediateTensorInfo(h),
        n.disposeIntermediateTensorInfo(p),
        n.disposeIntermediateTensorInfo(d),
        f
      )
    }
    const uM = { kernelName: er, backendName: 'webgl', kernelFunc: lM },
      cM = {
        kernelName: hn,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { logits: s } = t,
              { numSamples: a, seed: i, normalized: o } = r,
              l = o
                ? s
                : lM({
                    inputs: { logits: s },
                    backend: n,
                    attrs: { dim: s.shape.length - 1 },
                  }),
              u = l.shape[0],
              c = l.shape[1],
              h = new nM(u, c, a),
              p = [[i]],
              d = n.runWebGLProgram(h, [l], 'int32', p)
            return o || n.disposeIntermediateTensorInfo(l), d
          },
      },
      hM = gA + '\n  return -x;\n',
      pM = {
        kernelName: dn,
        backendName: 'webgl',
        kernelFunc: function (e) {
          const { inputs: t, backend: n } = e,
            { x: r } = t
          if (n.shouldExecuteOnCPU([r])) {
            const e = n.texData.get(r.dataId),
              [t, s] = LR(e.values, r.shape, r.dtype)
            return n.makeTensorInfo(s, r.dtype, t)
          }
          let s
          return (
            (s = ye().getBool('WEBGL_PACK_UNARY_OPERATIONS')
              ? new vA(
                  r.shape,
                  '\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n',
                )
              : new mA(r.shape, hM)),
            n.runWebGLProgram(s, [r], r.dtype)
          )
        },
      },
      dM = Oh,
      fM = {
        kernelName: mn,
        backendName: 'webgl',
        kernelFunc: function (e) {
          Er(
            'tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead',
          )
          const { inputs: t, backend: n, attrs: r } = e,
            { boxes: s, scores: a } = t,
            { maxOutputSize: i, iouThreshold: o, scoreThreshold: l } = r,
            u = n.readSync(s.dataId),
            c = n.readSync(a.dataId),
            { selectedIndices: h } = dM(u, c, i, o, l)
          return n.makeTensorInfo([h.length], 'int32', new Int32Array(h))
        },
      },
      mM = Mh,
      gM = {
        kernelName: gn,
        backendName: 'webgl',
        kernelFunc: function (e) {
          Er(
            'tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead',
          )
          const { inputs: t, backend: n, attrs: r } = e,
            { boxes: s, scores: a } = t,
            {
              maxOutputSize: i,
              iouThreshold: o,
              scoreThreshold: l,
              padToMaxOutputSize: u,
            } = r,
            c = n.readSync(s.dataId),
            h = n.readSync(a.dataId),
            { selectedIndices: p, validOutputs: d } = mM(c, h, i, o, l, u)
          return [
            n.makeTensorInfo([p.length], 'int32', new Int32Array(p)),
            n.makeTensorInfo([], 'int32', new Int32Array([d])),
          ]
        },
      },
      yM = Lh,
      bM = {
        kernelName: yn,
        backendName: 'webgl',
        kernelFunc: function (e) {
          Er(
            'tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead',
          )
          const { inputs: t, backend: n, attrs: r } = e,
            { boxes: s, scores: a } = t,
            {
              maxOutputSize: i,
              iouThreshold: o,
              scoreThreshold: l,
              softNmsSigma: u,
            } = r,
            c = n.readSync(s.dataId),
            h = n.readSync(a.dataId),
            p = i,
            d = o,
            f = l,
            m = u,
            { selectedIndices: g, selectedScores: y } = yM(c, h, p, d, f, m)
          return [
            n.makeTensorInfo([g.length], 'int32', new Int32Array(g)),
            n.makeTensorInfo([y.length], 'float32', new Float32Array(y)),
          ]
        },
      }
    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class xM {
      constructor(e, t, n, r) {
        ;(this.variableNames = ['indices']),
          (this.outputShape = [e, t]),
          (this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `)
        /**
         * @license
         * Copyright 2020 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
      }
    }
    const wM = {
      kernelName: xn,
      backendName: 'webgl',
      kernelFunc: (e) => {
        const { inputs: t, backend: n, attrs: r } = e,
          { indices: s } = t,
          { dtype: a, depth: i, onValue: o, offValue: l } = r,
          u = P(s.shape),
          c = new xM(u, i, o, l),
          h = YA({ inputs: { x: s }, backend: n, attrs: { shape: [u] } }),
          p = n.runWebGLProgram(c, [h], a)
        n.disposeIntermediateTensorInfo(h)
        const d = YA({
          inputs: { x: p },
          backend: n,
          attrs: { shape: [...s.shape, i] },
        })
        return n.disposeIntermediateTensorInfo(p), d
      },
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function vM(e) {
      const { inputs: t, backend: n } = e,
        { x: r } = t
      if ('complex64' === r.dtype) {
        const e = uF({ inputs: { input: r }, backend: n }),
          t = vM({ inputs: { x: e }, backend: n }),
          s = NF({ inputs: { input: r }, backend: n }),
          a = vM({ inputs: { x: s }, backend: n }),
          i = FA({ inputs: { real: t, imag: a }, backend: n })
        return (
          n.disposeIntermediateTensorInfo(e),
          n.disposeIntermediateTensorInfo(t),
          n.disposeIntermediateTensorInfo(s),
          n.disposeIntermediateTensorInfo(a),
          i
        )
      }
      return zD({
        attrs: {
          shape: r.shape,
          dtype: r.dtype,
          value: 'string' === r.dtype ? '' : 0,
        },
        backend: n,
      })
    }
    const kM = { kernelName: kr, backendName: 'webgl', kernelFunc: vM },
      IM = {
        kernelName: bn,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function e(t) {
            const { inputs: n, backend: r } = t,
              { x: s } = n
            if ('string' === s.dtype)
              throw new Error('onesLike is not supported under string dtype')
            if ('complex64' === s.dtype) {
              const t = uF({ inputs: { input: s }, backend: r }),
                n = e({ inputs: { x: t }, backend: r }),
                a = NF({ inputs: { input: s }, backend: r }),
                i = vM({ inputs: { x: a }, backend: r }),
                o = FA({ inputs: { real: n, imag: i }, backend: r })
              return (
                r.disposeIntermediateTensorInfo(t),
                r.disposeIntermediateTensorInfo(n),
                r.disposeIntermediateTensorInfo(a),
                r.disposeIntermediateTensorInfo(i),
                o
              )
            }
            return zD({
              attrs: { shape: s.shape, dtype: s.dtype, value: 1 },
              backend: r,
            })
          },
      },
      NM = {
        kernelName: wn,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { axis: s } = r
            if (1 === t.length)
              return ED({
                inputs: { input: t[0] },
                backend: n,
                attrs: { dim: s },
              })
            const a = t[0].shape,
              i = t[0].dtype
            t.forEach((e) => {
              M(
                a,
                e.shape,
                'All tensors passed to stack must have matching shapes',
              ),
                O(
                  i === e.dtype,
                  () => 'All tensors passed to stack must have matching dtypes',
                )
            })
            const o = [],
              l = CF({
                inputs: t.map((e) => {
                  const t = ED({
                    inputs: { input: e },
                    backend: n,
                    attrs: { dim: s },
                  })
                  return o.push(t), t
                }),
                backend: n,
                attrs: { axis: s },
              })
            return o.forEach((e) => n.disposeIntermediateTensorInfo(e)), l
          },
      }
    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class SM {
      constructor(e, t, n) {
        ;(this.variableNames = ['x']),
          (this.customUniforms = [{ name: 'value', type: 'float' }]),
          (this.outputShape = t.map((t, n) => t[0] + e[n] + t[1]))
        const r = e.length,
          s = XE(r),
          a = t.map((e) => e[0]).join(','),
          i = t.map((t, n) => t[0] + e[n]).join(','),
          o = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, r)
        this.userCode =
          1 !== r
            ? `\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${s} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `
            : `\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `
      }
    }
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class TM {
      constructor(e, t, n) {
        ;(this.variableNames = ['x']),
          (this.packedInputs = !0),
          (this.packedOutput = !0),
          (this.customUniforms = [{ name: 'value', type: 'float' }]),
          (this.outputShape = t.map((t, n) => t[0] + e[n] + t[1]))
        const r = e.length,
          s = XE(r),
          a = t.map((e) => e[0]).join(','),
          i = t.map((t, n) => t[0] + e[n]).join(','),
          o = lA('rc', r),
          l = lA('source', r),
          u = `${o[r - 1]} < ${this.outputShape[r - 1]}`,
          c = 1 === r ? 'source' : `vec2(${l.slice(-2).join()})`,
          h = [
            `${s} rc = outputLoc;`,
            `${o[r - 1]} += 1;\n       if(${u}) {\n      `,
            1 === r
              ? ''
              : `}\n       rc = outputLoc;\n       ${o[r - 2]} += 1;\n       if(${o[r - 2]} < ${this.outputShape[r - 2]}) {`,
            1 === r ? '' : `  ${o[r - 1]} += 1;\n         if(${u}) {`,
          ],
          p =
            1 === r
              ? 'rc < start || rc >= end'
              : 'any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))'
        let d = ''
        for (let e = 0, t = 1 === r ? 2 : 4; e < t; e++)
          d += `\n        ${h[e]}\n        if (${p}) {\n          result[${e}] = float(value);\n        } else {\n          ${s} source = rc - start;\n          result[${e}] = getChannel(getX(${l.join()}), ${c});\n        }\n      `
        ;(d += 1 === r ? '} ' : '}}'),
          (this.userCode = `\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `)
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const CM = (e) => {
        const { inputs: t, backend: n, attrs: r } = e,
          { x: s } = t,
          { paddings: a, constantValue: i } = r
        if (0 === P(s.shape)) {
          const e = a.map((e, t) => e[0] + s.shape[t] + e[1])
          return zD({
            backend: n,
            attrs: { shape: e, value: i, dtype: s.dtype },
          })
        }
        const o = ye().getBool('WEBGL_PACK_ARRAY_OPERATIONS')
            ? new TM(s.shape, a, i)
            : new SM(s.shape, a, i),
          l = [[i]]
        return n.runWebGLProgram(o, [s], s.dtype, l)
      },
      $M = { kernelName: vn, backendName: 'webgl', kernelFunc: CM },
      EM = UA({
        opSnippet:
          '\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n',
        packedOpSnippet:
          '\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  bvec4 isNaN1 = lessThan(a, vec4(0.0));\n  bvec4 isNaN2 = lessThan(floor(b), b);\n  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);\n  ' +
          EA +
          '\n  return result;\n',
      }),
      RM = { kernelName: kn, backendName: 'webgl', kernelFunc: EM },
      AM = {
        kernelName: Nn,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s } = t,
              { axis: a, keepDims: i } = r,
              o = s.shape.length,
              l = [],
              u = j(a, s.shape)
            let c = u
            const h = Al(c, o)
            let p,
              d = s
            if (
              (null != h &&
                ((d = i_({ inputs: { x: s }, backend: n, attrs: { perm: h } })),
                (c = Fl(c.length, o)),
                l.push(d)),
              Rl('prod', c, o),
              n.shouldExecuteOnCPU([d]))
            ) {
              const e = n.texData.get(d.dataId).values,
                {
                  outVals: t,
                  outShape: r,
                  outDtype: s,
                } = PR(d.shape, d.dtype, e, c)
              p = n.makeTensorInfo(r, s, t)
            } else {
              const [e, t] = $l(d.shape, c),
                r = P(t),
                a = YA({
                  inputs: { x: d },
                  backend: n,
                  attrs: { shape: [-1, r] },
                }),
                i = e_(a, Ts(s.dtype), 'prod', n)
              ;(p = YA({ inputs: { x: i }, backend: n, attrs: { shape: e } })),
                l.push(a),
                l.push(i)
            }
            if (i) {
              l.push(p)
              const e = El(p.shape, u)
              p = YA({ inputs: { x: p }, backend: n, attrs: { shape: e } })
            }
            return l.forEach((e) => n.disposeIntermediateTensorInfo(e)), p
          },
      },
      _M = {
        kernelName: Sn,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2022 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { paramsNestedSplits: s, paramsDenseValues: a, indices: i } = t,
              { outputRaggedRank: o } = r,
              l = s.map((e) => n.readSync(e.dataId)),
              u = s.map((e) => e.shape),
              c = n.readSync(a.dataId),
              h = n.readSync(i.dataId),
              [p, d, f] = BR(l, u, c, a.shape, a.dtype, h, i.shape, o),
              m = p.map((e) => n.makeTensorInfo([e.length], 'int32', e)),
              g = n.makeTensorInfo(f, a.dtype, d)
            return m.concat([g])
          },
      },
      FM = {
        kernelName: Tn,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2022 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              {
                shape: s,
                values: a,
                defaultValue: i,
                rowPartitionTensors: o,
              } = t,
              { rowPartitionTypes: l } = r,
              u = n.readSync(s.dataId),
              c = n.readSync(a.dataId),
              h = n.readSync(i.dataId),
              p = o.map((e) => n.readSync(e.dataId)),
              d = o.map((e) => e.shape),
              [f, m] = WR(u, s.shape, c, a.shape, a.dtype, h, i.shape, p, d, l)
            return n.makeTensorInfo(f, a.dtype, m)
          },
      },
      DM = (e) => {
        const { backend: t, attrs: n } = e,
          { start: r, stop: s, step: a, dtype: i } = n,
          o = VR(r, s, a, i)
        return t.makeTensorInfo([o.length], i, o)
      },
      OM = { kernelName: Cn, backendName: 'webgl', kernelFunc: DM },
      MM = VA({ opSnippet: 'return 1.0 / x;' }),
      LM = { kernelName: En, backendName: 'webgl', kernelFunc: MM },
      zM = VA({
        opSnippet: gA + '\n  return (x < 0.0) ? 0.0 : x;\n',
        packedOpSnippet:
          '\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n',
      }),
      PM = { kernelName: Rn, backendName: 'webgl', kernelFunc: zM },
      BM = VA({
        opSnippet: gA + '\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n',
        packedOpSnippet:
          '\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n',
      }),
      WM = { kernelName: Mn, backendName: 'webgl', kernelFunc: BM }
    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class VM {
      constructor(e, t, n, r, s) {
        ;(this.variableNames = ['A']), (this.outputShape = [])
        const [a, i, o, l] = e
        this.outputShape = [a, t, n, l]
        const u = [r && t > 1 ? i - 1 : i, r && n > 1 ? o - 1 : o],
          c = [r && t > 1 ? t - 1 : t, r && n > 1 ? n - 1 : n]
        let h
        ;(h = s
          ? '(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)'
          : 'vec2(yRC) * effectiveInputOverOutputRatioRC'),
          (this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0] / c[0]},\n          ${u[1] / c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `)
      }
    }
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class UM {
      constructor(e, t, n, r, s) {
        ;(this.variableNames = ['A']),
          (this.packedInputs = !0),
          (this.packedOutput = !0),
          (this.outputShape = [])
        const [a, i, o, l] = e
        this.outputShape = [a, t, n, l]
        const u = [r && t > 1 ? i - 1 : i, r && n > 1 ? o - 1 : o],
          c = [r && t > 1 ? t - 1 : t, r && n > 1 ? n - 1 : n]
        let h
        ;(h = s
          ? '(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)'
          : 'vec3(yRC) * effectiveInputOverOutputRatioRC'),
          (this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0] / c[0]},\n          ${u[1] / c[1]},\n          ${u[1] / c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l - 1};\n        bool hasNextRow = coords.z < ${n - 1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `)
      }
    }
    const GM = {
      kernelName: Dn,
      backendName: 'webgl',
      kernelFunc:
        /**
         * @license
         * Copyright 2020 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (e) {
          const { inputs: t, backend: n, attrs: r } = e,
            { images: s } = t,
            { alignCorners: a, halfPixelCenters: i, size: o } = r,
            [l, u] = o,
            c = ye().getBool('WEBGL_PACK_IMAGE_OPERATIONS')
              ? new UM(s.shape, l, u, a, i)
              : new VM(s.shape, l, u, a, i)
          return n.runWebGLProgram(c, [s], 'float32')
        },
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class HM {
      constructor(e, t, n) {
        ;(this.variableNames = ['dy']),
          (this.outputShape = []),
          (this.outputShape = t)
        const [, r, s] = t,
          [, a, i] = e,
          o = [n && a > 1 ? r - 1 : r, n && i > 1 ? s - 1 : s],
          l = [n && a > 1 ? a - 1 : a, n && i > 1 ? i - 1 : i],
          u = o[0] / l[0],
          c = o[1] / l[1],
          h = 1 / u,
          p = 1 / c,
          d = 2 * Math.ceil(h) + 2,
          f = 2 * Math.ceil(p) + 2
        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r - 1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${s - 1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `
      }
    }
    const jM = {
      kernelName: On,
      backendName: 'webgl',
      kernelFunc:
        /**
         * @license
         * Copyright 2020 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (e) {
          const { inputs: t, backend: n, attrs: r } = e,
            { images: s, dy: a } = t,
            { alignCorners: i } = r,
            o = new HM(a.shape, s.shape, i)
          return n.runWebGLProgram(o, [a], a.dtype)
        },
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class qM {
      constructor(e, t, n, r, s) {
        ;(this.variableNames = ['A']), (this.outputShape = [])
        const [a, i, o, l] = e
        this.outputShape = [a, t, n, l]
        const u = [r && t > 1 ? i - 1 : i, r && n > 1 ? o - 1 : o],
          c = [r && t > 1 ? t - 1 : t, r && n > 1 ? n - 1 : n],
          h = r ? '0.5' : '0.0'
        let p
        ;(p = s
          ? 'max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))'
          : 'vec2(yRC) * effectiveInputOverOutputRatioRC'),
          (this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0] / c[0]},\n          ${u[1] / c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `)
      }
    }
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class KM {
      constructor(e, t, n, r, s) {
        ;(this.variableNames = ['A']),
          (this.packedInputs = !0),
          (this.packedOutput = !0),
          (this.outputShape = [])
        const [a, i, o, l] = e
        this.outputShape = [a, t, n, l]
        const u = [r && t > 1 ? i - 1 : i, r && n > 1 ? o - 1 : o],
          c = [r && t > 1 ? t - 1 : t, r && n > 1 ? n - 1 : n],
          h = r ? '0.5' : '0.0'
        let p
        ;(p = s
          ? 'max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))'
          : 'vec3(yRC) * effectiveInputOverOutputRatioRC'),
          (this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0] / c[0]},\n          ${u[1] / c[1]},\n          ${u[1] / c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l - 1};\n        bool hasNextRow = coords.z < ${n - 1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `)
      }
    }
    const XM = {
      kernelName: _n,
      backendName: 'webgl',
      kernelFunc:
        /**
         * @license
         * Copyright 2020 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (e) {
          const { inputs: t, backend: n, attrs: r } = e,
            { images: s } = t,
            { alignCorners: a, halfPixelCenters: i, size: o } = r,
            [l, u] = o,
            c = ye().getBool('WEBGL_PACK_IMAGE_OPERATIONS')
              ? new KM(s.shape, l, u, a, i)
              : new qM(s.shape, l, u, a, i)
          return n.runWebGLProgram(c, [s], s.dtype)
        },
    }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class YM {
      constructor(e, t, n) {
        ;(this.variableNames = ['dy']),
          (this.outputShape = []),
          (this.outputShape = t)
        const [, r, s] = t,
          [, a, i] = e,
          o = [n && a > 1 ? r - 1 : r, n && i > 1 ? s - 1 : s],
          l = [n && a > 1 ? a - 1 : a, n && i > 1 ? i - 1 : i],
          u = o[0] / l[0],
          c = o[1] / l[1],
          h = 1 / u,
          p = 1 / c,
          d = 2 * Math.ceil(h) + 2,
          f = 2 * Math.ceil(p) + 2
        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `
      }
    }
    const ZM = {
      kernelName: Fn,
      backendName: 'webgl',
      kernelFunc:
        /**
         * @license
         * Copyright 2020 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (e) {
          const { inputs: t, backend: n, attrs: r } = e,
            { images: s, dy: a } = t,
            { alignCorners: i } = r,
            o = new YM(a.shape, s.shape, i)
          return n.runWebGLProgram(o, [a], a.dtype)
        },
    }
    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class JM {
      constructor(e, t) {
        this.variableNames = ['x']
        const n = e.length
        if (n > 4)
          throw new Error(
            `WebGL backend: Reverse of rank-${n} tensor is not yet supported`,
          )
        if (((this.outputShape = e), 1 === n))
          return void (this.userCode = `\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `)
        const r = e
            .map((n, r) =>
              ((n) =>
                -1 !== t.indexOf(n) && 1 !== e[n]
                  ? `${e[n]} - coords[${n}] - 1`
                  : `coords[${n}]`)(r),
            )
            .join(','),
          s = XE(n)
        this.userCode = `\n      void main() {\n        ${s} coords = getOutputCoords();\n        setOutput(getX(${r}));\n      }\n    `
      }
    }
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class QM {
      constructor(e, t) {
        ;(this.variableNames = ['x']),
          (this.packedInputs = !0),
          (this.packedOutput = !0)
        const n = e.length
        if (n > 4)
          throw new Error(
            `WebGL backend: Reverse of rank-${n} tensor is not yet supported`,
          )
        this.outputShape = e
        const r = lA('rc', n),
          s = `${r[n - 1]} + 1 < ${this.outputShape[n - 1]}`,
          a = `${r[n - 2]} + 1 < ${this.outputShape[n - 2]}`,
          i = XE(n)
        function o(n) {
          const r = e.map((r, s) =>
            (function (n, r) {
              return -1 !== t.indexOf(n) && 1 !== e[n]
                ? `${e[n]} - ${r[n]} - 1`
                : `${r[n]}`
            })(s, n),
          )
          return `getChannel(getX(${r.join(',')}), vec2(${r.slice(-2).join(',')}))`
        }
        this.userCode =
          1 === n
            ? `\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${s}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `
            : `\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${(function (
                e,
              ) {
                return o(e)
              })(
                r.slice(),
              )};\n          if(${s}){\n            result.g = ${(function (e) {
                return (e[n - 1] = '(' + e[n - 1] + ' + 1)'), o(e)
              })(
                r.slice(),
              )};\n          }\n          if(${a}) {\n            result.b = ${(function (
                e,
              ) {
                return (e[n - 2] = '(' + e[n - 2] + ' + 1)'), o(e)
              })(
                r.slice(),
              )};\n            if(${s}) {\n              result.a = ${(function (
                e,
              ) {
                return (
                  (e[n - 1] = '(' + e[n - 1] + ' + 1)'),
                  (e[n - 2] = '(' + e[n - 2] + ' + 1)'),
                  o(e)
                )
              })(
                r.slice(),
              )};\n            }\n          }\n          setOutput(result);\n        }\n    `
      }
    }
    const eL = {
      kernelName: Ln,
      backendName: 'webgl',
      kernelFunc:
        /**
         * @license
         * Copyright 2020 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (e) {
          const { inputs: t, backend: n, attrs: r } = e,
            { x: s } = t,
            { dims: a } = r,
            i = s.shape.length,
            o = j(a, s.shape)
          if (0 === i) return AA({ inputs: { x: s }, backend: n })
          const l = ye().getBool('WEBGL_PACK_ARRAY_OPERATIONS')
            ? new QM(s.shape, o)
            : new JM(s.shape, o)
          return n.runWebGLProgram(l, [s], s.dtype)
        },
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class tL {
      constructor(e, t) {
        ;(this.variableNames = ['Image']),
          (this.outputShape = []),
          (this.customUniforms = [{ name: 'params', type: 'vec4' }])
        const n = e[1],
          r = e[2]
        this.outputShape = e
        let s = ''
        ;(s =
          'number' == typeof t
            ? `float outputValue = ${t.toFixed(2)};`
            : `\n        vec3 fill = vec3(${t.join(',')});\n        float outputValue = fill[coords[3]];`),
          (this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${s}\n          if(coordX >= 0 && coordX < ${r} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `)
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ const nL = {
        kernelName: Sr,
        backendName: 'webgl',
        kernelFunc: ({ inputs: e, attrs: t, backend: n }) => {
          const { image: r } = e,
            { radians: s, fillValue: a, center: i } = t,
            o = n,
            l = new tL(r.shape, a),
            [u, c] = Vp(i, r.shape[1], r.shape[2]),
            h = [[u, c, Math.sin(s), Math.cos(s)]]
          return o.runWebGLProgram(l, [r], r.dtype, h)
        },
      },
      rL = VA({
        opSnippet:
          "\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n",
      }),
      sL = { kernelName: zn, backendName: 'webgl', kernelFunc: rL },
      aL = VA({ opSnippet: 'return inversesqrt(x);', cpuKernelImpl: UR }),
      iL = { kernelName: Pn, backendName: 'webgl', kernelFunc: aL }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class oL {
      constructor(e, t, n, r, s, a, i = !0) {
        ;(this.variableNames = ['updates', 'indices', 'defaultValue']),
          (this.outputShape = a)
        const o = XE(s.length),
          l = XE(a.length)
        let u = ''
        1 === n ? (u = 'i') : 2 === n && (u = 'i, j')
        const c = `getIndices(${u})`
        let h = ''
        1 === r ? (h = 'i') : 2 === r && (h = 'i, coords[1]')
        const p = `getUpdates(${h})`,
          d = t > 1 ? 'strides[j]' : 'strides'
        this.userCode = `\n        ${o} strides = ${o}(${s});\n\n        void main() {\n          ${l} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${d};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${p};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `
      }
    }
    const lL = {
      kernelName: Bn,
      backendName: 'webgl',
      kernelFunc:
        /**
         * @license
         * Copyright 2020 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (e) {
          const { inputs: t, backend: n, attrs: r } = e,
            { indices: s, updates: a } = t,
            { shape: i } = r,
            {
              sliceRank: o,
              numUpdates: l,
              sliceSize: u,
              strides: c,
              outputSize: h,
            } = ah(0, s, i),
            p = [h / u, u]
          if (0 === h) return n.makeTensorInfo(i, s.dtype)
          const d = YA({
              inputs: { x: s },
              backend: n,
              attrs: { shape: [l, o] },
            }),
            f = YA({ inputs: { x: a }, backend: n, attrs: { shape: [l, u] } }),
            m = n.makeTensorInfo([], 'float32', new Float32Array([0])),
            g = new oL(l, o, d.shape.length, f.shape.length, c, p),
            y = n.runWebGLProgram(g, [f, d, m], f.dtype),
            b = YA({ inputs: { x: y }, backend: n, attrs: { shape: i } })
          return (
            n.disposeIntermediateTensorInfo(d),
            n.disposeIntermediateTensorInfo(f),
            n.disposeIntermediateTensorInfo(y),
            n.disposeIntermediateTensorInfo(m),
            b
          )
        },
    }
    /**
     * @license
     * Copyright 2022 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class uL {
      constructor(e, t, n, r) {
        ;(this.variableNames = ['sortedSequence', 'values']),
          (this.customUniforms = [{ name: 'numInputs', type: 'int' }]),
          (this.outputShape = [e, n])
        const s = `for (int i = 0; i < ${Math.ceil(Math.log2(t + 1))}; ++i) { if (left >= right) break;`,
          a =
            2 === ye().getNumber('WEBGL_VERSION')
              ? 'while (left < right) {'
              : s,
          i = 'left' === r ? '<' : '<='
        this.userCode = `\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${a}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${i} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `
      }
    }
    const cL = {
      kernelName: Wn,
      backendName: 'webgl',
      kernelFunc:
        /**
         * @license
         * Copyright 2022 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
        function (e) {
          const { inputs: t, backend: n, attrs: r } = e,
            { sortedSequence: s, values: a } = t,
            { side: i } = r,
            o = new uL(s.shape[0], s.shape[1], a.shape[1], i),
            l = [[s.shape[1]]]
          return n.runWebGLProgram(o, [s, a], 'int32', l)
        },
    }
    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class hL {
      constructor(e, t, n) {
        let r, s
        if (
          ((this.variableNames = ['c', 'a', 'b']),
          (this.outputShape = t),
          n > 4)
        )
          throw Error(`Where for rank ${n} is not yet supported`)
        if (1 === n) (s = 'resRC'), (r = 'resRC')
        else {
          const n = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'],
            a = [],
            i = []
          for (let r = 0; r < t.length; r++)
            i.push(`${n[r]}`), r < e && a.push(`${n[r]}`)
          ;(r = a.join()), (s = i.join())
        }
        const a = XE(n)
        this.userCode = `\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${s}));\n        } else {\n          setOutput(getB(${s}));\n        }\n      }\n    `
      }
    }
    const pL = {
        kernelName: Vn,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n } = e,
              { condition: r, t: s, e: a } = t,
              i = new hL(r.shape.length, s.shape, s.shape.length)
            return n.runWebGLProgram(i, [r, s, a], Ss(s.dtype, a.dtype))
          },
      },
      dL = VA({
        opSnippet: `\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${Xp};\n  float scale = ${Yp};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`,
      }),
      fL = { kernelName: Un, backendName: 'webgl', kernelFunc: dL },
      mL = VA({
        opSnippet: WA + '\n  return 1.0 / (1.0 + exp(-1.0 * x));\n',
        packedOpSnippet:
          '\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n',
        cpuKernelImpl: HR,
      }),
      gL = { kernelName: Kn, backendName: 'webgl', kernelFunc: mL },
      yL = VA({
        opSnippet: '\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n',
      }),
      bL = { kernelName: qn, backendName: 'webgl', kernelFunc: yL },
      xL = VA({ opSnippet: WA + '\n  return sin(x);\n' }),
      wL = { kernelName: Hn, backendName: 'webgl', kernelFunc: xL },
      vL = VA({
        opSnippet:
          '\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n',
      }),
      kL = { kernelName: jn, backendName: 'webgl', kernelFunc: vL },
      IL = VA({
        opSnippet:
          '\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n',
      }),
      NL = { kernelName: Xn, backendName: 'webgl', kernelFunc: IL },
      SL = {
        kernelName: Jn,
        backendName: 'webgl',
        kernelFunc: (e) => {
          const { inputs: t, backend: n, attrs: r } = e,
            { x: s } = t,
            { blockShape: a, paddings: i } = r
          O(
            s.shape.length <= 4,
            () =>
              'spaceToBatchND for rank > 4 with a WebGL backend not implemented yet',
          )
          const o = a.reduce((e, t) => e * t),
            l = [[0, 0]]
          l.push(...i)
          for (let e = 1 + a.length; e < s.shape.length; ++e) l.push([0, 0])
          const u = [],
            c = CM({
              inputs: { x: s },
              backend: n,
              attrs: { paddings: l, constantValue: 0 },
            }),
            h = Up(c.shape, a, o, !1),
            p = Gp(h.length, a.length, !1),
            d = Hp(c.shape, a, o, !1),
            f = YA({ inputs: { x: c }, backend: n, attrs: { shape: h } }),
            m = i_({ inputs: { x: f }, backend: n, attrs: { perm: p } }),
            g = YA({ inputs: { x: m }, backend: n, attrs: { shape: d } })
          return (
            u.push(c),
            u.push(f),
            u.push(m),
            u.forEach((e) => n.disposeIntermediateTensorInfo(e)),
            g
          )
        },
      },
      TL = {
        kernelName: tr,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2021 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n } = e,
              { indices: r, values: s, denseShape: a, defaultValue: i } = t
            if (1 !== a.shape.length)
              throw new Error(
                `Dense shape must be a vector, saw:\n         ${a.shape}`,
              )
            if (2 !== r.shape.length)
              throw new Error(
                `Indices must be a matrix, saw:\n         ${r.shape}`,
              )
            if (1 !== s.shape.length)
              throw new Error(
                `Values must be a vector, saw:\n         ${s.shape}`,
              )
            if (0 !== i.shape.length)
              throw new Error(
                `Default value must be a scalar, saw:\n        ${i.shape}`,
              )
            const o = n.readSync(r.dataId),
              l = n.readSync(s.dataId),
              u = n.readSync(a.dataId),
              c = n.readSync(i.dataId)[0],
              [h, p, d, f, m] = KR(o, r.shape, r.dtype, l, s.dtype, u, c)
            return [
              n.makeTensorInfo(p, r.dtype, h),
              n.makeTensorInfo([p[0]], s.dtype, d),
              n.makeTensorInfo(
                [f.length],
                'bool',
                new Uint8Array(f.map((e) => Number(e))),
              ),
              n.makeTensorInfo([m.length], r.dtype, new Int32Array(m)),
            ]
          },
      },
      CL = {
        kernelName: nr,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2021 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n } = e,
              { inputIndices: r, inputShape: s, newShape: a } = t
            if (2 !== r.shape.length)
              throw new Error(
                `Input indices should be a matrix but received shape ${r.shape}`,
              )
            if (1 !== s.shape.length)
              throw new Error(
                `Input shape should be a vector but received shape ${s.shape}`,
              )
            if (1 !== a.shape.length)
              throw new Error(
                `Target shape should be a vector but received shape ${a.shape}`,
              )
            const i = Array.from(n.readSync(s.dataId)),
              o = n.readSync(r.dataId),
              l = Array.from(n.readSync(a.dataId)),
              [u, c, h] = XR(o, r.shape, r.dtype, i, l)
            return [
              n.makeTensorInfo(c, r.dtype, u),
              n.makeTensorInfo([h.length], a.dtype, new Int32Array(h)),
            ]
          },
      },
      $L = {
        kernelName: rr,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2021 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n } = e,
              { data: r, indices: s, segmentIds: a } = t
            if (r.shape.length < 1)
              throw new Error(
                'Data should be at least 1 dimensional but received scalar',
              )
            if (1 !== s.shape.length)
              throw new Error(
                `Indices should be a vector but received shape\n              ${s.shape}`,
              )
            if (1 !== a.shape.length)
              throw new Error(
                `Segment ids should be a vector but received shape\n              ${a.shape}`,
              )
            const i = n.readSync(r.dataId),
              o = n.readSync(s.dataId),
              l = n.readSync(a.dataId),
              [u, c] = YR(i, r.shape, r.dtype, o, l, !0)
            return n.makeTensorInfo(c, r.dtype, u)
          },
      },
      EL = {
        kernelName: sr,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2021 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n } = e,
              { data: r, indices: s, segmentIds: a } = t
            if (r.shape.length < 1)
              throw new Error(
                'Data should be at least 1 dimensional but received scalar',
              )
            if (1 !== s.shape.length)
              throw new Error(
                `Indices should be a vector but received shape\n             ${s.shape}`,
              )
            if (1 !== a.shape.length)
              throw new Error(
                `Segment ids should be a vector but received shape\n             ${a.shape}`,
              )
            const i = n.readSync(r.dataId),
              o = n.readSync(s.dataId),
              l = n.readSync(a.dataId),
              [u, c] = YR(i, r.shape, r.dtype, o, l)
            return n.makeTensorInfo(c, r.dtype, u)
          },
      },
      RL = {
        kernelName: ar,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { sparseIndices: s, sparseValues: a, defaultValue: i } = t,
              { outputShape: o } = r,
              {
                sliceRank: l,
                numUpdates: u,
                sliceSize: c,
                strides: h,
                outputSize: p,
              } = ah(0, s, o),
              d = !1
            if ('string' === a.dtype) {
              const e = n.bufferSync(s),
                t = n.bufferSync(a),
                r = rs(n.readSync(i.dataId)[0]),
                f = GR(e, t, o, p, c, u, l, h, r, d)
              return n.makeTensorInfo(o, f.dtype, f.values)
            }
            const f = new oL(
                u,
                l,
                s.shape.length,
                a.shape.length,
                h,
                [p, 1],
                d,
              ),
              m = n.runWebGLProgram(f, [a, s, i], a.dtype),
              g = YA({ inputs: { x: m }, backend: n, attrs: { shape: o } })
            return n.disposeIntermediateTensorInfo(m), g
          },
      },
      AL = {
        kernelName: Qn,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s } = t,
              { numOrSizeSplits: a, axis: i } = r,
              o = j(i, s.shape)[0],
              l = vd(s, a, o),
              u = s.shape.length,
              c = new Array(u).fill(0),
              h = s.shape.slice()
            return l.map((e) => {
              const t = [...h]
              t[o] = e
              const r = nF({
                inputs: { x: s },
                backend: n,
                attrs: { begin: c, size: t },
              })
              return (c[o] += e), r
            })
          },
      },
      _L = 'return sqrt(x);',
      FL = VA({ opSnippet: _L, packedOpSnippet: _L, cpuKernelImpl: ZR }),
      DL = { kernelName: Yn, backendName: 'webgl', kernelFunc: FL },
      OL = {
        kernelName: or,
        backendName: 'webgl',
        kernelFunc: VA({ opSnippet: 'return x * x;' }),
      },
      ML = 'return (a - b) * (a - b);',
      LL = UA({ opSnippet: ML, packedOpSnippet: ML }),
      zL = { kernelName: ir, backendName: 'webgl', kernelFunc: LL },
      PL = {
        kernelName: Ir,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function ({ inputs: e, attrs: t, backend: n }) {
            const { x: r } = e,
              s = gA + `\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,
              a = new mA(r.shape, s)
            return n.runWebGLProgram(a, [r], r.dtype)
          },
      }
    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class BL {
      constructor(e, t, n) {
        ;(this.variableNames = ['x']), (this.outputShape = n)
        const r = n.length,
          s = XE(n.length),
          a = XE(n.length)
        let i = ''
        if (1 === r) i = 'coords * strides + begin'
        else {
          let e = 0
          i = n
            .map(
              (t, r) => (
                e++,
                1 === n.length
                  ? `coords * strides[${r}] + begin[${r}]`
                  : `coords[${e - 1}] * strides[${r}] + begin[${r}]`
              ),
            )
            .join(',')
        }
        this.userCode = `\n      ${s} begin = ${s}(${e});\n      ${s} strides = ${s}(${t});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `
      }
    }
    const WL = {
        kernelName: lr,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s } = t,
              {
                begin: a,
                end: i,
                strides: o,
                beginMask: l,
                endMask: u,
                ellipsisMask: c,
                newAxisMask: h,
                shrinkAxisMask: p,
              } = r,
              {
                finalShapeSparse: d,
                finalShape: f,
                isIdentity: m,
                sliceDim0: g,
                isSimpleSlice: y,
                begin: b,
                end: x,
                strides: w,
              } = Bi(s.shape, a, i, o, l, u, c, h, p)
            let v
            if (m) v = YA({ inputs: { x: s }, backend: n, attrs: { shape: f } })
            else if (g || y) {
              O(
                s.shape.length >= 1,
                () => `Input must have rank at least 1, got: ${s.shape.length}`,
              )
              const e = Ci(b, x, w),
                t = nF({
                  inputs: { x: s },
                  backend: n,
                  attrs: { begin: b, size: e },
                })
              ;(v = YA({ inputs: { x: t }, backend: n, attrs: { shape: f } })),
                n.disposeIntermediateTensorInfo(t)
            } else if (n.shouldExecuteOnCPU([s])) {
              const e = n.readSync(s.dataId),
                t = qa(s.shape, s.dtype, e),
                r = JR(d, t, w, b)
              v = n.makeTensorInfo(f, s.dtype, r.values)
            } else {
              const e = new BL(b, w, d)
              v = n.runWebGLProgram(e, [s], s.dtype)
            }
            const k = YA({ inputs: { x: v }, backend: n, attrs: { shape: f } })
            return n.disposeIntermediateTensorInfo(v), k
          },
      },
      VL = {
        kernelName: ur,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2021 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              {
                separator: s,
                nGramWidths: a,
                leftPad: i,
                rightPad: o,
                padWidth: l,
                preserveShortSequences: u,
              } = r,
              { data: c, dataSplits: h } = t,
              p = n.readSync(c.dataId),
              d = n.readSync(h.dataId),
              [f, m] = QR(p, d, s, a, i, o, l, u)
            return [
              n.makeTensorInfo([f.length], 'string', f),
              n.makeTensorInfo(h.shape, 'int32', m),
            ]
          },
      },
      UL = {
        kernelName: cr,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2021 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { skipEmpty: s } = r,
              { input: a, delimiter: i } = t
            if ('string' !== a.dtype)
              throw new Error('Input must be of datatype string')
            if (1 !== a.shape.length)
              throw new Error(`Input must be a vector, got shape: ${a.shape}`)
            if (0 !== i.shape.length)
              throw new Error(
                `Delimiter must be a scalar, got shape: ${i.shape}`,
              )
            const o = n.readSync(a.dataId),
              l = n.readSync(i.dataId)[0],
              [u, c, h] = eA(o, l, s),
              p = c.length
            return [
              n.makeTensorInfo([p, 2], 'int32', u),
              n.makeTensorInfo([p], 'string', c),
              n.makeTensorInfo([2], 'int32', new Int32Array(h)),
            ]
          },
      },
      GL = {
        kernelName: hr,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2021 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { numBuckets: s } = r,
              { input: a } = t
            if ('string' !== a.dtype)
              throw new Error('Input must be of datatype string')
            if (s <= 0) throw new Error('Number of buckets must be at least 1')
            const i = n.readSync(a.dataId),
              o = tA(i, s)
            return n.makeTensorInfo(a.shape, 'int32', o)
          },
      },
      HL = VA({ opSnippet: 'return tan(x);' }),
      jL = { kernelName: dr, backendName: 'webgl', kernelFunc: HL },
      qL = VA({
        opSnippet:
          '\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n',
      }),
      KL = { kernelName: fr, backendName: 'webgl', kernelFunc: qL }
    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class XL {
      constructor(e, t) {
        this.variableNames = ['A']
        const n = new Array(e.length)
        for (let r = 0; r < n.length; r++) n[r] = e[r] * t[r]
        ;(this.outputShape = n), (this.rank = n.length)
        const r = XE(this.rank),
          s = (function (e) {
            const t = e.length
            if (t > 5) throw Error(`Tile for rank ${t} is not yet supported`)
            if (1 === t) return `imod(resRC, ${e[0]})`
            const n = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'],
              r = []
            for (let t = 0; t < e.length; t++) r.push(`imod(${n[t]}, ${e[t]})`)
            return r.join()
          })(e)
        this.userCode = `\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${s}));\n      }\n    `
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ function YL(e) {
      const { inputs: t, backend: n, attrs: r } = e,
        { x: s } = t,
        { reps: a } = r
      if ('string' === s.dtype || s.shape.length > 5) {
        const e = n.readSync(s.dataId),
          t = 'string' === s.dtype ? e.map((e) => rs(e)) : e,
          r = qa(s.shape, s.dtype, t),
          i = rA(r, a)
        return n.makeTensorInfo(i.shape, i.dtype, i.values)
      }
      const i = new XL(s.shape, a)
      return n.runWebGLProgram(i, [s], s.dtype)
    }
    const ZL = { kernelName: mr, backendName: 'webgl', kernelFunc: YL }
    class JL {
      constructor(e) {
        ;(this.variableNames = ['x', 'indices']),
          (this.customUniforms = [
            { name: 'n', type: 'int' },
            { name: 'firstPass', type: 'int' },
            { name: 'negativeInf', type: 'float' },
            { name: 'dir', type: 'int' },
            { name: 'inc', type: 'int' },
          ]),
          (this.outputShape = e),
          (this.userCode =
            '\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     ')
      }
    }
    class QL {
      constructor(e) {
        ;(this.variableNames = ['x', 'indices']),
          (this.customUniforms = [
            { name: 'n', type: 'int' },
            { name: 'firstPass', type: 'int' },
            { name: 'k', type: 'int' },
          ]),
          (this.outputShape = e),
          (this.userCode =
            '\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     ')
        /**
         * @license
         * Copyright 2020 Google LLC. All Rights Reserved.
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =============================================================================
         */
      }
    }
    function ez(e, t) {
      null !== t && e.disposeIntermediateTensorInfo(t)
    }
    function tz(e) {
      let t = 1
      for (; t < e; ) t *= 2
      return t
    }
    const nz = {
      kernelName: gr,
      backendName: 'webgl',
      kernelFunc: function (e) {
        const { inputs: t, backend: n, attrs: r } = e,
          { x: s } = t,
          { k: a, sorted: i } = r,
          o = ye().getNumber('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD'),
          l = ye().getNumber('TOPK_K_CPU_HANDOFF_THRESHOLD'),
          u = s.shape,
          c = u[u.length - 1]
        if (n.shouldExecuteOnCPU([s]) || c < o || a > l) {
          const e = n.readSync(s.dataId),
            [t, r] = sA(e, u, s.dtype, a, i)
          return [
            n.makeTensorInfo(t.shape, t.dtype, t.values),
            n.makeTensorInfo(r.shape, r.dtype, r.values),
          ]
        }
        if (0 === a)
          return (
            (u[u.length - 1] = 0),
            [n.makeTensorInfo(u, s.dtype, []), n.makeTensorInfo(u, 'int32', [])]
          )
        if (1 === c)
          return [
            s,
            zD({ attrs: { shape: u, dtype: 'int32', value: 0 }, backend: n }),
          ]
        const h = n.texData.get(s.dataId),
          p = null !== h && h.isPacked,
          d = p ? n.unpackTensor(s) : s,
          f = P(u) / c,
          m = YA({ inputs: { x: d }, attrs: { shape: [f, c] }, backend: n })
        p && ez(n, d)
        const g = tz(a),
          y = tz(c)
        let b = null
        const x = () => (null === b ? [m, m] : [m, b]),
          w = (e, t, r) => {
            const s = x(),
              a = new JL(r),
              i = [
                [c],
                [null === b ? 1 : 0],
                [Number.NEGATIVE_INFINITY],
                [e],
                [t],
              ],
              o = b
            ;(b = n.runWebGLProgram(a, s, 'int32', i)), ez(n, o)
          }
        for (let e = 1; e < g; e *= 2) {
          const t = 2 * e
          for (let n = e; n >= 1; n /= 2) w(t, n, [f, y])
        }
        for (let e = y; e > g; e /= 2) {
          const t = x(),
            r = new QL([f, e / 2]),
            s = [[c], [null === b ? 1 : 0], [g]],
            a = b
          ;(b = n.runWebGLProgram(r, t, 'int32', s)), ez(n, a)
          const i = g / 2,
            o = 2 * i
          for (let e = i; e >= 1; e /= 2) w(o, e, b.shape)
        }
        let v = b
        ;(b = nF({
          inputs: { x: b },
          backend: n,
          attrs: { begin: 0, size: [f, a] },
        })),
          ez(n, v)
        let k = rO({
          inputs: { x: m, indices: b },
          backend: n,
          attrs: { axis: 1, batchDims: 1 },
        })
        ez(n, m)
        const I = u.slice(0, -1)
        I.push(a),
          (v = b),
          (b = YA({ inputs: { x: b }, attrs: { shape: I }, backend: n })),
          ez(n, v)
        const N = k
        return (
          (k = YA({ inputs: { x: k }, attrs: { shape: I }, backend: n })),
          ez(n, N),
          [k, b]
        )
      },
    }
    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class rz {
      constructor(e, t, n, r, s, a) {
        ;(this.variableNames = ['Image', 'Transforms']), (this.outputShape = a)
        const i = 'nearest' === n ? 1 : 2
        let o
        switch (r) {
          case 'constant':
          default:
            o = 1
            break
          case 'reflect':
            o = 2
            break
          case 'wrap':
            o = 3
            break
          case 'nearest':
            o = 4
        }
        this.userCode = `\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${o} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${s});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${s});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${t}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${i} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `
      }
    }
    const sz = {
        kernelName: yr,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2021 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { image: s, transforms: a } = t,
              {
                interpolation: i,
                fillMode: o,
                fillValue: l,
                outputShape: u,
              } = r,
              [c, h, p, d] = s.shape,
              [f, m] = null != u ? u : [h, p],
              g = new rz(h, p, i, o, l, [c, f, m, d])
            return n.runWebGLProgram(g, [s, a], 'float32')
          },
      },
      az = {
        kernelName: xr,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the License);
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an AS IS BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, attrs: n, backend: r } = e,
              { axis: s } = n,
              { x: a } = t
            _E(a, 'unique'),
              console.warn(
                'WARNING: ',
                'UI might be locked temporarily as data is being downloaded',
              )
            const i = r.readSync(a.dataId),
              {
                outputValues: o,
                outputShape: l,
                indices: u,
              } = iA(i, s, a.shape, a.dtype)
            return [
              r.makeTensorInfo(l, a.dtype, o),
              r.makeTensorInfo([u.length], 'int32', u),
            ]
          },
      },
      iz = {
        kernelName: wr,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { value: s } = t
            let { axis: a } = r
            a < 0 && (a += s.shape.length)
            const i = s,
              o = i.shape.length,
              l = s.shape[a],
              u = new Array(o - 1)
            let c = 0
            for (let e = 0; e < o; e++) e !== a && (u[c++] = i.shape[e])
            const h = [],
              p = new Array(o).fill(0),
              d = i.shape.slice()
            d[a] = 1
            const f = new Array(l)
            for (let e = 0; e < f.length; e++) {
              p[a] = e
              const t = nF({
                  inputs: { x: i },
                  backend: n,
                  attrs: { begin: p, size: d },
                }),
                r = YA({ inputs: { x: t }, backend: n, attrs: { shape: u } })
              ;(f[e] = r), h.push(t)
            }
            return h.forEach((e) => n.disposeIntermediateTensorInfo(e)), f
          },
      }
    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */ class oz {
      constructor(e, t) {
        this.variableNames = ['x', 'segmentIds']
        const n = e.windowSize,
          r = e.batchSize,
          s = e.inSize,
          a = e.numSegments,
          i = a * Math.ceil(s / n)
        this.outputShape = [r, i]
        const o = 4 * Math.floor(n / 4),
          l = n % 4,
          u = '\n        sumValue += dot(values, segFilter);\n    '
        let c = ''
        s % n > 0 &&
          (c = `\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `)
        let h = ''
        s % n > 0 &&
          (h = `\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return -1.0;\n        }\n      `),
          (this.userCode = `\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1 === l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${u}\n        } else if (${2 === l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${u}\n        } else if (${3 === l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `)
      }
    }
    const lz = {
        kernelName: vr,
        backendName: 'webgl',
        kernelFunc:
          /**
           * @license
           * Copyright 2020 Google LLC. All Rights Reserved.
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           * http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           * =============================================================================
           */
          function (e) {
            const { inputs: t, backend: n, attrs: r } = e,
              { x: s, segmentIds: a } = t,
              { numSegments: i } = r,
              o = s.shape.length,
              l = []
            let u = 0
            const c = Al([u], o)
            let h = s
            null != c &&
              ((h = i_({ inputs: { x: s }, backend: n, attrs: { perm: c } })),
              l.push(h),
              (u = Fl(1, o)[0]))
            const p = Od(h.shape, u, i),
              d = P([h.shape[u]]),
              f = YA({
                inputs: { x: h },
                backend: n,
                attrs: { shape: [-1, d] },
              })
            l.push(f)
            const m = Ts(s.dtype),
              g = (e, t, r, s, a) => {
                const i = e.shape[0],
                  o = e.shape[1],
                  u = Dd(o, a),
                  c = new oz(
                    { windowSize: u, inSize: o, batchSize: i, numSegments: a },
                    t,
                  ),
                  h = n.compileAndRun(c, [e, r], s)
                if ((l.push(h), h.shape[1] === a)) return h
                const p = DM({
                    backend: n,
                    attrs: { start: 0, stop: a, step: 1, dtype: 'float32' },
                  }),
                  d = YL({
                    inputs: { x: p },
                    backend: n,
                    attrs: { reps: [o / u] },
                  })
                return l.push(p), l.push(d), g(h, t, d, s, a)
              },
              y = YA({
                inputs: { x: g(f, 'unsortedSegmentSum', a, m, i) },
                backend: n,
                attrs: { shape: p },
              })
            let b = y
            if (null != c) {
              l.push(y)
              const e = _l(c)
              b = i_({ inputs: { x: b }, backend: n, attrs: { perm: e } })
            }
            return l.forEach((e) => n.disposeIntermediateTensorInfo(e)), b
          },
      },
      uz = [
        u_,
        h_,
        d_,
        m_,
        b_,
        v_,
        k_,
        I_,
        E_,
        R_,
        __,
        D_,
        M_,
        z_,
        B_,
        U_,
        G_,
        q_,
        K_,
        X_,
        J_,
        sF,
        aF,
        iF,
        hF,
        fF,
        yF,
        DA,
        wF,
        $F,
        MF,
        WF,
        VF,
        UF,
        GF,
        HF,
        qF,
        XF,
        ZF,
        rD,
        sD,
        aD,
        oD,
        cD,
        dD,
        fD,
        gD,
        bD,
        xD,
        vD,
        kD,
        ND,
        TD,
        $D,
        RD,
        FD,
        MD,
        PD,
        WD,
        GD,
        jD,
        XD,
        JD,
        QD,
        tO,
        sO,
        iO,
        lO,
        _A,
        uO,
        SF,
        hO,
        dO,
        mO,
        LA,
        yO,
        xO,
        wO,
        kO,
        NO,
        TO,
        $O,
        RO,
        FO,
        OO,
        LO,
        PO,
        BO,
        WO,
        GO,
        HO,
        jO,
        qO,
        KO,
        YO,
        QO,
        tM,
        cM,
        XA,
        pM,
        fM,
        gM,
        bM,
        lF,
        wM,
        IM,
        NM,
        $M,
        RM,
        BA,
        AM,
        _M,
        FM,
        OM,
        cF,
        sM,
        LM,
        PM,
        WM,
        ZA,
        GM,
        jM,
        XM,
        ZM,
        eL,
        nL,
        sL,
        iL,
        lL,
        cL,
        pL,
        fL,
        gL,
        bL,
        wL,
        kL,
        rF,
        uM,
        NL,
        SL,
        TL,
        CL,
        $L,
        EL,
        RL,
        AL,
        DL,
        OL,
        zL,
        PL,
        WL,
        VL,
        UL,
        GL,
        oM,
        a_,
        jL,
        KL,
        ZL,
        nz,
        sz,
        o_,
        az,
        iz,
        lz,
        kM,
      ]
    for (const e of uz) Mr(e)
    n(312)
    const cz = {
      moveTickSize: 50,
      videoContainerId: 'webgazerVideoContainer',
      videoElementId: 'webgazerVideoFeed',
      videoElementCanvasId: 'webgazerVideoCanvas',
      faceOverlayId: 'webgazerFaceOverlay',
      faceFeedbackBoxId: 'webgazerFaceFeedbackBox',
      gazeDotId: 'webgazerGazeDot',
      videoViewerWidth: 320,
      videoViewerHeight: 240,
      faceFeedbackBoxRatio: 0.66,
      showVideo: !0,
      mirrorVideo: !0,
      showFaceOverlay: !0,
      showFaceFeedbackBox: !0,
      showGazeDot: !0,
      camConstraints: {
        video: {
          width: { min: 320, ideal: 640, max: 1920 },
          height: { min: 240, ideal: 480, max: 1080 },
          facingMode: 'user',
        },
      },
      dataTimestep: 50,
      showVideoPreview: !0,
      applyKalmanFilter: !0,
      saveDataAcrossSessions: !0,
      storingPoints: !1,
      trackEye: 'both',
    }
    n(190)
    var hz = n(790),
      pz = n.n(hz),
      dz = function () {
        return (dz =
          Object.assign ||
          function (e) {
            for (var t, n = 1, r = arguments.length; n < r; n++)
              for (var s in (t = arguments[n]))
                Object.prototype.hasOwnProperty.call(t, s) && (e[s] = t[s])
            return e
          }).apply(this, arguments)
      }
    function fz(e, t, n, r) {
      return new (n || (n = Promise))(function (s, a) {
        function i(e) {
          try {
            l(r.next(e))
          } catch (e) {
            a(e)
          }
        }
        function o(e) {
          try {
            l(r.throw(e))
          } catch (e) {
            a(e)
          }
        }
        function l(e) {
          var t
          e.done
            ? s(e.value)
            : ((t = e.value),
              t instanceof n
                ? t
                : new n(function (e) {
                    e(t)
                  })).then(i, o)
        }
        l((r = r.apply(e, t || [])).next())
      })
    }
    function mz(e, t) {
      var n,
        r,
        s,
        a,
        i = {
          label: 0,
          sent: function () {
            if (1 & s[0]) throw s[1]
            return s[1]
          },
          trys: [],
          ops: [],
        }
      return (
        (a = { next: o(0), throw: o(1), return: o(2) }),
        'function' == typeof Symbol &&
          (a[Symbol.iterator] = function () {
            return this
          }),
        a
      )
      function o(a) {
        return function (o) {
          return (function (a) {
            if (n) throw new TypeError('Generator is already executing.')
            for (; i; )
              try {
                if (
                  ((n = 1),
                  r &&
                    (s =
                      2 & a[0]
                        ? r.return
                        : a[0]
                          ? r.throw || ((s = r.return) && s.call(r), 0)
                          : r.next) &&
                    !(s = s.call(r, a[1])).done)
                )
                  return s
                switch (((r = 0), s && (a = [2 & a[0], s.value]), a[0])) {
                  case 0:
                  case 1:
                    s = a
                    break
                  case 4:
                    return i.label++, { value: a[1], done: !1 }
                  case 5:
                    i.label++, (r = a[1]), (a = [0])
                    continue
                  case 7:
                    ;(a = i.ops.pop()), i.trys.pop()
                    continue
                  default:
                    if (
                      !(
                        (s = (s = i.trys).length > 0 && s[s.length - 1]) ||
                        (6 !== a[0] && 2 !== a[0])
                      )
                    ) {
                      i = 0
                      continue
                    }
                    if (3 === a[0] && (!s || (a[1] > s[0] && a[1] < s[3]))) {
                      i.label = a[1]
                      break
                    }
                    if (6 === a[0] && i.label < s[1]) {
                      ;(i.label = s[1]), (s = a)
                      break
                    }
                    if (s && i.label < s[2]) {
                      ;(i.label = s[2]), i.ops.push(a)
                      break
                    }
                    s[2] && i.ops.pop(), i.trys.pop()
                    continue
                }
                a = t.call(e, i)
              } catch (e) {
                ;(a = [6, e]), (r = 0)
              } finally {
                n = s = 0
              }
            if (5 & a[0]) throw a[1]
            return { value: a[0] ? a[1] : void 0, done: !0 }
          })([a, o])
        }
      }
    }
    function gz(e, t, n, r) {
      return new (n || (n = Promise))(function (s, a) {
        function i(e) {
          try {
            l(r.next(e))
          } catch (e) {
            a(e)
          }
        }
        function o(e) {
          try {
            l(r.throw(e))
          } catch (e) {
            a(e)
          }
        }
        function l(e) {
          var t
          e.done
            ? s(e.value)
            : ((t = e.value),
              t instanceof n
                ? t
                : new n(function (e) {
                    e(t)
                  })).then(i, o)
        }
        l((r = r.apply(e, t || [])).next())
      })
    }
    function yz(e, t) {
      var n,
        r,
        s,
        a,
        i = {
          label: 0,
          sent: function () {
            if (1 & s[0]) throw s[1]
            return s[1]
          },
          trys: [],
          ops: [],
        }
      return (
        (a = { next: o(0), throw: o(1), return: o(2) }),
        'function' == typeof Symbol &&
          (a[Symbol.iterator] = function () {
            return this
          }),
        a
      )
      function o(a) {
        return function (o) {
          return (function (a) {
            if (n) throw new TypeError('Generator is already executing.')
            for (; i; )
              try {
                if (
                  ((n = 1),
                  r &&
                    (s =
                      2 & a[0]
                        ? r.return
                        : a[0]
                          ? r.throw || ((s = r.return) && s.call(r), 0)
                          : r.next) &&
                    !(s = s.call(r, a[1])).done)
                )
                  return s
                switch (((r = 0), s && (a = [2 & a[0], s.value]), a[0])) {
                  case 0:
                  case 1:
                    s = a
                    break
                  case 4:
                    return i.label++, { value: a[1], done: !1 }
                  case 5:
                    i.label++, (r = a[1]), (a = [0])
                    continue
                  case 7:
                    ;(a = i.ops.pop()), i.trys.pop()
                    continue
                  default:
                    if (
                      !(s = (s = i.trys).length > 0 && s[s.length - 1]) &&
                      (6 === a[0] || 2 === a[0])
                    ) {
                      i = 0
                      continue
                    }
                    if (3 === a[0] && (!s || (a[1] > s[0] && a[1] < s[3]))) {
                      i.label = a[1]
                      break
                    }
                    if (6 === a[0] && i.label < s[1]) {
                      ;(i.label = s[1]), (s = a)
                      break
                    }
                    if (s && i.label < s[2]) {
                      ;(i.label = s[2]), i.ops.push(a)
                      break
                    }
                    s[2] && i.ops.pop(), i.trys.pop()
                    continue
                }
                a = t.call(e, i)
              } catch (e) {
                ;(a = [6, e]), (r = 0)
              } finally {
                n = s = 0
              }
            if (5 & a[0]) throw a[1]
            return { value: a[0] ? a[1] : void 0, done: !0 }
          })([a, o])
        }
      }
    }
    var bz = function (e) {
        return {
          startEndTensor: e,
          startPoint: Mo(e, [0, 0], [-1, 2]),
          endPoint: Mo(e, [0, 2], [-1, 2]),
        }
      },
      xz = { strides: [8, 16], anchors: [2, 6] }
    function wz(e, t) {
      var n, r, s
      if (e.topLeft instanceof gs && e.bottomRight instanceof gs) {
        var a = qi(function () {
          return [
            _o([Mo(pu(t - 1, e.topLeft), 0, 1), Mo(e.topLeft, 1, 1)]),
            _o([pu(t - 1, Mo(e.bottomRight, 0, 1)), Mo(e.bottomRight, 1, 1)]),
          ]
        })
        ;(n = a[0]),
          (r = a[1]),
          null != e.landmarks &&
            (s = qi(function () {
              var n = pu(Bc([t - 1, 0]), e.landmarks),
                r = Bc([1, -1])
              return Do(n, r)
            }))
      } else {
        var i = e.topLeft,
          o = i[0],
          l = i[1],
          u = e.bottomRight,
          c = u[0],
          h = u[1]
        ;(n = [t - 1 - o, l]),
          (r = [t - 1 - c, h]),
          null != e.landmarks &&
            (s = e.landmarks.map(function (e) {
              return [t - 1 - e[0], e[1]]
            }))
      }
      var p = { topLeft: n, bottomRight: r }
      return (
        null != s && (p.landmarks = s),
        null != e.probability &&
          (p.probability =
            e.probability instanceof gs
              ? e.probability.clone()
              : e.probability),
        p
      )
    }
    function vz(e, t) {
      return qi(function () {
        var n
        return (
          (n = e.hasOwnProperty('box') ? e.box : e),
          Oc(
            (function (e, t) {
              var n = Do(e.startPoint, t),
                r = Do(e.endPoint, t),
                s = Zo([n, r], 1)
              return bz(s)
            })(n, t).startEndTensor,
          )
        )
      })
    }
    var kz = (function () {
      function e(e, t, n, r, s, a) {
        ;(this.blazeFaceModel = e),
          (this.width = t),
          (this.height = n),
          (this.maxFaces = r),
          (this.anchorsData = (function (e, t, n) {
            for (var r = [], s = 0; s < n.strides.length; s++)
              for (
                var a = n.strides[s],
                  i = Math.floor((t + a - 1) / a),
                  o = Math.floor((e + a - 1) / a),
                  l = n.anchors[s],
                  u = 0;
                u < i;
                u++
              )
                for (var c = a * (u + 0.5), h = 0; h < o; h++)
                  for (var p = a * (h + 0.5), d = 0; d < l; d++) r.push([p, c])
            return r
          })(t, n, xz)),
          (this.anchors = Wc(this.anchorsData)),
          (this.inputSizeData = [t, n]),
          (this.inputSize = Bc([t, n])),
          (this.iouThreshold = s),
          (this.scoreThreshold = a)
      }
      return (
        (e.prototype.getBoundingBoxes = function (e, t, n) {
          return (
            void 0 === n && (n = !0),
            gz(this, void 0, void 0, function () {
              var r,
                s,
                a,
                i,
                o,
                l,
                u,
                c,
                h,
                p,
                d,
                f,
                m,
                g,
                y = this
              return yz(this, function (b) {
                switch (b.label) {
                  case 0:
                    return (
                      (r = qi(function () {
                        var t = yp.resizeBilinear(e, [y.width, y.height]),
                          n = Do(pu(yl(t, 255), 0.5), 2),
                          r = y.blazeFaceModel.predict(n),
                          s = Oc(r),
                          a = (function (e, t, n) {
                            var r = Mo(e, [0, 1], [-1, 2]),
                              s = ro(r, t),
                              a = Mo(e, [0, 3], [-1, 2]),
                              i = yl(a, n),
                              o = yl(s, n),
                              l = yl(i, 2),
                              u = pu(o, l),
                              c = ro(o, l),
                              h = Do(u, n),
                              p = Do(c, n)
                            return Zo([h, p], 1)
                          })(s, y.anchors, y.inputSize),
                          i = Mo(s, [0, 0], [-1, 1])
                        return [s, a, Oc(Oo(i))]
                      })),
                      (s = r[0]),
                      (a = r[1]),
                      (i = r[2]),
                      (o = console.warn),
                      (console.warn = function () {}),
                      (l = yp.nonMaxSuppression(
                        a,
                        i,
                        this.maxFaces,
                        this.iouThreshold,
                        this.scoreThreshold,
                      )),
                      (console.warn = o),
                      [4, l.array()]
                    )
                  case 1:
                    return (
                      (u = b.sent()),
                      l.dispose(),
                      (c = u.map(function (e) {
                        return Mo(a, [e, 0], [1, -1])
                      })),
                      t
                        ? [3, 3]
                        : [
                            4,
                            Promise.all(
                              c.map(function (e) {
                                return gz(y, void 0, void 0, function () {
                                  var t
                                  return yz(this, function (n) {
                                    switch (n.label) {
                                      case 0:
                                        return [4, e.array()]
                                      case 1:
                                        return (
                                          (t = n.sent()), e.dispose(), [2, t]
                                        )
                                    }
                                  })
                                })
                              }),
                            ),
                          ]
                    )
                  case 2:
                    ;(c = b.sent()), (b.label = 3)
                  case 3:
                    for (
                      h = e.shape[1],
                        p = e.shape[2],
                        d = t
                          ? yl([p, h], this.inputSize)
                          : [
                              p / this.inputSizeData[0],
                              h / this.inputSizeData[1],
                            ],
                        f = [],
                        m = function (e) {
                          var r = c[e],
                            a = qi(function () {
                              var a = bz(r instanceof gs ? r : Wc(r))
                              if (!n) return a
                              var o,
                                l = u[e]
                              return (
                                (o = t
                                  ? Mo(y.anchors, [l, 0], [1, 2])
                                  : y.anchorsData[l]),
                                {
                                  box: a,
                                  landmarks: Eo(
                                    Oc(Mo(s, [l, 5], [1, -1])),
                                    [6, -1],
                                  ),
                                  probability: Mo(i, [l], [1]),
                                  anchor: o,
                                }
                              )
                            })
                          f.push(a)
                        },
                        g = 0;
                      g < c.length;
                      g++
                    )
                      m(g)
                    return (
                      a.dispose(),
                      i.dispose(),
                      s.dispose(),
                      [2, { boxes: f, scaleFactor: d }]
                    )
                }
              })
            })
          )
        }),
        (e.prototype.estimateFaces = function (e, t, n, r) {
          return (
            void 0 === t && (t = !1),
            void 0 === n && (n = !1),
            void 0 === r && (r = !0),
            gz(this, void 0, void 0, function () {
              var s,
                a,
                i,
                o,
                l,
                u,
                c = this
              return yz(this, function (h) {
                switch (h.label) {
                  case 0:
                    return (
                      (s = (function (e) {
                        return e instanceof gs
                          ? [e.shape[0], e.shape[1]]
                          : [e.height, e.width]
                      })(e)),
                      (a = s[1]),
                      (i = qi(function () {
                        return (
                          e instanceof gs || (e = ki(e)),
                          Gl(Ka(e, 'float32'), 0)
                        )
                      })),
                      [4, this.getBoundingBoxes(i, t, r)]
                    )
                  case 1:
                    return (
                      (o = h.sent()),
                      (l = o.boxes),
                      (u = o.scaleFactor),
                      i.dispose(),
                      t
                        ? [
                            2,
                            l.map(function (e) {
                              var t = vz(e, u),
                                s = {
                                  topLeft: Mo(t, [0], [2]),
                                  bottomRight: Mo(t, [2], [2]),
                                }
                              if (r) {
                                var i = e,
                                  o = i.landmarks,
                                  l = i.probability,
                                  c = i.anchor,
                                  h = Do(ro(o, c), u)
                                ;(s.landmarks = h), (s.probability = l)
                              }
                              return n && (s = wz(s, a)), s
                            }),
                          ]
                        : [
                            2,
                            Promise.all(
                              l.map(function (e) {
                                return gz(c, void 0, void 0, function () {
                                  var t,
                                    s,
                                    i,
                                    o,
                                    l,
                                    c,
                                    h,
                                    p,
                                    d,
                                    f,
                                    m,
                                    g = this
                                  return yz(this, function (y) {
                                    switch (y.label) {
                                      case 0:
                                        return (
                                          (t = vz(e, u)),
                                          r ? [3, 2] : [4, t.array()]
                                        )
                                      case 1:
                                        return (
                                          (l = y.sent()),
                                          (s = {
                                            topLeft: l.slice(0, 2),
                                            bottomRight: l.slice(2),
                                          }),
                                          [3, 4]
                                        )
                                      case 2:
                                        return [
                                          4,
                                          Promise.all(
                                            [e.landmarks, t, e.probability].map(
                                              function (e) {
                                                return gz(
                                                  g,
                                                  void 0,
                                                  void 0,
                                                  function () {
                                                    return yz(
                                                      this,
                                                      function (t) {
                                                        return [2, e.array()]
                                                      },
                                                    )
                                                  },
                                                )
                                              },
                                            ),
                                          ),
                                        ]
                                      case 3:
                                        ;(i = y.sent()),
                                          (o = i[0]),
                                          (l = i[1]),
                                          (c = i[2]),
                                          (h = e.anchor),
                                          (d = (p = u)[0]),
                                          (f = p[1]),
                                          (m = o.map(function (e) {
                                            return [
                                              (e[0] + h[0]) * d,
                                              (e[1] + h[1]) * f,
                                            ]
                                          })),
                                          (s = {
                                            topLeft: l.slice(0, 2),
                                            bottomRight: l.slice(2),
                                            landmarks: m,
                                            probability: c,
                                          }),
                                          (function (e) {
                                            e.startEndTensor.dispose(),
                                              e.startPoint.dispose(),
                                              e.endPoint.dispose()
                                          })(e.box),
                                          e.landmarks.dispose(),
                                          e.probability.dispose(),
                                          (y.label = 4)
                                      case 4:
                                        return (
                                          t.dispose(),
                                          n && (s = wz(s, a)),
                                          [2, s]
                                        )
                                    }
                                  })
                                })
                              }),
                            ),
                          ]
                    )
                }
              })
            })
          )
        }),
        e
      )
    })()
    function Iz(e) {
      var t = void 0 === e ? {} : e,
        n = t.maxFaces,
        r = void 0 === n ? 10 : n,
        s = t.inputWidth,
        a = void 0 === s ? 128 : s,
        i = t.inputHeight,
        o = void 0 === i ? 128 : i,
        l = t.iouThreshold,
        u = void 0 === l ? 0.3 : l,
        c = t.scoreThreshold,
        h = void 0 === c ? 0.75 : c,
        p = t.modelUrl
      return gz(this, void 0, void 0, function () {
        var e
        return yz(this, function (t) {
          switch (t.label) {
            case 0:
              return null == p ? [3, 2] : [4, rk(p)]
            case 1:
              return (e = t.sent()), [3, 4]
            case 2:
              return [
                4,
                rk(
                  'https://tfhub.dev/tensorflow/tfjs-model/blazeface/1/default/1',
                  { fromTFHub: !0 },
                ),
              ]
            case 3:
              ;(e = t.sent()), (t.label = 4)
            case 4:
              return [2, new kz(e, a, o, r, u, h)]
          }
        })
      })
    }
    var Nz = {
      silhouette: [
        10, 338, 297, 332, 284, 251, 389, 356, 454, 323, 361, 288, 397, 365,
        379, 378, 400, 377, 152, 148, 176, 149, 150, 136, 172, 58, 132, 93, 234,
        127, 162, 21, 54, 103, 67, 109,
      ],
      lipsUpperOuter: [61, 185, 40, 39, 37, 0, 267, 269, 270, 409, 291],
      lipsLowerOuter: [146, 91, 181, 84, 17, 314, 405, 321, 375, 291],
      lipsUpperInner: [78, 191, 80, 81, 82, 13, 312, 311, 310, 415, 308],
      lipsLowerInner: [78, 95, 88, 178, 87, 14, 317, 402, 318, 324, 308],
      rightEyeUpper0: [246, 161, 160, 159, 158, 157, 173],
      rightEyeLower0: [33, 7, 163, 144, 145, 153, 154, 155, 133],
      rightEyeUpper1: [247, 30, 29, 27, 28, 56, 190],
      rightEyeLower1: [130, 25, 110, 24, 23, 22, 26, 112, 243],
      rightEyeUpper2: [113, 225, 224, 223, 222, 221, 189],
      rightEyeLower2: [226, 31, 228, 229, 230, 231, 232, 233, 244],
      rightEyeLower3: [143, 111, 117, 118, 119, 120, 121, 128, 245],
      rightEyebrowUpper: [156, 70, 63, 105, 66, 107, 55, 193],
      rightEyebrowLower: [35, 124, 46, 53, 52, 65],
      rightEyeIris: [473, 474, 475, 476, 477],
      leftEyeUpper0: [466, 388, 387, 386, 385, 384, 398],
      leftEyeLower0: [263, 249, 390, 373, 374, 380, 381, 382, 362],
      leftEyeUpper1: [467, 260, 259, 257, 258, 286, 414],
      leftEyeLower1: [359, 255, 339, 254, 253, 252, 256, 341, 463],
      leftEyeUpper2: [342, 445, 444, 443, 442, 441, 413],
      leftEyeLower2: [446, 261, 448, 449, 450, 451, 452, 453, 464],
      leftEyeLower3: [372, 340, 346, 347, 348, 349, 350, 357, 465],
      leftEyebrowUpper: [383, 300, 293, 334, 296, 336, 285, 417],
      leftEyebrowLower: [265, 353, 276, 283, 282, 295],
      leftEyeIris: [468, 469, 470, 471, 472],
      midwayBetweenEyes: [168],
      noseTip: [1],
      noseBottom: [2],
      noseRightCorner: [98],
      noseLeftCorner: [327],
      rightCheek: [205],
      leftCheek: [425],
    }
    function Sz(e) {
      return [
        Math.abs(e.endPoint[0] - e.startPoint[0]),
        Math.abs(e.endPoint[1] - e.startPoint[1]),
      ]
    }
    function Tz(e) {
      return [
        e.startPoint[0] + (e.endPoint[0] - e.startPoint[0]) / 2,
        e.startPoint[1] + (e.endPoint[1] - e.startPoint[1]) / 2,
      ]
    }
    function Cz(e, t) {
      void 0 === t && (t = 1.5)
      var n = Tz(e),
        r = Sz(e),
        s = [(t * r[0]) / 2, (t * r[1]) / 2]
      return {
        startPoint: [n[0] - s[0], n[1] - s[1]],
        endPoint: [n[0] + s[0], n[1] + s[1]],
        landmarks: e.landmarks,
      }
    }
    function $z(e) {
      var t = Tz(e),
        n = Sz(e),
        r = Math.max.apply(Math, n) / 2
      return {
        startPoint: [t[0] - r, t[1] - r],
        endPoint: [t[0] + r, t[1] + r],
        landmarks: e.landmarks,
      }
    }
    var Ez = [
      [1, 0, 0],
      [0, 1, 0],
      [0, 0, 1],
    ]
    function Rz(e, t) {
      return [
        [1, 0, e],
        [0, 1, t],
        [0, 0, 1],
      ]
    }
    function Az(e, t) {
      for (var n = 0, r = 0; r < e.length; r++) n += e[r] * t[r]
      return n
    }
    function _z(e, t) {
      for (var n = [], r = 0; r < e.length; r++) n.push(e[r][t])
      return n
    }
    function Fz(e, t) {
      for (var n = [], r = e.length, s = 0; s < r; s++) {
        n.push([])
        for (var a = 0; a < r; a++) n[s].push(Az(e[s], _z(t, a)))
      }
      return n
    }
    function Dz(e, t) {
      var n = Math.cos(e),
        r = Math.sin(e),
        s = [
          [n, -r, 0],
          [r, n, 0],
          [0, 0, 1],
        ],
        a = Fz(Rz(t[0], t[1]), s)
      return Fz(a, Rz(-t[0], -t[1]))
    }
    var Oz = [13, Nz.midwayBetweenEyes[0]],
      Mz = [3, 2],
      Lz = Nz.leftEyeLower0,
      zz = [Lz[0], Lz[Lz.length - 1]],
      Pz = Nz.rightEyeLower0,
      Bz = [Pz[0], Pz[Pz.length - 1]],
      Wz = [
        { key: 'EyeUpper0', indices: [9, 10, 11, 12, 13, 14, 15] },
        { key: 'EyeUpper1', indices: [25, 26, 27, 28, 29, 30, 31] },
        { key: 'EyeUpper2', indices: [41, 42, 43, 44, 45, 46, 47] },
        { key: 'EyeLower0', indices: [0, 1, 2, 3, 4, 5, 6, 7, 8] },
        { key: 'EyeLower1', indices: [16, 17, 18, 19, 20, 21, 22, 23, 24] },
        { key: 'EyeLower2', indices: [32, 33, 34, 35, 36, 37, 38, 39, 40] },
        { key: 'EyeLower3', indices: [54, 55, 56, 57, 58, 59, 60, 61, 62] },
        { key: 'EyebrowUpper', indices: [63, 64, 65, 66, 67, 68, 69, 70] },
        { key: 'EyebrowLower', indices: [48, 49, 50, 51, 52, 53] },
      ]
    function Vz(e, t, n, r) {
      for (var s = 0; s < Wz.length; s++) {
        var a = Wz[s],
          i = a.key,
          o = a.indices,
          l = Nz['' + n + i]
        if (null == r || r.includes(i))
          for (var u = 0; u < o.length; u++) {
            var c = o[u]
            e[l[u]] = [t[c][0], t[c][1], (t[c][2] + e[l[u]][2]) / 2]
          }
      }
    }
    var Uz = (function () {
        function e(e, t, n, r, s, a, i) {
          ;(this.regionsOfInterest = []),
            (this.runsWithoutFaceDetector = 0),
            (this.boundingBoxDetector = e),
            (this.meshDetector = t),
            (this.irisModel = i),
            (this.meshWidth = n),
            (this.meshHeight = r),
            (this.maxContinuousChecks = s),
            (this.maxFaces = a)
        }
        return (
          (e.prototype.transformRawCoords = function (e, t, n, r) {
            var s,
              a,
              i,
              o,
              l = this,
              u = Sz({ startPoint: t.startPoint, endPoint: t.endPoint }),
              c = [u[0] / this.meshWidth, u[1] / this.meshHeight],
              h = e.map(function (e) {
                return [
                  c[0] * (e[0] - l.meshWidth / 2),
                  c[1] * (e[1] - l.meshHeight / 2),
                  e[2],
                ]
              }),
              p = Dz(n, [0, 0]),
              d = h.map(function (e) {
                return (function (e, t) {
                  return [Az(e, t[0]), Az(e, t[1])]
                })(e, p).concat([e[2]])
              }),
              f =
                ((a = [
                  [(s = r)[0][0], s[1][0]],
                  [s[0][1], s[1][1]],
                ]),
                (i = [s[0][2], s[1][2]]),
                (o = [-Az(a[0], i), -Az(a[1], i)]),
                [a[0].concat(o[0]), a[1].concat(o[1]), [0, 0, 1]]),
              m = Tz({ startPoint: t.startPoint, endPoint: t.endPoint }).concat(
                [1],
              ),
              g = [Az(m, f[0]), Az(m, f[1])]
            return d.map(function (e) {
              return [e[0] + g[0], e[1] + g[1], e[2]]
            })
          }),
          (e.prototype.getLeftToRightEyeDepthDifference = function (e) {
            return e[zz[0]][2] - e[Bz[0]][2]
          }),
          (e.prototype.getEyeBox = function (e, t, n, r, s) {
            void 0 === s && (s = !1)
            var a = $z(
                Cz(this.calculateLandmarksBoundingBox([e[n], e[r]]), 2.3),
              ),
              i = Sz(a),
              o = yp.cropAndResize(
                t,
                [
                  [
                    a.startPoint[1] / this.meshHeight,
                    a.startPoint[0] / this.meshWidth,
                    a.endPoint[1] / this.meshHeight,
                    a.endPoint[0] / this.meshWidth,
                  ],
                ],
                [0],
                [64, 64],
              )
            return (
              s && (o = yp.flipLeftRight(o)), { box: a, boxSize: i, crop: o }
            )
          }),
          (e.prototype.getEyeCoords = function (e, t, n, r) {
            void 0 === r && (r = !1)
            for (var s = [], a = 0; a < 76; a++) {
              var i = e[3 * a],
                o = e[3 * a + 1],
                l = e[3 * a + 2]
              s.push([
                (r ? 1 - i / 64 : i / 64) * n[0] + t.startPoint[0],
                (o / 64) * n[1] + t.startPoint[1],
                l,
              ])
            }
            return { rawCoords: s, iris: s.slice(71) }
          }),
          (e.prototype.getAdjustedIrisCoords = function (e, t, n) {
            var r = e[Nz[n + 'EyeUpper0'][3]][2],
              s = e[Nz[n + 'EyeLower0'][4]][2],
              a = (r + s) / 2
            return t.map(function (e, t) {
              var n = a
              return 2 === t ? (n = r) : 4 === t && (n = s), [e[0], e[1], n]
            })
          }),
          (e.prototype.predict = function (e, t) {
            return fz(this, void 0, void 0, function () {
              var n,
                r,
                s,
                a,
                i = this
              return mz(this, function (o) {
                switch (o.label) {
                  case 0:
                    return this.shouldUpdateRegionsOfInterest()
                      ? [
                          4,
                          this.boundingBoxDetector.getBoundingBoxes(e, !1, !0),
                        ]
                      : [3, 2]
                  case 1:
                    return (
                      (n = o.sent()),
                      (r = n.boxes),
                      (s = n.scaleFactor),
                      0 === r.length
                        ? ((this.regionsOfInterest = []), [2, null])
                        : ((a = r.map(function (e) {
                            var t,
                              n,
                              r = {
                                startPoint: Oc(e.box.startPoint).arraySync(),
                                endPoint: Oc(e.box.endPoint).arraySync(),
                              },
                              a = $z(
                                Cz(
                                  ((n = s),
                                  {
                                    startPoint: [
                                      (t = r).startPoint[0] * n[0],
                                      t.startPoint[1] * n[1],
                                    ],
                                    endPoint: [
                                      t.endPoint[0] * n[0],
                                      t.endPoint[1] * n[1],
                                    ],
                                  }),
                                ),
                              )
                            return dz({}, a, {
                              landmarks: e.landmarks.arraySync(),
                            })
                          })),
                          r.forEach(function (e) {
                            null != e &&
                              null != e.startPoint &&
                              (e.startEndTensor.dispose(),
                              e.startPoint.dispose(),
                              e.endPoint.dispose())
                          }),
                          this.updateRegionsOfInterest(a),
                          (this.runsWithoutFaceDetector = 0),
                          [3, 3])
                    )
                  case 2:
                    this.runsWithoutFaceDetector++, (o.label = 3)
                  case 3:
                    return [
                      2,
                      qi(function () {
                        return i.regionsOfInterest.map(function (n, r) {
                          var s,
                            a = n.landmarks.length >= 468,
                            o = Oz[0],
                            l = Oz[1]
                          !1 === a && ((o = Mz[0]), (l = Mz[1])),
                            (s = (function (e, t) {
                              var n
                              return (
                                (n =
                                  Math.PI / 2 -
                                  Math.atan2(-(t[1] - e[1]), t[0] - e[0])) -
                                2 *
                                  Math.PI *
                                  Math.floor((n + Math.PI) / (2 * Math.PI))
                              )
                            })(n.landmarks[o], n.landmarks[l]))
                          var u = Tz({
                              startPoint: n.startPoint,
                              endPoint: n.endPoint,
                            }),
                            c = [u[0] / e.shape[2], u[1] / e.shape[1]],
                            h = e,
                            p = Ez
                          0 !== s &&
                            ((h = yp.rotateWithOffset(e, s, 0, c)),
                            (p = Dz(-s, u)))
                          var d = {
                              startPoint: n.startPoint,
                              endPoint: n.endPoint,
                            },
                            f = yl(
                              (function (e, t, n) {
                                var r = t.shape[1],
                                  s = t.shape[2],
                                  a = [
                                    [
                                      e.startPoint[1] / r,
                                      e.startPoint[0] / s,
                                      e.endPoint[1] / r,
                                      e.endPoint[0] / s,
                                    ],
                                  ]
                                return yp.cropAndResize(
                                  t,
                                  a,
                                  [0],
                                  n,
                                  'bilinear',
                                  0,
                                )
                              })(d, h, [i.meshHeight, i.meshWidth]),
                              255,
                            ),
                            m = i.meshDetector.predict(f),
                            g = m[1],
                            y = m[2],
                            b = Eo(y, [-1, 3]).arraySync()
                          if (t) {
                            var x = i.getEyeBox(b, f, zz[0], zz[1], !0),
                              w = x.box,
                              v = x.boxSize,
                              k = x.crop,
                              I = i.getEyeBox(b, f, Bz[0], Bz[1]),
                              N = I.box,
                              S = I.boxSize,
                              T = I.crop,
                              C = i.irisModel.predict(_o([k, T])).dataSync(),
                              $ = C.slice(0, 228),
                              E = i.getEyeCoords($, w, v, !0),
                              R = E.rawCoords,
                              A = E.iris,
                              _ = C.slice(228),
                              F = i.getEyeCoords(_, N, S),
                              D = F.rawCoords,
                              O = F.iris,
                              M = i.getLeftToRightEyeDepthDifference(b)
                            Math.abs(M) < 30
                              ? (Vz(b, R, 'left'), Vz(b, D, 'right'))
                              : M < 1
                                ? Vz(b, R, 'left', ['EyeUpper0', 'EyeLower0'])
                                : Vz(b, D, 'right', ['EyeUpper0', 'EyeLower0'])
                            var L = i.getAdjustedIrisCoords(b, A, 'left'),
                              z = i.getAdjustedIrisCoords(b, O, 'right')
                            b = b.concat(L).concat(z)
                          }
                          var P = i.transformRawCoords(b, n, s, p),
                            B = Wc(P),
                            W = Cz(i.calculateLandmarksBoundingBox(P)),
                            V = $z(W)
                          return (
                            (i.regionsOfInterest[r] = dz({}, V, {
                              landmarks: B.arraySync(),
                            })),
                            {
                              coords: Wc(b, [b.length, 3]),
                              scaledCoords: B,
                              box: W,
                              flag: Oc(g),
                            }
                          )
                        })
                      }),
                    ]
                }
              })
            })
          }),
          (e.prototype.updateRegionsOfInterest = function (e) {
            for (var t = 0; t < e.length; t++) {
              var n = e[t],
                r = this.regionsOfInterest[t],
                s = 0
              if (r && r.startPoint) {
                var a = n.startPoint,
                  i = a[0],
                  o = a[1],
                  l = n.endPoint,
                  u = l[0],
                  c = l[1],
                  h = r.startPoint,
                  p = h[0],
                  d = h[1],
                  f = r.endPoint,
                  m = f[0],
                  g = f[1],
                  y = Math.max(i, p),
                  b = Math.max(o, d),
                  x = (Math.min(u, m) - y) * (Math.min(c, g) - b)
                s = x / ((u - i) * (c - o) + (m - p) * (g - o) - x)
              }
              s < 0.25 && (this.regionsOfInterest[t] = n)
            }
            this.regionsOfInterest = this.regionsOfInterest.slice(0, e.length)
          }),
          (e.prototype.clearRegionOfInterest = function (e) {
            null != this.regionsOfInterest[e] &&
              (this.regionsOfInterest = this.regionsOfInterest
                .slice(0, e)
                .concat(this.regionsOfInterest.slice(e + 1)))
          }),
          (e.prototype.shouldUpdateRegionsOfInterest = function () {
            var e = this.regionsOfInterest.length,
              t = 0 === e
            return 1 === this.maxFaces || t
              ? t
              : e !== this.maxFaces &&
                  this.runsWithoutFaceDetector >= this.maxContinuousChecks
          }),
          (e.prototype.calculateLandmarksBoundingBox = function (e) {
            var t = e.map(function (e) {
                return e[0]
              }),
              n = e.map(function (e) {
                return e[1]
              })
            return {
              startPoint: [Math.min.apply(Math, t), Math.min.apply(Math, n)],
              endPoint: [Math.max.apply(Math, t), Math.max.apply(Math, n)],
            }
          }),
          e
        )
      })(),
      Gz = [
        [0.499976992607117, 0.652534008026123],
        [0.500025987625122, 0.547487020492554],
        [0.499974012374878, 0.602371990680695],
        [0.482113003730774, 0.471979022026062],
        [0.500150978565216, 0.527155995368958],
        [0.499909996986389, 0.498252987861633],
        [0.499523013830185, 0.40106201171875],
        [0.289712011814117, 0.380764007568359],
        [0.499954998493195, 0.312398016452789],
        [0.499987006187439, 0.269918978214264],
        [0.500023007392883, 0.107050001621246],
        [0.500023007392883, 0.666234016418457],
        [0.5000159740448, 0.679224014282227],
        [0.500023007392883, 0.692348003387451],
        [0.499976992607117, 0.695277988910675],
        [0.499976992607117, 0.70593398809433],
        [0.499976992607117, 0.719385027885437],
        [0.499976992607117, 0.737019002437592],
        [0.499967992305756, 0.781370997428894],
        [0.499816000461578, 0.562981009483337],
        [0.473773002624512, 0.573909997940063],
        [0.104906998574734, 0.254140973091125],
        [0.365929991006851, 0.409575998783112],
        [0.338757991790771, 0.41302502155304],
        [0.311120003461838, 0.409460008144379],
        [0.274657994508743, 0.389131009578705],
        [0.393361985683441, 0.403706014156342],
        [0.345234006643295, 0.344011008739471],
        [0.370094001293182, 0.346076011657715],
        [0.319321990013123, 0.347265005111694],
        [0.297903001308441, 0.353591024875641],
        [0.24779200553894, 0.410809993743896],
        [0.396889001131058, 0.842755019664764],
        [0.280097991228104, 0.375599980354309],
        [0.106310002505779, 0.399955987930298],
        [0.2099249958992, 0.391353011131287],
        [0.355807989835739, 0.534406006336212],
        [0.471751004457474, 0.65040397644043],
        [0.474155008792877, 0.680191993713379],
        [0.439785003662109, 0.657229006290436],
        [0.414617002010345, 0.66654098033905],
        [0.450374007225037, 0.680860996246338],
        [0.428770989179611, 0.682690978050232],
        [0.374971002340317, 0.727805018424988],
        [0.486716985702515, 0.547628998756409],
        [0.485300987958908, 0.527395009994507],
        [0.257764995098114, 0.314490020275116],
        [0.401223003864288, 0.455172002315521],
        [0.429818987846375, 0.548614978790283],
        [0.421351999044418, 0.533740997314453],
        [0.276895999908447, 0.532056987285614],
        [0.483370006084442, 0.499586999416351],
        [0.33721199631691, 0.282882988452911],
        [0.296391993761063, 0.293242990970612],
        [0.169294998049736, 0.193813979625702],
        [0.447580009698868, 0.302609980106354],
        [0.392390012741089, 0.353887975215912],
        [0.354490011930466, 0.696784019470215],
        [0.067304998636246, 0.730105042457581],
        [0.442739009857178, 0.572826027870178],
        [0.457098007202148, 0.584792017936707],
        [0.381974011659622, 0.694710969924927],
        [0.392388999462128, 0.694203019142151],
        [0.277076005935669, 0.271932005882263],
        [0.422551989555359, 0.563233017921448],
        [0.385919004678726, 0.281364023685455],
        [0.383103013038635, 0.255840003490448],
        [0.331431001424789, 0.119714021682739],
        [0.229923993349075, 0.232002973556519],
        [0.364500999450684, 0.189113974571228],
        [0.229622006416321, 0.299540996551514],
        [0.173287004232407, 0.278747975826263],
        [0.472878992557526, 0.666198015213013],
        [0.446828007698059, 0.668527007102966],
        [0.422762006521225, 0.673889994621277],
        [0.445307999849319, 0.580065965652466],
        [0.388103008270264, 0.693961024284363],
        [0.403039008378983, 0.706539988517761],
        [0.403629004955292, 0.693953037261963],
        [0.460041999816895, 0.557139039039612],
        [0.431158006191254, 0.692366003990173],
        [0.452181994915009, 0.692366003990173],
        [0.475387006998062, 0.692366003990173],
        [0.465828001499176, 0.779190003871918],
        [0.472328990697861, 0.736225962638855],
        [0.473087012767792, 0.717857003211975],
        [0.473122000694275, 0.704625964164734],
        [0.473033010959625, 0.695277988910675],
        [0.427942007780075, 0.695277988910675],
        [0.426479011774063, 0.703539967536926],
        [0.423162013292313, 0.711845993995667],
        [0.4183090031147, 0.720062971115112],
        [0.390094995498657, 0.639572978019714],
        [0.013953999616206, 0.560034036636353],
        [0.499913990497589, 0.58014702796936],
        [0.413199990987778, 0.69539999961853],
        [0.409626007080078, 0.701822996139526],
        [0.468080013990402, 0.601534962654114],
        [0.422728985548019, 0.585985004901886],
        [0.463079988956451, 0.593783974647522],
        [0.37211999297142, 0.47341400384903],
        [0.334562003612518, 0.496073007583618],
        [0.411671012639999, 0.546965003013611],
        [0.242175996303558, 0.14767599105835],
        [0.290776997804642, 0.201445996761322],
        [0.327338010072708, 0.256527006626129],
        [0.399509996175766, 0.748921036720276],
        [0.441727995872498, 0.261676013469696],
        [0.429764986038208, 0.187834024429321],
        [0.412198007106781, 0.108901023864746],
        [0.288955003023148, 0.398952007293701],
        [0.218936994671822, 0.435410976409912],
        [0.41278201341629, 0.398970007896423],
        [0.257135003805161, 0.355440020561218],
        [0.427684992551804, 0.437960982322693],
        [0.448339998722076, 0.536936044692993],
        [0.178560003638268, 0.45755398273468],
        [0.247308000922203, 0.457193970680237],
        [0.286267012357712, 0.467674970626831],
        [0.332827985286713, 0.460712015628815],
        [0.368755996227264, 0.447206974029541],
        [0.398963987827301, 0.432654976844788],
        [0.476410001516342, 0.405806005001068],
        [0.189241006970406, 0.523923993110657],
        [0.228962004184723, 0.348950982093811],
        [0.490725994110107, 0.562400996685028],
        [0.404670000076294, 0.485132992267609],
        [0.019469000399113, 0.401564002037048],
        [0.426243007183075, 0.420431017875671],
        [0.396993011236191, 0.548797011375427],
        [0.266469985246658, 0.376977026462555],
        [0.439121007919312, 0.51895797252655],
        [0.032313998788595, 0.644356966018677],
        [0.419054001569748, 0.387154996395111],
        [0.462783008813858, 0.505746960639954],
        [0.238978996872902, 0.779744982719421],
        [0.198220998048782, 0.831938028335571],
        [0.107550002634525, 0.540755033493042],
        [0.183610007166862, 0.740257024765015],
        [0.134409993886948, 0.333683013916016],
        [0.385764002799988, 0.883153975009918],
        [0.490967005491257, 0.579378008842468],
        [0.382384985685349, 0.508572995662689],
        [0.174399003386497, 0.397670984268188],
        [0.318785011768341, 0.39623498916626],
        [0.343364000320435, 0.400596976280212],
        [0.396100014448166, 0.710216999053955],
        [0.187885001301765, 0.588537991046906],
        [0.430987000465393, 0.944064974784851],
        [0.318993002176285, 0.898285031318665],
        [0.266247987747192, 0.869701027870178],
        [0.500023007392883, 0.190576016902924],
        [0.499976992607117, 0.954452991485596],
        [0.366169989109039, 0.398822009563446],
        [0.393207013607025, 0.39553701877594],
        [0.410373002290726, 0.391080021858215],
        [0.194993004202843, 0.342101991176605],
        [0.388664990663528, 0.362284004688263],
        [0.365961998701096, 0.355970978736877],
        [0.343364000320435, 0.355356991291046],
        [0.318785011768341, 0.35834002494812],
        [0.301414996385574, 0.363156020641327],
        [0.058132998645306, 0.319076001644135],
        [0.301414996385574, 0.387449026107788],
        [0.499987989664078, 0.618434011936188],
        [0.415838003158569, 0.624195992946625],
        [0.445681989192963, 0.566076993942261],
        [0.465844005346298, 0.620640993118286],
        [0.49992299079895, 0.351523995399475],
        [0.288718998432159, 0.819945991039276],
        [0.335278987884521, 0.852819979190826],
        [0.440512001514435, 0.902418971061707],
        [0.128294005990028, 0.791940987110138],
        [0.408771991729736, 0.373893976211548],
        [0.455606997013092, 0.451801002025604],
        [0.499877005815506, 0.908990025520325],
        [0.375436991453171, 0.924192011356354],
        [0.11421000212431, 0.615022003650665],
        [0.448662012815475, 0.695277988910675],
        [0.4480200111866, 0.704632043838501],
        [0.447111994028091, 0.715808033943176],
        [0.444831997156143, 0.730794012546539],
        [0.430011987686157, 0.766808986663818],
        [0.406787008047104, 0.685672998428345],
        [0.400738000869751, 0.681069016456604],
        [0.392399996519089, 0.677703022956848],
        [0.367855995893478, 0.663918972015381],
        [0.247923001646996, 0.601333022117615],
        [0.452769994735718, 0.420849978923798],
        [0.43639200925827, 0.359887003898621],
        [0.416164010763168, 0.368713974952698],
        [0.413385987281799, 0.692366003990173],
        [0.228018000721931, 0.683571994304657],
        [0.468268007040024, 0.352671027183533],
        [0.411361992359161, 0.804327011108398],
        [0.499989002943039, 0.469825029373169],
        [0.479153990745544, 0.442654013633728],
        [0.499974012374878, 0.439637005329132],
        [0.432112008333206, 0.493588984012604],
        [0.499886006116867, 0.866917014122009],
        [0.49991300702095, 0.821729004383087],
        [0.456548988819122, 0.819200992584229],
        [0.344549000263214, 0.745438992977142],
        [0.37890899181366, 0.574010014533997],
        [0.374292999505997, 0.780184984207153],
        [0.319687992334366, 0.570737957954407],
        [0.357154995203018, 0.604269981384277],
        [0.295284003019333, 0.621580958366394],
        [0.447750002145767, 0.862477004528046],
        [0.410986006259918, 0.508723020553589],
        [0.31395098567009, 0.775308012962341],
        [0.354128003120422, 0.812552988529205],
        [0.324548006057739, 0.703992962837219],
        [0.189096003770828, 0.646299958229065],
        [0.279776990413666, 0.71465802192688],
        [0.1338230073452, 0.682700991630554],
        [0.336768001317978, 0.644733011722565],
        [0.429883986711502, 0.466521978378296],
        [0.455527991056442, 0.548622965812683],
        [0.437114000320435, 0.558896005153656],
        [0.467287987470627, 0.529924988746643],
        [0.414712011814117, 0.335219979286194],
        [0.37704598903656, 0.322777986526489],
        [0.344107985496521, 0.320150971412659],
        [0.312875986099243, 0.32233202457428],
        [0.283526003360748, 0.333190023899078],
        [0.241245999932289, 0.382785975933075],
        [0.102986000478268, 0.468762993812561],
        [0.267612010240555, 0.424560010433197],
        [0.297879010438919, 0.433175981044769],
        [0.333433985710144, 0.433878004550934],
        [0.366427004337311, 0.426115989685059],
        [0.396012008190155, 0.416696012020111],
        [0.420121014118195, 0.41022801399231],
        [0.007561000064015, 0.480777025222778],
        [0.432949006557465, 0.569517970085144],
        [0.458638995885849, 0.479089021682739],
        [0.473466008901596, 0.545744001865387],
        [0.476087987422943, 0.563830018043518],
        [0.468472003936768, 0.555056989192963],
        [0.433990985155106, 0.582361996173859],
        [0.483518004417419, 0.562983989715576],
        [0.482482999563217, 0.57784903049469],
        [0.42645001411438, 0.389798998832703],
        [0.438998997211456, 0.39649498462677],
        [0.450067013502121, 0.400434017181396],
        [0.289712011814117, 0.368252992630005],
        [0.276670008897781, 0.363372981548309],
        [0.517862021923065, 0.471948027610779],
        [0.710287988185883, 0.380764007568359],
        [0.526226997375488, 0.573909997940063],
        [0.895093023777008, 0.254140973091125],
        [0.634069979190826, 0.409575998783112],
        [0.661242008209229, 0.41302502155304],
        [0.688880026340485, 0.409460008144379],
        [0.725341975688934, 0.389131009578705],
        [0.606630027294159, 0.40370500087738],
        [0.654766023159027, 0.344011008739471],
        [0.629905998706818, 0.346076011657715],
        [0.680678009986877, 0.347265005111694],
        [0.702096998691559, 0.353591024875641],
        [0.75221198797226, 0.410804986953735],
        [0.602918028831482, 0.842862963676453],
        [0.719901978969574, 0.375599980354309],
        [0.893692970275879, 0.399959981441498],
        [0.790081977844238, 0.391354024410248],
        [0.643998026847839, 0.534487962722778],
        [0.528249025344849, 0.65040397644043],
        [0.525849997997284, 0.680191040039062],
        [0.560214996337891, 0.657229006290436],
        [0.585384011268616, 0.66654098033905],
        [0.549625992774963, 0.680860996246338],
        [0.57122802734375, 0.682691991329193],
        [0.624852001667023, 0.72809898853302],
        [0.513050019741058, 0.547281980514526],
        [0.51509702205658, 0.527251958847046],
        [0.742246985435486, 0.314507007598877],
        [0.598631024360657, 0.454979002475739],
        [0.570338010787964, 0.548575043678284],
        [0.578631997108459, 0.533622980117798],
        [0.723087012767792, 0.532054007053375],
        [0.516445994377136, 0.499638974666595],
        [0.662801027297974, 0.282917976379395],
        [0.70362401008606, 0.293271005153656],
        [0.830704987049103, 0.193813979625702],
        [0.552385985851288, 0.302568018436432],
        [0.607609987258911, 0.353887975215912],
        [0.645429015159607, 0.696707010269165],
        [0.932694971561432, 0.730105042457581],
        [0.557260990142822, 0.572826027870178],
        [0.542901992797852, 0.584792017936707],
        [0.6180260181427, 0.694710969924927],
        [0.607590973377228, 0.694203019142151],
        [0.722943007946014, 0.271963000297546],
        [0.577413976192474, 0.563166975975037],
        [0.614082992076874, 0.281386971473694],
        [0.616907000541687, 0.255886018276215],
        [0.668509006500244, 0.119913995265961],
        [0.770092010498047, 0.232020974159241],
        [0.635536015033722, 0.189248979091644],
        [0.77039098739624, 0.299556016921997],
        [0.826722025871277, 0.278755009174347],
        [0.527121007442474, 0.666198015213013],
        [0.553171992301941, 0.668527007102966],
        [0.577238023281097, 0.673889994621277],
        [0.554691970348358, 0.580065965652466],
        [0.611896991729736, 0.693961024284363],
        [0.59696102142334, 0.706539988517761],
        [0.596370995044708, 0.693953037261963],
        [0.539958000183105, 0.557139039039612],
        [0.568841993808746, 0.692366003990173],
        [0.547818005084991, 0.692366003990173],
        [0.52461302280426, 0.692366003990173],
        [0.534089982509613, 0.779141008853912],
        [0.527670979499817, 0.736225962638855],
        [0.526912987232208, 0.717857003211975],
        [0.526877999305725, 0.704625964164734],
        [0.526966989040375, 0.695277988910675],
        [0.572058022022247, 0.695277988910675],
        [0.573521018028259, 0.703539967536926],
        [0.57683801651001, 0.711845993995667],
        [0.581691026687622, 0.720062971115112],
        [0.609944999217987, 0.639909982681274],
        [0.986046016216278, 0.560034036636353],
        [0.5867999792099, 0.69539999961853],
        [0.590372025966644, 0.701822996139526],
        [0.531915009021759, 0.601536989212036],
        [0.577268004417419, 0.585934996604919],
        [0.536915004253387, 0.593786001205444],
        [0.627542972564697, 0.473352015018463],
        [0.665585994720459, 0.495950996875763],
        [0.588353991508484, 0.546862006187439],
        [0.757824003696442, 0.14767599105835],
        [0.709249973297119, 0.201507985591888],
        [0.672684013843536, 0.256581008434296],
        [0.600408971309662, 0.74900496006012],
        [0.55826598405838, 0.261672019958496],
        [0.570303976535797, 0.187870979309082],
        [0.588165998458862, 0.109044015407562],
        [0.711045026779175, 0.398952007293701],
        [0.781069993972778, 0.435405015945435],
        [0.587247014045715, 0.398931980133057],
        [0.742869973182678, 0.355445981025696],
        [0.572156012058258, 0.437651991844177],
        [0.55186802148819, 0.536570012569427],
        [0.821442008018494, 0.457556009292603],
        [0.752701997756958, 0.457181990146637],
        [0.71375697851181, 0.467626988887787],
        [0.66711300611496, 0.460672974586487],
        [0.631101012229919, 0.447153985500336],
        [0.6008620262146, 0.432473003864288],
        [0.523481011390686, 0.405627012252808],
        [0.810747981071472, 0.523926019668579],
        [0.771045982837677, 0.348959028720856],
        [0.509127020835876, 0.562718033790588],
        [0.595292985439301, 0.485023975372314],
        [0.980530977249146, 0.401564002037048],
        [0.573499977588654, 0.420000016689301],
        [0.602994978427887, 0.548687994480133],
        [0.733529984951019, 0.376977026462555],
        [0.560611009597778, 0.519016981124878],
        [0.967685997486115, 0.644356966018677],
        [0.580985009670258, 0.387160003185272],
        [0.537728011608124, 0.505385041236877],
        [0.760966002941132, 0.779752969741821],
        [0.801778972148895, 0.831938028335571],
        [0.892440974712372, 0.54076099395752],
        [0.816350996494293, 0.740260004997253],
        [0.865594983100891, 0.333687007427216],
        [0.614073991775513, 0.883246004581451],
        [0.508952975273132, 0.579437971115112],
        [0.617941975593567, 0.508316040039062],
        [0.825608015060425, 0.397674977779388],
        [0.681214988231659, 0.39623498916626],
        [0.656635999679565, 0.400596976280212],
        [0.603900015354156, 0.710216999053955],
        [0.81208598613739, 0.588539004325867],
        [0.56801301240921, 0.944564998149872],
        [0.681007981300354, 0.898285031318665],
        [0.733752012252808, 0.869701027870178],
        [0.633830010890961, 0.398822009563446],
        [0.606792986392975, 0.39553701877594],
        [0.589659988880157, 0.391062021255493],
        [0.805015981197357, 0.342108011245728],
        [0.611334979534149, 0.362284004688263],
        [0.634037971496582, 0.355970978736877],
        [0.656635999679565, 0.355356991291046],
        [0.681214988231659, 0.35834002494812],
        [0.698584973812103, 0.363156020641327],
        [0.941866993904114, 0.319076001644135],
        [0.698584973812103, 0.387449026107788],
        [0.584177017211914, 0.624107003211975],
        [0.554318010807037, 0.566076993942261],
        [0.534153997898102, 0.62064003944397],
        [0.711217999458313, 0.819975018501282],
        [0.664629995822906, 0.852871000766754],
        [0.559099972248077, 0.902631998062134],
        [0.871706008911133, 0.791940987110138],
        [0.591234028339386, 0.373893976211548],
        [0.544341027736664, 0.451583981513977],
        [0.624562978744507, 0.924192011356354],
        [0.88577002286911, 0.615028977394104],
        [0.551338016986847, 0.695277988910675],
        [0.551980018615723, 0.704632043838501],
        [0.552887976169586, 0.715808033943176],
        [0.555167973041534, 0.730794012546539],
        [0.569944024085999, 0.767035007476807],
        [0.593203008174896, 0.685675978660583],
        [0.599261999130249, 0.681069016456604],
        [0.607599973678589, 0.677703022956848],
        [0.631937980651855, 0.663500010967255],
        [0.752032995223999, 0.601315021514893],
        [0.547226011753082, 0.420395016670227],
        [0.563543975353241, 0.359827995300293],
        [0.583841025829315, 0.368713974952698],
        [0.586614012718201, 0.692366003990173],
        [0.771915018558502, 0.683578014373779],
        [0.531597018241882, 0.352482974529266],
        [0.588370978832245, 0.804440975189209],
        [0.52079701423645, 0.442565023899078],
        [0.567984998226166, 0.493479013442993],
        [0.543282985687256, 0.819254994392395],
        [0.655317008495331, 0.745514988899231],
        [0.621008992195129, 0.574018001556396],
        [0.625559985637665, 0.78031200170517],
        [0.680198013782501, 0.570719003677368],
        [0.64276397228241, 0.604337990283966],
        [0.704662978649139, 0.621529996395111],
        [0.552012026309967, 0.862591981887817],
        [0.589071989059448, 0.508637011051178],
        [0.685944974422455, 0.775357007980347],
        [0.645735025405884, 0.812640011310577],
        [0.675342977046967, 0.703978002071381],
        [0.810858011245728, 0.646304965019226],
        [0.72012197971344, 0.714666962623596],
        [0.866151988506317, 0.682704985141754],
        [0.663187026977539, 0.644596993923187],
        [0.570082008838654, 0.466325998306274],
        [0.544561982154846, 0.548375964164734],
        [0.562758982181549, 0.558784961700439],
        [0.531987011432648, 0.530140042304993],
        [0.585271000862122, 0.335177004337311],
        [0.622952997684479, 0.32277899980545],
        [0.655896008014679, 0.320163011550903],
        [0.687132000923157, 0.322345972061157],
        [0.716481983661652, 0.333200991153717],
        [0.758756995201111, 0.382786989212036],
        [0.897013008594513, 0.468769013881683],
        [0.732392013072968, 0.424547016620636],
        [0.70211398601532, 0.433162987232208],
        [0.66652500629425, 0.433866024017334],
        [0.633504986763, 0.426087975502014],
        [0.603875994682312, 0.416586995124817],
        [0.579657971858978, 0.409945011138916],
        [0.992439985275269, 0.480777025222778],
        [0.567192018032074, 0.569419980049133],
        [0.54136598110199, 0.478899002075195],
        [0.526564002037048, 0.546118021011353],
        [0.523913025856018, 0.563830018043518],
        [0.531529009342194, 0.555056989192963],
        [0.566035985946655, 0.582329034805298],
        [0.51631098985672, 0.563053965568542],
        [0.5174720287323, 0.577877044677734],
        [0.573594987392426, 0.389806985855103],
        [0.560697972774506, 0.395331978797913],
        [0.549755990505219, 0.399751007556915],
        [0.710287988185883, 0.368252992630005],
        [0.723330020904541, 0.363372981548309],
      ]
    function Hz(e) {
      return fz(this, void 0, void 0, function () {
        var t, n, r, s, a, i, o, l, u, c, h, p, d, f, m, g
        return mz(this, function (y) {
          switch (y.label) {
            case 0:
              return (
                (t = e.maxContinuousChecks),
                (n = void 0 === t ? 5 : t),
                (r = e.detectionConfidence),
                (s = void 0 === r ? 0.9 : r),
                (a = e.maxFaces),
                (i = void 0 === a ? 10 : a),
                (o = e.iouThreshold),
                (l = void 0 === o ? 0.3 : o),
                (u = e.scoreThreshold),
                (c = void 0 === u ? 0.75 : u),
                (h = e.shouldLoadIrisModel),
                (p = void 0 === h || h),
                (d = e.modelUrl),
                (f = e.detectorModelUrl),
                (m = e.irisModelUrl),
                p ? [4, Promise.all([jz(f, i, l, c), qz(d), Kz(m)])] : [3, 2]
              )
            case 1:
              return (g = y.sent()), [3, 4]
            case 2:
              return [4, Promise.all([jz(f, i, l, c), qz(d)])]
            case 3:
              ;(g = y.sent()), (y.label = 4)
            case 4:
              return [2, new Zz(g[0], g[1], n, s, i, p ? g[2] : null)]
          }
        })
      })
    }
    function jz(e, t, n, r) {
      return fz(this, void 0, void 0, function () {
        return mz(this, function (s) {
          return [
            2,
            Iz({
              modelUrl: e,
              maxFaces: t,
              iouThreshold: n,
              scoreThreshold: r,
            }),
          ]
        })
      })
    }
    function qz(e) {
      return fz(this, void 0, void 0, function () {
        return mz(this, function (t) {
          return null != e
            ? [2, rk(e)]
            : [
                2,
                rk(
                  'https://tfhub.dev/mediapipe/tfjs-model/facemesh/1/default/1',
                  { fromTFHub: !0 },
                ),
              ]
        })
      })
    }
    function Kz(e) {
      return fz(this, void 0, void 0, function () {
        return mz(this, function (t) {
          return null != e
            ? [2, rk(e)]
            : [
                2,
                rk('https://tfhub.dev/mediapipe/tfjs-model/iris/1/default/2', {
                  fromTFHub: !0,
                }),
              ]
        })
      })
    }
    function Xz(e, t) {
      if (e.mesh instanceof gs) {
        var n = qi(function () {
            var n = Bc([t - 1, 0, 0]),
              r = Bc([1, -1, 1])
            return qi(function () {
              return [
                _o([
                  pu(t - 1, Mo(e.boundingBox.topLeft, 0, 1)),
                  Mo(e.boundingBox.topLeft, 1, 1),
                ]),
                _o([
                  pu(t - 1, Mo(e.boundingBox.bottomRight, 0, 1)),
                  Mo(e.boundingBox.bottomRight, 1, 1),
                ]),
                Do(pu(n, e.mesh), r),
                Do(pu(n, e.scaledMesh), r),
              ]
            })
          }),
          r = n[0],
          s = n[1],
          a = n[2],
          i = n[3]
        return Object.assign({}, e, {
          boundingBox: { topLeft: r, bottomRight: s },
          mesh: a,
          scaledMesh: i,
        })
      }
      return Object.assign({}, e, {
        boundingBox: {
          topLeft: [t - 1 - e.boundingBox.topLeft[0], e.boundingBox.topLeft[1]],
          bottomRight: [
            t - 1 - e.boundingBox.bottomRight[0],
            e.boundingBox.bottomRight[1],
          ],
        },
        mesh: e.mesh.map(function (e) {
          var n = e.slice(0)
          return (n[0] = t - 1 - e[0]), n
        }),
        scaledMesh: e.scaledMesh.map(function (e) {
          var n = e.slice(0)
          return (n[0] = t - 1 - e[0]), n
        }),
      })
    }
    var Yz,
      Zz = (function () {
        function e(e, t, n, r, s, a) {
          ;(this.kind = 'MediaPipeFaceMesh'),
            (this.pipeline = new Uz(e, t, 192, 192, n, s, a)),
            (this.detectionConfidence = r)
        }
        return (
          (e.getAnnotations = function () {
            return Nz
          }),
          (e.getUVCoords = function () {
            return Gz
          }),
          (e.prototype.estimateFaces = function (e) {
            return fz(this, void 0, void 0, function () {
              var t,
                n,
                r,
                s,
                a,
                i,
                o,
                l,
                u,
                c,
                h,
                p,
                d = this
              return mz(this, function (f) {
                switch (f.label) {
                  case 0:
                    if (
                      ((t = e.returnTensors),
                      (n = void 0 !== t && t),
                      (r = e.flipHorizontal),
                      (s = void 0 !== r && r),
                      (a = e.predictIrises),
                      (i = void 0 === a || a),
                      (o = e.input),
                      i && null == this.pipeline.irisModel)
                    )
                      throw new Error(
                        'The iris model was not loaded as part of facemesh. Please initialize the model with facemesh.load({shouldLoadIrisModel: true}).',
                      )
                    return (
                      (l = (function (e) {
                        return e instanceof gs
                          ? [e.shape[0], e.shape[1]]
                          : [e.height, e.width]
                      })(o)),
                      (u = l[1]),
                      (c = qi(function () {
                        return (
                          o instanceof gs || (o = ki(o)),
                          Gl(Ka(o, 'float32'), 0)
                        )
                      })),
                      'webgl' !== Os.backendName
                        ? [3, 2]
                        : ((p = ye().get('WEBGL_PACK_DEPTHWISECONV')),
                          ye().set('WEBGL_PACK_DEPTHWISECONV', !0),
                          [4, this.pipeline.predict(c, i)])
                    )
                  case 1:
                    return (
                      (h = f.sent()),
                      ye().set('WEBGL_PACK_DEPTHWISECONV', p),
                      [3, 4]
                    )
                  case 2:
                    return [4, this.pipeline.predict(c, i)]
                  case 3:
                    ;(h = f.sent()), (f.label = 4)
                  case 4:
                    return (
                      c.dispose(),
                      null != h && h.length > 0
                        ? [
                            2,
                            Promise.all(
                              h.map(function (e, t) {
                                return fz(d, void 0, void 0, function () {
                                  var r,
                                    a,
                                    o,
                                    l,
                                    c,
                                    h,
                                    p,
                                    d,
                                    f,
                                    m,
                                    g,
                                    y,
                                    b,
                                    x,
                                    w = this
                                  return mz(this, function (v) {
                                    switch (v.label) {
                                      case 0:
                                        return (
                                          (r = e.coords),
                                          (a = e.scaledCoords),
                                          (o = e.box),
                                          (l = e.flag),
                                          (c = [l]),
                                          n || (c = c.concat([r, a])),
                                          [
                                            4,
                                            Promise.all(
                                              c.map(function (e) {
                                                return fz(
                                                  w,
                                                  void 0,
                                                  void 0,
                                                  function () {
                                                    return mz(
                                                      this,
                                                      function (t) {
                                                        return [2, e.array()]
                                                      },
                                                    )
                                                  },
                                                )
                                              }),
                                            ),
                                          ]
                                        )
                                      case 1:
                                        if (
                                          ((h = v.sent()),
                                          (p = h[0]),
                                          l.dispose(),
                                          p < this.detectionConfidence &&
                                            this.pipeline.clearRegionOfInterest(
                                              t,
                                            ),
                                          n)
                                        )
                                          return (
                                            (d = {
                                              kind: 'MediaPipePredictionTensors',
                                              faceInViewConfidence: p,
                                              mesh: r,
                                              scaledMesh: a,
                                              boundingBox: {
                                                topLeft: Bc(o.startPoint),
                                                bottomRight: Bc(o.endPoint),
                                              },
                                            }),
                                            s ? [2, Xz(d, u)] : [2, d]
                                          )
                                        for (x in ((f = h.slice(1)),
                                        (m = f[0]),
                                        (g = f[1]),
                                        a.dispose(),
                                        r.dispose(),
                                        (y = {
                                          kind: 'MediaPipePredictionValues',
                                          faceInViewConfidence: p,
                                          boundingBox: {
                                            topLeft: o.startPoint,
                                            bottomRight: o.endPoint,
                                          },
                                          mesh: m,
                                          scaledMesh: g,
                                        }),
                                        s && (y = Xz(y, u)),
                                        (b = {}),
                                        Nz))
                                          (i || !1 === x.includes('Iris')) &&
                                            (b[x] = Nz[x].map(function (e) {
                                              return y.scaledMesh[e]
                                            }))
                                        return (y.annotations = b), [2, y]
                                    }
                                  })
                                })
                              }),
                            ),
                          ]
                        : [2, []]
                    )
                }
              })
            })
          }),
          e
        )
      })()
    ;(Yz || (Yz = {})).mediapipeFacemesh = 'mediapipe-facemesh'
    const Jz = function () {
      ;(this.model = (function (e, t) {
        return (
          void 0 === e && (e = Yz.mediapipeFacemesh),
          void 0 === t && (t = {}),
          fz(this, void 0, void 0, function () {
            return mz(this, function (n) {
              if (e === Yz.mediapipeFacemesh) return [2, Hz(t)]
              throw new Error(e + ' is not a valid package name.')
            })
          })
        )
      })(Yz.mediapipeFacemesh, { maxFaces: 1 })),
        (this.predictionReady = !1)
    }
    ;(Jz.prototype.positionsArray = null),
      (Jz.prototype.getEyePatches = async function (e, t, n, r) {
        if (0 === t.width) return null
        const s = await this.model,
          a = await s.estimateFaces({
            input: e,
            returnTensors: !1,
            flipHorizontal: !1,
            predictIrises: !1,
          })
        if (0 == a.length) return !1
        this.positionsArray = a[0].scaledMesh
        const i = a[0],
          { scaledMesh: o } = (this.positionsArray, a[0]),
          [l, u] = [
            {
              eyeTopArc: i.annotations.leftEyeUpper0,
              eyeBottomArc: i.annotations.leftEyeLower0,
            },
            {
              eyeTopArc: i.annotations.rightEyeUpper0,
              eyeBottomArc: i.annotations.rightEyeLower0,
            },
          ].map(({ eyeTopArc: e, eyeBottomArc: t }) => {
            const n = {
                x: Math.round(Math.min(...e.map((e) => e[0]))),
                y: Math.round(Math.min(...e.map((e) => e[1]))),
              },
              r = Math.round(Math.max(...t.map((e) => e[0]))),
              s = Math.round(Math.max(...t.map((e) => e[1])))
            return { origin: n, width: r - n.x, height: s - n.y }
          })
        var c = l.origin.x,
          h = l.origin.y,
          p = l.width,
          d = l.height,
          f = u.origin.x,
          m = u.origin.y,
          g = u.width,
          y = u.height
        if (0 === p || 0 === g)
          return console.log('an eye patch had zero width'), null
        if (0 === d || 0 === y)
          return console.log('an eye patch had zero height'), null
        var b = {},
          x = t.getContext('2d').getImageData(c, h, p, d)
        b.left = { patch: x, imagex: c, imagey: h, width: p, height: d }
        var w = t.getContext('2d').getImageData(f, m, g, y)
        return (
          (b.right = { patch: w, imagex: f, imagey: m, width: g, height: y }),
          (this.predictionReady = !0),
          b
        )
      }),
      (Jz.prototype.getPositions = function () {
        return this.positionsArray
      }),
      (Jz.prototype.reset = function () {
        console.log('Unimplemented; Tracking.js has no obvious reset function')
      }),
      (Jz.prototype.drawFaceOverlay = function (e, t) {
        if (t) {
          ;(e.fillStyle = '#32EEDB'),
            (e.strokeStyle = '#32EEDB'),
            (e.lineWidth = 0.5)
          for (let n = 0; n < t.length; n++) {
            const r = t[n][0],
              s = t[n][1]
            e.beginPath(),
              e.arc(r, s, 1, 0, 2 * Math.PI),
              e.closePath(),
              e.fill()
          }
        }
      }),
      (Jz.prototype.name = 'TFFaceMesh')
    const Qz = Jz
    function eP(e, t, n) {
      if (e.length !== t.length || e[0].length !== t[0].length)
        throw new Error('Matrix dimensions must agree.')
      const r = e.length,
        s = e[0].length,
        a = new Array(r)
      for (let i = 0; i < r; i++) {
        a[i] = new Array(s)
        for (let r = 0; r < s; r++) a[i][r] = n(e[i][r], t[i][r])
      }
      return a
    }
    const tP = {
        transpose(e) {
          const t = e.length,
            n = e[0].length,
            r = new Array(n)
          for (let s = 0; s < n; s++) {
            r[s] = new Array(t)
            for (let n = 0; n < t; n++) r[s][n] = e[n][s]
          }
          return r
        },
        getMatrix(e, t, n, r) {
          const s = new Array(t.length),
            a = r - n + 1
          for (let i = 0, o = t.length; i < o; i++) {
            s[i] = new Array(a)
            for (let a = n; a <= r; a++) s[i][a - n] = e[t[i]][a]
          }
          return s
        },
        getSubMatrix(e, t, n, r, s) {
          const a = s - r + 1,
            i = new Array(n - t + 1)
          for (let o = t; o <= n; o++) {
            const n = o - t
            i[n] = new Array(a)
            for (let t = r; t <= s; t++) i[n][t - r] = e[o][t]
          }
          return i
        },
        mult(e, t) {
          t.length != e[0].length &&
            console.log('Matrix inner dimensions must agree:')
          for (
            var n = new Array(e.length), r = new Array(e[0].length), s = 0;
            s < t[0].length;
            s++
          ) {
            for (var a = 0; a < e[0].length; a++) r[a] = t[a][s]
            for (var i = 0; i < e.length; i++) {
              0 === s && (n[i] = new Array(t[0].length))
              var o = e[i],
                l = 0
              for (a = 0; a < e[0].length; a++) l += o[a] * r[a]
              n[i][s] = l
            }
          }
          return n
        },
        multScalar(e, t) {
          const n = e.length,
            r = e[0].length,
            s = new Array(n)
          for (let a = 0; a < n; a++) {
            s[a] = new Array(r)
            for (let n = 0; n < r; n++) s[a][n] = e[a][n] * t
          }
          return s
        },
        add: (e, t) => eP(e, t, (e, t) => e + t),
        sub: (e, t) => eP(e, t, (e, t) => e - t),
        inv: (e) => tP.solve(e, tP.identity(e.length, e[0].length)),
        identity(e, t = e) {
          const n = new Array(e)
          for (let r = 0; r < e; r++) {
            n[r] = new Array(t)
            for (let e = 0; e < t; e++) n[r][e] = r === e ? 1 : 0
          }
          return n
        },
        solve: (e, t) =>
          e.length === e[0].length
            ? tP.LUDecomposition(e, t)
            : tP.QRDecomposition(e, t),
        LUDecomposition(e, t) {
          for (var n = new Array(e.length), r = 0; r < e.length; r++) {
            n[r] = new Array(e[0].length)
            for (var s = 0; s < e[0].length; s++) n[r][s] = e[r][s]
          }
          var a = e.length,
            i = e[0].length,
            o = new Array(a)
          for (r = 0; r < a; r++) o[r] = r
          var l = 1,
            u = new Array(),
            c = new Array(a)
          for (s = 0; s < i; s++) {
            for (r = 0; r < a; r++) c[r] = n[r][s]
            for (r = 0; r < a; r++) {
              u = n[r]
              for (var h = Math.min(r, s), p = 0, d = 0; d < h; d++)
                p += u[d] * c[d]
              u[s] = c[r] -= p
            }
            var f = s
            for (r = s + 1; r < a; r++)
              Math.abs(c[r]) > Math.abs(c[f]) && (f = r)
            if (f != s) {
              for (d = 0; d < i; d++) {
                var m = n[f][d]
                ;(n[f][d] = n[s][d]), (n[s][d] = m)
              }
              ;(d = o[f]), (o[f] = o[s]), (o[s] = d), (l = -l)
            }
            if ((s < a) & (0 != n[s][s]))
              for (r = s + 1; r < a; r++) n[r][s] /= n[s][s]
          }
          for (
            t.length != a && console.log('Matrix row dimensions must agree.'),
              s = 0;
            s < i;
            s++
          )
            0 === n[s][s] && console.log('Matrix is singular.')
          var g = t[0].length,
            y = tP.getMatrix(t, o, 0, g - 1)
          for (d = 0; d < i; d++)
            for (r = d + 1; r < i; r++)
              for (s = 0; s < g; s++) y[r][s] -= y[d][s] * n[r][d]
          for (d = i - 1; d >= 0; d--) {
            for (s = 0; s < g; s++) y[d][s] /= n[d][d]
            for (r = 0; r < d; r++)
              for (s = 0; s < g; s++) y[r][s] -= y[d][s] * n[r][d]
          }
          return y
        },
        QRDecomposition(e, t) {
          for (var n = new Array(e.length), r = 0; r < e.length; r++) {
            n[r] = new Array(e[0].length)
            for (var s = 0; s < e[0].length; s++) n[r][s] = e[r][s]
          }
          for (
            var a, i = e.length, o = e[0].length, l = new Array(o), u = 0;
            u < o;
            u++
          ) {
            for (a = 0, r = u; r < i; r++) a = Math.hypot(a, n[r][u])
            if (0 != a) {
              for (n[u][u] < 0 && (a = -a), r = u; r < i; r++) n[r][u] /= a
              for (n[u][u] += 1, s = u + 1; s < o; s++) {
                var c = 0
                for (r = u; r < i; r++) c += n[r][u] * n[r][s]
                for (c = -c / n[u][u], r = u; r < i; r++) n[r][s] += c * n[r][u]
              }
            }
            l[u] = -a
          }
          for (
            t.length != i && console.log('Matrix row dimensions must agree.'),
              s = 0;
            s < o;
            s++
          )
            0 === l[s] && console.log('Matrix is rank deficient')
          var h = t[0].length,
            p = new Array(t.length)
          for (r = 0; r < t.length; r++) p[r] = new Array(t[0].length)
          for (r = 0; r < t.length; r++)
            for (s = 0; s < t[0].length; s++) p[r][s] = t[r][s]
          for (u = 0; u < o; u++)
            for (s = 0; s < h; s++) {
              for (c = 0, r = u; r < i; r++) c += n[r][u] * p[r][s]
              for (c = -c / n[u][u], r = u; r < i; r++) p[r][s] += c * n[r][u]
            }
          for (u = o - 1; u >= 0; u--) {
            for (s = 0; s < h; s++) p[u][s] /= l[u]
            for (r = 0; r < u; r++)
              for (s = 0; s < h; s++) p[r][s] -= p[u][s] * n[r][u]
          }
          return tP.getSubMatrix(p, 0, o - 1, 0, h - 1)
        },
      },
      nP = tP,
      rP = {
        Eye: function (e, t, n, r, s) {
          ;(this.patch = e),
            (this.imagex = t),
            (this.imagey = n),
            (this.width = r),
            (this.height = s)
        },
        getEyeFeats: function (e) {
          let t = (e) => {
            let t = this.resizeEye(e, 10, 6),
              n = this.grayscale(t.data, t.width, t.height),
              r = []
            return this.equalizeHistogram(n, 5, r), r
          }
          return 'left' == webgazer.params.trackEye
            ? t(e.left)
            : 'right' == webgazer.params.trackEye
              ? t(e.right)
              : [].concat(t(e.left), t(e.right))
        },
        DataWindow: function (e, t) {
          ;(this.data = []),
            (this.windowSize = e),
            (this.index = 0),
            (this.length = 0),
            t &&
              ((this.data = t.slice(t.length - e, t.length)),
              (this.length = this.data.length))
        },
      }
    ;(rP.DataWindow.prototype.push = function (e) {
      return this.data.length < this.windowSize
        ? (this.data.push(e), (this.length = this.data.length), this)
        : ((this.data[this.index] = e),
          (this.index = (this.index + 1) % this.windowSize),
          this)
    }),
      (rP.DataWindow.prototype.get = function (e) {
        return this.data[this.getTrueIndex(e)]
      }),
      (rP.DataWindow.prototype.getTrueIndex = function (e) {
        return this.data.length < this.windowSize
          ? e
          : (e + this.index) % this.windowSize
      }),
      (rP.DataWindow.prototype.addAll = function (e) {
        for (var t = 0; t < e.length; t++) this.push(e[t])
      }),
      (rP.grayscale = function (e, t, n) {
        for (
          var r = new Uint8ClampedArray(e.length >> 2), s = 0, a = 0, i = 0;
          i < n;
          i++
        )
          for (var o = 0; o < t; o++) {
            var l = 0.299 * e[a] + 0.587 * e[a + 1] + 0.114 * e[a + 2]
            ;(r[s++] = l), (a += 4)
          }
        return r
      }),
      (rP.equalizeHistogram = function (e, t, n) {
        var r = e.length
        n || (n = e), t || (t = 5)
        for (var s = Array(256).fill(0), a = 0; a < r; a += t) ++s[e[a]]
        var i = (255 * t) / r,
          o = 0
        for (a = 0; a < 256; ++a) {
          var l = s[a]
          ;(o = l += o), (s[a] = l * i)
        }
        for (a = 0; a < r; ++a) n[a] = s[e[a]]
        return n
      }),
      (rP.threshold = function (e, t) {
        for (let n = 0; n < e.length; n++) e[n] = e[n] > t ? 255 : 0
        return e
      }),
      (rP.correlation = function (e, t) {
        const n = Math.min(e.length, t.length)
        let r = 0
        for (let s = 0; s < n; s++) e[s] === t[s] && r++
        return r / Math.max(e.length, t.length)
      }),
      (rP.resizeEye = function (e, t, n) {
        var r = document.createElement('canvas')
        ;(r.width = e.width),
          (r.height = e.height),
          r.getContext('2d').putImageData(e.patch, 0, 0)
        var s = document.createElement('canvas')
        return (
          (s.width = t),
          (s.height = n),
          s.getContext('2d').drawImage(r, 0, 0, r.width, r.height, 0, 0, t, n),
          s.getContext('2d').getImageData(0, 0, t, n)
        )
      }),
      (rP.bound = function (e) {
        e.x < 0 && (e.x = 0), e.y < 0 && (e.y = 0)
        var t = Math.max(
            document.documentElement.clientWidth,
            window.innerWidth || 0,
          ),
          n = Math.max(
            document.documentElement.clientHeight,
            window.innerHeight || 0,
          )
        return e.x > t && (e.x = t), e.y > n && (e.y = n), e
      }),
      (rP.DebugBox = function (e) {
        var t
        ;(this.para = document.createElement('p')),
          (this.div = document.createElement('div')),
          this.div.appendChild(this.para),
          document.body.appendChild(this.div),
          (this.buttons = {}),
          (this.canvas = {}),
          (this.stats = {}),
          (t = this),
          setInterval(function () {
            !(function (e, t) {
              var n = ''
              for (var r in t) n += r + ': ' + t[r] + '\n'
              e.innerText = n
            })(t.para, t.stats)
          }, e || 300)
      }),
      (rP.DebugBox.prototype.set = function (e, t) {
        this.stats[e] = t
      }),
      (rP.DebugBox.prototype.inc = function (e, t, n) {
        this.stats[e] || (this.stats[e] = n || 0), (this.stats[e] += t || 1)
      }),
      (rP.DebugBox.prototype.addButton = function (e, t) {
        this.buttons[e] ||
          ((this.buttons[e] = document.createElement('button')),
          this.div.appendChild(this.buttons[e]))
        var n = this.buttons[e]
        ;(this.buttons[e] = n),
          n.addEventListener('click', t),
          (n.innerText = e)
      }),
      (rP.DebugBox.prototype.show = function (e, t) {
        this.canvas[e] ||
          ((this.canvas[e] = document.createElement('canvas')),
          this.div.appendChild(this.canvas[e]))
        var n = this.canvas[e]
        n.getContext('2d').clearRect(0, 0, n.width, n.height), t(n)
      })
    const sP = rP,
      aP = {
        InitRegression: function () {
          var e = 700
          ;(this.ridgeParameter = Math.pow(10, -5)),
            (this.errorXArray = new sP.DataWindow(e)),
            (this.errorYArray = new sP.DataWindow(e)),
            (this.screenXClicksArray = new sP.DataWindow(e)),
            (this.screenYClicksArray = new sP.DataWindow(e)),
            (this.eyeFeaturesClicks = new sP.DataWindow(e)),
            (this.trailTime = 1e3),
            (this.trailDataWindow = this.trailTime / cz.moveTickSize),
            (this.screenXTrailArray = new sP.DataWindow(10)),
            (this.screenYTrailArray = new sP.DataWindow(10)),
            (this.eyeFeaturesTrail = new sP.DataWindow(10)),
            (this.trailTimes = new sP.DataWindow(10)),
            (this.dataClicks = new sP.DataWindow(e)),
            (this.dataTrail = new sP.DataWindow(10))
          var t = [
            [1 / 4, 0, 0.5, 0],
            [0, 1 / 4, 0, 0.5],
            [0.5, 0, 1, 0],
            [0, 0.5, 0, 1],
          ]
          t = nP.multScalar(t, 0.1)
          var n = nP.multScalar(nP.identity(2), 47),
            r = nP.multScalar(nP.identity(4), 1e-4)
          this.kalman = new aP.KalmanFilter(
            [
              [1, 0, 1, 0],
              [0, 1, 0, 1],
              [0, 0, 1, 0],
              [0, 0, 0, 1],
            ],
            [
              [1, 0, 0, 0],
              [0, 1, 0, 0],
            ],
            t,
            n,
            r,
            [[500], [500], [0], [0]],
          )
        },
        KalmanFilter: function (e, t, n, r, s, a) {
          ;(this.F = e),
            (this.Q = n),
            (this.H = t),
            (this.R = r),
            (this.P = s),
            (this.X = a)
        },
      }
    ;(aP.KalmanFilter.prototype.update = function (e) {
      for (
        var { add: t, sub: n, mult: r, inv: s, identity: a, transpose: i } = nP,
          o = r(this.F, this.X),
          l = t(r(r(this.F, this.P), i(this.F)), this.Q),
          u = n((e = i([e])), r(this.H, o)),
          c = t(r(r(this.H, l), i(this.H)), this.R),
          h = r(l, r(i(this.H), s(c))),
          p = 0;
        p < u.length;
        p++
      )
        u[p] = [u[p]]
      return (
        (this.X = t(o, r(h, u))),
        (this.P = r(n(a(h.length), r(h, this.H)), l)),
        i(r(this.H, this.X))[0]
      )
    }),
      (aP.ridge = function (e, t, n) {
        var r = t[0].length,
          s = new Array(r),
          a = nP.transpose(t),
          i = new Array(),
          o = !0
        do {
          for (var l = nP.mult(a, t), u = 0; u < r; u++) l[u][u] = l[u][u] + n
          var c = nP.mult(a, e)
          for (u = 0; u < r; u++) s[u] = c[u][0]
          try {
            var h = 0 !== s.length ? s.length / s.length : 0
            for (
              s.length * h !== s.length &&
                console.log('Array length must be a multiple of m'),
                i = nP.solve(l, c),
                u = 0;
              u < r;
              u++
            )
              s[u] = i[u]
            o = !0
          } catch (e) {
            ;(n *= 10), console.log(e), (o = !1)
          }
        } while (!o)
        return s
      }),
      (aP.setData = function (e) {
        for (var t = 0; t < e.length; t++) {
          var n = new Uint8ClampedArray(e[t].eyes.left.patch.data),
            r = new Uint8ClampedArray(e[t].eyes.right.patch.data)
          ;(e[t].eyes.left.patch = new ImageData(
            n,
            e[t].eyes.left.width,
            e[t].eyes.left.height,
          )),
            (e[t].eyes.right.patch = new ImageData(
              r,
              e[t].eyes.right.width,
              e[t].eyes.right.height,
            )),
            this.addData(e[t].eyes, e[t].screenPos, e[t].type)
        }
      }),
      (aP.getCurrentFixationIndex = function () {
        for (
          var e = this.screenXTrailArray.get(0),
            t = this.screenYTrailArray.get(0),
            n = this.screenXTrailArray.length - 1;
          n >= 0;
          n--
        ) {
          var r = this.screenXTrailArray.get(n),
            s = this.screenYTrailArray.get(n)
          if (Math.sqrt(Math.pow(r - e, 2) + Math.pow(s - t, 2)) > 72)
            return n + 1
        }
        return n
      }),
      (aP.addData = function (e, t, n) {
        e &&
          ('click' === n
            ? (this.screenXClicksArray.push([t[0]]),
              this.screenYClicksArray.push([t[1]]),
              this.eyeFeaturesClicks.push(sP.getEyeFeats(e)),
              this.dataClicks.push({ eyes: e, screenPos: t, type: n }))
            : 'move' === n &&
              (this.screenXTrailArray.push([t[0]]),
              this.screenYTrailArray.push([t[1]]),
              this.eyeFeaturesTrail.push(sP.getEyeFeats(e)),
              this.trailTimes.push(performance.now()),
              this.dataTrail.push({ eyes: e, screenPos: t, type: n })))
      })
    const iP = aP,
      oP = {
        RidgeReg: function () {
          this.init()
        },
      }
    ;(oP.RidgeReg.prototype.init = iP.InitRegression),
      (oP.RidgeReg.prototype.addData = iP.addData),
      (oP.RidgeReg.prototype.predict = function (e) {
        if (!e || 0 === this.eyeFeaturesClicks.length) return null
        for (
          var t = performance.now() - this.trailTime,
            n = [],
            r = [],
            s = [],
            a = 0;
          a < this.trailDataWindow;
          a++
        )
          this.trailTimes.get(a) > t &&
            (n.push(this.screenXTrailArray.get(a)),
            r.push(this.screenYTrailArray.get(a)),
            s.push(this.eyeFeaturesTrail.get(a)))
        var i = this.screenXClicksArray.data.concat(n),
          o = this.screenYClicksArray.data.concat(r),
          l = this.eyeFeaturesClicks.data.concat(s),
          u = iP.ridge(i, l, this.ridgeParameter),
          c = iP.ridge(o, l, this.ridgeParameter),
          h = sP.getEyeFeats(e),
          p = 0
        for (a = 0; a < h.length; a++) p += h[a] * u[a]
        var d = 0
        for (a = 0; a < h.length; a++) d += h[a] * c[a]
        if (((p = Math.floor(p)), (d = Math.floor(d)), cz.applyKalmanFilter)) {
          var f = [p, d]
          return { x: (f = this.kalman.update(f))[0], y: f[1] }
        }
        return { x: p, y: d }
      }),
      (oP.RidgeReg.prototype.setData = iP.setData),
      (oP.RidgeReg.prototype.getData = function () {
        return this.dataClicks.data
      }),
      (oP.RidgeReg.prototype.name = 'ridge')
    const lP = oP,
      uP = {
        RidgeWeightedReg: function () {
          this.init()
        },
      }
    ;(uP.RidgeWeightedReg.prototype.init = iP.InitRegression),
      (uP.RidgeWeightedReg.prototype.addData = iP.addData),
      (uP.RidgeWeightedReg.prototype.predict = function (e) {
        if (!e || 0 === this.eyeFeaturesClicks.length) return null
        for (
          var t = performance.now() - this.trailTime,
            n = [],
            r = [],
            s = [],
            a = 0;
          a < this.trailDataWindow;
          a++
        )
          this.trailTimes.get(a) > t &&
            (n.push(this.screenXTrailArray.get(a)),
            r.push(this.screenYTrailArray.get(a)),
            s.push(this.eyeFeaturesTrail.get(a)))
        var i = this.eyeFeaturesClicks.data.length,
          o = Array(i),
          l = Array(i),
          u = Array(i)
        for (a = 0; a < i; a++) {
          for (
            var c = Math.sqrt(1 / (i - a)),
              h = this.eyeFeaturesClicks.getTrueIndex(a),
              p = 0;
            p < this.eyeFeaturesClicks.data[h].length;
            p++
          ) {
            var d = this.eyeFeaturesClicks.data[h][p] * c
            void 0 !== o[h] ? o[h].push(d) : (o[h] = [d])
          }
          ;(l[a] = this.screenXClicksArray
            .get(a)
            .slice(0, this.screenXClicksArray.get(a).length)),
            (u[a] = this.screenYClicksArray
              .get(a)
              .slice(0, this.screenYClicksArray.get(a).length)),
            (l[a][0] = l[a][0] * c),
            (u[a][0] = u[a][0] * c)
        }
        var f = l.concat(n),
          m = u.concat(r),
          g = o.concat(s),
          y = iP.ridge(f, g, this.ridgeParameter),
          b = iP.ridge(m, g, this.ridgeParameter),
          x = sP.getEyeFeats(e),
          w = 0
        for (a = 0; a < x.length; a++) w += x[a] * y[a]
        var v = 0
        for (a = 0; a < x.length; a++) v += x[a] * b[a]
        if (((w = Math.floor(w)), (v = Math.floor(v)), cz.applyKalmanFilter)) {
          var k = [w, v]
          return { x: (k = this.kalman.update(k))[0], y: k[1] }
        }
        return { x: w, y: v }
      }),
      (uP.RidgeWeightedReg.prototype.setData = iP.setData),
      (uP.RidgeWeightedReg.prototype.getData = function () {
        return this.dataClicks.data
      }),
      (uP.RidgeWeightedReg.prototype.name = 'ridgeWeighted')
    const cP = uP,
      hP = {}
    Math.pow(10, -5)
    var pP = 700,
      dP = { X: [0], Y: [0] }
    ;(hP.RidgeRegThreaded = function () {
      this.init()
    }),
      (hP.RidgeRegThreaded.prototype.init = function () {
        ;(this.screenXClicksArray = new sP.DataWindow(pP)),
          (this.screenYClicksArray = new sP.DataWindow(pP)),
          (this.eyeFeaturesClicks = new sP.DataWindow(pP)),
          (this.screenXTrailArray = new sP.DataWindow(10)),
          (this.screenYTrailArray = new sP.DataWindow(10)),
          (this.eyeFeaturesTrail = new sP.DataWindow(10)),
          (this.dataClicks = new sP.DataWindow(pP)),
          (this.dataTrail = new sP.DataWindow(pP)),
          this.worker ||
            ((this.worker = new Worker('ridgeWorker.mjs')),
            (this.worker.onerror = function (e) {
              console.log(e.message)
            }),
            (this.worker.onmessage = function (e) {
              ;(dP.X = e.data.X), (dP.Y = e.data.Y)
            }),
            console.log('initialized worker'))
        var e = [
          [1 / 4, 0, 0.5, 0],
          [0, 1 / 4, 0, 0.5],
          [0.5, 0, 1, 0],
          [0, 0.5, 0, 1],
        ]
        e = nP.multScalar(e, 0.1)
        var t = nP.multScalar(nP.identity(2), 47),
          n = nP.multScalar(nP.identity(4), 1e-4)
        this.kalman = new iP.KalmanFilter(
          [
            [1, 0, 1, 0],
            [0, 1, 0, 1],
            [0, 0, 1, 0],
            [0, 0, 0, 1],
          ],
          [
            [1, 0, 0, 0],
            [0, 1, 0, 0],
          ],
          e,
          t,
          n,
          [[500], [500], [0], [0]],
        )
      }),
      (hP.RidgeRegThreaded.prototype.addData = function (e, t, n) {
        e &&
          this.worker.postMessage({
            eyes: sP.getEyeFeats(e),
            screenPos: t,
            type: n,
          })
      }),
      (hP.RidgeRegThreaded.prototype.predict = function (e) {
        if (!e) return null
        for (
          var t = dP.X, n = dP.Y, r = sP.getEyeFeats(e), s = 0, a = 0, i = 0;
          i < r.length;
          i++
        )
          (s += r[i] * t[i]), (a += r[i] * n[i])
        if (((s = Math.floor(s)), (a = Math.floor(a)), cz.applyKalmanFilter)) {
          var o = [s, a]
          return { x: (o = this.kalman.update(o))[0], y: o[1] }
        }
        return { x: s, y: a }
      }),
      (hP.RidgeRegThreaded.prototype.setData = iP.setData),
      (hP.RidgeRegThreaded.prototype.getData = function () {
        return this.dataClicks.data
      }),
      (hP.RidgeRegThreaded.prototype.name = 'ridge')
    const fP = hP,
      mP = { tracker: {} }
    ;(mP.tracker.TFFaceMesh = Qz),
      (mP.reg = lP),
      (mP.reg.RidgeWeightedReg = cP.RidgeWeightedReg),
      (mP.reg.RidgeRegThreaded = fP.RidgeRegThreaded),
      (mP.util = sP),
      (mP.params = cz)
    var gP = null,
      yP = null,
      bP = null,
      xP = null,
      wP = null,
      vP = null,
      kP = null,
      IP = '',
      NP = new Array(50),
      SP = new Array(50),
      TP = performance.now(),
      CP = null,
      $P = null,
      EP = !1,
      RP = function (e, t) {},
      AP = RP,
      _P = ['click', 'move'],
      FP = performance.now(),
      DP = new mP.tracker.TFFaceMesh(),
      OP = [new mP.reg.RidgeReg()],
      MP = {
        TFFacemesh: function () {
          return new mP.tracker.TFFaceMesh()
        },
      },
      LP = {
        ridge: function () {
          return new mP.reg.RidgeReg()
        },
        weightedRidge: function () {
          return new mP.reg.RidgeWeightedReg()
        },
        threadedRidge: function () {
          return new mP.reg.RidgeRegThreaded()
        },
      },
      zP = 'webgazerGlobalData',
      PP = 'webgazerGlobalSettings',
      BP = {},
      WP = [],
      VP = { data: [], settings: {} }
    async function UP(e) {
      var t = []
      if (
        ((CP = await (function (e, t, n) {
          if (e)
            try {
              return DP.getEyePatches(bP, e, t, n)
            } catch (e) {
              return console.log("can't get pupil features ", e), null
            }
        })(xP, xP.width, xP.height)),
        0 === OP.length)
      )
        return console.log('regression not set, call setRegression()'), null
      for (var n in OP) t.push(OP[n].predict(CP))
      return void 0 !== e
        ? null === t[e]
          ? null
          : { x: t[e].x, y: t[e].y, eyeFeatures: CP }
        : 0 === t.length || null === t[0]
          ? null
          : { x: t[0].x, y: t[0].y, eyeFeatures: CP, all: t }
    }
    mP.computeValidationBoxSize = function () {
      var e = bP.videoWidth,
        t = bP.videoHeight,
        n = parseInt(bP.style.width),
        r = parseInt(bP.style.height),
        s = Math.min(e, t),
        a = e == Math.max(e, t) ? n / e : r / t,
        i = s * mP.params.faceFeedbackBoxRatio * a
      return [(r - i) / 2, (n - i) / 2, i, i]
    }
    var GP = new sP.DataWindow(4),
      HP = 0
    async function jP() {
      if (!EP) {
        ;(o = xP),
          (l = xP.width),
          (u = xP.height),
          o.width != l && (o.width = l),
          o.height != u && (o.height = u),
          o.getContext('2d').drawImage(bP, 0, 0, o.width, o.height),
          ($P = UP())
        var e = performance.now() - TP
        if (mP.params.showFaceOverlay) {
          var t = mP.getTracker()
          wP.getContext('2d').clearRect(0, 0, bP.videoWidth, bP.videoHeight),
            t.drawFaceOverlay(wP.getContext('2d'), t.getPositions())
        }
        if (
          (mP.params.showFaceFeedbackBox &&
            (function () {
              if (null != vP && CP) {
                var e = bP.videoWidth,
                  t = bP.videoHeight,
                  n = Math.min(e, t) * mP.params.faceFeedbackBoxRatio,
                  r = (t - n) / 2,
                  s = (e - n) / 2,
                  a = s + n,
                  i = r + n,
                  o = CP.left.imagex,
                  l = CP.left.imagey,
                  u = CP.right.imagex,
                  c = CP.right.imagey,
                  h = !1,
                  p = !1
                o > s &&
                  o + CP.left.width < a &&
                  u > s &&
                  u + CP.right.width < a &&
                  (h = !0),
                  l > r &&
                    l + CP.left.height < i &&
                    c > r &&
                    c + CP.right.height < i &&
                    (p = !0),
                  (vP.style.border = h && p ? 'solid green' : 'solid red')
              } else vP.style.border = 'solid black'
            })(),
          ($P = await $P),
          AP($P, e),
          $P)
        ) {
          GP.push($P)
          var n = 0,
            r = 0,
            s = GP.length
          for (var a in GP.data) (n += GP.get(a).x), (r += GP.get(a).y)
          var i = sP.bound({ x: n / s, y: r / s })
          mP.params.storingPoints &&
            ((function (e, t, n) {
              var r = document
                .getElementById('plotting_canvas')
                .getContext('2d')
              ;(r.fillStyle = 'blue'),
                r.beginPath(),
                r.arc(t, n, 5, 0, 2 * Math.PI, !0),
                r.fill()
            })(0, i.x, i.y),
            mP.storePoints(i.x, i.y, HP),
            50 == ++HP && (HP = 0)),
            mP.params.showGazeDot && (kP.style.display = 'block'),
            (kP.style.transform = 'translate3d(' + i.x + 'px,' + i.y + 'px,0)')
        } else kP.style.display = 'none'
        requestAnimationFrame(jP)
      }
      var o, l, u
    }
    var qP = function (e, t, n) {
        if (!EP) {
          if (0 === OP.length)
            return console.log('regression not set, call setRegression()'), null
          for (var r in OP) CP && OP[r].addData(CP, [e, t], n)
        }
      },
      KP = async function (e) {
        qP(e.clientX, e.clientY, _P[0]),
          mP.params.saveDataAcrossSessions &&
            (await (async function () {
              var e = OP[0].getData() || WP
              pz().setItem(PP, BP), pz().setItem(zP, e)
            })())
      },
      XP = function (e) {
        if (!EP) {
          var t = performance.now()
          t < FP + mP.params.moveTickSize ||
            ((FP = t), qP(e.clientX, e.clientY, _P[1]))
        }
      },
      YP = function () {
        document.addEventListener('click', KP, !0),
          document.addEventListener('mousemove', XP, !0)
      }
    async function ZP(e) {
      ;(gP = e),
        ((yP = document.createElement('div')).id = mP.params.videoContainerId),
        (yP.style.position = 'fixed'),
        (yP.style.top = '10px'),
        (yP.style.left = '10px'),
        (yP.style.width = mP.params.videoViewerWidth + 'px'),
        (yP.style.height = mP.params.videoViewerHeight + 'px'),
        (yP.style.borderRadius = '12px'),
        (yP.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.15)'),
        (yP.style.overflow = 'hidden'),
        JP(yP),
        (bP = document.createElement('video')).setAttribute('playsinline', ''),
        (bP.id = mP.params.videoElementId),
        (bP.srcObject = e),
        (bP.autoplay = !0),
        (bP.style.position = 'absolute'),
        (bP.style.width = mP.params.videoViewerWidth + 'px'),
        (bP.style.height = mP.params.videoViewerHeight + 'px'),
        (bP.style.borderRadius = '12px'),
        JP(bP),
        ((xP = document.createElement('canvas')).id =
          mP.params.videoElementCanvasId),
        (xP.style.display = 'none'),
        ((wP = document.createElement('canvas')).id = mP.params.faceOverlayId),
        (wP.style.display = mP.params.showFaceOverlay ? 'block' : 'none'),
        (wP.style.position = 'absolute'),
        (wP.style.borderRadius = '12px'),
        mP.params.mirrorVideo &&
          (bP.style.setProperty('-moz-transform', 'scale(-1, 1)'),
          bP.style.setProperty('-webkit-transform', 'scale(-1, 1)'),
          bP.style.setProperty('-o-transform', 'scale(-1, 1)'),
          bP.style.setProperty('transform', 'scale(-1, 1)'),
          bP.style.setProperty('filter', 'FlipH'),
          wP.style.setProperty('-moz-transform', 'scale(-1, 1)'),
          wP.style.setProperty('-webkit-transform', 'scale(-1, 1)'),
          wP.style.setProperty('-o-transform', 'scale(-1, 1)'),
          wP.style.setProperty('transform', 'scale(-1, 1)'),
          wP.style.setProperty('filter', 'FlipH')),
        ((vP = document.createElement('canvas')).id =
          mP.params.faceFeedbackBoxId),
        (vP.style.display = mP.params.showFaceFeedbackBox ? 'block' : 'none'),
        (vP.style.border = 'solid'),
        (vP.style.position = 'absolute'),
        (vP.style.borderRadius = '12px'),
        ((kP = document.createElement('div')).id = mP.params.gazeDotId),
        (kP.style.display = mP.params.showGazeDot ? 'block' : 'none'),
        (kP.style.position = 'fixed'),
        (kP.style.zIndex = 99999),
        (kP.style.left = '-5px'),
        (kP.style.top = '-5px'),
        (kP.style.background = 'red'),
        (kP.style.borderRadius = '100%'),
        (kP.style.opacity = '0.7'),
        (kP.style.width = '10px'),
        (kP.style.height = '10px'),
        yP.appendChild(bP),
        document.body.appendChild(yP)
      const t = new Promise((e) => {
        bP.addEventListener('loadeddata', function t(n) {
          QP(bP.videoWidth, bP.videoHeight),
            mP.setVideoViewerSize(
              mP.params.videoViewerWidth,
              mP.params.videoViewerHeight,
            ),
            yP.appendChild(xP),
            yP.appendChild(wP),
            yP.appendChild(vP),
            document.body.appendChild(kP),
            n.target.removeEventListener(n.type, t),
            e()
        })
      })
      YP(), (EP = !1), (TP = performance.now()), await t, await jP()
    }
    function JP(e) {
      ;(navigator.vendor && navigator.vendor.indexOf('Apple') > -1) ||
      (navigator.userAgent && navigator.userAgent.search('Firefox') > -1)
        ? ((e.style.opacity = mP.params.showVideo ? '1' : '0'),
          (e.style.display = 'block'))
        : (e.style.display = mP.params.showVideo ? 'block' : 'none')
    }
    function QP(e, t) {
      xP && ((xP.width = e), (xP.height = t)),
        wP && ((wP.width = e), (wP.height = t))
    }
    ;(mP.begin = function (e) {
      return (
        'https:' !== window.location.protocol &&
          'localhost' !== window.location.hostname &&
          window.chrome &&
          alert(
            'WebGazer works only over https. If you are doing local development, you need to run a local server.',
          ),
        mP.params.saveDataAcrossSessions &&
          (async function () {
            BP = (BP = await pz().getItem(PP)) || VP
            var e = await pz().getItem(zP)
            for (var t in ((WP = e = e || VP), OP)) OP[t].setData(e)
            console.log('loaded stored data into regression model')
          })(),
        (e =
          e ||
          function () {
            console.log('No stream')
          }),
        IP
          ? (ZP(IP), mP)
          : (void 0 === navigator.mediaDevices && (navigator.mediaDevices = {}),
            void 0 === navigator.mediaDevices.getUserMedia &&
              (navigator.mediaDevices.getUserMedia = function (e) {
                var t =
                  navigator.webkitGetUserMedia || navigator.mozGetUserMedia
                return t
                  ? new Promise(function (n, r) {
                      t.call(navigator, e, n, r)
                    })
                  : Promise.reject(
                      new Error(
                        'Unfortunately, your browser does not support access to the webcam through the getUserMedia API. Try to use the latest version of Google Chrome, Mozilla Firefox, Opera, or Microsoft Edge instead.',
                      ),
                    )
              }),
            new Promise(async (t, n) => {
              let r
              try {
                ;(r = await navigator.mediaDevices.getUserMedia(
                  mP.params.camConstraints,
                )),
                  await ZP(r),
                  t(mP)
              } catch (t) {
                e(), (bP = null), (r = null), n(t)
              }
            }))
      )
    }),
      (mP.isReady = function () {
        return null !== xP && xP.width > 0
      }),
      (mP.pause = function () {
        return (EP = !0), mP
      }),
      (mP.resume = async function () {
        return EP ? ((EP = !1), await jP(), mP) : mP
      }),
      (mP.end = function () {
        return (EP = !0), yP.remove(), kP.remove(), mP
      }),
      (mP.stopVideo = function () {
        return (
          gP.getTracks()[0].stop(), yP.removeChild(wP), yP.removeChild(vP), mP
        )
      }),
      (mP.detectCompatibility = function () {
        return (
          void 0 !==
          (navigator.mediaDevices.getUserMedia ||
            navigator.getUserMedia ||
            navigator.webkitGetUserMedia ||
            navigator.mozGetUserMedia)
        )
      }),
      (mP.showVideoPreview = function (e) {
        return (
          (mP.params.showVideoPreview = e),
          mP.showVideo(e && mP.params.showVideo),
          mP.showFaceOverlay(e && mP.params.showFaceOverlay),
          mP.showFaceFeedbackBox(e && mP.params.showFaceFeedbackBox),
          mP
        )
      }),
      (mP.showVideo = function (e) {
        return (mP.params.showVideo = e), bP && JP(bP), yP && JP(yP), mP
      }),
      (mP.showFaceOverlay = function (e) {
        return (
          (mP.params.showFaceOverlay = e),
          wP && (wP.style.display = e ? 'block' : 'none'),
          mP
        )
      }),
      (mP.showFaceFeedbackBox = function (e) {
        return (
          (mP.params.showFaceFeedbackBox = e),
          vP && (vP.style.display = e ? 'block' : 'none'),
          mP
        )
      }),
      (mP.showPredictionPoints = function (e) {
        return (
          (mP.params.showGazeDot = e),
          kP && (kP.style.display = e ? 'block' : 'none'),
          mP
        )
      }),
      (mP.saveDataAcrossSessions = function (e) {
        return (mP.params.saveDataAcrossSessions = e), mP
      }),
      (mP.applyKalmanFilter = function (e) {
        return (mP.params.applyKalmanFilter = e), mP
      }),
      (mP.setCameraConstraints = async function (e) {
        var t, n
        if (((mP.params.camConstraints = e), gP)) {
          mP.pause(), (t = gP.getVideoTracks()[0])
          try {
            await t.applyConstraints(mP.params.camConstraints),
              QP((n = t.getSettings()).width, n.height)
          } catch (e) {
            return void console.log(e)
          }
          mP.setVideoViewerSize(
            mP.params.videoViewerWidth,
            mP.params.videoViewerHeight,
          ),
            mP.getTracker().reset(),
            await mP.resume()
        }
      }),
      (mP.setStaticVideo = function (e) {
        return (IP = e), mP
      }),
      (mP.setVideoViewerSize = function (e, t) {
        ;(mP.params.videoViewerWidth = e),
          (mP.params.videoViewerHeight = t),
          (bP.style.width = e + 'px'),
          (bP.style.height = t + 'px'),
          (yP.style.width = e + 'px'),
          (yP.style.height = t + 'px'),
          (wP.style.width = e + 'px'),
          (wP.style.height = t + 'px')
        var n = mP.computeValidationBoxSize()
        ;(vP.style.top = n[0] + 'px'),
          (vP.style.left = n[1] + 'px'),
          (vP.style.width = n[2] + 'px'),
          (vP.style.height = n[3] + 'px')
      }),
      (mP.addMouseEventListeners = function () {
        return YP(), mP
      }),
      (mP.removeMouseEventListeners = function () {
        return (
          document.removeEventListener('click', KP, !0),
          document.removeEventListener('mousemove', XP, !0),
          mP
        )
      }),
      (mP.recordScreenPosition = function (e, t, n) {
        return qP(e, t, n || _P[0]), mP
      }),
      (mP.storePoints = function (e, t, n) {
        ;(NP[n] = e), (SP[n] = t)
      }),
      (mP.setTracker = function (e) {
        if (void 0 === MP[e]) {
          for (var t in (console.log('Invalid tracker selection'),
          console.log('Options are: '),
          MP))
            console.log(t)
          return mP
        }
        return (DP = MP[e]()), mP
      }),
      (mP.setRegression = function (e) {
        if (void 0 === LP[e]) {
          for (var t in (console.log('Invalid regression selection'),
          console.log('Options are: '),
          LP))
            console.log(t)
          return mP
        }
        return (WP = OP[0].getData()), (OP = [LP[e]()])[0].setData(WP), mP
      }),
      (mP.addTrackerModule = function (e, t) {
        MP[e] = function () {
          return new t()
        }
      }),
      (mP.addRegressionModule = function (e, t) {
        LP[e] = function () {
          return new t()
        }
      }),
      (mP.addRegression = function (e) {
        var t = LP[e]()
        return (WP = OP[0].getData()), t.setData(WP), OP.push(t), mP
      }),
      (mP.setGazeListener = function (e) {
        return (AP = e), mP
      }),
      (mP.clearGazeListener = function () {
        return (AP = RP), mP
      }),
      (mP.setVideoElementCanvas = function (e) {
        return (xP = e)
      }),
      (mP.clearData = async function () {
        !(function () {
          for (var e in (pz().clear(), OP)) OP[e].init()
        })()
      }),
      (mP.getTracker = function () {
        return DP
      }),
      (mP.getRegression = function () {
        return OP
      }),
      (mP.getCurrentPrediction = function (e) {
        return UP(e)
      }),
      (mP.params.getEventTypes = function () {
        return _P.slice()
      }),
      (mP.getVideoElementCanvas = function () {
        return xP
      }),
      (mP.getVideoPreviewToCameraResolutionRatio = function () {
        return [
          mP.params.videoViewerWidth / bP.videoWidth,
          mP.params.videoViewerHeight / bP.videoHeight,
        ]
      }),
      (mP.getStoredPoints = function () {
        return [NP, SP]
      })
    const eB = mP
  })(),
    (webgazer = r.default)
})()
